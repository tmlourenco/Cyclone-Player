
DE2_115_SD_Card_Audio_Player.elf:     file format elf32-littlenios2
DE2_115_SD_Card_Audio_Player.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x030401c4

Program Header:
    LOAD off    0x00001000 vaddr 0x03040000 paddr 0x03040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x03040020 paddr 0x03040020 align 2**12
         filesz 0x0001ad0c memsz 0x0001ad0c flags r-x
    LOAD off    0x0001bd2c vaddr 0x0305ad2c paddr 0x0305ca88 align 2**12
         filesz 0x00001d5c memsz 0x00001d5c flags rw-
    LOAD off    0x0001d7e4 vaddr 0x0305e7e4 paddr 0x0305e7e4 align 2**12
         filesz 0x00000000 memsz 0x0000158c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  03040000  03040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  03040020  03040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000197f4  030401c4  030401c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001374  030599b8  030599b8  0001a9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d5c  0305ad2c  0305ca88  0001bd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000158c  0305e7e4  0305e7e4  0001d7e4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      0000176a  00000000  00000000  0001da88  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000012b8  00000000  00000000  0001f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002785  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003a913  00000000  00000000  00022c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bd06  00000000  00000000  0005d548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00020731  00000000  00000000  0006924e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000033a4  00000000  00000000  00089980  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002d80  00000000  00000000  0008cd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c520  00000000  00000000  0008faa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0009bfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000708  00000000  00000000  0009c024  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
03040000 l    d  .entry	00000000 .entry
03040020 l    d  .exceptions	00000000 .exceptions
030401c4 l    d  .text	00000000 .text
030599b8 l    d  .rodata	00000000 .rodata
0305ad2c l    d  .rwdata	00000000 .rwdata
0305e7e4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/nios2.h
00000000 l    df *ABS*	00000000 HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 HAL/src/crt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/c/Users/150664/Documents/Micro2/DE2_115_demonstrations/DE2_115_SD_Card_Audio_Player/Software/DE2_115_SD_Card_Audio_Player_bsp//
00000000 l    df *ABS*	00000000 HAL/src/crt0.S
0304020c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/c/Users/150664/Documents/Micro2/DE2_115_demonstrations/DE2_115_SD_Card_Audio_Player/Software/DE2_115_SD_Card_Audio_Player_bsp//
00000000 l    df *ABS*	00000000 HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/c/Users/150664/Documents/Micro2/DE2_115_demonstrations/DE2_115_SD_Card_Audio_Player/Software/DE2_115_SD_Card_Audio_Player_bsp//
00000000 l    df *ABS*	00000000 HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0305e7e4 l     O .bss	00000004 nMute_Volume
0305e7e8 l     O .bss	00000004 bLastSwitch
0305e7ec l     O .bss	00000004 bNextSwitch
0305e7f0 l     O .bss	00000004 bMuteSwitch
0305ca14 l     O .rwdata	00000004 bPlaySwitch
0305f81c l     O .bss	0000023c gWavePlay
0305e818 l     O .bss	00001004 gWavePlayList
0305e7f4 l     O .bss	00000004 hFat
0305ca18 l     O .rwdata	00000004 bFirsTime2SetupVol.4075
0305ca1c l     O .rwdata	00000004 bFirsTime2SetupVol.4129
00000000 l    df *ABS*	00000000 FatFileSystem.c
00000000 l    df *ABS*	00000000 FatInternal.c
03059f95 l     O .rodata	00000011 C.32.3818
03059fa6 l     O .rodata	0000000f C.35.3847
00000000 l    df *ABS*	00000000 AUDIO.c
0305fa58 l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LCD.c
0305e7f8 l     O .bss	00000004 fp
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 SEG7.c
0305ad2c l     O .rwdata	00000010 szMap
00000000 l    df *ABS*	00000000 WaveLib.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 crc16.c
0305a42c l     O .rodata	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc7.c
0305a62c l     O .rodata	00000100 crc7_syndrome_table
00000000 l    df *ABS*	00000000 sd_hal.c
00000000 l    df *ABS*	00000000 sd_lib.c
0305fa80 l     O .bss	00000038 gSdInfo
00000000 l    df *ABS*	00000000 sd_protocol.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
030496b0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0304a318 l     F .text	00000058 std
0304a424 l     F .text	00000008 __fp_lock
0304a42c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0305ad3c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0304c020 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0304c538 l     F .text	00000058 __sprint_r
0305a8c6 l     O .rodata	00000010 blanks.3452
0305a8b6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0305a9d7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0304e61c l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0305ca38 l     O .rwdata	00000004 charset
0305ab78 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0305acc0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dp-bit.c
030521f4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0305329c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
030532e4 l     F .text	00000028 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
030533e0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0305368c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
03053750 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
030538a8 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
03053998 l     F .text	000000c8 alt_file_locked
03053be0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
03053d48 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0305ca68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
03054194 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0305b6f8 l     O .rwdata	000000d8 av_tri_s1_cfi_flash_0
0305b7d0 l     O .rwdata	00001060 jtag_uart
0305c830 l     O .rwdata	00000120 lcd
0305c950 l     O .rwdata	000000c4 rs232
030542a8 l     F .text	00000030 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash.c
03054370 l     F .text	00000030 alt_flash_device_register
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_table.c
030550dc l     F .text	00000074 alt_read_16bit_query_entry
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
03056034 l     F .text	0000021c altera_avalon_jtag_uart_irq
03056250 l     F .text	000000c0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0305ca7c l     O .rwdata	00000004 colstart
030568fc l     F .text	000000a4 lcd_write_command
030569a0 l     F .text	000000c0 lcd_write_data
03056a60 l     F .text	000000c0 lcd_clear_screen
03056b20 l     F .text	000001b0 lcd_repaint_screen
03056cd0 l     F .text	000000b8 lcd_scroll_up
03056d88 l     F .text	00000244 lcd_handle_escape
03057438 l     F .text	00000094 alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0305764c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
03057904 l     F .text	00000098 altera_avalon_uart_irq
0305799c l     F .text	000000e8 altera_avalon_uart_rxirq
03057a84 l     F .text	00000168 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
03057e84 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
030580a4 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
030584ec l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
03058b94 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_amd.c
03059064 l     F .text	000000b8 alt_write_word_amd
03058f50 l     F .text	00000114 alt_wait_for_command_to_complete_amd
00000000 l    df *ABS*	00000000 altera_avalon_cfi_flash_intel.c
03059300 l     F .text	00000168 alt_unlock_block_intel
03059468 l     F .text	000000c4 alt_write_word_intel
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
030597ac l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
03059958 l     F .text	0000003c alt_sim_halt
0304bd84 g     F .text	0000001c putchar
03050b04 g     F .text	0000009c _mprec_log10
030457ac g     F .text	00000128 I2C_Read
03050bf8 g     F .text	00000088 __any_on
03050360 g     F .text	00000070 _isatty_r
0305ac98 g     O .rodata	00000028 __mprec_tinytens
03046874 g     F .text	00000064 Wave_GetWaveOffset
030538f0 g     F .text	00000070 alt_main
0304c438 g     F .text	0000008c strcpy
03040490 g     F .text	00000030 led_display_count
0304bda8 g     F .text	000000a0 _puts_r
03054ba4 g     F .text	0000003c alt_read_query_entry_32bit
03041d10 g     F .text	0000007c Fat_FileBrowseBegin
0305fae0 g     O .bss	00000100 alt_irq
03050494 g     F .text	00000078 _lseek_r
030543a0 g     F .text	000002b4 alt_flash_cfi_write
0305ca88 g       *ABS*	00000000 __flash_rwdata_start
03040fcc g     F .text	0000001c waveplay_stop
0304fe24 g     F .text	000000a0 __sflags
03052ac0 g     F .text	00000088 __eqdf2
030477b8 g     F .text	00000090 SDLIB_WriteBlock512
0305fd70 g       *ABS*	00000000 __alt_heap_start
03044918 g     F .text	000001c4 AUDIO_Init
0304bd0c g     F .text	00000044 printf
03048ca0 g     F .text	000001a4 SD_CMD24
03044b94 g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
0304c188 g     F .text	00000068 __sseek
0304a380 g     F .text	000000a4 __sinit
03051ff0 g     F .text	00000130 __swbuf_r
030503f4 g     F .text	00000084 _setlocale_r
0304a480 g     F .text	00000068 __sfmoreglue
0305397c g     F .text	0000001c __malloc_unlock
03041d8c g     F .text	000004f8 Fat_FileBrowseNext
0304911c g     F .text	00000178 __divsf3
03046364 g     F .text	00000134 waveGetChunkOffset
03046bd4 g     F .text	0000002c SDHAL_IsSupport4Bits
03046b14 g     F .text	0000004c crc7_byte
03043890 g     F .text	000000a8 fatIsValidDir
03050608 g     F .text	000000e0 memmove
0304a470 g     F .text	00000010 _cleanup
03045464 g     F .text	000000fc aduio_RegWrite
03045684 g     F .text	0000002c AUDIO_FifoClear
03050c80 g     F .text	000000bc _Balloc
03045f78 g     F .text	0000002c LED_AllOff
03052bd0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
03045630 g     F .text	00000054 AUDIO_AdcFifoGetData
03054d1c g     F .text	00000040 alt_write_flash_command_32bit_device_16bit_mode
03045b58 g     F .text	00000124 i2c_write
03040000 g     F .entry	0000001c __reset
03046d58 g     F .text	000002a0 SDHAL_GetResponse
03040020 g       *ABS*	00000000 __flash_exceptions_start
03045e88 g     F .text	00000088 LCD_Clear
0304af88 g     F .text	00000074 _fstat_r
03054874 g     F .text	000002b8 alt_flash_program_block
0305e7fc g     O .bss	00000004 errno
03049604 g     F .text	00000038 __make_dp
03040314 g     F .text	0000009c update_status
03043284 g     F .text	00000158 fatNextCluster
03049b40 g     F .text	0000002c __make_fp
0305ca60 g     O .rwdata	00000004 alt_argv
03064a14 g       *ABS*	00000000 _gp
03054048 g     F .text	0000002c usleep
0305b578 g     O .rwdata	00000180 alt_fd_list
0304bda0 g     F .text	00000008 _putchar_r
03040564 g     F .text	000000a4 is_supporrted_sample_rate
030585e4 g     F .text	00000090 alt_find_dev
0304bb5c g     F .text	000000a0 memcpy
03045fa4 g     F .text	00000050 LED_Display
0304a464 g     F .text	0000000c _cleanup_r
03052d68 g     F .text	00000100 __floatsidf
03046498 g     F .text	00000188 WAVE_IsWaveFile
03058c54 g     F .text	00000074 alt_io_redirect
03052ce0 g     F .text	00000088 __ltdf2
030599b8 g       *ABS*	00000000 __DTOR_END__
03042564 g     F .text	000000b0 Fat_FileExist
0304be48 g     F .text	00000014 puts
030404c0 g     F .text	000000a4 wait_sdcard_insert
03047dd0 g     F .text	000001a4 SD_CMD2
03050a54 g     F .text	000000b0 __ratio
03056474 g     F .text	00000234 altera_avalon_jtag_uart_read
0304b408 g     F .text	00000014 malloc
0304bd50 g     F .text	00000034 _printf_r
030497ec g     F .text	00000008 __udivsi3
030535cc g     F .text	000000c0 isatty
0304534c g     F .text	0000008c AUDIO_EnableByPass
0305aba8 g     O .rodata	000000c8 __mprec_tens
03048980 g     F .text	0000017c SD_ACMD42
030503d0 g     F .text	00000008 __locale_charset
0304e3b8 g     F .text	00000040 vsnprintf
0305952c g     F .text	0000008c alt_icache_flush
030458d4 g     F .text	00000184 I2C_MultipleRead
0305e800 g     O .bss	00000004 __malloc_top_pad
03045114 g     F .text	0000011c AUDIO_SetLineInVol
0305ca34 g     O .rwdata	00000004 __mb_cur_max
030503d8 g     F .text	0000000c _localeconv_r
030484c0 g     F .text	00000188 SD_CMD7
0304042c g     F .text	00000034 lcd_display
03051370 g     F .text	0000003c __i2b
0304fec4 g     F .text	0000049c __sfvwrite_r
03046078 g     F .text	0000005c SEG7_Clear
0304c03c g     F .text	00000070 _sbrk_r
0305911c g     F .text	00000080 alt_program_intel
03048648 g     F .text	000001a0 SD_CMD16
03048ec4 g     F .text	00000078 ArrayToU32
030518d8 g     F .text	00000078 _read_r
03058388 g     F .text	00000074 alt_dcache_flush
0305b544 g     O .rwdata	0000000c __lc_ctype
0305ca4c g     O .rwdata	00000004 alt_max_fd
03054b2c g     F .text	00000038 alt_read_query_entry_8bit
03044368 g     F .text	000003cc fatMount
03049e84 g     F .text	00000140 __unpack_d
03049fc4 g     F .text	00000110 _fclose_r
0305919c g     F .text	00000164 alt_erase_block_intel
0304a2e4 g     F .text	00000034 fflush
03044cc4 g     F .text	000000e0 AUDIO_DacEnableZeroCross
0305e804 g     O .bss	00000004 __malloc_max_sbrked_mem
03045e24 g     F .text	00000064 LCD_TextOut
03053428 g     F .text	000001a4 alt_irq_register
03049294 g     F .text	00000054 __extendsfdf2
03052684 g     F .text	00000074 __adddf3
03043938 g     F .text	00000050 fatIsUnusedDir
03040c94 g     F .text	00000338 waveplay_execute
0305092c g     F .text	00000128 __b2d
030537b8 g     F .text	000000f0 lseek
0305ca24 g     O .rwdata	00000004 _global_impure_ptr
03051950 g     F .text	00000628 _realloc_r
0305fd70 g       *ABS*	00000000 __bss_end
03058a98 g     F .text	000000fc alt_iic_isr_register
03053f48 g     F .text	00000100 alt_tick
0305ac70 g     O .rodata	00000028 __mprec_bigtens
030515cc g     F .text	00000120 __s2b
03052f44 g     F .text	00000194 __floatunsidf
03044b1c g     F .text	00000078 AUDIO_MicBoost
03050844 g     F .text	00000060 __mcmp
03057838 g     F .text	000000cc altera_avalon_uart_init
0305ca30 g     O .rwdata	00000004 __ctype_ptr
03044734 g     F .text	0000003c SD_ReadBlock512
0304a44c g     F .text	00000018 __fp_lock_all
03058a58 g     F .text	00000040 alt_ic_irq_enabled
030456b0 g     F .text	000000fc I2C_Write
03042614 g     F .text	00000238 Fat_FileOpen
03046138 g     F .text	00000078 SEG7_Number
03053eac g     F .text	0000009c alt_alarm_stop
03045f10 g     F .text	0000003c LCD_Close
0305ca54 g     O .rwdata	00000004 alt_irq_active
03043554 g     F .text	000001e4 fatDelClusterList
030400ec g     F .exceptions	000000d8 alt_irq_handler
0305b550 g     O .rwdata	00000028 alt_dev_null
03046c64 g     F .text	000000f4 SDHAL_SendCmd
03049a78 g     F .text	000000c8 __unpack_f
03055024 g     F .text	000000b8 alt_set_flash_algorithm_func
03045a58 g     F .text	00000088 i2c_start
030583fc g     F .text	00000040 alt_dcache_flush_all
03050710 g     F .text	00000070 __hi0bits
03046ff8 g     F .text	00000158 SDHAL_ReadData
03052e68 g     F .text	000000dc __fixdfsi
03054be0 g     F .text	0000003c alt_write_flash_command_8bit_device_8bit_mode
0305ca88 g       *ABS*	00000000 __ram_rwdata_end
0305ca44 g     O .rwdata	00000008 alt_dev_list
03041bec g     F .text	00000048 Fat_Mount
03054074 g     F .text	00000120 write
030517f0 g     F .text	000000e8 _putc_r
0305ad2c g       *ABS*	00000000 __ram_rodata_end
0305330c g     F .text	000000d4 fstat
03046908 g     F .text	00000060 myprintf
03055d70 g     F .text	000000cc alt_check_primary_table
03040404 g     F .text	00000028 lcd_open
030514ac g     F .text	00000120 __pow5mult
0305e80c g     O .bss	00000004 __nlocale_changed
030497f4 g     F .text	00000008 __umodsi3
030546e0 g     F .text	00000058 alt_flash_cfi_read
03054d9c g     F .text	00000030 alt_write_native_8bit
030453d8 g     F .text	0000008c AUDIO_EnableSiteTone
0305fd70 g       *ABS*	00000000 end
03049918 g     F .text	00000160 __pack_f
03054c1c g     F .text	0000007c alt_write_flash_command_16bit_device_8bit_mode
03045f4c g     F .text	0000002c LED_AllOn
03056fcc g     F .text	0000046c altera_avalon_lcd_16207_write
03057ecc g     F .text	000001d8 altera_avalon_uart_write
0304af64 g     F .text	00000024 fseek
03055150 g     F .text	00000574 alt_read_cfi_table
03055f74 g     F .text	000000c0 altera_avalon_jtag_uart_init
030599b4 g       *ABS*	00000000 __CTOR_LIST__
03080000 g       *ABS*	00000000 __alt_stack_pointer
030576c0 g     F .text	0000008c alt_avalon_timer_sc_init
030577a0 g     F .text	00000054 altera_avalon_uart_write_fd
03049898 g     F .text	00000080 __clzsi2
030577f4 g     F .text	00000044 altera_avalon_uart_close_fd
030566a8 g     F .text	00000254 altera_avalon_jtag_uart_write
03042e98 g     F .text	00000044 Fat_FileClose
030542d8 g     F .text	00000098 alt_flash_cfi_init
0304a370 g     F .text	00000004 __sfp_lock_acquire
03042284 g     F .text	00000068 Fat_FileCount
0305050c g     F .text	000000fc memchr
0304c590 g     F .text	00001d50 ___vfprintf_internal_r
0304c120 g     F .text	00000060 _sprintf_r
0304a814 g     F .text	00000314 _free_r
030597b0 g     F .text	000001a8 __call_exitprocs
0305e810 g     O .bss	00000004 __mlocale_changed
0305ca2c g     O .rwdata	00000004 __malloc_sbrk_base
030401c4 g     F .text	0000004c _start
0305ca6c g     O .rwdata	00000004 _alt_tick_rate
03051044 g     F .text	0000014c __lshift
0305ca70 g     O .rwdata	00000004 _alt_nticks
03047898 g     F .text	00000080 SD_CMD0
03053c28 g     F .text	00000120 read
0305420c g     F .text	0000009c alt_sys_init
0304bc94 g     F .text	00000078 _open_r
03059678 g     F .text	00000134 __register_exitproc
03044da4 g     F .text	0000008c AUDIO_DacEnableSoftMute
0304732c g     F .text	0000005c SDHAL_DummyClock
0304284c g     F .text	00000050 Fat_FileSize
03054b64 g     F .text	00000040 alt_read_query_entry_16bit
03046a6c g     F .text	000000a8 crc16
03051190 g     F .text	000001e0 __multiply
03047848 g     F .text	00000028 SD_Init
03056310 g     F .text	0000006c altera_avalon_jtag_uart_close
0305ad2c g       *ABS*	00000000 __ram_rwdata_start
030599b8 g       *ABS*	00000000 __ram_rodata_start
0305fab8 g     O .bss	00000028 __malloc_current_mallinfo
03054e28 g     F .text	000001fc alt_set_flash_width_func
03050d3c g     F .text	0000017c __d2b
0304c2cc g     F .text	000000b0 strcasecmp
03040460 g     F .text	00000030 led_display
03055e3c g     F .text	00000054 altera_avalon_jtag_uart_read_fd
03058820 g     F .text	000000ac alt_get_fd
03058240 g     F .text	00000148 alt_busy_sleep
030530d8 g     F .text	000000c8 __fpcmp_parts_d
0304e5ac g     F .text	00000070 _close_r
03058d48 g     F .text	00000208 alt_erase_block_amd
0304289c g     F .text	000004d8 Fat_FileRead
03059604 g     F .text	00000074 memcmp
03055ee4 g     F .text	00000044 altera_avalon_jtag_uart_close_fd
0305fd70 g       *ABS*	00000000 __alt_stack_base
03055f28 g     F .text	0000004c altera_avalon_jtag_uart_ioctl_fd
0304b184 g     F .text	0000009c _fwrite_r
03044254 g     F .text	00000114 fatFindUnusedDirectory
03046c00 g     F .text	00000064 SDHAL_Init
0304e470 g     F .text	0000013c __swsetup_r
030556c4 g     F .text	000006ac alt_read_cfi_width
030493a8 g     F .text	0000025c __divdf3
0304a4e8 g     F .text	000000f0 __sfp
03050ba0 g     F .text	00000058 __copybits
03044c0c g     F .text	000000b8 AUDIO_DacDeemphasisControl
0305b13c g     O .rwdata	00000408 __malloc_av_
030467d8 g     F .text	0000009c Wave_GetDataByteSize
0304a37c g     F .text	00000004 __sinit_lock_release
0304e304 g     F .text	000000b4 _vsnprintf_r
03045ae0 g     F .text	00000078 i2c_stop
030526f8 g     F .text	000003c8 __muldf3
0304c26c g     F .text	00000060 __sread
0305a72c g     O .rodata	00000010 __thenan_sf
03042edc g     F .text	0000021c Fat_SpeedTest
030460d4 g     F .text	00000064 SEG7_Full
03040210 g     F .text	00000068 welcome_display
03058674 g     F .text	000000e4 alt_find_file
03046280 g     F .text	000000e4 SEG7_Decimal
0305843c g     F .text	000000b0 alt_dev_llist_insert
03053960 g     F .text	0000001c __malloc_lock
03053dec g     F .text	000000c0 sbrk
03044f9c g     F .text	0000008c AUDIO_SetInputSource
0304a0e8 g     F .text	000001fc _fflush_r
0305213c g     F .text	000000b8 _calloc_r
0305ca80 g     O .rwdata	00000008 alt_flash_dev_list
03044adc g     F .text	00000040 AUDIO_InterfaceActive
03054cd8 g     F .text	00000044 alt_write_flash_command_16bit_device_16bit_mode
030441b4 g     F .text	000000a0 fatFindDirectory
0304a6cc g     F .text	0000001c fopen
0305e7e4 g       *ABS*	00000000 __bss_start
030466c8 g     F .text	00000088 Wave_GetChannelNum
0304bbfc g     F .text	00000098 memset
03041814 g     F .text	000003d8 main
03044124 g     F .text	00000090 fatReadSecter
0305ca64 g     O .rwdata	00000004 alt_envp
0305e808 g     O .bss	00000004 __malloc_max_total_mem
03046968 g     F .text	00000080 myprintf_hexarray
03055e90 g     F .text	00000054 altera_avalon_jtag_uart_write_fd
03045c7c g     F .text	0000014c i2c_read
03052120 g     F .text	0000001c __swbuf
030574cc g     F .text	0000012c altera_avalon_lcd_16207_init
0304c180 g     F .text	00000008 __sclose
03043988 g     F .text	00000710 fatDump
03080000 g       *ABS*	00000000 __alt_heap_limit
0304a0d4 g     F .text	00000014 fclose
0304963c g     F .text	00000074 __truncdfsf2
0305fbe0 g     O .bss	00000190 _atexit0
0304e824 g     F .text	00001600 _dtoa_r
0304b41c g     F .text	00000740 _malloc_r
03048e84 g     F .text	00000040 SD_WriteData
0305ca50 g     O .rwdata	00000004 alt_errno
03054d5c g     F .text	00000040 alt_write_flash_command_32bit_device_32bit_mode
0304b0c8 g     F .text	000000bc _fwalk
03054738 g     F .text	0000013c alt_write_value_to_flash
03043738 g     F .text	00000084 fatDumpDate
03054dcc g     F .text	00000030 alt_write_native_16bit
03046b60 g     F .text	00000074 crc7
030516ec g     F .text	00000104 putc
03042d74 g     F .text	00000124 Fat_FileSeek
0304972c g     F .text	00000060 __divsi3
03045dc8 g     F .text	0000005c LCD_Open
030487e8 g     F .text	00000198 SD_ACMD6
0305a73c g     O .rodata	00000014 __thenan_df
0304a6e8 g     F .text	0000012c _malloc_trim_r
030599b8 g       *ABS*	00000000 __CTOR_END__
03048f3c g     F .text	000001e0 __mulsf3
03044ebc g     F .text	000000e0 AUDIO_LineInMute
0304c37c g     F .text	000000bc strcmp
03044770 g     F .text	0000003c SD_WriteBlock512
03044e30 g     F .text	0000008c AUDIO_MicMute
030599b8 g       *ABS*	00000000 __flash_rodata_start
030599b8 g       *ABS*	00000000 __DTOR_LIST__
03044098 g     F .text	0000008c fatArray2Value
03047870 g     F .text	00000028 SD_IsSupport4Bits
03052b48 g     F .text	00000088 __nedf2
030431b0 g     F .text	000000d4 fat32ClusterType
030541dc g     F .text	00000030 alt_irq_init
03053d90 g     F .text	0000005c alt_release_fd
0304c0ac g     F .text	00000074 sprintf
0305a750 g     O .rodata	00000100 __clz_tab
030461b0 g     F .text	000000d0 SEG7_Hex
030468d8 g     F .text	00000030 debug_output
0305e814 g     O .bss	00000004 _PathLocale
03047c2c g     F .text	000001a4 SD_ACMD41
030595b8 g     F .text	00000014 atexit
0304e3f8 g     F .text	00000078 _write_r
03047918 g     F .text	00000190 SD_CMD8
0304238c g     F .text	000001d8 fatComposeShortFilename
03050478 g     F .text	0000001c setlocale
0305ca20 g     O .rwdata	00000004 _impure_ptr
0305ca5c g     O .rwdata	00000004 alt_argc
0305858c g     F .text	00000058 _do_dtors
03041c80 g     F .text	00000090 Fat_Type
030469e8 g     F .text	00000084 myprintf_dwordarray
0304ab28 g     F .text	0000043c _fseek_r
030455f8 g     F .text	00000038 AUDIO_AdcFifoNotEmpty
0304be5c g     F .text	000001c4 __srefill_r
03040020 g       .exceptions	00000000 alt_irq_entry
030508a4 g     F .text	00000088 __ulp
03051f78 g     F .text	00000044 __isinfd
0304a434 g     F .text	00000018 __fp_unlock_all
03041550 g     F .text	000002c4 Fat_Test
030430f8 g     F .text	000000b8 fat16ClusterType
030575f8 g     F .text	00000054 altera_avalon_lcd_16207_write_fd
030455b4 g     F .text	00000044 AUDIO_DacFifoSetData
0305ca3c g     O .rwdata	00000008 alt_fs_list
03047aa8 g     F .text	00000184 SD_CMD55
030411e0 g     F .text	00000054 IRDA_init
03054c98 g     F .text	00000040 alt_write_flash_command_32bit_device_8bit_mode
030482ec g     F .text	000001d4 SD_CMD10
03040020 g       *ABS*	00000000 __ram_exceptions_start
03045028 g     F .text	000000ec AUDIO_SetSampleRate
030503e4 g     F .text	00000010 localeconv
03040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
030422ec g     F .text	000000a0 fatSameLongFilename
03040fe8 g     F .text	000001f8 handle_key
02800000 g       *ABS*	00000000 __alt_mem_av_tri_s1_cfi_flash_0
030588f8 g     F .text	0000004c alt_ic_isr_register
0304b220 g     F .text	00000040 fwrite
0305ca88 g       *ABS*	00000000 _edata
030437bc g     F .text	00000084 fatDumpTime
0305774c g     F .text	00000054 altera_avalon_uart_read_fd
0305fd70 g       *ABS*	00000000 _end
03058758 g     F .text	00000078 alt_flash_open_dev
03045230 g     F .text	0000011c AUDIO_SetLineOutVol
03048118 g     F .text	000001d4 SD_CMD9
030401c4 g       *ABS*	00000000 __ram_exceptions_end
0305637c g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
030589cc g     F .text	0000008c alt_ic_irq_disable
0304c1f0 g     F .text	0000007c __swrite
0305ca28 g     O .rwdata	00000004 __malloc_trim_threshold
03040608 g     F .text	00000410 build_wave_play_list
03058cc8 g     F .text	0000001c altera_nios2_qsys_irq_init
030595cc g     F .text	00000038 exit
03045ff4 g     F .text	00000084 LED_LightCount
03041234 g     F .text	0000031c handle_IrDA
030447ac g     F .text	0000016c fatMountSdcard
0304affc g     F .text	000000cc _fwalk_reent
030492e8 g     F .text	000000c0 __floatunsisf
03050eb8 g     F .text	0000018c __mdiff
03040a18 g     F .text	0000027c waveplay_start
030587d0 g     F .text	00000050 alt_flash_close_dev
0304978c g     F .text	00000060 __modsi3
03080000 g       *ABS*	00000000 __alt_data_end
03040020 g     F .exceptions	00000000 alt_exception
0304a374 g     F .text	00000004 __sfp_lock_release
03047388 g     F .text	000003a0 SDLIB_Init
0305a8d6 g     O .rodata	00000101 _ctype_
03048afc g     F .text	000001a4 SD_CMD17
03057bec g     F .text	00000058 altera_avalon_uart_close
0304a5d8 g     F .text	000000f4 _fopen_r
03059994 g     F .text	00000020 _exit
03051fbc g     F .text	00000034 __isnand
03040278 g     F .text	0000009c demo_introduce
030580ec g     F .text	00000154 alt_alarm_start
030497fc g     F .text	0000009c __muldi3
0304b260 g     F .text	00000194 __smakebuf_r
03054dfc g     F .text	0000002c alt_write_native_32bit
0304c4c4 g     F .text	00000074 strlen
03053a60 g     F .text	00000180 open
03045560 g     F .text	00000054 AUDIO_DacFifoNotFull
03052c58 g     F .text	00000088 __gedf2
03054654 g     F .text	0000008c alt_flash_cfi_get_info
030588cc g     F .text	0000002c alt_icache_flush_all
0305ca58 g     O .rwdata	00000004 alt_priority_mask
03058944 g     F .text	00000088 alt_ic_irq_enable
03047150 g     F .text	000001dc SDHAL_WriteData
03046620 g     F .text	000000a8 Wave_GetSampleRate
0304e2e0 g     F .text	00000024 __vfprintf_internal
030433dc g     F .text	00000178 fatFindUnusedCluster
03057c44 g     F .text	00000240 altera_avalon_uart_read
03046750 g     F .text	00000088 Wave_GetSampleBitNum
03052604 g     F .text	00000080 __subdf3
030403b0 g     F .text	00000054 DisplayTime
03050780 g     F .text	000000c4 __lo0bits
0305ca74 g     O .rwdata	00000008 alt_alarm_list
03058534 g     F .text	00000058 _do_ctors
03048e44 g     F .text	00000040 SD_ReadData
030531a0 g     F .text	000000fc close
03058ce4 g     F .text	00000064 alt_program_amd
03041c34 g     F .text	0000004c Fat_Unmount
030536d4 g     F .text	0000007c alt_load
03049b6c g     F .text	00000318 __pack_d
0304b3f4 g     F .text	00000014 free
0304a378 g     F .text	00000004 __sinit_lock_acquire
030513ac g     F .text	00000100 __multadd
03043840 g     F .text	00000050 fatIsLastDir
030506e8 g     F .text	00000028 _Bfree
03047f74 g     F .text	000001a4 SD_CMD3
03047728 g     F .text	00000090 SDLIB_ReadBlock512


Disassembly of section .entry:

03040000 <__reset>:
 3040000:	00840014 	movui	r2,4096
 3040004:	1001483a 	initi	r2
 3040008:	10bff804 	addi	r2,r2,-32
 304000c:	00bffd16 	blt	zero,r2,3040004 <__alt_mem_onchip_memory2+0x4>
 3040010:	0040c134 	movhi	at,772
 3040014:	08407114 	ori	at,at,452
 3040018:	0800683a 	jmp	at
 304001c:	00000000 	call	0 <__alt_mem_av_tri_s1_cfi_flash_0-0x2800000>
Disassembly of section .exceptions:

03040020 <alt_exception>:
 3040020:	deffed04 	addi	sp,sp,-76
 3040024:	dfc00015 	stw	ra,0(sp)
 3040028:	d8400215 	stw	at,8(sp)
 304002c:	d8800315 	stw	r2,12(sp)
 3040030:	d8c00415 	stw	r3,16(sp)
 3040034:	d9000515 	stw	r4,20(sp)
 3040038:	d9400615 	stw	r5,24(sp)
 304003c:	d9800715 	stw	r6,28(sp)
 3040040:	d9c00815 	stw	r7,32(sp)
 3040044:	000b307a 	rdctl	r5,estatus
 3040048:	da000915 	stw	r8,36(sp)
 304004c:	da400a15 	stw	r9,40(sp)
 3040050:	da800b15 	stw	r10,44(sp)
 3040054:	dac00c15 	stw	r11,48(sp)
 3040058:	db000d15 	stw	r12,52(sp)
 304005c:	db400e15 	stw	r13,56(sp)
 3040060:	db800f15 	stw	r14,60(sp)
 3040064:	dbc01015 	stw	r15,64(sp)
 3040068:	d9401115 	stw	r5,68(sp)
 304006c:	ebffff04 	addi	r15,ea,-4
 3040070:	dbc01215 	stw	r15,72(sp)
 3040074:	0009313a 	rdctl	r4,ipending
 3040078:	2880004c 	andi	r2,r5,1
 304007c:	10000326 	beq	r2,zero,304008c <__flash_exceptions_start+0x6c>
 3040080:	20000226 	beq	r4,zero,304008c <__flash_exceptions_start+0x6c>
 3040084:	30400ec0 	call	30400ec <alt_irq_handler>
 3040088:	00000306 	br	3040098 <__flash_exceptions_start+0x78>
 304008c:	df401215 	stw	ea,72(sp)
 3040090:	e8bfff17 	ldw	r2,-4(ea)
 3040094:	003da03a 	break	0
 3040098:	d9401117 	ldw	r5,68(sp)
 304009c:	df401217 	ldw	ea,72(sp)
 30400a0:	dfc00017 	ldw	ra,0(sp)
 30400a4:	2801707a 	wrctl	estatus,r5
 30400a8:	d8400217 	ldw	at,8(sp)
 30400ac:	d8800317 	ldw	r2,12(sp)
 30400b0:	d8c00417 	ldw	r3,16(sp)
 30400b4:	d9000517 	ldw	r4,20(sp)
 30400b8:	d9400617 	ldw	r5,24(sp)
 30400bc:	d9800717 	ldw	r6,28(sp)
 30400c0:	d9c00817 	ldw	r7,32(sp)
 30400c4:	da000917 	ldw	r8,36(sp)
 30400c8:	da400a17 	ldw	r9,40(sp)
 30400cc:	da800b17 	ldw	r10,44(sp)
 30400d0:	dac00c17 	ldw	r11,48(sp)
 30400d4:	db000d17 	ldw	r12,52(sp)
 30400d8:	db400e17 	ldw	r13,56(sp)
 30400dc:	db800f17 	ldw	r14,60(sp)
 30400e0:	dbc01017 	ldw	r15,64(sp)
 30400e4:	dec01304 	addi	sp,sp,76
 30400e8:	ef80083a 	eret

030400ec <alt_irq_handler>:
 30400ec:	defff904 	addi	sp,sp,-28
 30400f0:	dfc00615 	stw	ra,24(sp)
 30400f4:	df000515 	stw	fp,20(sp)
 30400f8:	df000504 	addi	fp,sp,20
 30400fc:	0005313a 	rdctl	r2,ipending
 3040100:	e0bfff15 	stw	r2,-4(fp)
 3040104:	e0bfff17 	ldw	r2,-4(fp)
 3040108:	e0bffe15 	stw	r2,-8(fp)
 304010c:	e0bffe17 	ldw	r2,-8(fp)
 3040110:	e0bffb15 	stw	r2,-20(fp)
 3040114:	e03ffd15 	stw	zero,-12(fp)
 3040118:	00800044 	movi	r2,1
 304011c:	e0bffc15 	stw	r2,-16(fp)
 3040120:	e0fffb17 	ldw	r3,-20(fp)
 3040124:	e0bffc17 	ldw	r2,-16(fp)
 3040128:	1884703a 	and	r2,r3,r2
 304012c:	1005003a 	cmpeq	r2,r2,zero
 3040130:	10000f1e 	bne	r2,zero,3040170 <alt_irq_handler+0x84>
 3040134:	00c0c1b4 	movhi	r3,774
 3040138:	18feb804 	addi	r3,r3,-1312
 304013c:	e0bffd17 	ldw	r2,-12(fp)
 3040140:	10800224 	muli	r2,r2,8
 3040144:	10c9883a 	add	r4,r2,r3
 3040148:	00c0c1b4 	movhi	r3,774
 304014c:	18feb804 	addi	r3,r3,-1312
 3040150:	e0bffd17 	ldw	r2,-12(fp)
 3040154:	10800224 	muli	r2,r2,8
 3040158:	10c5883a 	add	r2,r2,r3
 304015c:	10800104 	addi	r2,r2,4
 3040160:	20c00017 	ldw	r3,0(r4)
 3040164:	11000017 	ldw	r4,0(r2)
 3040168:	183ee83a 	callr	r3
 304016c:	00000706 	br	304018c <alt_irq_handler+0xa0>
 3040170:	e0bffc17 	ldw	r2,-16(fp)
 3040174:	1085883a 	add	r2,r2,r2
 3040178:	e0bffc15 	stw	r2,-16(fp)
 304017c:	e0bffd17 	ldw	r2,-12(fp)
 3040180:	10800044 	addi	r2,r2,1
 3040184:	e0bffd15 	stw	r2,-12(fp)
 3040188:	003fe506 	br	3040120 <alt_irq_handler+0x34>
 304018c:	0005313a 	rdctl	r2,ipending
 3040190:	e0bffe15 	stw	r2,-8(fp)
 3040194:	e0bffe17 	ldw	r2,-8(fp)
 3040198:	e0bfff15 	stw	r2,-4(fp)
 304019c:	e0bfff17 	ldw	r2,-4(fp)
 30401a0:	e0bffb15 	stw	r2,-20(fp)
 30401a4:	e0bffb17 	ldw	r2,-20(fp)
 30401a8:	1005003a 	cmpeq	r2,r2,zero
 30401ac:	1000011e 	bne	r2,zero,30401b4 <alt_irq_handler+0xc8>
 30401b0:	003fd806 	br	3040114 <alt_irq_handler+0x28>
 30401b4:	dfc00617 	ldw	ra,24(sp)
 30401b8:	df000517 	ldw	fp,20(sp)
 30401bc:	dec00704 	addi	sp,sp,28
 30401c0:	f800283a 	ret
Disassembly of section .text:

030401c4 <_start>:
 30401c4:	00820014 	movui	r2,2048
 30401c8:	10000033 	initd	0(r2)
 30401cc:	10bff804 	addi	r2,r2,-32
 30401d0:	00bffd16 	blt	zero,r2,30401c8 <__ram_exceptions_end+0x4>
 30401d4:	06c0c234 	movhi	sp,776
 30401d8:	dec00014 	ori	sp,sp,0
 30401dc:	0680c1b4 	movhi	gp,774
 30401e0:	d6928514 	ori	gp,gp,18964
 30401e4:	0080c174 	movhi	r2,773
 30401e8:	10b9f914 	ori	r2,r2,59364
 30401ec:	00c0c174 	movhi	r3,773
 30401f0:	18ff5c14 	ori	r3,r3,64880
 30401f4:	10c00326 	beq	r2,r3,3040204 <__ram_exceptions_end+0x40>
 30401f8:	10000015 	stw	zero,0(r2)
 30401fc:	10800104 	addi	r2,r2,4
 3040200:	10fffd36 	bltu	r2,r3,30401f8 <__ram_exceptions_end+0x34>
 3040204:	30536d40 	call	30536d4 <alt_load>
 3040208:	30538f00 	call	30538f0 <alt_main>

0304020c <alt_after_alt_main>:
 304020c:	003fff06 	br	304020c <alt_after_alt_main>

03040210 <welcome_display>:
/////////////////////////////////////////////////////////////////



void welcome_display(void){
 3040210:	defffd04 	addi	sp,sp,-12
 3040214:	dfc00215 	stw	ra,8(sp)
 3040218:	df000115 	stw	fp,4(sp)
 304021c:	df000104 	addi	fp,sp,4
    int i;
    lcd_display(("\rWelcome Demo\nCDCARD-AUDIO\n"));
 3040220:	0100c1b4 	movhi	r4,774
 3040224:	21266e04 	addi	r4,r4,-26184
 3040228:	304042c0 	call	304042c <lcd_display>
    for(i=0;i<5;i++){
 304022c:	e03fff15 	stw	zero,-4(fp)
 3040230:	00000906 	br	3040258 <welcome_display+0x48>
        LED_AllOn();
 3040234:	3045f4c0 	call	3045f4c <LED_AllOn>
        usleep(50*1000);
 3040238:	0130d414 	movui	r4,50000
 304023c:	30540480 	call	3054048 <usleep>
        LED_AllOff();
 3040240:	3045f780 	call	3045f78 <LED_AllOff>
        usleep(50*1000);
 3040244:	0130d414 	movui	r4,50000
 3040248:	30540480 	call	3054048 <usleep>
 304024c:	e0bfff17 	ldw	r2,-4(fp)
 3040250:	10800044 	addi	r2,r2,1
 3040254:	e0bfff15 	stw	r2,-4(fp)
 3040258:	e0bfff17 	ldw	r2,-4(fp)
 304025c:	10800150 	cmplti	r2,r2,5
 3040260:	103ff41e 	bne	r2,zero,3040234 <welcome_display+0x24>
    }        
}
 3040264:	e037883a 	mov	sp,fp
 3040268:	dfc00117 	ldw	ra,4(sp)
 304026c:	df000017 	ldw	fp,0(sp)
 3040270:	dec00204 	addi	sp,sp,8
 3040274:	f800283a 	ret

03040278 <demo_introduce>:

void demo_introduce(void){
 3040278:	defffe04 	addi	sp,sp,-8
 304027c:	dfc00115 	stw	ra,4(sp)
 3040280:	df000015 	stw	fp,0(sp)
 3040284:	d839883a 	mov	fp,sp
    DEMO_PRINTF("===== Welcome to Altera Player Program =====\r\n");
 3040288:	0100c1b4 	movhi	r4,774
 304028c:	21267504 	addi	r4,r4,-26156
 3040290:	304be480 	call	304be48 <puts>
    DEMO_PRINTF("Supported File System: FAT16,FAT32, English Short File Name,English Long File Name\r\n");
 3040294:	0100c1b4 	movhi	r4,774
 3040298:	21268104 	addi	r4,r4,-26108
 304029c:	304be480 	call	304be48 <puts>
    DEMO_PRINTF("Played Wave Files: Wave files on root directory.\r\n");
 30402a0:	0100c1b4 	movhi	r4,774
 30402a4:	21269604 	addi	r4,r4,-26024
 30402a8:	304be480 	call	304be48 <puts>
    DEMO_PRINTF("Supported Media File: Uncompressed WAV File, Sample-Rate 96K/48K/44.1K/32K/8K, Stereo, 16-bits Sample.\r\n");
 30402ac:	0100c1b4 	movhi	r4,774
 30402b0:	2126a304 	addi	r4,r4,-25972
 30402b4:	304be480 	call	304be48 <puts>
    DEMO_PRINTF("KEY4: Next Song\r\n");
 30402b8:	0100c1b4 	movhi	r4,774
 30402bc:	2126bd04 	addi	r4,r4,-25868
 30402c0:	304be480 	call	304be48 <puts>
#ifdef SUPPORT_PLAY_MODE
    DEMO_PRINTF("SW0 ON: Enable Repeat Mode\n");
 30402c4:	0100c1b4 	movhi	r4,774
 30402c8:	2126c204 	addi	r4,r4,-25848
 30402cc:	304be480 	call	304be48 <puts>
#endif    
    DEMO_PRINTF("KEY3: Volume Up\r\n");
 30402d0:	0100c1b4 	movhi	r4,774
 30402d4:	2126c904 	addi	r4,r4,-25820
 30402d8:	304be480 	call	304be48 <puts>
    DEMO_PRINTF("KEY2: Volume Down\r\n");
 30402dc:	0100c1b4 	movhi	r4,774
 30402e0:	2126ce04 	addi	r4,r4,-25800
 30402e4:	304be480 	call	304be48 <puts>
    DEMO_PRINTF("Current Voluem:%d(%d-%d)\r\n\r\n", HW_DEFAULT_VOL, HW_MIN_VOL, HW_MAX_VOL);    
 30402e8:	0100c1b4 	movhi	r4,774
 30402ec:	2126d304 	addi	r4,r4,-25780
 30402f0:	01401904 	movi	r5,100
 30402f4:	01800784 	movi	r6,30
 30402f8:	01c02584 	movi	r7,150
 30402fc:	304bd0c0 	call	304bd0c <printf>
}
 3040300:	e037883a 	mov	sp,fp
 3040304:	dfc00117 	ldw	ra,4(sp)
 3040308:	df000017 	ldw	fp,0(sp)
 304030c:	dec00204 	addi	sp,sp,8
 3040310:	f800283a 	ret

03040314 <update_status>:

void update_status(void){
 3040314:	deffe904 	addi	sp,sp,-92
 3040318:	dfc01615 	stw	ra,88(sp)
 304031c:	df001515 	stw	fp,84(sp)
 3040320:	df001504 	addi	fp,sp,84
#ifdef LCD_DISPLAY    
    char szText[64];       
    sprintf(szText, "\r%s\nVol:%d(%d-%d)%C\n", gWavePlay.szFilename, gWavePlay.nVolume, 
 3040324:	0080c1b4 	movhi	r2,774
 3040328:	10be0704 	addi	r2,r2,-2020
 304032c:	10808d03 	ldbu	r2,564(r2)
 3040330:	10803fcc 	andi	r2,r2,255
 3040334:	e0bfff15 	stw	r2,-4(fp)
 3040338:	0080c1b4 	movhi	r2,774
 304033c:	10be0704 	addi	r2,r2,-2020
 3040340:	10808e17 	ldw	r2,568(r2)
 3040344:	1005003a 	cmpeq	r2,r2,zero
 3040348:	1000031e 	bne	r2,zero,3040358 <update_status+0x44>
 304034c:	00801484 	movi	r2,82
 3040350:	e0bffe15 	stw	r2,-8(fp)
 3040354:	00000206 	br	3040360 <update_status+0x4c>
 3040358:	008014c4 	movi	r2,83
 304035c:	e0bffe15 	stw	r2,-8(fp)
 3040360:	00800784 	movi	r2,30
 3040364:	d8800015 	stw	r2,0(sp)
 3040368:	00802584 	movi	r2,150
 304036c:	d8800115 	stw	r2,4(sp)
 3040370:	e0bffe17 	ldw	r2,-8(fp)
 3040374:	d8800215 	stw	r2,8(sp)
 3040378:	e13fee04 	addi	r4,fp,-72
 304037c:	0140c1b4 	movhi	r5,774
 3040380:	2966db04 	addi	r5,r5,-25748
 3040384:	0180c1b4 	movhi	r6,774
 3040388:	31be8c04 	addi	r6,r6,-1488
 304038c:	e1ffff17 	ldw	r7,-4(fp)
 3040390:	304c0ac0 	call	304c0ac <sprintf>
        HW_MIN_VOL, HW_MAX_VOL, gWavePlay.bRepeatMode?'R':'S');
    lcd_display((szText));
 3040394:	e13fee04 	addi	r4,fp,-72
 3040398:	304042c0 	call	304042c <lcd_display>
#endif    
}
 304039c:	e037883a 	mov	sp,fp
 30403a0:	dfc00117 	ldw	ra,4(sp)
 30403a4:	df000017 	ldw	fp,0(sp)
 30403a8:	dec00204 	addi	sp,sp,8
 30403ac:	f800283a 	ret

030403b0 <DisplayTime>:

void DisplayTime(alt_u32 TimeElapsed){
 30403b0:	defffc04 	addi	sp,sp,-16
 30403b4:	dfc00315 	stw	ra,12(sp)
 30403b8:	df000215 	stw	fp,8(sp)
 30403bc:	df000204 	addi	fp,sp,8
 30403c0:	e13fff15 	stw	r4,-4(fp)
#ifdef SEG7_DISPLAY
    alt_u32 msx10;
    msx10 = TimeElapsed*100/alt_ticks_per_second();
 30403c4:	e0bfff17 	ldw	r2,-4(fp)
 30403c8:	11001924 	muli	r4,r2,100
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 30403cc:	0080c1b4 	movhi	r2,774
 30403d0:	10b29b04 	addi	r2,r2,-13716
 30403d4:	10800017 	ldw	r2,0(r2)
 30403d8:	100b883a 	mov	r5,r2
 30403dc:	30497ec0 	call	30497ec <__udivsi3>
 30403e0:	e0bffe15 	stw	r2,-8(fp)
    SEG7_Decimal(msx10, 0x01 << 2);
 30403e4:	e13ffe17 	ldw	r4,-8(fp)
 30403e8:	01400104 	movi	r5,4
 30403ec:	30462800 	call	3046280 <SEG7_Decimal>
#endif
    
    
    
    
}
 30403f0:	e037883a 	mov	sp,fp
 30403f4:	dfc00117 	ldw	ra,4(sp)
 30403f8:	df000017 	ldw	fp,0(sp)
 30403fc:	dec00204 	addi	sp,sp,8
 3040400:	f800283a 	ret

03040404 <lcd_open>:

void lcd_open(void){
 3040404:	defffe04 	addi	sp,sp,-8
 3040408:	dfc00115 	stw	ra,4(sp)
 304040c:	df000015 	stw	fp,0(sp)
 3040410:	d839883a 	mov	fp,sp
#ifdef LCD_DISPLAY
    LCD_Open();
 3040414:	3045dc80 	call	3045dc8 <LCD_Open>
#endif  
}
 3040418:	e037883a 	mov	sp,fp
 304041c:	dfc00117 	ldw	ra,4(sp)
 3040420:	df000017 	ldw	fp,0(sp)
 3040424:	dec00204 	addi	sp,sp,8
 3040428:	f800283a 	ret

0304042c <lcd_display>:

void lcd_display(char *pText){
 304042c:	defffd04 	addi	sp,sp,-12
 3040430:	dfc00215 	stw	ra,8(sp)
 3040434:	df000115 	stw	fp,4(sp)
 3040438:	df000104 	addi	fp,sp,4
 304043c:	e13fff15 	stw	r4,-4(fp)
#ifdef LCD_DISPLAY     
    LCD_Clear();  
 3040440:	3045e880 	call	3045e88 <LCD_Clear>
    LCD_TextOut(pText);
 3040444:	e13fff17 	ldw	r4,-4(fp)
 3040448:	3045e240 	call	3045e24 <LCD_TextOut>
#endif    
}
 304044c:	e037883a 	mov	sp,fp
 3040450:	dfc00117 	ldw	ra,4(sp)
 3040454:	df000017 	ldw	fp,0(sp)
 3040458:	dec00204 	addi	sp,sp,8
 304045c:	f800283a 	ret

03040460 <led_display>:

void led_display(alt_u32 mask){
 3040460:	defffd04 	addi	sp,sp,-12
 3040464:	dfc00215 	stw	ra,8(sp)
 3040468:	df000115 	stw	fp,4(sp)
 304046c:	df000104 	addi	fp,sp,4
 3040470:	e13fff15 	stw	r4,-4(fp)
#ifdef LCD_DISPLAY       
    LED_Display(mask);
 3040474:	e13fff17 	ldw	r4,-4(fp)
 3040478:	3045fa40 	call	3045fa4 <LED_Display>
#endif    
}
 304047c:	e037883a 	mov	sp,fp
 3040480:	dfc00117 	ldw	ra,4(sp)
 3040484:	df000017 	ldw	fp,0(sp)
 3040488:	dec00204 	addi	sp,sp,8
 304048c:	f800283a 	ret

03040490 <led_display_count>:

void led_display_count(alt_u8 count){
 3040490:	defffd04 	addi	sp,sp,-12
 3040494:	dfc00215 	stw	ra,8(sp)
 3040498:	df000115 	stw	fp,4(sp)
 304049c:	df000104 	addi	fp,sp,4
 30404a0:	e13fff05 	stb	r4,-4(fp)
#ifdef DISPLAY_WAVE_POWER   
    LED_LightCount(count);
 30404a4:	e13fff03 	ldbu	r4,-4(fp)
 30404a8:	3045ff40 	call	3045ff4 <LED_LightCount>
#endif    
}
 30404ac:	e037883a 	mov	sp,fp
 30404b0:	dfc00117 	ldw	ra,4(sp)
 30404b4:	df000017 	ldw	fp,0(sp)
 30404b8:	dec00204 	addi	sp,sp,8
 30404bc:	f800283a 	ret

030404c0 <wait_sdcard_insert>:


/////////////////////////////////////////////////////////////////
/////////// Routing for detect SD-CARD //////////////////////////
/////////////////////////////////////////////////////////////////

void wait_sdcard_insert(void){
 30404c0:	defffc04 	addi	sp,sp,-16
 30404c4:	dfc00315 	stw	ra,12(sp)
 30404c8:	df000215 	stw	fp,8(sp)
 30404cc:	df000204 	addi	fp,sp,8
    bool bFirstTime2Detect = TRUE;
 30404d0:	00800044 	movi	r2,1
 30404d4:	e0bfff15 	stw	r2,-4(fp)
    alt_u8 led_mask = 0x02;
 30404d8:	00800084 	movi	r2,2
 30404dc:	e0bffe05 	stb	r2,-8(fp)
    LED_AllOff();
 30404e0:	3045f780 	call	3045f78 <LED_AllOff>
    //led = IORD_ALTERA_AVALON_PIO_DATA(LED_RED_SPAN); // low-active
    while(!SDLIB_Init()){
 30404e4:	00001206 	br	3040530 <wait_sdcard_insert+0x70>
        if (bFirstTime2Detect){
 30404e8:	e0bfff17 	ldw	r2,-4(fp)
 30404ec:	1005003a 	cmpeq	r2,r2,zero
 30404f0:	1000071e 	bne	r2,zero,3040510 <wait_sdcard_insert+0x50>
            DEMO_PRINTF("Please insert SD card.\r\n");
 30404f4:	0100c1b4 	movhi	r4,774
 30404f8:	2126e104 	addi	r4,r4,-25724
 30404fc:	304be480 	call	304be48 <puts>
            lcd_display(("\rPlease insert\nSD card.\n"));
 3040500:	0100c1b4 	movhi	r4,774
 3040504:	2126e704 	addi	r4,r4,-25700
 3040508:	304042c0 	call	304042c <lcd_display>
            bFirstTime2Detect = FALSE;
 304050c:	e03fff15 	stw	zero,-4(fp)
        }    
        led_display((led_mask));
 3040510:	e13ffe03 	ldbu	r4,-8(fp)
 3040514:	30404600 	call	3040460 <led_display>
        usleep(100*1000);
 3040518:	010000b4 	movhi	r4,2
 304051c:	2121a804 	addi	r4,r4,-31072
 3040520:	30540480 	call	3054048 <usleep>
        led_mask ^= 0x02;
 3040524:	e0bffe03 	ldbu	r2,-8(fp)
 3040528:	1080009c 	xori	r2,r2,2
 304052c:	e0bffe05 	stb	r2,-8(fp)
 3040530:	30473880 	call	3047388 <SDLIB_Init>
 3040534:	1005003a 	cmpeq	r2,r2,zero
 3040538:	103feb1e 	bne	r2,zero,30404e8 <wait_sdcard_insert+0x28>
    } // while
    led_display((0x02));
 304053c:	01000084 	movi	r4,2
 3040540:	30404600 	call	3040460 <led_display>
    DEMO_PRINTF("Find SD card\r\n");    
 3040544:	0100c1b4 	movhi	r4,774
 3040548:	2126ee04 	addi	r4,r4,-25672
 304054c:	304be480 	call	304be48 <puts>
    
}
 3040550:	e037883a 	mov	sp,fp
 3040554:	dfc00117 	ldw	ra,4(sp)
 3040558:	df000017 	ldw	fp,0(sp)
 304055c:	dec00204 	addi	sp,sp,8
 3040560:	f800283a 	ret

03040564 <is_supporrted_sample_rate>:

/////////////////////////////////////////////////////////////////
/////////// Routing for building wave-file play list ////////////
/////////////////////////////////////////////////////////////////

bool is_supporrted_sample_rate(int sample_rate){
 3040564:	defffb04 	addi	sp,sp,-20
 3040568:	dfc00415 	stw	ra,16(sp)
 304056c:	df000315 	stw	fp,12(sp)
 3040570:	df000304 	addi	fp,sp,12
 3040574:	e13ffe15 	stw	r4,-8(fp)
    bool bSupport = FALSE;
 3040578:	e03ffd15 	stw	zero,-12(fp)
    printf("SampleRate: %d \n", sample_rate);
 304057c:	0100c1b4 	movhi	r4,774
 3040580:	2126f204 	addi	r4,r4,-25656
 3040584:	e17ffe17 	ldw	r5,-8(fp)
 3040588:	304bd0c0 	call	304bd0c <printf>
    switch(sample_rate){
 304058c:	e0bffe17 	ldw	r2,-8(fp)
 3040590:	e0bfff15 	stw	r2,-4(fp)
 3040594:	00ab1114 	movui	r2,44100
 3040598:	e0ffff17 	ldw	r3,-4(fp)
 304059c:	18801226 	beq	r3,r2,30405e8 <is_supporrted_sample_rate+0x84>
 30405a0:	00ab1114 	movui	r2,44100
 30405a4:	e0ffff17 	ldw	r3,-4(fp)
 30405a8:	10c00716 	blt	r2,r3,30405c8 <is_supporrted_sample_rate+0x64>
 30405ac:	e0ffff17 	ldw	r3,-4(fp)
 30405b0:	1887d020 	cmpeqi	r2,r3,8000
 30405b4:	10000c1e 	bne	r2,zero,30405e8 <is_supporrted_sample_rate+0x84>
 30405b8:	e0ffff17 	ldw	r3,-4(fp)
 30405bc:	189f4020 	cmpeqi	r2,r3,32000
 30405c0:	1000091e 	bne	r2,zero,30405e8 <is_supporrted_sample_rate+0x84>
 30405c4:	00000a06 	br	30405f0 <is_supporrted_sample_rate+0x8c>
 30405c8:	00aee014 	movui	r2,48000
 30405cc:	e0ffff17 	ldw	r3,-4(fp)
 30405d0:	18800526 	beq	r3,r2,30405e8 <is_supporrted_sample_rate+0x84>
 30405d4:	00800074 	movhi	r2,1
 30405d8:	109dc004 	addi	r2,r2,30464
 30405dc:	e0ffff17 	ldw	r3,-4(fp)
 30405e0:	18800126 	beq	r3,r2,30405e8 <is_supporrted_sample_rate+0x84>
 30405e4:	00000206 	br	30405f0 <is_supporrted_sample_rate+0x8c>
        case 96000:
        case 48000:
        case 44100:
        case 32000:
        case 8000:
            bSupport = TRUE;
 30405e8:	00800044 	movi	r2,1
 30405ec:	e0bffd15 	stw	r2,-12(fp)
            break;
    }
    return bSupport;
 30405f0:	e0bffd17 	ldw	r2,-12(fp)
}
 30405f4:	e037883a 	mov	sp,fp
 30405f8:	dfc00117 	ldw	ra,4(sp)
 30405fc:	df000017 	ldw	fp,0(sp)
 3040600:	dec00204 	addi	sp,sp,8
 3040604:	f800283a 	ret

03040608 <build_wave_play_list>:


int build_wave_play_list(FAT_HANDLE hFat){
 3040608:	deff4804 	addi	sp,sp,-736
 304060c:	dfc0b715 	stw	ra,732(sp)
 3040610:	df00b615 	stw	fp,728(sp)
 3040614:	df00b604 	addi	fp,sp,728
 3040618:	e13ffe15 	stw	r4,-8(fp)
    int count = 0;
 304061c:	e03f5115 	stw	zero,-700(fp)
    FAT_BROWSE_HANDLE hFileBrowse;
    //FAT_DIRECTORY Directory;
    FILE_CONTEXT FileContext;
    FAT_FILE_HANDLE hFile;
    alt_u8 szHeader[128];
    char szWaveFilename[MAX_FILENAME_LENGTH];
    int sample_rate;
    bool bFlag = FALSE;
 3040620:	e03f4e15 	stw	zero,-712(fp)
    int nPos = 0;
 3040624:	e03f4d15 	stw	zero,-716(fp)
    int length=0;
 3040628:	e03f4c15 	stw	zero,-720(fp)
    //
    gWavePlayList.nFileNum = 0;
 304062c:	0080c1b4 	movhi	r2,774
 3040630:	10ba0604 	addi	r2,r2,-6120
 3040634:	10000015 	stw	zero,0(r2)
    if (!Fat_FileBrowseBegin(hFat,&hFileBrowse)){
 3040638:	e17f5204 	addi	r5,fp,-696
 304063c:	e13ffe17 	ldw	r4,-8(fp)
 3040640:	3041d100 	call	3041d10 <Fat_FileBrowseBegin>
 3040644:	1004c03a 	cmpne	r2,r2,zero
 3040648:	1000e21e 	bne	r2,zero,30409d4 <build_wave_play_list+0x3cc>
        DEMO_PRINTF("browse file fail.\n");
 304064c:	0100c1b4 	movhi	r4,774
 3040650:	2126f704 	addi	r4,r4,-25636
 3040654:	304be480 	call	304be48 <puts>
        return 0;
 3040658:	e03fff15 	stw	zero,-4(fp)
 304065c:	0000e806 	br	3040a00 <build_wave_play_list+0x3f8>
    } 
    
    //
    while (Fat_FileBrowseNext(&hFileBrowse,&FileContext)){
        if (FileContext.bLongFilename){
 3040660:	e0bf9417 	ldw	r2,-432(fp)
 3040664:	1005003a 	cmpeq	r2,r2,zero
 3040668:	1000411e 	bne	r2,zero,3040770 <build_wave_play_list+0x168>
                nPos = 0;
 304066c:	e03f4d15 	stw	zero,-716(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
 3040670:	e0bf5404 	addi	r2,fp,-688
 3040674:	e0bf4b15 	stw	r2,-724(fp)
                pData8 = FileContext.szName;
 3040678:	e0bf5404 	addi	r2,fp,-688
 304067c:	e0bf4a15 	stw	r2,-728(fp)
                while(*pData16){
 3040680:	00003106 	br	3040748 <build_wave_play_list+0x140>
                    if (*pData8 && *pData8 != ' ')
 3040684:	e0bf4a17 	ldw	r2,-728(fp)
 3040688:	10800003 	ldbu	r2,0(r2)
 304068c:	10803fcc 	andi	r2,r2,255
 3040690:	1005003a 	cmpeq	r2,r2,zero
 3040694:	10000f1e 	bne	r2,zero,30406d4 <build_wave_play_list+0xcc>
 3040698:	e0bf4a17 	ldw	r2,-728(fp)
 304069c:	10800003 	ldbu	r2,0(r2)
 30406a0:	10803fcc 	andi	r2,r2,255
 30406a4:	10800820 	cmpeqi	r2,r2,32
 30406a8:	10000a1e 	bne	r2,zero,30406d4 <build_wave_play_list+0xcc>
                        szWaveFilename[nPos++] = *pData8;
 30406ac:	e13f4d17 	ldw	r4,-716(fp)
 30406b0:	e0bf4a17 	ldw	r2,-728(fp)
 30406b4:	10800003 	ldbu	r2,0(r2)
 30406b8:	1007883a 	mov	r3,r2
 30406bc:	e0bfbe04 	addi	r2,fp,-264
 30406c0:	1105883a 	add	r2,r2,r4
 30406c4:	10c00005 	stb	r3,0(r2)
 30406c8:	e0bf4d17 	ldw	r2,-716(fp)
 30406cc:	10800044 	addi	r2,r2,1
 30406d0:	e0bf4d15 	stw	r2,-716(fp)
                    pData8++;
 30406d4:	e0bf4a17 	ldw	r2,-728(fp)
 30406d8:	10800044 	addi	r2,r2,1
 30406dc:	e0bf4a15 	stw	r2,-728(fp)
                    if (*pData8 && *pData8 != ' ')
 30406e0:	e0bf4a17 	ldw	r2,-728(fp)
 30406e4:	10800003 	ldbu	r2,0(r2)
 30406e8:	10803fcc 	andi	r2,r2,255
 30406ec:	1005003a 	cmpeq	r2,r2,zero
 30406f0:	10000f1e 	bne	r2,zero,3040730 <build_wave_play_list+0x128>
 30406f4:	e0bf4a17 	ldw	r2,-728(fp)
 30406f8:	10800003 	ldbu	r2,0(r2)
 30406fc:	10803fcc 	andi	r2,r2,255
 3040700:	10800820 	cmpeqi	r2,r2,32
 3040704:	10000a1e 	bne	r2,zero,3040730 <build_wave_play_list+0x128>
                        szWaveFilename[nPos++] = *pData8;
 3040708:	e13f4d17 	ldw	r4,-716(fp)
 304070c:	e0bf4a17 	ldw	r2,-728(fp)
 3040710:	10800003 	ldbu	r2,0(r2)
 3040714:	1007883a 	mov	r3,r2
 3040718:	e0bfbe04 	addi	r2,fp,-264
 304071c:	1105883a 	add	r2,r2,r4
 3040720:	10c00005 	stb	r3,0(r2)
 3040724:	e0bf4d17 	ldw	r2,-716(fp)
 3040728:	10800044 	addi	r2,r2,1
 304072c:	e0bf4d15 	stw	r2,-716(fp)
                    pData8++;                    
 3040730:	e0bf4a17 	ldw	r2,-728(fp)
 3040734:	10800044 	addi	r2,r2,1
 3040738:	e0bf4a15 	stw	r2,-728(fp)
                    //    
                    pData16++;
 304073c:	e0bf4b17 	ldw	r2,-724(fp)
 3040740:	10800084 	addi	r2,r2,2
 3040744:	e0bf4b15 	stw	r2,-724(fp)
 3040748:	e0bf4b17 	ldw	r2,-724(fp)
 304074c:	1080000b 	ldhu	r2,0(r2)
 3040750:	10bfffcc 	andi	r2,r2,65535
 3040754:	1004c03a 	cmpne	r2,r2,zero
 3040758:	103fca1e 	bne	r2,zero,3040684 <build_wave_play_list+0x7c>
                }
                szWaveFilename[nPos] = 0;
 304075c:	e0bf4d17 	ldw	r2,-716(fp)
 3040760:	e0ffbe04 	addi	r3,fp,-264
 3040764:	1885883a 	add	r2,r3,r2
 3040768:	10000005 	stb	zero,0(r2)
 304076c:	00000306 	br	304077c <build_wave_play_list+0x174>
                //printf("\n--Music Name:%s --\n",szWaveFilename);
            }else{
                strcpy(szWaveFilename,FileContext.szName);
 3040770:	e13fbe04 	addi	r4,fp,-264
 3040774:	e17f5404 	addi	r5,fp,-688
 3040778:	304c4380 	call	304c438 <strcpy>
                //printf("\n--Music Name:%s --\n",FileContext.szName);
            }       
            
            length= strlen(szWaveFilename);   
 304077c:	e13fbe04 	addi	r4,fp,-264
 3040780:	304c4c40 	call	304c4c4 <strlen>
 3040784:	e0bf4c15 	stw	r2,-720(fp)
            if(length >= 4){
 3040788:	e0bf4c17 	ldw	r2,-720(fp)
 304078c:	10800110 	cmplti	r2,r2,4
 3040790:	1000481e 	bne	r2,zero,30408b4 <build_wave_play_list+0x2ac>
               if((szWaveFilename[length-1] =='V' || szWaveFilename[length-1] =='v')
 3040794:	e0bf4c17 	ldw	r2,-720(fp)
 3040798:	10ffffc4 	addi	r3,r2,-1
 304079c:	e0bfbe04 	addi	r2,fp,-264
 30407a0:	10c5883a 	add	r2,r2,r3
 30407a4:	10800003 	ldbu	r2,0(r2)
 30407a8:	10803fcc 	andi	r2,r2,255
 30407ac:	1080201c 	xori	r2,r2,128
 30407b0:	10bfe004 	addi	r2,r2,-128
 30407b4:	108015a0 	cmpeqi	r2,r2,86
 30407b8:	10000a1e 	bne	r2,zero,30407e4 <build_wave_play_list+0x1dc>
 30407bc:	e0bf4c17 	ldw	r2,-720(fp)
 30407c0:	10ffffc4 	addi	r3,r2,-1
 30407c4:	e0bfbe04 	addi	r2,fp,-264
 30407c8:	10c5883a 	add	r2,r2,r3
 30407cc:	10800003 	ldbu	r2,0(r2)
 30407d0:	10803fcc 	andi	r2,r2,255
 30407d4:	1080201c 	xori	r2,r2,128
 30407d8:	10bfe004 	addi	r2,r2,-128
 30407dc:	10801d98 	cmpnei	r2,r2,118
 30407e0:	1000341e 	bne	r2,zero,30408b4 <build_wave_play_list+0x2ac>
 30407e4:	e0bf4c17 	ldw	r2,-720(fp)
 30407e8:	10ffff84 	addi	r3,r2,-2
 30407ec:	e0bfbe04 	addi	r2,fp,-264
 30407f0:	10c5883a 	add	r2,r2,r3
 30407f4:	10800003 	ldbu	r2,0(r2)
 30407f8:	10803fcc 	andi	r2,r2,255
 30407fc:	1080201c 	xori	r2,r2,128
 3040800:	10bfe004 	addi	r2,r2,-128
 3040804:	10801060 	cmpeqi	r2,r2,65
 3040808:	10000a1e 	bne	r2,zero,3040834 <build_wave_play_list+0x22c>
 304080c:	e0bf4c17 	ldw	r2,-720(fp)
 3040810:	10ffff84 	addi	r3,r2,-2
 3040814:	e0bfbe04 	addi	r2,fp,-264
 3040818:	10c5883a 	add	r2,r2,r3
 304081c:	10800003 	ldbu	r2,0(r2)
 3040820:	10803fcc 	andi	r2,r2,255
 3040824:	1080201c 	xori	r2,r2,128
 3040828:	10bfe004 	addi	r2,r2,-128
 304082c:	10801858 	cmpnei	r2,r2,97
 3040830:	1000201e 	bne	r2,zero,30408b4 <build_wave_play_list+0x2ac>
 3040834:	e0bf4c17 	ldw	r2,-720(fp)
 3040838:	10ffff44 	addi	r3,r2,-3
 304083c:	e0bfbe04 	addi	r2,fp,-264
 3040840:	10c5883a 	add	r2,r2,r3
 3040844:	10800003 	ldbu	r2,0(r2)
 3040848:	10803fcc 	andi	r2,r2,255
 304084c:	1080201c 	xori	r2,r2,128
 3040850:	10bfe004 	addi	r2,r2,-128
 3040854:	108015e0 	cmpeqi	r2,r2,87
 3040858:	10000a1e 	bne	r2,zero,3040884 <build_wave_play_list+0x27c>
 304085c:	e0bf4c17 	ldw	r2,-720(fp)
 3040860:	10ffff44 	addi	r3,r2,-3
 3040864:	e0bfbe04 	addi	r2,fp,-264
 3040868:	10c5883a 	add	r2,r2,r3
 304086c:	10800003 	ldbu	r2,0(r2)
 3040870:	10803fcc 	andi	r2,r2,255
 3040874:	1080201c 	xori	r2,r2,128
 3040878:	10bfe004 	addi	r2,r2,-128
 304087c:	10801dd8 	cmpnei	r2,r2,119
 3040880:	10000c1e 	bne	r2,zero,30408b4 <build_wave_play_list+0x2ac>
 3040884:	e0bf4c17 	ldw	r2,-720(fp)
 3040888:	10ffff04 	addi	r3,r2,-4
 304088c:	e0bfbe04 	addi	r2,fp,-264
 3040890:	10c5883a 	add	r2,r2,r3
 3040894:	10800003 	ldbu	r2,0(r2)
 3040898:	10803fcc 	andi	r2,r2,255
 304089c:	1080201c 	xori	r2,r2,128
 30408a0:	10bfe004 	addi	r2,r2,-128
 30408a4:	10800b98 	cmpnei	r2,r2,46
 30408a8:	1000021e 	bne	r2,zero,30408b4 <build_wave_play_list+0x2ac>
                &&(szWaveFilename[length-2] == 'A' || szWaveFilename[length-2] =='a')
                &&(szWaveFilename[length-3] == 'W' || szWaveFilename[length-3] == 'w')
                &&(szWaveFilename[length-4] == '.')){
                   bFlag = TRUE;
 30408ac:	00800044 	movi	r2,1
 30408b0:	e0bf4e15 	stw	r2,-712(fp)
                } 
            }
       
        if (bFlag){
 30408b4:	e0bf4e17 	ldw	r2,-712(fp)
 30408b8:	1005003a 	cmpeq	r2,r2,zero
 30408bc:	1000451e 	bne	r2,zero,30409d4 <build_wave_play_list+0x3cc>
            // parsing wave format
            hFile = Fat_FileOpen(hFat,szWaveFilename);
 30408c0:	e17fbe04 	addi	r5,fp,-264
 30408c4:	e13ffe17 	ldw	r4,-8(fp)
 30408c8:	30426140 	call	3042614 <Fat_FileOpen>
 30408cc:	e0bf5015 	stw	r2,-704(fp)
            if (!hFile){
 30408d0:	e0bf5017 	ldw	r2,-704(fp)
 30408d4:	1004c03a 	cmpne	r2,r2,zero
 30408d8:	1000041e 	bne	r2,zero,30408ec <build_wave_play_list+0x2e4>
                  DEMO_PRINTF("wave file open fail.\n");
 30408dc:	0100c1b4 	movhi	r4,774
 30408e0:	2126fc04 	addi	r4,r4,-25616
 30408e4:	304be480 	call	304be48 <puts>
                  continue;
 30408e8:	00003a06 	br	30409d4 <build_wave_play_list+0x3cc>
            }
            
            memset(szHeader,0,sizeof(szHeader));
 30408ec:	e0bf9e04 	addi	r2,fp,-392
 30408f0:	1009883a 	mov	r4,r2
 30408f4:	01802004 	movi	r6,128
 30408f8:	000b883a 	mov	r5,zero
 30408fc:	304bbfc0 	call	304bbfc <memset>
                    
            if (!Fat_FileRead(hFile, szHeader, sizeof(szHeader))){
 3040900:	e17f9e04 	addi	r5,fp,-392
 3040904:	e13f5017 	ldw	r4,-704(fp)
 3040908:	01802004 	movi	r6,128
 304090c:	304289c0 	call	304289c <Fat_FileRead>
 3040910:	1004c03a 	cmpne	r2,r2,zero
 3040914:	1000041e 	bne	r2,zero,3040928 <build_wave_play_list+0x320>
                  DEMO_PRINTF("wave file read fail.\n");
 3040918:	0100c1b4 	movhi	r4,774
 304091c:	21270204 	addi	r4,r4,-25592
 3040920:	304be480 	call	304be48 <puts>
                  continue;
 3040924:	00002b06 	br	30409d4 <build_wave_play_list+0x3cc>
            }
            Fat_FileClose(hFile);
 3040928:	e13f5017 	ldw	r4,-704(fp)
 304092c:	3042e980 	call	3042e98 <Fat_FileClose>
                
                        // check wave format
            sample_rate =  Wave_GetSampleRate(szHeader, sizeof(szHeader));
 3040930:	e13f9e04 	addi	r4,fp,-392
 3040934:	01402004 	movi	r5,128
 3040938:	30466200 	call	3046620 <Wave_GetSampleRate>
 304093c:	e0bf4f15 	stw	r2,-708(fp)
            DEMO_PRINTF("VER.\n");
 3040940:	0100c1b4 	movhi	r4,774
 3040944:	21270804 	addi	r4,r4,-25568
 3040948:	304be480 	call	304be48 <puts>
            if (WAVE_IsWaveFile(szHeader, sizeof(szHeader)) &&
 304094c:	e13f9e04 	addi	r4,fp,-392
 3040950:	01402004 	movi	r5,128
 3040954:	30464980 	call	3046498 <WAVE_IsWaveFile>
 3040958:	1005003a 	cmpeq	r2,r2,zero
 304095c:	10001d1e 	bne	r2,zero,30409d4 <build_wave_play_list+0x3cc>
 3040960:	e13f4f17 	ldw	r4,-708(fp)
 3040964:	30405640 	call	3040564 <is_supporrted_sample_rate>
 3040968:	1005003a 	cmpeq	r2,r2,zero
 304096c:	1000191e 	bne	r2,zero,30409d4 <build_wave_play_list+0x3cc>
 3040970:	e13f9e04 	addi	r4,fp,-392
 3040974:	01402004 	movi	r5,128
 3040978:	30466c80 	call	30466c8 <Wave_GetChannelNum>
 304097c:	10800098 	cmpnei	r2,r2,2
 3040980:	1000141e 	bne	r2,zero,30409d4 <build_wave_play_list+0x3cc>
 3040984:	e13f9e04 	addi	r4,fp,-392
 3040988:	01402004 	movi	r5,128
 304098c:	30467500 	call	3046750 <Wave_GetSampleBitNum>
 3040990:	10800418 	cmpnei	r2,r2,16
 3040994:	10000f1e 	bne	r2,zero,30409d4 <build_wave_play_list+0x3cc>
                is_supporrted_sample_rate(sample_rate) &&
                Wave_GetChannelNum(szHeader, sizeof(szHeader))==2 &&
                Wave_GetSampleBitNum(szHeader, sizeof(szHeader))==16){
                DEMO_PRINTF("VER aaaa.\n");
 3040998:	0100c1b4 	movhi	r4,774
 304099c:	21270a04 	addi	r4,r4,-25560
 30409a0:	304be480 	call	304be48 <puts>
                    strcpy(gWavePlayList.szFilename[count],szWaveFilename);
 30409a4:	e0bf5117 	ldw	r2,-700(fp)
 30409a8:	1004917a 	slli	r2,r2,5
 30409ac:	1007883a 	mov	r3,r2
 30409b0:	0080c1b4 	movhi	r2,774
 30409b4:	10ba0704 	addi	r2,r2,-6116
 30409b8:	1885883a 	add	r2,r3,r2
 30409bc:	1009883a 	mov	r4,r2
 30409c0:	e17fbe04 	addi	r5,fp,-264
 30409c4:	304c4380 	call	304c438 <strcpy>
                    count++;
 30409c8:	e0bf5117 	ldw	r2,-700(fp)
 30409cc:	10800044 	addi	r2,r2,1
 30409d0:	e0bf5115 	stw	r2,-700(fp)
 30409d4:	e13f5204 	addi	r4,fp,-696
 30409d8:	e17f5404 	addi	r5,fp,-688
 30409dc:	3041d8c0 	call	3041d8c <Fat_FileBrowseNext>
 30409e0:	1004c03a 	cmpne	r2,r2,zero
 30409e4:	103f1e1e 	bne	r2,zero,3040660 <build_wave_play_list+0x58>
            }
        }
    } // while  
    gWavePlayList.nFileNum = count;
 30409e8:	00c0c1b4 	movhi	r3,774
 30409ec:	18fa0604 	addi	r3,r3,-6120
 30409f0:	e0bf5117 	ldw	r2,-700(fp)
 30409f4:	18800015 	stw	r2,0(r3)
    
    //Fat_FileBrowseEnd(&hFileBrowse);   
    
    return count;
 30409f8:	e0bf5117 	ldw	r2,-700(fp)
 30409fc:	e0bfff15 	stw	r2,-4(fp)
 3040a00:	e0bfff17 	ldw	r2,-4(fp)
}
 3040a04:	e037883a 	mov	sp,fp
 3040a08:	dfc00117 	ldw	ra,4(sp)
 3040a0c:	df000017 	ldw	fp,0(sp)
 3040a10:	dec00204 	addi	sp,sp,8
 3040a14:	f800283a 	ret

03040a18 <waveplay_start>:




/////////////////////////////////////////////////////////////////
//// Function for wave playing /////////////////////////////////
/////////////////////////////////////////////////////////////////



void waveplay_stop(void);

bool waveplay_start(char *pFilename){
 3040a18:	defff904 	addi	sp,sp,-28
 3040a1c:	dfc00615 	stw	ra,24(sp)
 3040a20:	df000515 	stw	fp,20(sp)
 3040a24:	dc000415 	stw	r16,16(sp)
 3040a28:	df000404 	addi	fp,sp,16
 3040a2c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    int nSize;
    //waveplay_stop();
    
  //  strcpyn(gWavePlay.szFilename, pFilename, FILENAME_LEN-1);
    strcpy(gWavePlay.szFilename, pFilename);
 3040a30:	0100c1b4 	movhi	r4,774
 3040a34:	213e8c04 	addi	r4,r4,-1488
 3040a38:	e17fff17 	ldw	r5,-4(fp)
 3040a3c:	304c4380 	call	304c438 <strcpy>
    gWavePlay.hFile = Fat_FileOpen(hFat, pFilename);
 3040a40:	d1277817 	ldw	r4,-25120(gp)
 3040a44:	e17fff17 	ldw	r5,-4(fp)
 3040a48:	30426140 	call	3042614 <Fat_FileOpen>
 3040a4c:	1007883a 	mov	r3,r2
 3040a50:	0080c1b4 	movhi	r2,774
 3040a54:	10be0704 	addi	r2,r2,-2020
 3040a58:	10c00015 	stw	r3,0(r2)
    if (!gWavePlay.hFile)
 3040a5c:	0080c1b4 	movhi	r2,774
 3040a60:	10be0704 	addi	r2,r2,-2020
 3040a64:	10800017 	ldw	r2,0(r2)
 3040a68:	1004c03a 	cmpne	r2,r2,zero
 3040a6c:	1000031e 	bne	r2,zero,3040a7c <waveplay_start+0x64>
        DEMO_PRINTF("wave file open fail.\n");
 3040a70:	0100c1b4 	movhi	r4,774
 3040a74:	2126fc04 	addi	r4,r4,-25616
 3040a78:	304be480 	call	304be48 <puts>
    
    //gWavePlay.szBuf = Fat_FileSize(gWavePlay.hFile);
    nSize = Fat_FileSize(gWavePlay.hFile);
 3040a7c:	0080c1b4 	movhi	r2,774
 3040a80:	10be0704 	addi	r2,r2,-2020
 3040a84:	11000017 	ldw	r4,0(r2)
 3040a88:	304284c0 	call	304284c <Fat_FileSize>
 3040a8c:	e0bffd15 	stw	r2,-12(fp)

    if (gWavePlay.hFile){                    
 3040a90:	0080c1b4 	movhi	r2,774
 3040a94:	10be0704 	addi	r2,r2,-2020
 3040a98:	10800017 	ldw	r2,0(r2)
 3040a9c:	1005003a 	cmpeq	r2,r2,zero
 3040aa0:	10000e1e 	bne	r2,zero,3040adc <waveplay_start+0xc4>
        bSuccess = Fat_FileRead(gWavePlay.hFile, gWavePlay.szBuf, WAVE_BUF_SIZE);
 3040aa4:	0080c1b4 	movhi	r2,774
 3040aa8:	10be0704 	addi	r2,r2,-2020
 3040aac:	11000017 	ldw	r4,0(r2)
 3040ab0:	0140c1b4 	movhi	r5,774
 3040ab4:	297e0804 	addi	r5,r5,-2016
 3040ab8:	01808004 	movi	r6,512
 3040abc:	304289c0 	call	304289c <Fat_FileRead>
 3040ac0:	e0bffe15 	stw	r2,-8(fp)
        if (!bSuccess)
 3040ac4:	e0bffe17 	ldw	r2,-8(fp)
 3040ac8:	1004c03a 	cmpne	r2,r2,zero
 3040acc:	1000031e 	bne	r2,zero,3040adc <waveplay_start+0xc4>
            DEMO_PRINTF("wave file read fail.\n");
 3040ad0:	0100c1b4 	movhi	r4,774
 3040ad4:	21270204 	addi	r4,r4,-25592
 3040ad8:	304be480 	call	304be48 <puts>
    }            
                
                        // check wave format
    if (bSuccess){      
 3040adc:	e0bffe17 	ldw	r2,-8(fp)
 3040ae0:	1005003a 	cmpeq	r2,r2,zero
 3040ae4:	1000601e 	bne	r2,zero,3040c68 <waveplay_start+0x250>
            int sample_rate =  Wave_GetSampleRate(gWavePlay.szBuf, WAVE_BUF_SIZE);                 
 3040ae8:	0100c1b4 	movhi	r4,774
 3040aec:	213e0804 	addi	r4,r4,-2016
 3040af0:	01408004 	movi	r5,512
 3040af4:	30466200 	call	3046620 <Wave_GetSampleRate>
 3040af8:	e0bffc15 	stw	r2,-16(fp)
            if (WAVE_IsWaveFile(gWavePlay.szBuf, WAVE_BUF_SIZE) &&
 3040afc:	0100c1b4 	movhi	r4,774
 3040b00:	213e0804 	addi	r4,r4,-2016
 3040b04:	01408004 	movi	r5,512
 3040b08:	30464980 	call	3046498 <WAVE_IsWaveFile>
 3040b0c:	1005003a 	cmpeq	r2,r2,zero
 3040b10:	1000541e 	bne	r2,zero,3040c64 <waveplay_start+0x24c>
 3040b14:	e13ffc17 	ldw	r4,-16(fp)
 3040b18:	30405640 	call	3040564 <is_supporrted_sample_rate>
 3040b1c:	1005003a 	cmpeq	r2,r2,zero
 3040b20:	1000501e 	bne	r2,zero,3040c64 <waveplay_start+0x24c>
 3040b24:	0100c1b4 	movhi	r4,774
 3040b28:	213e0804 	addi	r4,r4,-2016
 3040b2c:	01408004 	movi	r5,512
 3040b30:	30466c80 	call	30466c8 <Wave_GetChannelNum>
 3040b34:	10800098 	cmpnei	r2,r2,2
 3040b38:	10004a1e 	bne	r2,zero,3040c64 <waveplay_start+0x24c>
 3040b3c:	0100c1b4 	movhi	r4,774
 3040b40:	213e0804 	addi	r4,r4,-2016
 3040b44:	01408004 	movi	r5,512
 3040b48:	30467500 	call	3046750 <Wave_GetSampleBitNum>
 3040b4c:	10800418 	cmpnei	r2,r2,16
 3040b50:	1000441e 	bne	r2,zero,3040c64 <waveplay_start+0x24c>
                is_supporrted_sample_rate(sample_rate) &&
                Wave_GetChannelNum(gWavePlay.szBuf, WAVE_BUF_SIZE)==2 &&
                Wave_GetSampleBitNum(gWavePlay.szBuf, WAVE_BUF_SIZE)==16){
                    
                gWavePlay.uWavePlayPos = Wave_GetWaveOffset(gWavePlay.szBuf, WAVE_BUF_SIZE);
 3040b54:	0100c1b4 	movhi	r4,774
 3040b58:	213e0804 	addi	r4,r4,-2016
 3040b5c:	01408004 	movi	r5,512
 3040b60:	30468740 	call	3046874 <Wave_GetWaveOffset>
 3040b64:	1007883a 	mov	r3,r2
 3040b68:	0080c1b4 	movhi	r2,774
 3040b6c:	10be0704 	addi	r2,r2,-2020
 3040b70:	10c08315 	stw	r3,524(r2)
                gWavePlay.uWaveMaxPlayPos = gWavePlay.uWavePlayPos + Wave_GetDataByteSize(gWavePlay.szBuf, WAVE_BUF_SIZE);
 3040b74:	0080c1b4 	movhi	r2,774
 3040b78:	10be0704 	addi	r2,r2,-2020
 3040b7c:	14008317 	ldw	r16,524(r2)
 3040b80:	0100c1b4 	movhi	r4,774
 3040b84:	213e0804 	addi	r4,r4,-2016
 3040b88:	01408004 	movi	r5,512
 3040b8c:	30467d80 	call	30467d8 <Wave_GetDataByteSize>
 3040b90:	8087883a 	add	r3,r16,r2
 3040b94:	0080c1b4 	movhi	r2,774
 3040b98:	10be0704 	addi	r2,r2,-2020
 3040b9c:	10c08415 	stw	r3,528(r2)
                gWavePlay.uWaveReadPos = WAVE_BUF_SIZE;
 3040ba0:	00c0c1b4 	movhi	r3,774
 3040ba4:	18fe0704 	addi	r3,r3,-2020
 3040ba8:	00808004 	movi	r2,512
 3040bac:	18808215 	stw	r2,520(r3)

                // setup sample rate
                AUDIO_InterfaceActive(FALSE);
 3040bb0:	0009883a 	mov	r4,zero
 3040bb4:	3044adc0 	call	3044adc <AUDIO_InterfaceActive>
                if (sample_rate == 96000)
 3040bb8:	e0fffc17 	ldw	r3,-16(fp)
 3040bbc:	00800074 	movhi	r2,1
 3040bc0:	109dc004 	addi	r2,r2,30464
 3040bc4:	1880031e 	bne	r3,r2,3040bd4 <waveplay_start+0x1bc>
                    AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
 3040bc8:	01000144 	movi	r4,5
 3040bcc:	30450280 	call	3045028 <AUDIO_SetSampleRate>
 3040bd0:	00001c06 	br	3040c44 <waveplay_start+0x22c>
                else if (sample_rate == 48000)
 3040bd4:	e0fffc17 	ldw	r3,-16(fp)
 3040bd8:	00aee014 	movui	r2,48000
 3040bdc:	1880031e 	bne	r3,r2,3040bec <waveplay_start+0x1d4>
                    AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
 3040be0:	0009883a 	mov	r4,zero
 3040be4:	30450280 	call	3045028 <AUDIO_SetSampleRate>
 3040be8:	00001606 	br	3040c44 <waveplay_start+0x22c>
                else if (sample_rate == 44100)                    
 3040bec:	e0fffc17 	ldw	r3,-16(fp)
 3040bf0:	00ab1114 	movui	r2,44100
 3040bf4:	1880031e 	bne	r3,r2,3040c04 <waveplay_start+0x1ec>
                    AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
 3040bf8:	01000184 	movi	r4,6
 3040bfc:	30450280 	call	3045028 <AUDIO_SetSampleRate>
 3040c00:	00001006 	br	3040c44 <waveplay_start+0x22c>
                else if (sample_rate == 32000)                    
 3040c04:	e0bffc17 	ldw	r2,-16(fp)
 3040c08:	109f4018 	cmpnei	r2,r2,32000
 3040c0c:	1000031e 	bne	r2,zero,3040c1c <waveplay_start+0x204>
                    AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
 3040c10:	01000104 	movi	r4,4
 3040c14:	30450280 	call	3045028 <AUDIO_SetSampleRate>
 3040c18:	00000a06 	br	3040c44 <waveplay_start+0x22c>
                else if (sample_rate == 8000)                    
 3040c1c:	e0bffc17 	ldw	r2,-16(fp)
 3040c20:	1087d018 	cmpnei	r2,r2,8000
 3040c24:	1000031e 	bne	r2,zero,3040c34 <waveplay_start+0x21c>
                    AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
 3040c28:	010000c4 	movi	r4,3
 3040c2c:	30450280 	call	3045028 <AUDIO_SetSampleRate>
 3040c30:	00000406 	br	3040c44 <waveplay_start+0x22c>
                else    
                    DEMO_PRINTF("unsupported sample rate=%d\n", sample_rate);
 3040c34:	0100c1b4 	movhi	r4,774
 3040c38:	21270d04 	addi	r4,r4,-25548
 3040c3c:	e17ffc17 	ldw	r5,-16(fp)
 3040c40:	304bd0c0 	call	304bd0c <printf>
                AUDIO_FifoClear();
 3040c44:	30456840 	call	3045684 <AUDIO_FifoClear>
                AUDIO_InterfaceActive(TRUE);
 3040c48:	01000044 	movi	r4,1
 3040c4c:	3044adc0 	call	3044adc <AUDIO_InterfaceActive>
                
                  
                DEMO_PRINTF("sample rate=%d\n", sample_rate);    
 3040c50:	0100c1b4 	movhi	r4,774
 3040c54:	21271404 	addi	r4,r4,-25520
 3040c58:	e17ffc17 	ldw	r5,-16(fp)
 3040c5c:	304bd0c0 	call	304bd0c <printf>
 3040c60:	00000106 	br	3040c68 <waveplay_start+0x250>
            }else{
                bSuccess = FALSE;
 3040c64:	e03ffe15 	stw	zero,-8(fp)
            }    
    }            

    if (!bSuccess)
 3040c68:	e0bffe17 	ldw	r2,-8(fp)
 3040c6c:	1004c03a 	cmpne	r2,r2,zero
 3040c70:	1000011e 	bne	r2,zero,3040c78 <waveplay_start+0x260>
        waveplay_stop();    
 3040c74:	3040fcc0 	call	3040fcc <waveplay_stop>
    
    return bSuccess;
 3040c78:	e0bffe17 	ldw	r2,-8(fp)
}
 3040c7c:	e037883a 	mov	sp,fp
 3040c80:	dfc00217 	ldw	ra,8(sp)
 3040c84:	df000117 	ldw	fp,4(sp)
 3040c88:	dc000017 	ldw	r16,0(sp)
 3040c8c:	dec00304 	addi	sp,sp,12
 3040c90:	f800283a 	ret

03040c94 <waveplay_execute>:

bool waveplay_execute(bool *bEOF){
 3040c94:	defff004 	addi	sp,sp,-64
 3040c98:	dfc00f15 	stw	ra,60(sp)
 3040c9c:	df000e15 	stw	fp,56(sp)
 3040ca0:	df000e04 	addi	fp,sp,56
 3040ca4:	e13ffb15 	stw	r4,-20(fp)
    bool bSuccess = TRUE;
 3040ca8:	00800044 	movi	r2,1
 3040cac:	e0bffa15 	stw	r2,-24(fp)
    bool bDataReady = FALSE;
 3040cb0:	e03ff915 	stw	zero,-28(fp)
   
    
    // end of play data !
    if (gWavePlay.uWavePlayPos >= gWavePlay.uWaveMaxPlayPos){
 3040cb4:	0080c1b4 	movhi	r2,774
 3040cb8:	10be0704 	addi	r2,r2,-2020
 3040cbc:	10c08317 	ldw	r3,524(r2)
 3040cc0:	0080c1b4 	movhi	r2,774
 3040cc4:	10be0704 	addi	r2,r2,-2020
 3040cc8:	10808417 	ldw	r2,528(r2)
 3040ccc:	18800636 	bltu	r3,r2,3040ce8 <waveplay_execute+0x54>
        *bEOF = TRUE;
 3040cd0:	e0fffb17 	ldw	r3,-20(fp)
 3040cd4:	00800044 	movi	r2,1
 3040cd8:	18800015 	stw	r2,0(r3)
        return TRUE;
 3040cdc:	00800044 	movi	r2,1
 3040ce0:	e0bffe15 	stw	r2,-8(fp)
 3040ce4:	0000b306 	br	3040fb4 <waveplay_execute+0x320>
    }
    
    //
    *bEOF = FALSE;
 3040ce8:	e0bffb17 	ldw	r2,-20(fp)
 3040cec:	10000015 	stw	zero,0(r2)
    while (!bDataReady && bSuccess){
 3040cf0:	00003b06 	br	3040de0 <waveplay_execute+0x14c>
        if (gWavePlay.uWavePlayPos < gWavePlay.uWaveReadPos){
 3040cf4:	0080c1b4 	movhi	r2,774
 3040cf8:	10be0704 	addi	r2,r2,-2020
 3040cfc:	10c08317 	ldw	r3,524(r2)
 3040d00:	0080c1b4 	movhi	r2,774
 3040d04:	10be0704 	addi	r2,r2,-2020
 3040d08:	10808217 	ldw	r2,520(r2)
 3040d0c:	1880032e 	bgeu	r3,r2,3040d1c <waveplay_execute+0x88>
            bDataReady = TRUE;
 3040d10:	00800044 	movi	r2,1
 3040d14:	e0bff915 	stw	r2,-28(fp)
 3040d18:	00003106 	br	3040de0 <waveplay_execute+0x14c>
            //DEBUG_PRINTF("it is not neccessary to read data from sd-card\r\n");
        }else{
            int read_size = WAVE_BUF_SIZE;
 3040d1c:	00808004 	movi	r2,512
 3040d20:	e0bff815 	stw	r2,-32(fp)
            if (read_size > (gWavePlay.uWaveMaxPlayPos - gWavePlay.uWavePlayPos))
 3040d24:	e13ff817 	ldw	r4,-32(fp)
 3040d28:	0080c1b4 	movhi	r2,774
 3040d2c:	10be0704 	addi	r2,r2,-2020
 3040d30:	10c08417 	ldw	r3,528(r2)
 3040d34:	0080c1b4 	movhi	r2,774
 3040d38:	10be0704 	addi	r2,r2,-2020
 3040d3c:	10808317 	ldw	r2,524(r2)
 3040d40:	1885c83a 	sub	r2,r3,r2
 3040d44:	1100082e 	bgeu	r2,r4,3040d68 <waveplay_execute+0xd4>
                read_size = gWavePlay.uWaveMaxPlayPos - gWavePlay.uWavePlayPos;
 3040d48:	0080c1b4 	movhi	r2,774
 3040d4c:	10be0704 	addi	r2,r2,-2020
 3040d50:	10c08417 	ldw	r3,528(r2)
 3040d54:	0080c1b4 	movhi	r2,774
 3040d58:	10be0704 	addi	r2,r2,-2020
 3040d5c:	10808317 	ldw	r2,524(r2)
 3040d60:	1885c83a 	sub	r2,r3,r2
 3040d64:	e0bff815 	stw	r2,-32(fp)
            bSuccess = Fat_FileRead(gWavePlay.hFile, gWavePlay.szBuf, read_size);
 3040d68:	0080c1b4 	movhi	r2,774
 3040d6c:	10be0704 	addi	r2,r2,-2020
 3040d70:	11000017 	ldw	r4,0(r2)
 3040d74:	0140c1b4 	movhi	r5,774
 3040d78:	297e0804 	addi	r5,r5,-2016
 3040d7c:	e1bff817 	ldw	r6,-32(fp)
 3040d80:	304289c0 	call	304289c <Fat_FileRead>
 3040d84:	e0bffa15 	stw	r2,-24(fp)
            if (bSuccess)
 3040d88:	e0bffa17 	ldw	r2,-24(fp)
 3040d8c:	1005003a 	cmpeq	r2,r2,zero
 3040d90:	1000091e 	bne	r2,zero,3040db8 <waveplay_execute+0x124>
                gWavePlay.uWaveReadPos += read_size;
 3040d94:	0080c1b4 	movhi	r2,774
 3040d98:	10be0704 	addi	r2,r2,-2020
 3040d9c:	10c08217 	ldw	r3,520(r2)
 3040da0:	e0bff817 	ldw	r2,-32(fp)
 3040da4:	1887883a 	add	r3,r3,r2
 3040da8:	0080c1b4 	movhi	r2,774
 3040dac:	10be0704 	addi	r2,r2,-2020
 3040db0:	10c08215 	stw	r3,520(r2)
 3040db4:	00000a06 	br	3040de0 <waveplay_execute+0x14c>
            else    
                DEMO_PRINTF("[APP]sdcard read fail, read_pos:%ld, read_size:%d, max_play_pos:%ld !\r\n", gWavePlay.uWaveReadPos, read_size, gWavePlay.uWaveMaxPlayPos);
 3040db8:	0080c1b4 	movhi	r2,774
 3040dbc:	10be0704 	addi	r2,r2,-2020
 3040dc0:	11408217 	ldw	r5,520(r2)
 3040dc4:	0080c1b4 	movhi	r2,774
 3040dc8:	10be0704 	addi	r2,r2,-2020
 3040dcc:	11c08417 	ldw	r7,528(r2)
 3040dd0:	0100c1b4 	movhi	r4,774
 3040dd4:	21271804 	addi	r4,r4,-25504
 3040dd8:	e1bff817 	ldw	r6,-32(fp)
 3040ddc:	304bd0c0 	call	304bd0c <printf>
 3040de0:	e0bff917 	ldw	r2,-28(fp)
 3040de4:	1004c03a 	cmpne	r2,r2,zero
 3040de8:	1000031e 	bne	r2,zero,3040df8 <waveplay_execute+0x164>
 3040dec:	e0bffa17 	ldw	r2,-24(fp)
 3040df0:	1004c03a 	cmpne	r2,r2,zero
 3040df4:	103fbf1e 	bne	r2,zero,3040cf4 <waveplay_execute+0x60>
        }    
    } // while
    
    //
    if (bDataReady && bSuccess){
 3040df8:	e0bff917 	ldw	r2,-28(fp)
 3040dfc:	1005003a 	cmpeq	r2,r2,zero
 3040e00:	10006a1e 	bne	r2,zero,3040fac <waveplay_execute+0x318>
 3040e04:	e0bffa17 	ldw	r2,-24(fp)
 3040e08:	1005003a 	cmpeq	r2,r2,zero
 3040e0c:	1000671e 	bne	r2,zero,3040fac <waveplay_execute+0x318>
#ifdef DISPLAY_WAVE_POWER
        alt_u32 power_sum = 0, power;
 3040e10:	e03ff715 	stw	zero,-36(fp)
#endif        
        int play_size; 
        short *pSample = (short *)(gWavePlay.szBuf + gWavePlay.uWavePlayPos%WAVE_BUF_SIZE);
 3040e14:	0080c1b4 	movhi	r2,774
 3040e18:	10be0704 	addi	r2,r2,-2020
 3040e1c:	10808317 	ldw	r2,524(r2)
 3040e20:	10807fcc 	andi	r2,r2,511
 3040e24:	1007883a 	mov	r3,r2
 3040e28:	0080c1b4 	movhi	r2,774
 3040e2c:	10be0804 	addi	r2,r2,-2016
 3040e30:	1885883a 	add	r2,r3,r2
 3040e34:	e0bff415 	stw	r2,-48(fp)
        int i = 0;
 3040e38:	e03ff315 	stw	zero,-52(fp)
        play_size = gWavePlay.uWaveReadPos - gWavePlay.uWavePlayPos;
 3040e3c:	0080c1b4 	movhi	r2,774
 3040e40:	10be0704 	addi	r2,r2,-2020
 3040e44:	10c08217 	ldw	r3,520(r2)
 3040e48:	0080c1b4 	movhi	r2,774
 3040e4c:	10be0704 	addi	r2,r2,-2020
 3040e50:	10808317 	ldw	r2,524(r2)
 3040e54:	1885c83a 	sub	r2,r3,r2
 3040e58:	e0bff515 	stw	r2,-44(fp)
        play_size = play_size/4*4;
 3040e5c:	e0bff517 	ldw	r2,-44(fp)
 3040e60:	e0bfff15 	stw	r2,-4(fp)
 3040e64:	e0ffff17 	ldw	r3,-4(fp)
 3040e68:	1804403a 	cmpge	r2,r3,zero
 3040e6c:	1000031e 	bne	r2,zero,3040e7c <waveplay_execute+0x1e8>
 3040e70:	e13fff17 	ldw	r4,-4(fp)
 3040e74:	210000c4 	addi	r4,r4,3
 3040e78:	e13fff15 	stw	r4,-4(fp)
 3040e7c:	e0ffff17 	ldw	r3,-4(fp)
 3040e80:	1805d0ba 	srai	r2,r3,2
 3040e84:	1085883a 	add	r2,r2,r2
 3040e88:	1085883a 	add	r2,r2,r2
 3040e8c:	e0bff515 	stw	r2,-44(fp)
        while(i < play_size){
 3040e90:	00003b06 	br	3040f80 <waveplay_execute+0x2ec>
            if(AUDIO_DacFifoNotFull()){ // if audio ready (not full)
 3040e94:	30455600 	call	3045560 <AUDIO_DacFifoNotFull>
 3040e98:	1005003a 	cmpeq	r2,r2,zero
 3040e9c:	1000381e 	bne	r2,zero,3040f80 <waveplay_execute+0x2ec>
                short ch_right, ch_left;
                ch_left = *pSample++;
 3040ea0:	e0bff417 	ldw	r2,-48(fp)
 3040ea4:	1080000b 	ldhu	r2,0(r2)
 3040ea8:	e0bff20d 	sth	r2,-56(fp)
 3040eac:	e0bff417 	ldw	r2,-48(fp)
 3040eb0:	10800084 	addi	r2,r2,2
 3040eb4:	e0bff415 	stw	r2,-48(fp)
                ch_right = *pSample++;
 3040eb8:	e0bff417 	ldw	r2,-48(fp)
 3040ebc:	1080000b 	ldhu	r2,0(r2)
 3040ec0:	e0bff28d 	sth	r2,-54(fp)
 3040ec4:	e0bff417 	ldw	r2,-48(fp)
 3040ec8:	10800084 	addi	r2,r2,2
 3040ecc:	e0bff415 	stw	r2,-48(fp)
                
#ifdef DISPLAY_WAVE_POWER  // indicate power by avg 64 sample
                power = abs(ch_left) + abs(ch_right);
 3040ed0:	e0bff20f 	ldh	r2,-56(fp)
 3040ed4:	e0bffd15 	stw	r2,-12(fp)
 3040ed8:	e13ffd17 	ldw	r4,-12(fp)
 3040edc:	2004403a 	cmpge	r2,r4,zero
 3040ee0:	1000031e 	bne	r2,zero,3040ef0 <waveplay_execute+0x25c>
 3040ee4:	e0bffd17 	ldw	r2,-12(fp)
 3040ee8:	0085c83a 	sub	r2,zero,r2
 3040eec:	e0bffd15 	stw	r2,-12(fp)
 3040ef0:	e0bff28f 	ldh	r2,-54(fp)
 3040ef4:	e0bffc15 	stw	r2,-16(fp)
 3040ef8:	e0fffc17 	ldw	r3,-16(fp)
 3040efc:	1804403a 	cmpge	r2,r3,zero
 3040f00:	1000031e 	bne	r2,zero,3040f10 <waveplay_execute+0x27c>
 3040f04:	e13ffc17 	ldw	r4,-16(fp)
 3040f08:	0109c83a 	sub	r4,zero,r4
 3040f0c:	e13ffc15 	stw	r4,-16(fp)
 3040f10:	e0fffd17 	ldw	r3,-12(fp)
 3040f14:	e13ffc17 	ldw	r4,-16(fp)
 3040f18:	1905883a 	add	r2,r3,r4
 3040f1c:	e0bff615 	stw	r2,-40(fp)
                power_sum += power;     
 3040f20:	e0fff717 	ldw	r3,-36(fp)
 3040f24:	e0bff617 	ldw	r2,-40(fp)
 3040f28:	1885883a 	add	r2,r3,r2
 3040f2c:	e0bff715 	stw	r2,-36(fp)
                if ((i & 0x01F) == 0 && i != 0){
 3040f30:	e0bff317 	ldw	r2,-52(fp)
 3040f34:	108007cc 	andi	r2,r2,31
 3040f38:	1004c03a 	cmpne	r2,r2,zero
 3040f3c:	10000a1e 	bne	r2,zero,3040f68 <waveplay_execute+0x2d4>
 3040f40:	e0bff317 	ldw	r2,-52(fp)
 3040f44:	1005003a 	cmpeq	r2,r2,zero
 3040f48:	1000071e 	bne	r2,zero,3040f68 <waveplay_execute+0x2d4>
                    power = power_sum >> (6+7);  // 6: divide 64,  7: power scale
 3040f4c:	e0bff717 	ldw	r2,-36(fp)
 3040f50:	1004d37a 	srli	r2,r2,13
 3040f54:	e0bff615 	stw	r2,-40(fp)
                    led_display_count(power); 
 3040f58:	e0bff617 	ldw	r2,-40(fp)
 3040f5c:	11003fcc 	andi	r4,r2,255
 3040f60:	30404900 	call	3040490 <led_display_count>
                    power_sum = 0;
 3040f64:	e03ff715 	stw	zero,-36(fp)
                }                        
#endif                

                AUDIO_DacFifoSetData(ch_left, ch_right); // play wave
 3040f68:	e13ff20f 	ldh	r4,-56(fp)
 3040f6c:	e17ff28f 	ldh	r5,-54(fp)
 3040f70:	30455b40 	call	30455b4 <AUDIO_DacFifoSetData>
                i+=4;
 3040f74:	e0bff317 	ldw	r2,-52(fp)
 3040f78:	10800104 	addi	r2,r2,4
 3040f7c:	e0bff315 	stw	r2,-52(fp)
 3040f80:	e0fff317 	ldw	r3,-52(fp)
 3040f84:	e0bff517 	ldw	r2,-44(fp)
 3040f88:	18bfc216 	blt	r3,r2,3040e94 <waveplay_execute+0x200>
            }
        } // while
        gWavePlay.uWavePlayPos += play_size;
 3040f8c:	0080c1b4 	movhi	r2,774
 3040f90:	10be0704 	addi	r2,r2,-2020
 3040f94:	10c08317 	ldw	r3,524(r2)
 3040f98:	e0bff517 	ldw	r2,-44(fp)
 3040f9c:	1887883a 	add	r3,r3,r2
 3040fa0:	0080c1b4 	movhi	r2,774
 3040fa4:	10be0704 	addi	r2,r2,-2020
 3040fa8:	10c08315 	stw	r3,524(r2)
                    
    } //
    
    return bSuccess;
 3040fac:	e0bffa17 	ldw	r2,-24(fp)
 3040fb0:	e0bffe15 	stw	r2,-8(fp)
 3040fb4:	e0bffe17 	ldw	r2,-8(fp)
}
 3040fb8:	e037883a 	mov	sp,fp
 3040fbc:	dfc00117 	ldw	ra,4(sp)
 3040fc0:	df000017 	ldw	fp,0(sp)
 3040fc4:	dec00204 	addi	sp,sp,8
 3040fc8:	f800283a 	ret

03040fcc <waveplay_stop>:

void waveplay_stop(void){
 3040fcc:	deffff04 	addi	sp,sp,-4
 3040fd0:	df000015 	stw	fp,0(sp)
 3040fd4:	d839883a 	mov	fp,sp
    /*if (gWavePlay.hFile.IsOpened){
        Fat_FileClose(&gWavePlay.hFile);
    }*/
}
 3040fd8:	e037883a 	mov	sp,fp
 3040fdc:	df000017 	ldw	fp,0(sp)
 3040fe0:	dec00104 	addi	sp,sp,4
 3040fe4:	f800283a 	ret

03040fe8 <handle_key>:

/////////////////////////////////////////////////////////////////
/////////// Routing for button handle ///////////////////////////
/////////////////////////////////////////////////////////////////
// return true if next-song 
void handle_key(bool *pNexSongPressed){
 3040fe8:	defff704 	addi	sp,sp,-36
 3040fec:	dfc00815 	stw	ra,32(sp)
 3040ff0:	df000715 	stw	fp,28(sp)
 3040ff4:	df000704 	addi	fp,sp,28
 3040ff8:	e13fff15 	stw	r4,-4(fp)
    static bool bFirsTime2SetupVol = TRUE;
    alt_u8 button;
    bool bNextSong, bVolUp, bVolDown;
    int nHwVol;


#ifdef SUPPORT_PLAY_MODE
    bool bRepeat;
    bRepeat = (IORD_ALTERA_AVALON_PIO_DATA(SW_BASE) & 0x01)?TRUE:FALSE;
 3040ffc:	00804034 	movhi	r2,256
 3041000:	10801c04 	addi	r2,r2,112
 3041004:	10800037 	ldwio	r2,0(r2)
 3041008:	1080004c 	andi	r2,r2,1
 304100c:	e0bff915 	stw	r2,-28(fp)
    if (bRepeat ^ gWavePlay.bRepeatMode){
 3041010:	0080c1b4 	movhi	r2,774
 3041014:	10be0704 	addi	r2,r2,-2020
 3041018:	10c08e17 	ldw	r3,568(r2)
 304101c:	e0bff917 	ldw	r2,-28(fp)
 3041020:	18800526 	beq	r3,r2,3041038 <handle_key+0x50>
        gWavePlay.bRepeatMode = bRepeat;
 3041024:	00c0c1b4 	movhi	r3,774
 3041028:	18fe0704 	addi	r3,r3,-2020
 304102c:	e0bff917 	ldw	r2,-28(fp)
 3041030:	18808e15 	stw	r2,568(r3)
        update_status();
 3041034:	30403140 	call	3040314 <update_status>
    }                    
#endif        
        

    *pNexSongPressed = FALSE;
 3041038:	e0bfff17 	ldw	r2,-4(fp)
 304103c:	10000015 	stw	zero,0(r2)
#ifdef ENABLE_DEBOUNCE
    static alt_u32 next_active_time = 0;
    if (alt_nticks() < next_active_time ){
        return;
    }
    next_active_time = alt_nticks();
#endif   
    
    button = IORD_ALTERA_AVALON_PIO_DATA(KEY_BASE);
 3041040:	00804034 	movhi	r2,256
 3041044:	10801804 	addi	r2,r2,96
 3041048:	10800037 	ldwio	r2,0(r2)
 304104c:	e0bffe05 	stb	r2,-8(fp)
    button = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
 3041050:	00804034 	movhi	r2,256
 3041054:	10801b04 	addi	r2,r2,108
 3041058:	10800037 	ldwio	r2,0(r2)
 304105c:	e0bffe05 	stb	r2,-8(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0); // clear flag 
 3041060:	00804034 	movhi	r2,256
 3041064:	10801b04 	addi	r2,r2,108
 3041068:	10000035 	stwio	zero,0(r2)
    bNextSong = (button & 0x08)?TRUE:FALSE;
 304106c:	e0bffe03 	ldbu	r2,-8(fp)
 3041070:	1080020c 	andi	r2,r2,8
 3041074:	1004c03a 	cmpne	r2,r2,zero
 3041078:	e0bffd15 	stw	r2,-12(fp)
    bVolUp = (button & 0x04)?TRUE:FALSE;
 304107c:	e0bffe03 	ldbu	r2,-8(fp)
 3041080:	1080010c 	andi	r2,r2,4
 3041084:	1004c03a 	cmpne	r2,r2,zero
 3041088:	e0bffc15 	stw	r2,-16(fp)
    bVolDown = (button & 0x02)?TRUE:FALSE;
 304108c:	e0bffe03 	ldbu	r2,-8(fp)
 3041090:	1080008c 	andi	r2,r2,2
 3041094:	1004c03a 	cmpne	r2,r2,zero
 3041098:	e0bffb15 	stw	r2,-20(fp)
    
    
    
    // adjust volument    
    if ((bVolUp || bVolDown || bFirsTime2SetupVol) && !bMuteSwitch){
 304109c:	e0bffc17 	ldw	r2,-16(fp)
 30410a0:	1004c03a 	cmpne	r2,r2,zero
 30410a4:	1000061e 	bne	r2,zero,30410c0 <handle_key+0xd8>
 30410a8:	e0bffb17 	ldw	r2,-20(fp)
 30410ac:	1004c03a 	cmpne	r2,r2,zero
 30410b0:	1000031e 	bne	r2,zero,30410c0 <handle_key+0xd8>
 30410b4:	d0a00117 	ldw	r2,-32764(gp)
 30410b8:	1005003a 	cmpeq	r2,r2,zero
 30410bc:	10003a1e 	bne	r2,zero,30411a8 <handle_key+0x1c0>
 30410c0:	d0a77717 	ldw	r2,-25124(gp)
 30410c4:	1004c03a 	cmpne	r2,r2,zero
 30410c8:	1000371e 	bne	r2,zero,30411a8 <handle_key+0x1c0>
        nHwVol = gWavePlay.nVolume;    
 30410cc:	0080c1b4 	movhi	r2,774
 30410d0:	10be0704 	addi	r2,r2,-2020
 30410d4:	10808d03 	ldbu	r2,564(r2)
 30410d8:	10803fcc 	andi	r2,r2,255
 30410dc:	e0bffa15 	stw	r2,-24(fp)
        if (bFirsTime2SetupVol){
 30410e0:	d0a00117 	ldw	r2,-32764(gp)
 30410e4:	1005003a 	cmpeq	r2,r2,zero
 30410e8:	1000081e 	bne	r2,zero,304110c <handle_key+0x124>
            bFirsTime2SetupVol = FALSE;
 30410ec:	d0200115 	stw	zero,-32764(gp)
            DEMO_PRINTF("current volume %d(%d-%d)\r\n", nHwVol, HW_MIN_VOL, HW_MAX_VOL);
 30410f0:	0100c1b4 	movhi	r4,774
 30410f4:	21272a04 	addi	r4,r4,-25432
 30410f8:	e17ffa17 	ldw	r5,-24(fp)
 30410fc:	01800784 	movi	r6,30
 3041100:	01c02584 	movi	r7,150
 3041104:	304bd0c0 	call	304bd0c <printf>
 3041108:	00001c06 	br	304117c <handle_key+0x194>
        }else if (bVolUp){
 304110c:	e0bffc17 	ldw	r2,-16(fp)
 3041110:	1005003a 	cmpeq	r2,r2,zero
 3041114:	10000d1e 	bne	r2,zero,304114c <handle_key+0x164>
            if (nHwVol < HW_MAX_VOL) 
 3041118:	e0bffa17 	ldw	r2,-24(fp)
 304111c:	10802588 	cmpgei	r2,r2,150
 3041120:	1000031e 	bne	r2,zero,3041130 <handle_key+0x148>
                nHwVol++;
 3041124:	e0bffa17 	ldw	r2,-24(fp)
 3041128:	10800044 	addi	r2,r2,1
 304112c:	e0bffa15 	stw	r2,-24(fp)
            DEMO_PRINTF("volume up %d(%d-%d)\r\n", nHwVol, HW_MIN_VOL, HW_MAX_VOL);
 3041130:	0100c1b4 	movhi	r4,774
 3041134:	21273104 	addi	r4,r4,-25404
 3041138:	e17ffa17 	ldw	r5,-24(fp)
 304113c:	01800784 	movi	r6,30
 3041140:	01c02584 	movi	r7,150
 3041144:	304bd0c0 	call	304bd0c <printf>
 3041148:	00000c06 	br	304117c <handle_key+0x194>
        }else{
            if (nHwVol > HW_MIN_VOL)
 304114c:	e0bffa17 	ldw	r2,-24(fp)
 3041150:	108007d0 	cmplti	r2,r2,31
 3041154:	1000031e 	bne	r2,zero,3041164 <handle_key+0x17c>
                nHwVol--;
 3041158:	e0bffa17 	ldw	r2,-24(fp)
 304115c:	10bfffc4 	addi	r2,r2,-1
 3041160:	e0bffa15 	stw	r2,-24(fp)
            DEMO_PRINTF("volume down %d(%d-%d)\r\n", nHwVol, HW_MIN_VOL, HW_MAX_VOL);
 3041164:	0100c1b4 	movhi	r4,774
 3041168:	21273704 	addi	r4,r4,-25380
 304116c:	e17ffa17 	ldw	r5,-24(fp)
 3041170:	01800784 	movi	r6,30
 3041174:	01c02584 	movi	r7,150
 3041178:	304bd0c0 	call	304bd0c <printf>
        }                    
        AUDIO_SetLineOutVol(nHwVol, nHwVol); 
 304117c:	e0bffa17 	ldw	r2,-24(fp)
 3041180:	113fffcc 	andi	r4,r2,65535
 3041184:	e0bffa17 	ldw	r2,-24(fp)
 3041188:	117fffcc 	andi	r5,r2,65535
 304118c:	30452300 	call	3045230 <AUDIO_SetLineOutVol>
        gWavePlay.nVolume = nHwVol;
 3041190:	e0bffa17 	ldw	r2,-24(fp)
 3041194:	1007883a 	mov	r3,r2
 3041198:	0080c1b4 	movhi	r2,774
 304119c:	10be0704 	addi	r2,r2,-2020
 30411a0:	10c08d05 	stb	r3,564(r2)
        update_status();
 30411a4:	30403140 	call	3040314 <update_status>
    }
 
    
    if (bNextSong){
 30411a8:	e0bffd17 	ldw	r2,-12(fp)
 30411ac:	1005003a 	cmpeq	r2,r2,zero
 30411b0:	1000061e 	bne	r2,zero,30411cc <handle_key+0x1e4>
        *pNexSongPressed = TRUE;
 30411b4:	e0ffff17 	ldw	r3,-4(fp)
 30411b8:	00800044 	movi	r2,1
 30411bc:	18800015 	stw	r2,0(r3)
        DEMO_PRINTF("Play Next Song\r\n");
 30411c0:	0100c1b4 	movhi	r4,774
 30411c4:	21273d04 	addi	r4,r4,-25356
 30411c8:	304be480 	call	304be48 <puts>
    }        
#ifdef ENABLE_DEBOUNCE        
    if (bNextSong || bVolUp || bVolDown){
        next_active_time +=  alt_ticks_per_second()/5;  // debounce
    }        
#endif    
    
}
 30411cc:	e037883a 	mov	sp,fp
 30411d0:	dfc00117 	ldw	ra,4(sp)
 30411d4:	df000017 	ldw	fp,0(sp)
 30411d8:	dec00204 	addi	sp,sp,8
 30411dc:	f800283a 	ret

030411e0 <IRDA_init>:

/////////////////////////////////////////////////////////////////
/////////// Routing for IrDA handle /////////////////////////////
/////////////////////////////////////////////////////////////////

//IRDA  initial
void IRDA_init()
{
 30411e0:	defffd04 	addi	sp,sp,-12
 30411e4:	dfc00215 	stw	ra,8(sp)
 30411e8:	df000115 	stw	fp,4(sp)
 30411ec:	df000104 	addi	fp,sp,4
    alt_irq_register(TERASIC_IRDA_0_IRQ,0,handle_IrDA);            //irda irq register
 30411f0:	010001c4 	movi	r4,7
 30411f4:	000b883a 	mov	r5,zero
 30411f8:	0180c134 	movhi	r6,772
 30411fc:	31848d04 	addi	r6,r6,4660
 3041200:	30534280 	call	3053428 <alt_irq_register>
 3041204:	008001c4 	movi	r2,7
 3041208:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 304120c:	e0bfff17 	ldw	r2,-4(fp)
 3041210:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(TERASIC_IRDA_0_IRQ);
    IOWR(TERASIC_IRDA_0_BASE,0,0);
 3041214:	0080c234 	movhi	r2,776
 3041218:	10841e04 	addi	r2,r2,4216
 304121c:	10000035 	stwio	zero,0(r2)
}
 3041220:	e037883a 	mov	sp,fp
 3041224:	dfc00117 	ldw	ra,4(sp)
 3041228:	df000017 	ldw	fp,0(sp)
 304122c:	dec00204 	addi	sp,sp,8
 3041230:	f800283a 	ret

03041234 <handle_IrDA>:

// return true if next-song
void handle_IrDA(bool * p,alt_u32 id){
 3041234:	defff304 	addi	sp,sp,-52
 3041238:	dfc00c15 	stw	ra,48(sp)
 304123c:	df000b15 	stw	fp,44(sp)
 3041240:	df000b04 	addi	fp,sp,44
 3041244:	e13ffe15 	stw	r4,-8(fp)
 3041248:	e17fff15 	stw	r5,-4(fp)
    static bool bFirsTime2SetupVol = TRUE;
    alt_u32 button;
    bool bLastSong,bNextSong, bVolUp, bVolDown,bMute,bPlay;
    int nHwVol;


#ifdef SUPPORT_PLAY_MODE
    bool bRepeat;
    bRepeat = (IORD_ALTERA_AVALON_PIO_DATA(SW_BASE) & 0x01)?TRUE:FALSE;
 304124c:	00804034 	movhi	r2,256
 3041250:	10801c04 	addi	r2,r2,112
 3041254:	10800037 	ldwio	r2,0(r2)
 3041258:	1080004c 	andi	r2,r2,1
 304125c:	e0bff515 	stw	r2,-44(fp)
    if (bRepeat ^ gWavePlay.bRepeatMode){
 3041260:	0080c1b4 	movhi	r2,774
 3041264:	10be0704 	addi	r2,r2,-2020
 3041268:	10c08e17 	ldw	r3,568(r2)
 304126c:	e0bff517 	ldw	r2,-44(fp)
 3041270:	18800526 	beq	r3,r2,3041288 <handle_IrDA+0x54>
        gWavePlay.bRepeatMode = bRepeat;
 3041274:	00c0c1b4 	movhi	r3,774
 3041278:	18fe0704 	addi	r3,r3,-2020
 304127c:	e0bff517 	ldw	r2,-44(fp)
 3041280:	18808e15 	stw	r2,568(r3)
        update_status();
 3041284:	30403140 	call	3040314 <update_status>
    }                    
#endif        
        
#ifdef ENABLE_DEBOUNCE
    static alt_u32 next_active_time = 0;
    if (alt_nticks() < next_active_time ){
        return;
    }
    next_active_time = alt_nticks();
#endif   
   
    button = IORD(TERASIC_IRDA_0_BASE,0);
 3041288:	0080c234 	movhi	r2,776
 304128c:	10841e04 	addi	r2,r2,4216
 3041290:	10800037 	ldwio	r2,0(r2)
 3041294:	e0bffd15 	stw	r2,-12(fp)
    button <<= 8;
 3041298:	e0bffd17 	ldw	r2,-12(fp)
 304129c:	1004923a 	slli	r2,r2,8
 30412a0:	e0bffd15 	stw	r2,-12(fp)
    button >>= 24;
 30412a4:	e0bffd17 	ldw	r2,-12(fp)
 30412a8:	1004d63a 	srli	r2,r2,24
 30412ac:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(TERASIC_IRDA_0_BASE, 0); // clear flag 
 30412b0:	0080c234 	movhi	r2,776
 30412b4:	10842104 	addi	r2,r2,4228
 30412b8:	10000035 	stwio	zero,0(r2)
    
    IOWR(TERASIC_IRDA_0_BASE,0,0);
 30412bc:	0080c234 	movhi	r2,776
 30412c0:	10841e04 	addi	r2,r2,4216
 30412c4:	10000035 	stwio	zero,0(r2)
    bLastSong = (button == 0x1a) ? TRUE : FALSE;
 30412c8:	e0bffd17 	ldw	r2,-12(fp)
 30412cc:	108006a0 	cmpeqi	r2,r2,26
 30412d0:	e0bffc15 	stw	r2,-16(fp)
    bNextSong = (button == 0x1e) ? TRUE : FALSE;
 30412d4:	e0bffd17 	ldw	r2,-12(fp)
 30412d8:	108007a0 	cmpeqi	r2,r2,30
 30412dc:	e0bffb15 	stw	r2,-20(fp)
    bVolUp    = (button == 0x1b) ? TRUE : FALSE;
 30412e0:	e0bffd17 	ldw	r2,-12(fp)
 30412e4:	108006e0 	cmpeqi	r2,r2,27
 30412e8:	e0bffa15 	stw	r2,-24(fp)
    bVolDown  = (button == 0x1f) ? TRUE : FALSE;
 30412ec:	e0bffd17 	ldw	r2,-12(fp)
 30412f0:	108007e0 	cmpeqi	r2,r2,31
 30412f4:	e0bff915 	stw	r2,-28(fp)
    bMute     = (button == 0x0c) ? TRUE : FALSE;
 30412f8:	e0bffd17 	ldw	r2,-12(fp)
 30412fc:	10800320 	cmpeqi	r2,r2,12
 3041300:	e0bff815 	stw	r2,-32(fp)
    bPlay     = (button == 0x16) ? TRUE : FALSE;
 3041304:	e0bffd17 	ldw	r2,-12(fp)
 3041308:	108005a0 	cmpeqi	r2,r2,22
 304130c:	e0bff715 	stw	r2,-36(fp)
   
    
    // adjust volument    
    if ((bVolUp || bVolDown || bFirsTime2SetupVol) && !bMuteSwitch){
 3041310:	e0bffa17 	ldw	r2,-24(fp)
 3041314:	1004c03a 	cmpne	r2,r2,zero
 3041318:	1000061e 	bne	r2,zero,3041334 <handle_IrDA+0x100>
 304131c:	e0bff917 	ldw	r2,-28(fp)
 3041320:	1004c03a 	cmpne	r2,r2,zero
 3041324:	1000031e 	bne	r2,zero,3041334 <handle_IrDA+0x100>
 3041328:	d0a00217 	ldw	r2,-32760(gp)
 304132c:	1005003a 	cmpeq	r2,r2,zero
 3041330:	10003a1e 	bne	r2,zero,304141c <handle_IrDA+0x1e8>
 3041334:	d0a77717 	ldw	r2,-25124(gp)
 3041338:	1004c03a 	cmpne	r2,r2,zero
 304133c:	1000371e 	bne	r2,zero,304141c <handle_IrDA+0x1e8>
        nHwVol = gWavePlay.nVolume;    
 3041340:	0080c1b4 	movhi	r2,774
 3041344:	10be0704 	addi	r2,r2,-2020
 3041348:	10808d03 	ldbu	r2,564(r2)
 304134c:	10803fcc 	andi	r2,r2,255
 3041350:	e0bff615 	stw	r2,-40(fp)
        if (bFirsTime2SetupVol){
 3041354:	d0a00217 	ldw	r2,-32760(gp)
 3041358:	1005003a 	cmpeq	r2,r2,zero
 304135c:	1000081e 	bne	r2,zero,3041380 <handle_IrDA+0x14c>
            bFirsTime2SetupVol = FALSE;
 3041360:	d0200215 	stw	zero,-32760(gp)
            DEMO_PRINTF("current volume %d(%d-%d)\r\n", nHwVol, HW_MIN_VOL, HW_MAX_VOL);
 3041364:	0100c1b4 	movhi	r4,774
 3041368:	21272a04 	addi	r4,r4,-25432
 304136c:	e17ff617 	ldw	r5,-40(fp)
 3041370:	01800784 	movi	r6,30
 3041374:	01c02584 	movi	r7,150
 3041378:	304bd0c0 	call	304bd0c <printf>
 304137c:	00001c06 	br	30413f0 <handle_IrDA+0x1bc>
        }else if (bVolUp){
 3041380:	e0bffa17 	ldw	r2,-24(fp)
 3041384:	1005003a 	cmpeq	r2,r2,zero
 3041388:	10000d1e 	bne	r2,zero,30413c0 <handle_IrDA+0x18c>
            if (nHwVol < HW_MAX_VOL) 
 304138c:	e0bff617 	ldw	r2,-40(fp)
 3041390:	10802588 	cmpgei	r2,r2,150
 3041394:	1000031e 	bne	r2,zero,30413a4 <handle_IrDA+0x170>
                nHwVol++;
 3041398:	e0bff617 	ldw	r2,-40(fp)
 304139c:	10800044 	addi	r2,r2,1
 30413a0:	e0bff615 	stw	r2,-40(fp)
            DEMO_PRINTF("volume up %d(%d-%d)\r\n", nHwVol, HW_MIN_VOL, HW_MAX_VOL);
 30413a4:	0100c1b4 	movhi	r4,774
 30413a8:	21273104 	addi	r4,r4,-25404
 30413ac:	e17ff617 	ldw	r5,-40(fp)
 30413b0:	01800784 	movi	r6,30
 30413b4:	01c02584 	movi	r7,150
 30413b8:	304bd0c0 	call	304bd0c <printf>
 30413bc:	00000c06 	br	30413f0 <handle_IrDA+0x1bc>
        }else{
            if (nHwVol > HW_MIN_VOL)
 30413c0:	e0bff617 	ldw	r2,-40(fp)
 30413c4:	108007d0 	cmplti	r2,r2,31
 30413c8:	1000031e 	bne	r2,zero,30413d8 <handle_IrDA+0x1a4>
                nHwVol--;
 30413cc:	e0bff617 	ldw	r2,-40(fp)
 30413d0:	10bfffc4 	addi	r2,r2,-1
 30413d4:	e0bff615 	stw	r2,-40(fp)
            DEMO_PRINTF("volume down %d(%d-%d)\r\n", nHwVol, HW_MIN_VOL, HW_MAX_VOL);
 30413d8:	0100c1b4 	movhi	r4,774
 30413dc:	21273704 	addi	r4,r4,-25380
 30413e0:	e17ff617 	ldw	r5,-40(fp)
 30413e4:	01800784 	movi	r6,30
 30413e8:	01c02584 	movi	r7,150
 30413ec:	304bd0c0 	call	304bd0c <printf>
        }                    
        AUDIO_SetLineOutVol(nHwVol, nHwVol); 
 30413f0:	e0bff617 	ldw	r2,-40(fp)
 30413f4:	113fffcc 	andi	r4,r2,65535
 30413f8:	e0bff617 	ldw	r2,-40(fp)
 30413fc:	117fffcc 	andi	r5,r2,65535
 3041400:	30452300 	call	3045230 <AUDIO_SetLineOutVol>
        gWavePlay.nVolume = nHwVol;
 3041404:	e0bff617 	ldw	r2,-40(fp)
 3041408:	1007883a 	mov	r3,r2
 304140c:	0080c1b4 	movhi	r2,774
 3041410:	10be0704 	addi	r2,r2,-2020
 3041414:	10c08d05 	stb	r3,564(r2)
        update_status();
 3041418:	30403140 	call	3040314 <update_status>
    }
 
    if (bLastSong){
 304141c:	e0bffc17 	ldw	r2,-16(fp)
 3041420:	1005003a 	cmpeq	r2,r2,zero
 3041424:	1000051e 	bne	r2,zero,304143c <handle_IrDA+0x208>
        bLastSwitch = TRUE ;
 3041428:	00800044 	movi	r2,1
 304142c:	d0a77515 	stw	r2,-25132(gp)
        DEMO_PRINTF("Play Last Song\r\n");
 3041430:	0100c1b4 	movhi	r4,774
 3041434:	21274104 	addi	r4,r4,-25340
 3041438:	304be480 	call	304be48 <puts>
    } 
    if (bNextSong){
 304143c:	e0bffb17 	ldw	r2,-20(fp)
 3041440:	1005003a 	cmpeq	r2,r2,zero
 3041444:	1000051e 	bne	r2,zero,304145c <handle_IrDA+0x228>
        bNextSwitch = TRUE ;
 3041448:	00800044 	movi	r2,1
 304144c:	d0a77615 	stw	r2,-25128(gp)
        DEMO_PRINTF("Play Next Song\r\n");
 3041450:	0100c1b4 	movhi	r4,774
 3041454:	21273d04 	addi	r4,r4,-25356
 3041458:	304be480 	call	304be48 <puts>
    }       
    
    if(bMute){
 304145c:	e0bff817 	ldw	r2,-32(fp)
 3041460:	1005003a 	cmpeq	r2,r2,zero
 3041464:	1000231e 	bne	r2,zero,30414f4 <handle_IrDA+0x2c0>
        nHwVol = gWavePlay.nVolume;
 3041468:	0080c1b4 	movhi	r2,774
 304146c:	10be0704 	addi	r2,r2,-2020
 3041470:	10808d03 	ldbu	r2,564(r2)
 3041474:	10803fcc 	andi	r2,r2,255
 3041478:	e0bff615 	stw	r2,-40(fp)
        if(nHwVol != 47){
 304147c:	e0bff617 	ldw	r2,-40(fp)
 3041480:	10800be0 	cmpeqi	r2,r2,47
 3041484:	10000a1e 	bne	r2,zero,30414b0 <handle_IrDA+0x27c>
            nMute_Volume = nHwVol;
 3041488:	e0bff617 	ldw	r2,-40(fp)
 304148c:	d0a77415 	stw	r2,-25136(gp)
            nHwVol = 47;
 3041490:	00800bc4 	movi	r2,47
 3041494:	e0bff615 	stw	r2,-40(fp)
            DEMO_PRINTF("Open Mute...\r\n");
 3041498:	0100c1b4 	movhi	r4,774
 304149c:	21274504 	addi	r4,r4,-25324
 30414a0:	304be480 	call	304be48 <puts>
            
            bMuteSwitch = TRUE;
 30414a4:	00800044 	movi	r2,1
 30414a8:	d0a77715 	stw	r2,-25124(gp)
 30414ac:	00000606 	br	30414c8 <handle_IrDA+0x294>
        }else{
            nHwVol = nMute_Volume;
 30414b0:	d0a77417 	ldw	r2,-25136(gp)
 30414b4:	e0bff615 	stw	r2,-40(fp)
            DEMO_PRINTF("Shut Mute...\r\n");
 30414b8:	0100c1b4 	movhi	r4,774
 30414bc:	21274904 	addi	r4,r4,-25308
 30414c0:	304be480 	call	304be48 <puts>
            
            bMuteSwitch = FALSE;
 30414c4:	d0277715 	stw	zero,-25124(gp)
        }
        AUDIO_SetLineOutVol(nHwVol, nHwVol);
 30414c8:	e0bff617 	ldw	r2,-40(fp)
 30414cc:	113fffcc 	andi	r4,r2,65535
 30414d0:	e0bff617 	ldw	r2,-40(fp)
 30414d4:	117fffcc 	andi	r5,r2,65535
 30414d8:	30452300 	call	3045230 <AUDIO_SetLineOutVol>
        gWavePlay.nVolume = nHwVol;
 30414dc:	e0bff617 	ldw	r2,-40(fp)
 30414e0:	1007883a 	mov	r3,r2
 30414e4:	0080c1b4 	movhi	r2,774
 30414e8:	10be0704 	addi	r2,r2,-2020
 30414ec:	10c08d05 	stb	r3,564(r2)
        update_status();
 30414f0:	30403140 	call	3040314 <update_status>
        
    } 
    if(bPlay){
 30414f4:	e0bff717 	ldw	r2,-36(fp)
 30414f8:	1005003a 	cmpeq	r2,r2,zero
 30414fc:	10000f1e 	bne	r2,zero,304153c <handle_IrDA+0x308>
        bPlaySwitch = !bPlaySwitch;
 3041500:	d0a00017 	ldw	r2,-32768(gp)
 3041504:	1005003a 	cmpeq	r2,r2,zero
 3041508:	d0a00015 	stw	r2,-32768(gp)
        if(bPlaySwitch)
 304150c:	d0a00017 	ldw	r2,-32768(gp)
 3041510:	1005003a 	cmpeq	r2,r2,zero
 3041514:	1000041e 	bne	r2,zero,3041528 <handle_IrDA+0x2f4>
           printf("Play Continue...\r\n");
 3041518:	0100c1b4 	movhi	r4,774
 304151c:	21274d04 	addi	r4,r4,-25292
 3041520:	304be480 	call	304be48 <puts>
 3041524:	00000306 	br	3041534 <handle_IrDA+0x300>
        else
           printf("Play Pause...\r\n");
 3041528:	0100c1b4 	movhi	r4,774
 304152c:	21275204 	addi	r4,r4,-25272
 3041530:	304be480 	call	304be48 <puts>
        AUDIO_InterfaceActive(bPlaySwitch);
 3041534:	d1200017 	ldw	r4,-32768(gp)
 3041538:	3044adc0 	call	3044adc <AUDIO_InterfaceActive>
    }
#ifdef ENABLE_DEBOUNCE        
    if (bLastSong || bNextSong || bVolUp || bVolDown){
        next_active_time +=  alt_ticks_per_second()/5;  // debounce
    }        
#endif    
    
}
 304153c:	e037883a 	mov	sp,fp
 3041540:	dfc00117 	ldw	ra,4(sp)
 3041544:	df000017 	ldw	fp,0(sp)
 3041548:	dec00204 	addi	sp,sp,8
 304154c:	f800283a 	ret

03041550 <Fat_Test>:

bool Fat_Test(FAT_HANDLE hFat, char *pDumpFile){
 3041550:	deff6704 	addi	sp,sp,-612
 3041554:	dfc09815 	stw	ra,608(sp)
 3041558:	df009715 	stw	fp,604(sp)
 304155c:	df009704 	addi	fp,sp,604
 3041560:	e13ffe15 	stw	r4,-8(fp)
 3041564:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    int nCount = 0;
 3041568:	e03f7015 	stw	zero,-576(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    bSuccess = Fat_FileBrowseBegin(hFat, &hBrowse);
 304156c:	e17f7204 	addi	r5,fp,-568
 3041570:	e13ffe17 	ldw	r4,-8(fp)
 3041574:	3041d100 	call	3041d10 <Fat_FileBrowseBegin>
 3041578:	e0bf7115 	stw	r2,-572(fp)
    if (bSuccess){
 304157c:	e0bf7117 	ldw	r2,-572(fp)
 3041580:	1005003a 	cmpeq	r2,r2,zero
 3041584:	10003d1e 	bne	r2,zero,304167c <Fat_Test+0x12c>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext)){
 3041588:	00003706 	br	3041668 <Fat_Test+0x118>
            if (FileContext.bLongFilename){
 304158c:	e0bfb417 	ldw	r2,-304(fp)
 3041590:	1005003a 	cmpeq	r2,r2,zero
 3041594:	10002c1e 	bne	r2,zero,3041648 <Fat_Test+0xf8>
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
 3041598:	e0bf7404 	addi	r2,fp,-560
 304159c:	e0bf6f15 	stw	r2,-580(fp)
                pData8 = FileContext.szName;
 30415a0:	e0bf7404 	addi	r2,fp,-560
 30415a4:	e0bf6e15 	stw	r2,-584(fp)
                printf("[%d]", nCount);
 30415a8:	0100c1b4 	movhi	r4,774
 30415ac:	21275604 	addi	r4,r4,-25256
 30415b0:	e17f7017 	ldw	r5,-576(fp)
 30415b4:	304bd0c0 	call	304bd0c <printf>
                while(*pData16){
 30415b8:	00001b06 	br	3041628 <Fat_Test+0xd8>
                    if (*pData8)
 30415bc:	e0bf6e17 	ldw	r2,-584(fp)
 30415c0:	10800003 	ldbu	r2,0(r2)
 30415c4:	10803fcc 	andi	r2,r2,255
 30415c8:	1005003a 	cmpeq	r2,r2,zero
 30415cc:	1000041e 	bne	r2,zero,30415e0 <Fat_Test+0x90>
                        printf("%c", *pData8);
 30415d0:	e0bf6e17 	ldw	r2,-584(fp)
 30415d4:	10800003 	ldbu	r2,0(r2)
 30415d8:	11003fcc 	andi	r4,r2,255
 30415dc:	304bd840 	call	304bd84 <putchar>
                    pData8++;
 30415e0:	e0bf6e17 	ldw	r2,-584(fp)
 30415e4:	10800044 	addi	r2,r2,1
 30415e8:	e0bf6e15 	stw	r2,-584(fp)
                    if (*pData8)
 30415ec:	e0bf6e17 	ldw	r2,-584(fp)
 30415f0:	10800003 	ldbu	r2,0(r2)
 30415f4:	10803fcc 	andi	r2,r2,255
 30415f8:	1005003a 	cmpeq	r2,r2,zero
 30415fc:	1000041e 	bne	r2,zero,3041610 <Fat_Test+0xc0>
                        printf("%c", *pData8);
 3041600:	e0bf6e17 	ldw	r2,-584(fp)
 3041604:	10800003 	ldbu	r2,0(r2)
 3041608:	11003fcc 	andi	r4,r2,255
 304160c:	304bd840 	call	304bd84 <putchar>
                    pData8++;                    
 3041610:	e0bf6e17 	ldw	r2,-584(fp)
 3041614:	10800044 	addi	r2,r2,1
 3041618:	e0bf6e15 	stw	r2,-584(fp)
                    //    
                    pData16++;
 304161c:	e0bf6f17 	ldw	r2,-580(fp)
 3041620:	10800084 	addi	r2,r2,2
 3041624:	e0bf6f15 	stw	r2,-580(fp)
 3041628:	e0bf6f17 	ldw	r2,-580(fp)
 304162c:	1080000b 	ldhu	r2,0(r2)
 3041630:	10bfffcc 	andi	r2,r2,65535
 3041634:	1004c03a 	cmpne	r2,r2,zero
 3041638:	103fe01e 	bne	r2,zero,30415bc <Fat_Test+0x6c>
                }
                printf("\n");
 304163c:	01000284 	movi	r4,10
 3041640:	304bd840 	call	304bd84 <putchar>
 3041644:	00000506 	br	304165c <Fat_Test+0x10c>
            }else{
                printf("---[%d]%s\n", nCount, FileContext.szName);
 3041648:	e1bf7404 	addi	r6,fp,-560
 304164c:	0100c1b4 	movhi	r4,774
 3041650:	21275804 	addi	r4,r4,-25248
 3041654:	e17f7017 	ldw	r5,-576(fp)
 3041658:	304bd0c0 	call	304bd0c <printf>
            }                
            nCount++;
 304165c:	e0bf7017 	ldw	r2,-576(fp)
 3041660:	10800044 	addi	r2,r2,1
 3041664:	e0bf7015 	stw	r2,-576(fp)
 3041668:	e13f7204 	addi	r4,fp,-568
 304166c:	e17f7404 	addi	r5,fp,-560
 3041670:	3041d8c0 	call	3041d8c <Fat_FileBrowseNext>
 3041674:	1004c03a 	cmpne	r2,r2,zero
 3041678:	103fc41e 	bne	r2,zero,304158c <Fat_Test+0x3c>
        }    
    }
    if (bSuccess && pDumpFile && strlen(pDumpFile)){
 304167c:	e0bf7117 	ldw	r2,-572(fp)
 3041680:	1005003a 	cmpeq	r2,r2,zero
 3041684:	10005d1e 	bne	r2,zero,30417fc <Fat_Test+0x2ac>
 3041688:	e0bfff17 	ldw	r2,-4(fp)
 304168c:	1005003a 	cmpeq	r2,r2,zero
 3041690:	10005a1e 	bne	r2,zero,30417fc <Fat_Test+0x2ac>
 3041694:	e0bfff17 	ldw	r2,-4(fp)
 3041698:	10800003 	ldbu	r2,0(r2)
 304169c:	10803fcc 	andi	r2,r2,255
 30416a0:	1080201c 	xori	r2,r2,128
 30416a4:	10bfe004 	addi	r2,r2,-128
 30416a8:	1005003a 	cmpeq	r2,r2,zero
 30416ac:	1000531e 	bne	r2,zero,30417fc <Fat_Test+0x2ac>
        FAT_FILE_HANDLE hFile;
        hFile =  Fat_FileOpen(hFat, pDumpFile);
 30416b0:	e13ffe17 	ldw	r4,-8(fp)
 30416b4:	e17fff17 	ldw	r5,-4(fp)
 30416b8:	30426140 	call	3042614 <Fat_FileOpen>
 30416bc:	e0bf6d15 	stw	r2,-588(fp)
        if (hFile){
 30416c0:	e0bf6d17 	ldw	r2,-588(fp)
 30416c4:	1005003a 	cmpeq	r2,r2,zero
 30416c8:	1000471e 	bne	r2,zero,30417e8 <Fat_Test+0x298>
            char szRead[256];
            int nReadSize, nFileSize, nTotalReadSize=0;
 30416cc:	e03f6a15 	stw	zero,-600(fp)
            nFileSize = Fat_FileSize(hFile);
 30416d0:	e13f6d17 	ldw	r4,-588(fp)
 30416d4:	304284c0 	call	304284c <Fat_FileSize>
 30416d8:	e0bf6b15 	stw	r2,-596(fp)
            if (nReadSize > sizeof(szRead))
 30416dc:	e0bf6c17 	ldw	r2,-592(fp)
 30416e0:	10804070 	cmpltui	r2,r2,257
 30416e4:	1000021e 	bne	r2,zero,30416f0 <Fat_Test+0x1a0>
                nReadSize = sizeof(szRead);
 30416e8:	00804004 	movi	r2,256
 30416ec:	e0bf6c15 	stw	r2,-592(fp)
            printf("%s dump:\n", pDumpFile);
 30416f0:	0100c1b4 	movhi	r4,774
 30416f4:	21275b04 	addi	r4,r4,-25236
 30416f8:	e17fff17 	ldw	r5,-4(fp)
 30416fc:	304bd0c0 	call	304bd0c <printf>
            while(bSuccess && nTotalReadSize < nFileSize){
 3041700:	00002b06 	br	30417b0 <Fat_Test+0x260>
                nReadSize = sizeof(szRead);
 3041704:	00804004 	movi	r2,256
 3041708:	e0bf6c15 	stw	r2,-592(fp)
                if (nReadSize > (nFileSize - nTotalReadSize))
 304170c:	e0ff6b17 	ldw	r3,-596(fp)
 3041710:	e0bf6a17 	ldw	r2,-600(fp)
 3041714:	1887c83a 	sub	r3,r3,r2
 3041718:	e0bf6c17 	ldw	r2,-592(fp)
 304171c:	1880040e 	bge	r3,r2,3041730 <Fat_Test+0x1e0>
                    nReadSize = (nFileSize - nTotalReadSize);
 3041720:	e0bf6b17 	ldw	r2,-596(fp)
 3041724:	e0ff6a17 	ldw	r3,-600(fp)
 3041728:	10c5c83a 	sub	r2,r2,r3
 304172c:	e0bf6c15 	stw	r2,-592(fp)
                //    
                if (Fat_FileRead(hFile, szRead, nReadSize)){
 3041730:	e17fbe04 	addi	r5,fp,-264
 3041734:	e13f6d17 	ldw	r4,-588(fp)
 3041738:	e1bf6c17 	ldw	r6,-592(fp)
 304173c:	304289c0 	call	304289c <Fat_FileRead>
 3041740:	1005003a 	cmpeq	r2,r2,zero
 3041744:	1000151e 	bne	r2,zero,304179c <Fat_Test+0x24c>
                    int i;
                    for(i=0;i<nReadSize;i++){
 3041748:	e03f6915 	stw	zero,-604(fp)
 304174c:	00000b06 	br	304177c <Fat_Test+0x22c>
                        printf("%c", szRead[i]);
 3041750:	e0ff6917 	ldw	r3,-604(fp)
 3041754:	e0bfbe04 	addi	r2,fp,-264
 3041758:	10c5883a 	add	r2,r2,r3
 304175c:	10800003 	ldbu	r2,0(r2)
 3041760:	11003fcc 	andi	r4,r2,255
 3041764:	2100201c 	xori	r4,r4,128
 3041768:	213fe004 	addi	r4,r4,-128
 304176c:	304bd840 	call	304bd84 <putchar>
 3041770:	e0bf6917 	ldw	r2,-604(fp)
 3041774:	10800044 	addi	r2,r2,1
 3041778:	e0bf6915 	stw	r2,-604(fp)
 304177c:	e0ff6917 	ldw	r3,-604(fp)
 3041780:	e0bf6c17 	ldw	r2,-592(fp)
 3041784:	18bff216 	blt	r3,r2,3041750 <Fat_Test+0x200>
                    }
                    nTotalReadSize += nReadSize;
 3041788:	e0bf6a17 	ldw	r2,-600(fp)
 304178c:	e0ff6c17 	ldw	r3,-592(fp)
 3041790:	10c5883a 	add	r2,r2,r3
 3041794:	e0bf6a15 	stw	r2,-600(fp)
 3041798:	00000506 	br	30417b0 <Fat_Test+0x260>
                }else{
                    bSuccess = FALSE;
 304179c:	e03f7115 	stw	zero,-572(fp)
                    printf("\nFaied to read the file \"%s\"\n", pDumpFile);
 30417a0:	0100c1b4 	movhi	r4,774
 30417a4:	21275e04 	addi	r4,r4,-25224
 30417a8:	e17fff17 	ldw	r5,-4(fp)
 30417ac:	304bd0c0 	call	304bd0c <printf>
 30417b0:	e0bf7117 	ldw	r2,-572(fp)
 30417b4:	1005003a 	cmpeq	r2,r2,zero
 30417b8:	1000031e 	bne	r2,zero,30417c8 <Fat_Test+0x278>
 30417bc:	e0ff6a17 	ldw	r3,-600(fp)
 30417c0:	e0bf6b17 	ldw	r2,-596(fp)
 30417c4:	18bfcf16 	blt	r3,r2,3041704 <Fat_Test+0x1b4>
                }     
            } // while
            if (bSuccess)
 30417c8:	e0bf7117 	ldw	r2,-572(fp)
 30417cc:	1005003a 	cmpeq	r2,r2,zero
 30417d0:	1000021e 	bne	r2,zero,30417dc <Fat_Test+0x28c>
                printf("\n");
 30417d4:	01000284 	movi	r4,10
 30417d8:	304bd840 	call	304bd84 <putchar>
            Fat_FileClose(hFile);
 30417dc:	e13f6d17 	ldw	r4,-588(fp)
 30417e0:	3042e980 	call	3042e98 <Fat_FileClose>
 30417e4:	00000506 	br	30417fc <Fat_Test+0x2ac>
        }else{            
            bSuccess = FALSE;
 30417e8:	e03f7115 	stw	zero,-572(fp)
            printf("Cannot find the file \"%s\"\n", pDumpFile);
 30417ec:	0100c1b4 	movhi	r4,774
 30417f0:	21276604 	addi	r4,r4,-25192
 30417f4:	e17fff17 	ldw	r5,-4(fp)
 30417f8:	304bd0c0 	call	304bd0c <printf>
        }            
    }
    
    return bSuccess;
 30417fc:	e0bf7117 	ldw	r2,-572(fp)
}
 3041800:	e037883a 	mov	sp,fp
 3041804:	dfc00117 	ldw	ra,4(sp)
 3041808:	df000017 	ldw	fp,0(sp)
 304180c:	dec00204 	addi	sp,sp,8
 3041810:	f800283a 	ret

03041814 <main>:

int main()
{
 3041814:	deffe904 	addi	sp,sp,-92
 3041818:	dfc01615 	stw	ra,88(sp)
 304181c:	df001515 	stw	fp,84(sp)
 3041820:	df001504 	addi	fp,sp,84

    int nPlayIndex;
    alt_u32 cnt, uSongStartTime, uTimeElapsed;
    alt_8 led_mask = 0x03;
 3041824:	008000c4 	movi	r2,3
 3041828:	e0bff005 	stb	r2,-64(fp)
    alt_u8 szWaveFile[FILENAME_LEN];
    IRDA_init();
 304182c:	30411e00 	call	30411e0 <IRDA_init>
    lcd_open();
 3041830:	30404040 	call	3040404 <lcd_open>
    welcome_display();
 3041834:	30402100 	call	3040210 <welcome_display>
    demo_introduce();
 3041838:	30402780 	call	3040278 <demo_introduce>
	DEMO_PRINTF("Opa tudo bom guri");
 304183c:	0100c1b4 	movhi	r4,774
 3041840:	21276d04 	addi	r4,r4,-25164
 3041844:	304bd0c0 	call	304bd0c <printf>
    if (!AUDIO_Init()){
 3041848:	30449180 	call	3044918 <AUDIO_Init>
 304184c:	1004c03a 	cmpne	r2,r2,zero
 3041850:	1000081e 	bne	r2,zero,3041874 <main+0x60>
        DEMO_PRINTF("Audio Init fail!\n");
 3041854:	0100c1b4 	movhi	r4,774
 3041858:	21277204 	addi	r4,r4,-25144
 304185c:	304be480 	call	304be48 <puts>
        lcd_display(("Audio Init fail!\n\n"));
 3041860:	0100c1b4 	movhi	r4,774
 3041864:	21277704 	addi	r4,r4,-25124
 3041868:	304042c0 	call	304042c <lcd_display>
        return 0;
 304186c:	e03fff15 	stw	zero,-4(fp)
 3041870:	0000d806 	br	3041bd4 <main+0x3c0>
    }
    
    //AUDIO_EnableByPass(TRUE);
    //AUDIO_EnableSiteTone(TRUE);

    
    memset(&gWavePlay, 0, sizeof(gWavePlay));
 3041874:	0080c1b4 	movhi	r2,774
 3041878:	10be0704 	addi	r2,r2,-2020
 304187c:	1009883a 	mov	r4,r2
 3041880:	01808f04 	movi	r6,572
 3041884:	000b883a 	mov	r5,zero
 3041888:	304bbfc0 	call	304bbfc <memset>
    gWavePlay.nVolume = HW_DEFAULT_VOL;
 304188c:	00c0c1b4 	movhi	r3,774
 3041890:	18fe0704 	addi	r3,r3,-2020
 3041894:	00801904 	movi	r2,100
 3041898:	18808d05 	stb	r2,564(r3)
    AUDIO_SetLineOutVol(gWavePlay.nVolume, gWavePlay.nVolume); 
 304189c:	0080c1b4 	movhi	r2,774
 30418a0:	10be0704 	addi	r2,r2,-2020
 30418a4:	10808d03 	ldbu	r2,564(r2)
 30418a8:	11003fcc 	andi	r4,r2,255
 30418ac:	0080c1b4 	movhi	r2,774
 30418b0:	10be0704 	addi	r2,r2,-2020
 30418b4:	10808d03 	ldbu	r2,564(r2)
 30418b8:	11403fcc 	andi	r5,r2,255
 30418bc:	30452300 	call	3045230 <AUDIO_SetLineOutVol>
  
    while(1){
        
        // check SD card
        wait_sdcard_insert();
 30418c0:	30404c00 	call	30404c0 <wait_sdcard_insert>
    
        // Mount SD-CARD
        hFat = Fat_Mount(FAT_SD_CARD, 0);
 30418c4:	0009883a 	mov	r4,zero
 30418c8:	000b883a 	mov	r5,zero
 30418cc:	3041bec0 	call	3041bec <Fat_Mount>
 30418d0:	d0a77815 	stw	r2,-25120(gp)
        if (!hFat){
 30418d4:	d0a77817 	ldw	r2,-25120(gp)
 30418d8:	1004c03a 	cmpne	r2,r2,zero
 30418dc:	1000081e 	bne	r2,zero,3041900 <main+0xec>
            DEMO_PRINTF("SD card mount fail.\n");
 30418e0:	0100c1b4 	movhi	r4,774
 30418e4:	21277c04 	addi	r4,r4,-25104
 30418e8:	304be480 	call	304be48 <puts>
            lcd_display(("SD card mount fail.\n\n"));
 30418ec:	0100c1b4 	movhi	r4,774
 30418f0:	21278104 	addi	r4,r4,-25084
 30418f4:	304042c0 	call	304042c <lcd_display>
            return 0;
 30418f8:	e03fff15 	stw	zero,-4(fp)
 30418fc:	0000b506 	br	3041bd4 <main+0x3c0>
        }  
        else{
           if (build_wave_play_list(hFat) == 0){
 3041900:	d1277817 	ldw	r4,-25120(gp)
 3041904:	30406080 	call	3040608 <build_wave_play_list>
 3041908:	1004c03a 	cmpne	r2,r2,zero
 304190c:	1000081e 	bne	r2,zero,3041930 <main+0x11c>
            DEMO_PRINTF("There is no wave file in the root directory of SD card.\n");
 3041910:	0100c1b4 	movhi	r4,774
 3041914:	21278704 	addi	r4,r4,-25060
 3041918:	304be480 	call	304be48 <puts>
            lcd_display(("No Wave Files.\n\n"));
 304191c:	0100c1b4 	movhi	r4,774
 3041920:	21279504 	addi	r4,r4,-25004
 3041924:	304042c0 	call	304042c <lcd_display>
            return 0;
 3041928:	e03fff15 	stw	zero,-4(fp)
 304192c:	0000a906 	br	3041bd4 <main+0x3c0>
            }
        }
        
   
        bool bSdacrdReady = TRUE;
 3041930:	00800044 	movi	r2,1
 3041934:	e0bfef15 	stw	r2,-68(fp)
        nPlayIndex = 0;
 3041938:	e03ff415 	stw	zero,-48(fp)
        while(bSdacrdReady){
 304193c:	0000a106 	br	3041bc4 <main+0x3b0>
            // find a wave file
            bool bPlayDone = FALSE;
 3041940:	e03fee15 	stw	zero,-72(fp)
            strcpy(szWaveFile, gWavePlayList.szFilename[nPlayIndex]);
 3041944:	e13ff504 	addi	r4,fp,-44
 3041948:	e0bff417 	ldw	r2,-48(fp)
 304194c:	1004917a 	slli	r2,r2,5
 3041950:	1007883a 	mov	r3,r2
 3041954:	0080c1b4 	movhi	r2,774
 3041958:	10ba0704 	addi	r2,r2,-6116
 304195c:	1885883a 	add	r2,r3,r2
 3041960:	100b883a 	mov	r5,r2
 3041964:	304c4380 	call	304c438 <strcpy>
            DEMO_PRINTF("Play Song:%s\r\n", szWaveFile);
 3041968:	e17ff504 	addi	r5,fp,-44
 304196c:	0100c1b4 	movhi	r4,774
 3041970:	21279a04 	addi	r4,r4,-24984
 3041974:	304bd0c0 	call	304bd0c <printf>
            if (!waveplay_start(szWaveFile)){
 3041978:	e13ff504 	addi	r4,fp,-44
 304197c:	3040a180 	call	3040a18 <waveplay_start>
 3041980:	1004c03a 	cmpne	r2,r2,zero
 3041984:	1000071e 	bne	r2,zero,30419a4 <main+0x190>
                DEMO_PRINTF("waveplay_start error\r\n");
 3041988:	0100c1b4 	movhi	r4,774
 304198c:	21279e04 	addi	r4,r4,-24968
 3041990:	304be480 	call	304be48 <puts>
                lcd_display("Play Error.\n\n");
 3041994:	0100c1b4 	movhi	r4,774
 3041998:	2127a404 	addi	r4,r4,-24944
 304199c:	304042c0 	call	304042c <lcd_display>
                bSdacrdReady = FALSE;
 30419a0:	e03fef15 	stw	zero,-68(fp)
            }                
            update_status();
 30419a4:	30403140 	call	3040314 <update_status>
            cnt = 0;
 30419a8:	e03ff315 	stw	zero,-52(fp)
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 30419ac:	0080c1b4 	movhi	r2,774
 30419b0:	10b29c04 	addi	r2,r2,-13712
 30419b4:	10800017 	ldw	r2,0(r2)
            uSongStartTime = alt_nticks();
 30419b8:	e0bff215 	stw	r2,-56(fp)
            while(!bPlayDone && bSdacrdReady){
 30419bc:	00007a06 	br	3041ba8 <main+0x394>
                bool bLastSongPressed  = FALSE;
 30419c0:	e03fed15 	stw	zero,-76(fp)
                bool bNextSongPressed  = FALSE;
 30419c4:	e03ffd15 	stw	zero,-12(fp)
                bool bEndOfFile = FALSE;
 30419c8:	e03ffe15 	stw	zero,-8(fp)
                if ((cnt++ & 0x1F) == 0){
 30419cc:	e0bff317 	ldw	r2,-52(fp)
 30419d0:	108007cc 	andi	r2,r2,31
 30419d4:	1005003a 	cmpeq	r2,r2,zero
 30419d8:	1007883a 	mov	r3,r2
 30419dc:	e0bff317 	ldw	r2,-52(fp)
 30419e0:	10800044 	addi	r2,r2,1
 30419e4:	e0bff315 	stw	r2,-52(fp)
 30419e8:	18803fcc 	andi	r2,r3,255
 30419ec:	1005003a 	cmpeq	r2,r2,zero
 30419f0:	1000051e 	bne	r2,zero,3041a08 <main+0x1f4>
                    led_display(led_mask);
 30419f4:	e13ff007 	ldb	r4,-64(fp)
 30419f8:	30404600 	call	3040460 <led_display>
                    led_mask ^= 0x01;
 30419fc:	e0bff003 	ldbu	r2,-64(fp)
 3041a00:	1080005c 	xori	r2,r2,1
 3041a04:	e0bff005 	stb	r2,-64(fp)
                }                    
                // play wave file
                if (!waveplay_execute(&bEndOfFile)){
 3041a08:	e13ffe04 	addi	r4,fp,-8
 3041a0c:	3040c940 	call	3040c94 <waveplay_execute>
 3041a10:	1004c03a 	cmpne	r2,r2,zero
 3041a14:	1000071e 	bne	r2,zero,3041a34 <main+0x220>
                    DEMO_PRINTF("waveplay_execute error\r\n");
 3041a18:	0100c1b4 	movhi	r4,774
 3041a1c:	2127a804 	addi	r4,r4,-24928
 3041a20:	304be480 	call	304be48 <puts>
                    lcd_display("Play Error.\n\n");
 3041a24:	0100c1b4 	movhi	r4,774
 3041a28:	2127a404 	addi	r4,r4,-24944
 3041a2c:	304042c0 	call	304042c <lcd_display>
                    bSdacrdReady = FALSE;
 3041a30:	e03fef15 	stw	zero,-68(fp)
                }    
                
                // handle key event   
                handle_key(&bNextSongPressed);
 3041a34:	e13ffd04 	addi	r4,fp,-12
 3041a38:	3040fe80 	call	3040fe8 <handle_key>
                if(bLastSwitch){
 3041a3c:	d0a77517 	ldw	r2,-25132(gp)
 3041a40:	1005003a 	cmpeq	r2,r2,zero
 3041a44:	1000031e 	bne	r2,zero,3041a54 <main+0x240>
                    bLastSongPressed = TRUE;
 3041a48:	00800044 	movi	r2,1
 3041a4c:	e0bfed15 	stw	r2,-76(fp)
                    bNextSongPressed = FALSE;
 3041a50:	e03ffd15 	stw	zero,-12(fp)
                }
                 if(bNextSwitch){
 3041a54:	d0a77617 	ldw	r2,-25128(gp)
 3041a58:	1005003a 	cmpeq	r2,r2,zero
 3041a5c:	1000031e 	bne	r2,zero,3041a6c <main+0x258>
                    bLastSongPressed = FALSE;
 3041a60:	e03fed15 	stw	zero,-76(fp)
                    bNextSongPressed = TRUE;
 3041a64:	00800044 	movi	r2,1
 3041a68:	e0bffd15 	stw	r2,-12(fp)
                }
                if (bSdacrdReady && (bEndOfFile || bLastSongPressed || bNextSongPressed)){
 3041a6c:	e0bfef17 	ldw	r2,-68(fp)
 3041a70:	1005003a 	cmpeq	r2,r2,zero
 3041a74:	1000411e 	bne	r2,zero,3041b7c <main+0x368>
 3041a78:	e0bffe17 	ldw	r2,-8(fp)
 3041a7c:	1004c03a 	cmpne	r2,r2,zero
 3041a80:	1000061e 	bne	r2,zero,3041a9c <main+0x288>
 3041a84:	e0bfed17 	ldw	r2,-76(fp)
 3041a88:	1004c03a 	cmpne	r2,r2,zero
 3041a8c:	1000031e 	bne	r2,zero,3041a9c <main+0x288>
 3041a90:	e0bffd17 	ldw	r2,-12(fp)
 3041a94:	1005003a 	cmpeq	r2,r2,zero
 3041a98:	1000381e 	bne	r2,zero,3041b7c <main+0x368>
                    bool bNextSong = FALSE;
 3041a9c:	e03fec15 	stw	zero,-80(fp)
                    bool bLastSong = FALSE;
 3041aa0:	e03feb15 	stw	zero,-84(fp)
                    
                    if(bLastSongPressed) bLastSong = TRUE;
 3041aa4:	e0bfed17 	ldw	r2,-76(fp)
 3041aa8:	1005003a 	cmpeq	r2,r2,zero
 3041aac:	1000021e 	bne	r2,zero,3041ab8 <main+0x2a4>
 3041ab0:	00800044 	movi	r2,1
 3041ab4:	e0bfeb15 	stw	r2,-84(fp)
                    if(bNextSongPressed || bEndOfFile) bNextSong = TRUE;
 3041ab8:	e0bffd17 	ldw	r2,-12(fp)
 3041abc:	1004c03a 	cmpne	r2,r2,zero
 3041ac0:	1000031e 	bne	r2,zero,3041ad0 <main+0x2bc>
 3041ac4:	e0bffe17 	ldw	r2,-8(fp)
 3041ac8:	1005003a 	cmpeq	r2,r2,zero
 3041acc:	1000021e 	bne	r2,zero,3041ad8 <main+0x2c4>
 3041ad0:	00800044 	movi	r2,1
 3041ad4:	e0bfec15 	stw	r2,-80(fp)
                    // check whether in REPEAT mode
                    if (!bLastSongPressed && !bNextSongPressed && gWavePlay.bRepeatMode){
 3041ad8:	e0bfed17 	ldw	r2,-76(fp)
 3041adc:	1004c03a 	cmpne	r2,r2,zero
 3041ae0:	10000a1e 	bne	r2,zero,3041b0c <main+0x2f8>
 3041ae4:	e0bffd17 	ldw	r2,-12(fp)
 3041ae8:	1004c03a 	cmpne	r2,r2,zero
 3041aec:	1000071e 	bne	r2,zero,3041b0c <main+0x2f8>
 3041af0:	0080c1b4 	movhi	r2,774
 3041af4:	10be0704 	addi	r2,r2,-2020
 3041af8:	10808e17 	ldw	r2,568(r2)
 3041afc:	1005003a 	cmpeq	r2,r2,zero
 3041b00:	1000021e 	bne	r2,zero,3041b0c <main+0x2f8>
                        bNextSong = FALSE;  // in repeat mode
 3041b04:	e03fec15 	stw	zero,-80(fp)
                        bLastSong = FALSE;
 3041b08:	e03feb15 	stw	zero,-84(fp)
                    }
                    if (bNextSong){  // index update for next song
 3041b0c:	e0bfec17 	ldw	r2,-80(fp)
 3041b10:	1005003a 	cmpeq	r2,r2,zero
 3041b14:	1000091e 	bne	r2,zero,3041b3c <main+0x328>
                        nPlayIndex++;
 3041b18:	e0bff417 	ldw	r2,-48(fp)
 3041b1c:	10800044 	addi	r2,r2,1
 3041b20:	e0bff415 	stw	r2,-48(fp)
                        if (nPlayIndex >= gWavePlayList.nFileNum)
 3041b24:	0080c1b4 	movhi	r2,774
 3041b28:	10ba0604 	addi	r2,r2,-6120
 3041b2c:	10c00017 	ldw	r3,0(r2)
 3041b30:	e0bff417 	ldw	r2,-48(fp)
 3041b34:	10c00116 	blt	r2,r3,3041b3c <main+0x328>
                            nPlayIndex = 0;
 3041b38:	e03ff415 	stw	zero,-48(fp)
                    }   
                    if (bLastSong){  // index update for last song
 3041b3c:	e0bfeb17 	ldw	r2,-84(fp)
 3041b40:	1005003a 	cmpeq	r2,r2,zero
 3041b44:	10000b1e 	bne	r2,zero,3041b74 <main+0x360>
                        nPlayIndex--;
 3041b48:	e0bff417 	ldw	r2,-48(fp)
 3041b4c:	10bfffc4 	addi	r2,r2,-1
 3041b50:	e0bff415 	stw	r2,-48(fp)
                        if (nPlayIndex < 0)
 3041b54:	e0bff417 	ldw	r2,-48(fp)
 3041b58:	1004403a 	cmpge	r2,r2,zero
 3041b5c:	1000051e 	bne	r2,zero,3041b74 <main+0x360>
                            nPlayIndex = gWavePlayList.nFileNum-1;
 3041b60:	0080c1b4 	movhi	r2,774
 3041b64:	10ba0604 	addi	r2,r2,-6120
 3041b68:	10800017 	ldw	r2,0(r2)
 3041b6c:	10bfffc4 	addi	r2,r2,-1
 3041b70:	e0bff415 	stw	r2,-48(fp)
                    }                           
                    bPlayDone = TRUE;                        
 3041b74:	00800044 	movi	r2,1
 3041b78:	e0bfee15 	stw	r2,-72(fp)
                } 
                bLastSwitch = FALSE;
 3041b7c:	d0277515 	stw	zero,-25132(gp)
                bNextSwitch = FALSE;
 3041b80:	d0277615 	stw	zero,-25128(gp)
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3041b84:	0080c1b4 	movhi	r2,774
 3041b88:	10b29c04 	addi	r2,r2,-13712
 3041b8c:	10800017 	ldw	r2,0(r2)
 3041b90:	1007883a 	mov	r3,r2
                
                uTimeElapsed = alt_nticks() - uSongStartTime;    
 3041b94:	e0bff217 	ldw	r2,-56(fp)
 3041b98:	1885c83a 	sub	r2,r3,r2
 3041b9c:	e0bff115 	stw	r2,-60(fp)
                DisplayTime(uTimeElapsed);    
 3041ba0:	e13ff117 	ldw	r4,-60(fp)
 3041ba4:	30403b00 	call	30403b0 <DisplayTime>
 3041ba8:	e0bfee17 	ldw	r2,-72(fp)
 3041bac:	1004c03a 	cmpne	r2,r2,zero
 3041bb0:	1000031e 	bne	r2,zero,3041bc0 <main+0x3ac>
 3041bb4:	e0bfef17 	ldw	r2,-68(fp)
 3041bb8:	1004c03a 	cmpne	r2,r2,zero
 3041bbc:	103f801e 	bne	r2,zero,30419c0 <main+0x1ac>
            }  // while(!bPlayNextSong && bSdacrdReady)
            waveplay_stop();    
 3041bc0:	3040fcc0 	call	3040fcc <waveplay_stop>
 3041bc4:	e0bfef17 	ldw	r2,-68(fp)
 3041bc8:	1004c03a 	cmpne	r2,r2,zero
 3041bcc:	103f5c1e 	bne	r2,zero,3041940 <main+0x12c>
        }  // while(bSdacrdReady)
  } // while (1)
 3041bd0:	003f3b06 	br	30418c0 <main+0xac>
 3041bd4:	e0bfff17 	ldw	r2,-4(fp)

  return 0;
}
 3041bd8:	e037883a 	mov	sp,fp
 3041bdc:	dfc00117 	ldw	ra,4(sp)
 3041be0:	df000017 	ldw	fp,0(sp)
 3041be4:	dec00204 	addi	sp,sp,8
 3041be8:	f800283a 	ret

03041bec <Fat_Mount>:




FAT_HANDLE Fat_Mount(FAT_DEVICE FatDevice, DEVICE_HANDLE hUsbDisk){
 3041bec:	defffb04 	addi	sp,sp,-20
 3041bf0:	dfc00415 	stw	ra,16(sp)
 3041bf4:	df000315 	stw	fp,12(sp)
 3041bf8:	df000304 	addi	fp,sp,12
 3041bfc:	e13ffe15 	stw	r4,-8(fp)
 3041c00:	e17fff15 	stw	r5,-4(fp)
    
    //Fat_Unmount();
    FAT_HANDLE hFat = 0;
 3041c04:	e03ffd15 	stw	zero,-12(fp)
    
    if (FatDevice == FAT_SD_CARD){
 3041c08:	e0bffe17 	ldw	r2,-8(fp)
 3041c0c:	1004c03a 	cmpne	r2,r2,zero
 3041c10:	1000021e 	bne	r2,zero,3041c1c <Fat_Mount+0x30>
        #ifdef SUPPORT_SD_CARD
        hFat = fatMountSdcard();
 3041c14:	30447ac0 	call	30447ac <fatMountSdcard>
 3041c18:	e0bffd15 	stw	r2,-12(fp)
        #endif //SUPPORT_SD_CARD
    }else if (FatDevice == FAT_USB_DISK){
        #ifdef SUPPORT_USB_DISK
        hFat = fatMountUsbDisk(hUsbDisk);
        #endif
    }  
    return hFat;      
 3041c1c:	e0bffd17 	ldw	r2,-12(fp)
        
}
 3041c20:	e037883a 	mov	sp,fp
 3041c24:	dfc00117 	ldw	ra,4(sp)
 3041c28:	df000017 	ldw	fp,0(sp)
 3041c2c:	dec00204 	addi	sp,sp,8
 3041c30:	f800283a 	ret

03041c34 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
 3041c34:	defffc04 	addi	sp,sp,-16
 3041c38:	dfc00315 	stw	ra,12(sp)
 3041c3c:	df000215 	stw	fp,8(sp)
 3041c40:	df000204 	addi	fp,sp,8
 3041c44:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
 3041c48:	e0bfff17 	ldw	r2,-4(fp)
 3041c4c:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
 3041c50:	e0bffe17 	ldw	r2,-8(fp)
 3041c54:	1005003a 	cmpeq	r2,r2,zero
 3041c58:	1000041e 	bne	r2,zero,3041c6c <Fat_Unmount+0x38>
        return;
#ifdef FAT_READONLY      
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
 3041c5c:	e0bffe17 	ldw	r2,-8(fp)
 3041c60:	10000415 	stw	zero,16(r2)
    
    free(pVol);  
 3041c64:	e13ffe17 	ldw	r4,-8(fp)
 3041c68:	304b3f40 	call	304b3f4 <free>
}   
 3041c6c:	e037883a 	mov	sp,fp
 3041c70:	dfc00117 	ldw	ra,4(sp)
 3041c74:	df000017 	ldw	fp,0(sp)
 3041c78:	dec00204 	addi	sp,sp,8
 3041c7c:	f800283a 	ret

03041c80 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
 3041c80:	defffb04 	addi	sp,sp,-20
 3041c84:	dfc00415 	stw	ra,16(sp)
 3041c88:	df000315 	stw	fp,12(sp)
 3041c8c:	df000304 	addi	fp,sp,12
 3041c90:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
 3041c94:	e0bfff17 	ldw	r2,-4(fp)
 3041c98:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
 3041c9c:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
 3041ca0:	e0bffe17 	ldw	r2,-8(fp)
 3041ca4:	1005003a 	cmpeq	r2,r2,zero
 3041ca8:	1000131e 	bne	r2,zero,3041cf8 <Fat_Type+0x78>
        if (pVol->Partition_Type == PARTITION_FAT16) {
 3041cac:	e0bffe17 	ldw	r2,-8(fp)
 3041cb0:	10800317 	ldw	r2,12(r2)
 3041cb4:	10800198 	cmpnei	r2,r2,6
 3041cb8:	1000061e 	bne	r2,zero,3041cd4 <Fat_Type+0x54>
            Type = FAT_FAT16;
 3041cbc:	00800044 	movi	r2,1
 3041cc0:	e0bffd15 	stw	r2,-12(fp)
            FAT_DEBUG(("[FAT 16] \r\n"));
 3041cc4:	0100c1b4 	movhi	r4,774
 3041cc8:	2127ae04 	addi	r4,r4,-24904
 3041ccc:	30469080 	call	3046908 <myprintf>
 3041cd0:	00000906 	br	3041cf8 <Fat_Type+0x78>
        }
        else if (pVol->Partition_Type == PARTITION_FAT32) {
 3041cd4:	e0bffe17 	ldw	r2,-8(fp)
 3041cd8:	10800317 	ldw	r2,12(r2)
 3041cdc:	108002d8 	cmpnei	r2,r2,11
 3041ce0:	1000051e 	bne	r2,zero,3041cf8 <Fat_Type+0x78>
            Type = FAT_FAT32;
 3041ce4:	00800084 	movi	r2,2
 3041ce8:	e0bffd15 	stw	r2,-12(fp)
            FAT_DEBUG(("[FAT 32] \r\n"));
 3041cec:	0100c1b4 	movhi	r4,774
 3041cf0:	2127b104 	addi	r4,r4,-24892
 3041cf4:	30469080 	call	3046908 <myprintf>
        }
    }
    return Type;        
 3041cf8:	e0bffd17 	ldw	r2,-12(fp)
}
 3041cfc:	e037883a 	mov	sp,fp
 3041d00:	dfc00117 	ldw	ra,4(sp)
 3041d04:	df000017 	ldw	fp,0(sp)
 3041d08:	dec00204 	addi	sp,sp,8
 3041d0c:	f800283a 	ret

03041d10 <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
 3041d10:	defffb04 	addi	sp,sp,-20
 3041d14:	df000415 	stw	fp,16(sp)
 3041d18:	df000404 	addi	fp,sp,16
 3041d1c:	e13ffd15 	stw	r4,-12(fp)
 3041d20:	e17ffe15 	stw	r5,-8(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
 3041d24:	e0bffd17 	ldw	r2,-12(fp)
 3041d28:	e0bffc15 	stw	r2,-16(fp)
    if (!pVol)
 3041d2c:	e0bffc17 	ldw	r2,-16(fp)
 3041d30:	1004c03a 	cmpne	r2,r2,zero
 3041d34:	1000021e 	bne	r2,zero,3041d40 <Fat_FileBrowseBegin+0x30>
        return FALSE;
 3041d38:	e03fff15 	stw	zero,-4(fp)
 3041d3c:	00000e06 	br	3041d78 <Fat_FileBrowseBegin+0x68>
    if (!pVol->bMount)
 3041d40:	e0bffc17 	ldw	r2,-16(fp)
 3041d44:	10800417 	ldw	r2,16(r2)
 3041d48:	1004c03a 	cmpne	r2,r2,zero
 3041d4c:	1000021e 	bne	r2,zero,3041d58 <Fat_FileBrowseBegin+0x48>
        return FALSE;
 3041d50:	e03fff15 	stw	zero,-4(fp)
 3041d54:	00000806 	br	3041d78 <Fat_FileBrowseBegin+0x68>
    pFatBrowseHandle->DirectoryIndex = -1;
 3041d58:	e0fffe17 	ldw	r3,-8(fp)
 3041d5c:	00bfffc4 	movi	r2,-1
 3041d60:	18800015 	stw	r2,0(r3)
    pFatBrowseHandle->hFat = hFat;
 3041d64:	e0fffe17 	ldw	r3,-8(fp)
 3041d68:	e0bffd17 	ldw	r2,-12(fp)
 3041d6c:	18800115 	stw	r2,4(r3)
    return TRUE;
 3041d70:	00800044 	movi	r2,1
 3041d74:	e0bfff15 	stw	r2,-4(fp)
 3041d78:	e0bfff17 	ldw	r2,-4(fp)
}
 3041d7c:	e037883a 	mov	sp,fp
 3041d80:	df000017 	ldw	fp,0(sp)
 3041d84:	dec00104 	addi	sp,sp,4
 3041d88:	f800283a 	ret

03041d8c <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
 3041d8c:	defff304 	addi	sp,sp,-52
 3041d90:	dfc00c15 	stw	ra,48(sp)
 3041d94:	df000b15 	stw	fp,44(sp)
 3041d98:	df000b04 	addi	fp,sp,44
 3041d9c:	e13ffd15 	stw	r4,-12(fp)
 3041da0:	e17ffe15 	stw	r5,-8(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
 3041da4:	e03ffc15 	stw	zero,-16(fp)
 3041da8:	e03ffb15 	stw	zero,-20(fp)
 3041dac:	e03ffa15 	stw	zero,-24(fp)
    int OrderValue = 0;
 3041db0:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
 3041db4:	e0bffd17 	ldw	r2,-12(fp)
 3041db8:	10800117 	ldw	r2,4(r2)
 3041dbc:	e0bff715 	stw	r2,-36(fp)
    
    if (!pVol)
 3041dc0:	e0bff717 	ldw	r2,-36(fp)
 3041dc4:	1004c03a 	cmpne	r2,r2,zero
 3041dc8:	1000021e 	bne	r2,zero,3041dd4 <Fat_FileBrowseNext+0x48>
        return FALSE;    
 3041dcc:	e03fff15 	stw	zero,-4(fp)
 3041dd0:	00012606 	br	304226c <Fat_FileBrowseNext+0x4e0>
    
    if (!pVol->bMount)
 3041dd4:	e0bff717 	ldw	r2,-36(fp)
 3041dd8:	10800417 	ldw	r2,16(r2)
 3041ddc:	1004c03a 	cmpne	r2,r2,zero
 3041de0:	1000021e 	bne	r2,zero,3041dec <Fat_FileBrowseNext+0x60>
        return FALSE;
 3041de4:	e03fff15 	stw	zero,-4(fp)
 3041de8:	00012006 	br	304226c <Fat_FileBrowseNext+0x4e0>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
 3041dec:	e0bffd17 	ldw	r2,-12(fp)
 3041df0:	10800017 	ldw	r2,0(r2)
 3041df4:	10c00044 	addi	r3,r2,1
 3041df8:	e0bffd17 	ldw	r2,-12(fp)
 3041dfc:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
 3041e00:	e0bffd17 	ldw	r2,-12(fp)
 3041e04:	11400017 	ldw	r5,0(r2)
 3041e08:	e13ff717 	ldw	r4,-36(fp)
 3041e0c:	30441b40 	call	30441b4 <fatFindDirectory>
 3041e10:	e0bff815 	stw	r2,-32(fp)
        if (!pDir)
 3041e14:	e0bff817 	ldw	r2,-32(fp)
 3041e18:	1004c03a 	cmpne	r2,r2,zero
 3041e1c:	1000021e 	bne	r2,zero,3041e28 <Fat_FileBrowseNext+0x9c>
            bError = TRUE;
 3041e20:	00800044 	movi	r2,1
 3041e24:	e0bffb15 	stw	r2,-20(fp)
            
        if (!bError){                        
 3041e28:	e0bffb17 	ldw	r2,-20(fp)
 3041e2c:	1004c03a 	cmpne	r2,r2,zero
 3041e30:	1001021e 	bne	r2,zero,304223c <Fat_FileBrowseNext+0x4b0>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
 3041e34:	e13ff817 	ldw	r4,-32(fp)
 3041e38:	30438900 	call	3043890 <fatIsValidDir>
 3041e3c:	1005003a 	cmpeq	r2,r2,zero
 3041e40:	1000fe1e 	bne	r2,zero,304223c <Fat_FileBrowseNext+0x4b0>
 3041e44:	e13ff817 	ldw	r4,-32(fp)
 3041e48:	30439380 	call	3043938 <fatIsUnusedDir>
 3041e4c:	1004c03a 	cmpne	r2,r2,zero
 3041e50:	1000fa1e 	bne	r2,zero,304223c <Fat_FileBrowseNext+0x4b0>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
 3041e54:	e0bff817 	ldw	r2,-32(fp)
 3041e58:	108002c3 	ldbu	r2,11(r2)
 3041e5c:	10803fcc 	andi	r2,r2,255
 3041e60:	108003cc 	andi	r2,r2,15
 3041e64:	108003d8 	cmpnei	r2,r2,15
 3041e68:	10007c1e 	bne	r2,zero,304205c <Fat_FileBrowseNext+0x2d0>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
 3041e6c:	e0bff817 	ldw	r2,-32(fp)
 3041e70:	e0bff615 	stw	r2,-40(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
 3041e74:	e0bff617 	ldw	r2,-40(fp)
 3041e78:	108002c3 	ldbu	r2,11(r2)
 3041e7c:	10803fcc 	andi	r2,r2,255
 3041e80:	108003cc 	andi	r2,r2,15
 3041e84:	108003e0 	cmpeqi	r2,r2,15
 3041e88:	1000031e 	bne	r2,zero,3041e98 <Fat_FileBrowseNext+0x10c>
                        bError = TRUE;
 3041e8c:	00800044 	movi	r2,1
 3041e90:	e0bffb15 	stw	r2,-20(fp)
 3041e94:	00002006 	br	3041f18 <Fat_FileBrowseNext+0x18c>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
 3041e98:	e0bff917 	ldw	r2,-28(fp)
 3041e9c:	1004c03a 	cmpne	r2,r2,zero
 3041ea0:	1000151e 	bne	r2,zero,3041ef8 <Fat_FileBrowseNext+0x16c>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
 3041ea4:	e0bffa17 	ldw	r2,-24(fp)
 3041ea8:	1004c03a 	cmpne	r2,r2,zero
 3041eac:	1000041e 	bne	r2,zero,3041ec0 <Fat_FileBrowseNext+0x134>
 3041eb0:	e0bff917 	ldw	r2,-28(fp)
 3041eb4:	10c0100c 	andi	r3,r2,64
 3041eb8:	e0bff917 	ldw	r2,-28(fp)
 3041ebc:	18800326 	beq	r3,r2,3041ecc <Fat_FileBrowseNext+0x140>
                                bError = TRUE;
 3041ec0:	00800044 	movi	r2,1
 3041ec4:	e0bffb15 	stw	r2,-20(fp)
 3041ec8:	00000506 	br	3041ee0 <Fat_FileBrowseNext+0x154>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
 3041ecc:	e0bff617 	ldw	r2,-40(fp)
 3041ed0:	10800003 	ldbu	r2,0(r2)
 3041ed4:	10803fcc 	andi	r2,r2,255
 3041ed8:	10800fcc 	andi	r2,r2,63
 3041edc:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
 3041ee0:	e0bffe17 	ldw	r2,-8(fp)
 3041ee4:	1009883a 	mov	r4,r2
 3041ee8:	01804004 	movi	r6,256
 3041eec:	000b883a 	mov	r5,zero
 3041ef0:	304bbfc0 	call	304bbfc <memset>
 3041ef4:	00000806 	br	3041f18 <Fat_FileBrowseNext+0x18c>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
 3041ef8:	e0bff617 	ldw	r2,-40(fp)
 3041efc:	10800003 	ldbu	r2,0(r2)
 3041f00:	10803fcc 	andi	r2,r2,255
 3041f04:	10c00fcc 	andi	r3,r2,63
 3041f08:	e0bff917 	ldw	r2,-28(fp)
 3041f0c:	18800226 	beq	r3,r2,3041f18 <Fat_FileBrowseNext+0x18c>
                                bError = TRUE;
 3041f10:	00800044 	movi	r2,1
 3041f14:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
 3041f18:	e0bffb17 	ldw	r2,-20(fp)
 3041f1c:	1004c03a 	cmpne	r2,r2,zero
 3041f20:	1000c61e 	bne	r2,zero,304223c <Fat_FileBrowseNext+0x4b0>
                        int BaseOffset;
                        bLongFilename = TRUE;
 3041f24:	00800044 	movi	r2,1
 3041f28:	e0bffa15 	stw	r2,-24(fp)
                        OrderValue--;
 3041f2c:	e0bff917 	ldw	r2,-28(fp)
 3041f30:	10bfffc4 	addi	r2,r2,-1
 3041f34:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
 3041f38:	e0bff917 	ldw	r2,-28(fp)
 3041f3c:	108006a4 	muli	r2,r2,26
 3041f40:	e0bff515 	stw	r2,-44(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
 3041f44:	e0fffe17 	ldw	r3,-8(fp)
 3041f48:	e0bff517 	ldw	r2,-44(fp)
 3041f4c:	1889883a 	add	r4,r3,r2
 3041f50:	e0bff617 	ldw	r2,-40(fp)
 3041f54:	10c00044 	addi	r3,r2,1
 3041f58:	18800003 	ldbu	r2,0(r3)
 3041f5c:	20800005 	stb	r2,0(r4)
 3041f60:	18800043 	ldbu	r2,1(r3)
 3041f64:	20800045 	stb	r2,1(r4)
 3041f68:	18800083 	ldbu	r2,2(r3)
 3041f6c:	20800085 	stb	r2,2(r4)
 3041f70:	188000c3 	ldbu	r2,3(r3)
 3041f74:	208000c5 	stb	r2,3(r4)
 3041f78:	18800103 	ldbu	r2,4(r3)
 3041f7c:	20800105 	stb	r2,4(r4)
 3041f80:	18800143 	ldbu	r2,5(r3)
 3041f84:	20800145 	stb	r2,5(r4)
 3041f88:	18800183 	ldbu	r2,6(r3)
 3041f8c:	20800185 	stb	r2,6(r4)
 3041f90:	188001c3 	ldbu	r2,7(r3)
 3041f94:	208001c5 	stb	r2,7(r4)
 3041f98:	18800203 	ldbu	r2,8(r3)
 3041f9c:	20800205 	stb	r2,8(r4)
 3041fa0:	18800243 	ldbu	r2,9(r3)
 3041fa4:	20800245 	stb	r2,9(r4)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
 3041fa8:	e0fffe17 	ldw	r3,-8(fp)
 3041fac:	e0bff517 	ldw	r2,-44(fp)
 3041fb0:	1885883a 	add	r2,r3,r2
 3041fb4:	11000284 	addi	r4,r2,10
 3041fb8:	e0bff617 	ldw	r2,-40(fp)
 3041fbc:	10c00384 	addi	r3,r2,14
 3041fc0:	18800003 	ldbu	r2,0(r3)
 3041fc4:	20800005 	stb	r2,0(r4)
 3041fc8:	18800043 	ldbu	r2,1(r3)
 3041fcc:	20800045 	stb	r2,1(r4)
 3041fd0:	18800083 	ldbu	r2,2(r3)
 3041fd4:	20800085 	stb	r2,2(r4)
 3041fd8:	188000c3 	ldbu	r2,3(r3)
 3041fdc:	208000c5 	stb	r2,3(r4)
 3041fe0:	18800103 	ldbu	r2,4(r3)
 3041fe4:	20800105 	stb	r2,4(r4)
 3041fe8:	18800143 	ldbu	r2,5(r3)
 3041fec:	20800145 	stb	r2,5(r4)
 3041ff0:	18800183 	ldbu	r2,6(r3)
 3041ff4:	20800185 	stb	r2,6(r4)
 3041ff8:	188001c3 	ldbu	r2,7(r3)
 3041ffc:	208001c5 	stb	r2,7(r4)
 3042000:	18800203 	ldbu	r2,8(r3)
 3042004:	20800205 	stb	r2,8(r4)
 3042008:	18800243 	ldbu	r2,9(r3)
 304200c:	20800245 	stb	r2,9(r4)
 3042010:	18800283 	ldbu	r2,10(r3)
 3042014:	20800285 	stb	r2,10(r4)
 3042018:	188002c3 	ldbu	r2,11(r3)
 304201c:	208002c5 	stb	r2,11(r4)
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
 3042020:	e0fffe17 	ldw	r3,-8(fp)
 3042024:	e0bff517 	ldw	r2,-44(fp)
 3042028:	1885883a 	add	r2,r3,r2
 304202c:	11000584 	addi	r4,r2,22
 3042030:	e0bff617 	ldw	r2,-40(fp)
 3042034:	10c00704 	addi	r3,r2,28
 3042038:	18800003 	ldbu	r2,0(r3)
 304203c:	20800005 	stb	r2,0(r4)
 3042040:	18800043 	ldbu	r2,1(r3)
 3042044:	20800045 	stb	r2,1(r4)
 3042048:	18800083 	ldbu	r2,2(r3)
 304204c:	20800085 	stb	r2,2(r4)
 3042050:	188000c3 	ldbu	r2,3(r3)
 3042054:	208000c5 	stb	r2,3(r4)
 3042058:	00007806 	br	304223c <Fat_FileBrowseNext+0x4b0>
                    }                        
                }else{
                    if (bLongFilename){
 304205c:	e0bffa17 	ldw	r2,-24(fp)
 3042060:	1005003a 	cmpeq	r2,r2,zero
 3042064:	10000f1e 	bne	r2,zero,30420a4 <Fat_FileBrowseNext+0x318>
                        pFileContext->Attribute = ATTR_LONG_NAME;
 3042068:	e0fffe17 	ldw	r3,-8(fp)
 304206c:	008003c4 	movi	r2,15
 3042070:	18804505 	stb	r2,276(r3)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
 3042074:	e0bff817 	ldw	r2,-32(fp)
 3042078:	108002c3 	ldbu	r2,11(r2)
 304207c:	10803fcc 	andi	r2,r2,255
 3042080:	10800c0c 	andi	r2,r2,48
 3042084:	1004c03a 	cmpne	r2,r2,zero
 3042088:	1000031e 	bne	r2,zero,3042098 <Fat_FileBrowseNext+0x30c>
                            bError = TRUE;
 304208c:	00800044 	movi	r2,1
 3042090:	e0bffb15 	stw	r2,-20(fp)
 3042094:	00000806 	br	30420b8 <Fat_FileBrowseNext+0x32c>
                        else    
                            bFind = TRUE;
 3042098:	00800044 	movi	r2,1
 304209c:	e0bffc15 	stw	r2,-16(fp)
 30420a0:	00000506 	br	30420b8 <Fat_FileBrowseNext+0x32c>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
 30420a4:	e17ffe17 	ldw	r5,-8(fp)
 30420a8:	e13ff817 	ldw	r4,-32(fp)
 30420ac:	304238c0 	call	304238c <fatComposeShortFilename>
                        bFind = TRUE;
 30420b0:	00800044 	movi	r2,1
 30420b4:	e0bffc15 	stw	r2,-16(fp)
                    }
                    
                    if (bFind){
 30420b8:	e0bffc17 	ldw	r2,-16(fp)
 30420bc:	1005003a 	cmpeq	r2,r2,zero
 30420c0:	10005e1e 	bne	r2,zero,304223c <Fat_FileBrowseNext+0x4b0>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
 30420c4:	e0fffe17 	ldw	r3,-8(fp)
 30420c8:	e0bffa17 	ldw	r2,-24(fp)
 30420cc:	18804015 	stw	r2,256(r3)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
 30420d0:	e0bff817 	ldw	r2,-32(fp)
 30420d4:	108002c3 	ldbu	r2,11(r2)
 30420d8:	10803fcc 	andi	r2,r2,255
 30420dc:	1080080c 	andi	r2,r2,32
 30420e0:	1006c03a 	cmpne	r3,r2,zero
 30420e4:	e0bffe17 	ldw	r2,-8(fp)
 30420e8:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
 30420ec:	e0bff817 	ldw	r2,-32(fp)
 30420f0:	108002c3 	ldbu	r2,11(r2)
 30420f4:	10803fcc 	andi	r2,r2,255
 30420f8:	1080040c 	andi	r2,r2,16
 30420fc:	1006c03a 	cmpne	r3,r2,zero
 3042100:	e0bffe17 	ldw	r2,-8(fp)
 3042104:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
 3042108:	e0bff817 	ldw	r2,-32(fp)
 304210c:	108002c3 	ldbu	r2,11(r2)
 3042110:	10803fcc 	andi	r2,r2,255
 3042114:	1080020c 	andi	r2,r2,8
 3042118:	1006c03a 	cmpne	r3,r2,zero
 304211c:	e0bffe17 	ldw	r2,-8(fp)
 3042120:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
 3042124:	e0bffd17 	ldw	r2,-12(fp)
 3042128:	10c00017 	ldw	r3,0(r2)
 304212c:	e0bffe17 	ldw	r2,-8(fp)
 3042130:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
 3042134:	e0bff817 	ldw	r2,-32(fp)
 3042138:	10c002c3 	ldbu	r3,11(r2)
 304213c:	e0bffe17 	ldw	r2,-8(fp)
 3042140:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
 3042144:	e0bff817 	ldw	r2,-32(fp)
 3042148:	10c00383 	ldbu	r3,14(r2)
 304214c:	108003c3 	ldbu	r2,15(r2)
 3042150:	1004923a 	slli	r2,r2,8
 3042154:	10c4b03a 	or	r2,r2,r3
 3042158:	1007883a 	mov	r3,r2
 304215c:	e0bffe17 	ldw	r2,-8(fp)
 3042160:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
 3042164:	e0bff817 	ldw	r2,-32(fp)
 3042168:	10c00483 	ldbu	r3,18(r2)
 304216c:	108004c3 	ldbu	r2,19(r2)
 3042170:	1004923a 	slli	r2,r2,8
 3042174:	10c4b03a 	or	r2,r2,r3
 3042178:	1007883a 	mov	r3,r2
 304217c:	e0bffe17 	ldw	r2,-8(fp)
 3042180:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
 3042184:	e0bff817 	ldw	r2,-32(fp)
 3042188:	10c00503 	ldbu	r3,20(r2)
 304218c:	10800543 	ldbu	r2,21(r2)
 3042190:	1004923a 	slli	r2,r2,8
 3042194:	10c4b03a 	or	r2,r2,r3
 3042198:	1007883a 	mov	r3,r2
 304219c:	e0bffe17 	ldw	r2,-8(fp)
 30421a0:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
 30421a4:	e0bff817 	ldw	r2,-32(fp)
 30421a8:	10c00583 	ldbu	r3,22(r2)
 30421ac:	108005c3 	ldbu	r2,23(r2)
 30421b0:	1004923a 	slli	r2,r2,8
 30421b4:	10c4b03a 	or	r2,r2,r3
 30421b8:	1007883a 	mov	r3,r2
 30421bc:	e0bffe17 	ldw	r2,-8(fp)
 30421c0:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
 30421c4:	e0bff817 	ldw	r2,-32(fp)
 30421c8:	10c00603 	ldbu	r3,24(r2)
 30421cc:	10800643 	ldbu	r2,25(r2)
 30421d0:	1004923a 	slli	r2,r2,8
 30421d4:	10c4b03a 	or	r2,r2,r3
 30421d8:	1007883a 	mov	r3,r2
 30421dc:	e0bffe17 	ldw	r2,-8(fp)
 30421e0:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
 30421e4:	e0bff817 	ldw	r2,-32(fp)
 30421e8:	10c00683 	ldbu	r3,26(r2)
 30421ec:	108006c3 	ldbu	r2,27(r2)
 30421f0:	1004923a 	slli	r2,r2,8
 30421f4:	10c4b03a 	or	r2,r2,r3
 30421f8:	1007883a 	mov	r3,r2
 30421fc:	e0bffe17 	ldw	r2,-8(fp)
 3042200:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
 3042204:	e0fff817 	ldw	r3,-32(fp)
 3042208:	19000703 	ldbu	r4,28(r3)
 304220c:	18800743 	ldbu	r2,29(r3)
 3042210:	1004923a 	slli	r2,r2,8
 3042214:	1108b03a 	or	r4,r2,r4
 3042218:	18800783 	ldbu	r2,30(r3)
 304221c:	1004943a 	slli	r2,r2,16
 3042220:	1108b03a 	or	r4,r2,r4
 3042224:	188007c3 	ldbu	r2,31(r3)
 3042228:	1004963a 	slli	r2,r2,24
 304222c:	1104b03a 	or	r2,r2,r4
 3042230:	1007883a 	mov	r3,r2
 3042234:	e0bffe17 	ldw	r2,-8(fp)
 3042238:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
 304223c:	e0bffc17 	ldw	r2,-16(fp)
 3042240:	1004c03a 	cmpne	r2,r2,zero
 3042244:	1000071e 	bne	r2,zero,3042264 <Fat_FileBrowseNext+0x4d8>
 3042248:	e13ff817 	ldw	r4,-32(fp)
 304224c:	30438400 	call	3043840 <fatIsLastDir>
 3042250:	1004c03a 	cmpne	r2,r2,zero
 3042254:	1000031e 	bne	r2,zero,3042264 <Fat_FileBrowseNext+0x4d8>
 3042258:	e0bffb17 	ldw	r2,-20(fp)
 304225c:	1005003a 	cmpeq	r2,r2,zero
 3042260:	103ee21e 	bne	r2,zero,3041dec <Fat_FileBrowseNext+0x60>
    
    return bFind;
 3042264:	e0bffc17 	ldw	r2,-16(fp)
 3042268:	e0bfff15 	stw	r2,-4(fp)
 304226c:	e0bfff17 	ldw	r2,-4(fp)
    
}
 3042270:	e037883a 	mov	sp,fp
 3042274:	dfc00117 	ldw	ra,4(sp)
 3042278:	df000017 	ldw	fp,0(sp)
 304227c:	dec00204 	addi	sp,sp,8
 3042280:	f800283a 	ret

03042284 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
 3042284:	deffb004 	addi	sp,sp,-320
 3042288:	dfc04f15 	stw	ra,316(sp)
 304228c:	df004e15 	stw	fp,312(sp)
 3042290:	df004e04 	addi	fp,sp,312
 3042294:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
 3042298:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
 304229c:	e17fb304 	addi	r5,fp,-308
 30422a0:	e13fff17 	ldw	r4,-4(fp)
 30422a4:	3041d100 	call	3041d10 <Fat_FileBrowseBegin>
 30422a8:	1005003a 	cmpeq	r2,r2,zero
 30422ac:	1000091e 	bne	r2,zero,30422d4 <Fat_FileCount+0x50>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
 30422b0:	00000306 	br	30422c0 <Fat_FileCount+0x3c>
            nCount++;
 30422b4:	e0bfb217 	ldw	r2,-312(fp)
 30422b8:	10800044 	addi	r2,r2,1
 30422bc:	e0bfb215 	stw	r2,-312(fp)
 30422c0:	e13fb304 	addi	r4,fp,-308
 30422c4:	e17fb504 	addi	r5,fp,-300
 30422c8:	3041d8c0 	call	3041d8c <Fat_FileBrowseNext>
 30422cc:	1004c03a 	cmpne	r2,r2,zero
 30422d0:	103ff81e 	bne	r2,zero,30422b4 <Fat_FileCount+0x30>
    }
    
    return nCount;
 30422d4:	e0bfb217 	ldw	r2,-312(fp)
}
 30422d8:	e037883a 	mov	sp,fp
 30422dc:	dfc00117 	ldw	ra,4(sp)
 30422e0:	df000017 	ldw	fp,0(sp)
 30422e4:	dec00204 	addi	sp,sp,8
 30422e8:	f800283a 	ret

030422ec <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
 30422ec:	defffc04 	addi	sp,sp,-16
 30422f0:	df000315 	stw	fp,12(sp)
 30422f4:	df000304 	addi	fp,sp,12
 30422f8:	e13ffe15 	stw	r4,-8(fp)
 30422fc:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
 3042300:	00800044 	movi	r2,1
 3042304:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
 3042308:	00000e06 	br	3042344 <fatSameLongFilename+0x58>
        if (*p1 != *p2){
 304230c:	e0bffe17 	ldw	r2,-8(fp)
 3042310:	10c0000b 	ldhu	r3,0(r2)
 3042314:	e0bfff17 	ldw	r2,-4(fp)
 3042318:	1080000b 	ldhu	r2,0(r2)
 304231c:	18ffffcc 	andi	r3,r3,65535
 3042320:	10bfffcc 	andi	r2,r2,65535
 3042324:	18800126 	beq	r3,r2,304232c <fatSameLongFilename+0x40>
            bSame = FALSE;
 3042328:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
 304232c:	e0bffe17 	ldw	r2,-8(fp)
 3042330:	10800084 	addi	r2,r2,2
 3042334:	e0bffe15 	stw	r2,-8(fp)
        p2++;
 3042338:	e0bfff17 	ldw	r2,-4(fp)
 304233c:	10800084 	addi	r2,r2,2
 3042340:	e0bfff15 	stw	r2,-4(fp)
 3042344:	e0bffd17 	ldw	r2,-12(fp)
 3042348:	1005003a 	cmpeq	r2,r2,zero
 304234c:	10000a1e 	bne	r2,zero,3042378 <fatSameLongFilename+0x8c>
 3042350:	e0bffe17 	ldw	r2,-8(fp)
 3042354:	1080000b 	ldhu	r2,0(r2)
 3042358:	10bfffcc 	andi	r2,r2,65535
 304235c:	1004c03a 	cmpne	r2,r2,zero
 3042360:	103fea1e 	bne	r2,zero,304230c <fatSameLongFilename+0x20>
 3042364:	e0bfff17 	ldw	r2,-4(fp)
 3042368:	1080000b 	ldhu	r2,0(r2)
 304236c:	10bfffcc 	andi	r2,r2,65535
 3042370:	1004c03a 	cmpne	r2,r2,zero
 3042374:	103fe51e 	bne	r2,zero,304230c <fatSameLongFilename+0x20>
        
    }
    
    return bSame;
 3042378:	e0bffd17 	ldw	r2,-12(fp)
}
 304237c:	e037883a 	mov	sp,fp
 3042380:	df000017 	ldw	fp,0(sp)
 3042384:	dec00104 	addi	sp,sp,4
 3042388:	f800283a 	ret

0304238c <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
 304238c:	defffb04 	addi	sp,sp,-20
 3042390:	df000415 	stw	fp,16(sp)
 3042394:	df000404 	addi	fp,sp,16
 3042398:	e13ffe15 	stw	r4,-8(fp)
 304239c:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
 30423a0:	e03ffc15 	stw	zero,-16(fp)
    
    i=0;
 30423a4:	e03ffd15 	stw	zero,-12(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
 30423a8:	00000f06 	br	30423e8 <fatComposeShortFilename+0x5c>
        szFilename[nPos++] = pDir->Name[i++];
 30423ac:	e0bffc17 	ldw	r2,-16(fp)
 30423b0:	1007883a 	mov	r3,r2
 30423b4:	e0bfff17 	ldw	r2,-4(fp)
 30423b8:	1889883a 	add	r4,r3,r2
 30423bc:	e0fffd17 	ldw	r3,-12(fp)
 30423c0:	e0bffe17 	ldw	r2,-8(fp)
 30423c4:	10c5883a 	add	r2,r2,r3
 30423c8:	10800003 	ldbu	r2,0(r2)
 30423cc:	20800005 	stb	r2,0(r4)
 30423d0:	e0bffc17 	ldw	r2,-16(fp)
 30423d4:	10800044 	addi	r2,r2,1
 30423d8:	e0bffc15 	stw	r2,-16(fp)
 30423dc:	e0bffd17 	ldw	r2,-12(fp)
 30423e0:	10800044 	addi	r2,r2,1
 30423e4:	e0bffd15 	stw	r2,-12(fp)
 30423e8:	e0bffd17 	ldw	r2,-12(fp)
 30423ec:	10800208 	cmpgei	r2,r2,8
 30423f0:	1000121e 	bne	r2,zero,304243c <fatComposeShortFilename+0xb0>
 30423f4:	e0fffd17 	ldw	r3,-12(fp)
 30423f8:	e0bffe17 	ldw	r2,-8(fp)
 30423fc:	10c5883a 	add	r2,r2,r3
 3042400:	10800003 	ldbu	r2,0(r2)
 3042404:	10803fcc 	andi	r2,r2,255
 3042408:	1080201c 	xori	r2,r2,128
 304240c:	10bfe004 	addi	r2,r2,-128
 3042410:	1005003a 	cmpeq	r2,r2,zero
 3042414:	1000091e 	bne	r2,zero,304243c <fatComposeShortFilename+0xb0>
 3042418:	e0fffd17 	ldw	r3,-12(fp)
 304241c:	e0bffe17 	ldw	r2,-8(fp)
 3042420:	10c5883a 	add	r2,r2,r3
 3042424:	10800003 	ldbu	r2,0(r2)
 3042428:	10803fcc 	andi	r2,r2,255
 304242c:	1080201c 	xori	r2,r2,128
 3042430:	10bfe004 	addi	r2,r2,-128
 3042434:	10800818 	cmpnei	r2,r2,32
 3042438:	103fdc1e 	bne	r2,zero,30423ac <fatComposeShortFilename+0x20>
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
 304243c:	e0bffe17 	ldw	r2,-8(fp)
 3042440:	108002c3 	ldbu	r2,11(r2)
 3042444:	10803fcc 	andi	r2,r2,255
 3042448:	10800c0c 	andi	r2,r2,48
 304244c:	1005003a 	cmpeq	r2,r2,zero
 3042450:	1000381e 	bne	r2,zero,3042534 <fatComposeShortFilename+0x1a8>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
 3042454:	e0bffe17 	ldw	r2,-8(fp)
 3042458:	108002c3 	ldbu	r2,11(r2)
 304245c:	10803fcc 	andi	r2,r2,255
 3042460:	10800c0c 	andi	r2,r2,48
 3042464:	1005003a 	cmpeq	r2,r2,zero
 3042468:	1000091e 	bne	r2,zero,3042490 <fatComposeShortFilename+0x104>
            szFilename[nPos++] = '.';   
 304246c:	e0bffc17 	ldw	r2,-16(fp)
 3042470:	1007883a 	mov	r3,r2
 3042474:	e0bfff17 	ldw	r2,-4(fp)
 3042478:	1887883a 	add	r3,r3,r2
 304247c:	00800b84 	movi	r2,46
 3042480:	18800005 	stb	r2,0(r3)
 3042484:	e0bffc17 	ldw	r2,-16(fp)
 3042488:	10800044 	addi	r2,r2,1
 304248c:	e0bffc15 	stw	r2,-16(fp)
        i=0;
 3042490:	e03ffd15 	stw	zero,-12(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
 3042494:	00001006 	br	30424d8 <fatComposeShortFilename+0x14c>
            szFilename[nPos++] = pDir->Extension[i++];
 3042498:	e0bffc17 	ldw	r2,-16(fp)
 304249c:	1007883a 	mov	r3,r2
 30424a0:	e0bfff17 	ldw	r2,-4(fp)
 30424a4:	1889883a 	add	r4,r3,r2
 30424a8:	e0fffd17 	ldw	r3,-12(fp)
 30424ac:	e0bffe17 	ldw	r2,-8(fp)
 30424b0:	1885883a 	add	r2,r3,r2
 30424b4:	10800204 	addi	r2,r2,8
 30424b8:	10800003 	ldbu	r2,0(r2)
 30424bc:	20800005 	stb	r2,0(r4)
 30424c0:	e0bffc17 	ldw	r2,-16(fp)
 30424c4:	10800044 	addi	r2,r2,1
 30424c8:	e0bffc15 	stw	r2,-16(fp)
 30424cc:	e0bffd17 	ldw	r2,-12(fp)
 30424d0:	10800044 	addi	r2,r2,1
 30424d4:	e0bffd15 	stw	r2,-12(fp)
 30424d8:	e0bffd17 	ldw	r2,-12(fp)
 30424dc:	108000c8 	cmpgei	r2,r2,3
 30424e0:	1000141e 	bne	r2,zero,3042534 <fatComposeShortFilename+0x1a8>
 30424e4:	e0fffd17 	ldw	r3,-12(fp)
 30424e8:	e0bffe17 	ldw	r2,-8(fp)
 30424ec:	1885883a 	add	r2,r3,r2
 30424f0:	10800204 	addi	r2,r2,8
 30424f4:	10800003 	ldbu	r2,0(r2)
 30424f8:	10803fcc 	andi	r2,r2,255
 30424fc:	1080201c 	xori	r2,r2,128
 3042500:	10bfe004 	addi	r2,r2,-128
 3042504:	1005003a 	cmpeq	r2,r2,zero
 3042508:	10000a1e 	bne	r2,zero,3042534 <fatComposeShortFilename+0x1a8>
 304250c:	e0fffd17 	ldw	r3,-12(fp)
 3042510:	e0bffe17 	ldw	r2,-8(fp)
 3042514:	1885883a 	add	r2,r3,r2
 3042518:	10800204 	addi	r2,r2,8
 304251c:	10800003 	ldbu	r2,0(r2)
 3042520:	10803fcc 	andi	r2,r2,255
 3042524:	1080201c 	xori	r2,r2,128
 3042528:	10bfe004 	addi	r2,r2,-128
 304252c:	10800818 	cmpnei	r2,r2,32
 3042530:	103fd91e 	bne	r2,zero,3042498 <fatComposeShortFilename+0x10c>
    }            
    szFilename[nPos++] = 0;
 3042534:	e0bffc17 	ldw	r2,-16(fp)
 3042538:	1007883a 	mov	r3,r2
 304253c:	e0bfff17 	ldw	r2,-4(fp)
 3042540:	1885883a 	add	r2,r3,r2
 3042544:	10000005 	stb	zero,0(r2)
 3042548:	e0bffc17 	ldw	r2,-16(fp)
 304254c:	10800044 	addi	r2,r2,1
 3042550:	e0bffc15 	stw	r2,-16(fp)
}
 3042554:	e037883a 	mov	sp,fp
 3042558:	df000017 	ldw	fp,0(sp)
 304255c:	dec00104 	addi	sp,sp,4
 3042560:	f800283a 	ret

03042564 <Fat_FileExist>:





bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
 3042564:	deffaf04 	addi	sp,sp,-324
 3042568:	dfc05015 	stw	ra,320(sp)
 304256c:	df004f15 	stw	fp,316(sp)
 3042570:	df004f04 	addi	fp,sp,316
 3042574:	e13ffe15 	stw	r4,-8(fp)
 3042578:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
 304257c:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
 3042580:	e17fb204 	addi	r5,fp,-312
 3042584:	e13ffe17 	ldw	r4,-8(fp)
 3042588:	3041d100 	call	3041d10 <Fat_FileBrowseBegin>
 304258c:	1005003a 	cmpeq	r2,r2,zero
 3042590:	10001a1e 	bne	r2,zero,30425fc <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
 3042594:	00000f06 	br	30425d4 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
 3042598:	e0bff417 	ldw	r2,-48(fp)
 304259c:	1005003a 	cmpeq	r2,r2,zero
 30425a0:	1000051e 	bne	r2,zero,30425b8 <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
 30425a4:	e13fb404 	addi	r4,fp,-304
 30425a8:	e17fff17 	ldw	r5,-4(fp)
 30425ac:	30422ec0 	call	30422ec <fatSameLongFilename>
 30425b0:	e0bfb115 	stw	r2,-316(fp)
 30425b4:	00000706 	br	30425d4 <Fat_FileExist+0x70>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
 30425b8:	e13fb404 	addi	r4,fp,-304
 30425bc:	e17fff17 	ldw	r5,-4(fp)
 30425c0:	304c2cc0 	call	304c2cc <strcasecmp>
 30425c4:	1004c03a 	cmpne	r2,r2,zero
 30425c8:	1000021e 	bne	r2,zero,30425d4 <Fat_FileExist+0x70>
                    bFind = TRUE;
 30425cc:	00800044 	movi	r2,1
 30425d0:	e0bfb115 	stw	r2,-316(fp)
 30425d4:	e0bfb117 	ldw	r2,-316(fp)
 30425d8:	1004c03a 	cmpne	r2,r2,zero
 30425dc:	1000051e 	bne	r2,zero,30425f4 <Fat_FileExist+0x90>
 30425e0:	e13fb204 	addi	r4,fp,-312
 30425e4:	e17fb404 	addi	r5,fp,-304
 30425e8:	3041d8c0 	call	3041d8c <Fat_FileBrowseNext>
 30425ec:	1004c03a 	cmpne	r2,r2,zero
 30425f0:	103fe91e 	bne	r2,zero,3042598 <Fat_FileExist+0x34>
            }    
        } // while 
        Fat_FileClose(Fat); 
 30425f4:	e13ffe17 	ldw	r4,-8(fp)
 30425f8:	3042e980 	call	3042e98 <Fat_FileClose>
    }
    return bFind;            
 30425fc:	e0bfb117 	ldw	r2,-316(fp)
}    
 3042600:	e037883a 	mov	sp,fp
 3042604:	dfc00117 	ldw	ra,4(sp)
 3042608:	df000017 	ldw	fp,0(sp)
 304260c:	dec00204 	addi	sp,sp,8
 3042610:	f800283a 	ret

03042614 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
 3042614:	deff6b04 	addi	sp,sp,-596
 3042618:	dfc09415 	stw	ra,592(sp)
 304261c:	df009315 	stw	fp,588(sp)
 3042620:	df009304 	addi	fp,sp,588
 3042624:	e13ffe15 	stw	r4,-8(fp)
 3042628:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
 304262c:	e03f7115 	stw	zero,-572(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    FAT_FILE_INFO *pFile = 0;
 3042630:	e03f7015 	stw	zero,-576(fp)
    int nPos = 0;
 3042634:	e03f6f15 	stw	zero,-580(fp)
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
 3042638:	e17f7204 	addi	r5,fp,-568
 304263c:	e13ffe17 	ldw	r4,-8(fp)
 3042640:	3041d100 	call	3041d10 <Fat_FileBrowseBegin>
 3042644:	1005003a 	cmpeq	r2,r2,zero
 3042648:	10007a1e 	bne	r2,zero,3042834 <Fat_FileOpen+0x220>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
 304264c:	00005206 	br	3042798 <Fat_FileOpen+0x184>
            if (FileContext.bLongFilename){
 3042650:	e0bfb417 	ldw	r2,-304(fp)
 3042654:	1005003a 	cmpeq	r2,r2,zero
 3042658:	1000481e 	bne	r2,zero,304277c <Fat_FileOpen+0x168>
                //bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
                nPos = 0;
 304265c:	e03f6f15 	stw	zero,-580(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
 3042660:	e0bf7404 	addi	r2,fp,-560
 3042664:	e0bf6e15 	stw	r2,-584(fp)
                pData8 = FileContext.szName;
 3042668:	e0bf7404 	addi	r2,fp,-560
 304266c:	e0bf6d15 	stw	r2,-588(fp)
                while(*pData16){
 3042670:	00003106 	br	3042738 <Fat_FileOpen+0x124>
                    if (*pData8 && *pData8 != ' ')
 3042674:	e0bf6d17 	ldw	r2,-588(fp)
 3042678:	10800003 	ldbu	r2,0(r2)
 304267c:	10803fcc 	andi	r2,r2,255
 3042680:	1005003a 	cmpeq	r2,r2,zero
 3042684:	10000f1e 	bne	r2,zero,30426c4 <Fat_FileOpen+0xb0>
 3042688:	e0bf6d17 	ldw	r2,-588(fp)
 304268c:	10800003 	ldbu	r2,0(r2)
 3042690:	10803fcc 	andi	r2,r2,255
 3042694:	10800820 	cmpeqi	r2,r2,32
 3042698:	10000a1e 	bne	r2,zero,30426c4 <Fat_FileOpen+0xb0>
                        szWaveFilename[nPos++] = *pData8;
 304269c:	e13f6f17 	ldw	r4,-580(fp)
 30426a0:	e0bf6d17 	ldw	r2,-588(fp)
 30426a4:	10800003 	ldbu	r2,0(r2)
 30426a8:	1007883a 	mov	r3,r2
 30426ac:	e0bfbe04 	addi	r2,fp,-264
 30426b0:	1105883a 	add	r2,r2,r4
 30426b4:	10c00005 	stb	r3,0(r2)
 30426b8:	e0bf6f17 	ldw	r2,-580(fp)
 30426bc:	10800044 	addi	r2,r2,1
 30426c0:	e0bf6f15 	stw	r2,-580(fp)
                    pData8++;
 30426c4:	e0bf6d17 	ldw	r2,-588(fp)
 30426c8:	10800044 	addi	r2,r2,1
 30426cc:	e0bf6d15 	stw	r2,-588(fp)
                    if (*pData8 && *pData8 != ' ')
 30426d0:	e0bf6d17 	ldw	r2,-588(fp)
 30426d4:	10800003 	ldbu	r2,0(r2)
 30426d8:	10803fcc 	andi	r2,r2,255
 30426dc:	1005003a 	cmpeq	r2,r2,zero
 30426e0:	10000f1e 	bne	r2,zero,3042720 <Fat_FileOpen+0x10c>
 30426e4:	e0bf6d17 	ldw	r2,-588(fp)
 30426e8:	10800003 	ldbu	r2,0(r2)
 30426ec:	10803fcc 	andi	r2,r2,255
 30426f0:	10800820 	cmpeqi	r2,r2,32
 30426f4:	10000a1e 	bne	r2,zero,3042720 <Fat_FileOpen+0x10c>
                        szWaveFilename[nPos++] = *pData8;
 30426f8:	e13f6f17 	ldw	r4,-580(fp)
 30426fc:	e0bf6d17 	ldw	r2,-588(fp)
 3042700:	10800003 	ldbu	r2,0(r2)
 3042704:	1007883a 	mov	r3,r2
 3042708:	e0bfbe04 	addi	r2,fp,-264
 304270c:	1105883a 	add	r2,r2,r4
 3042710:	10c00005 	stb	r3,0(r2)
 3042714:	e0bf6f17 	ldw	r2,-580(fp)
 3042718:	10800044 	addi	r2,r2,1
 304271c:	e0bf6f15 	stw	r2,-580(fp)
                    pData8++;                    
 3042720:	e0bf6d17 	ldw	r2,-588(fp)
 3042724:	10800044 	addi	r2,r2,1
 3042728:	e0bf6d15 	stw	r2,-588(fp)
                    //    
                    pData16++;
 304272c:	e0bf6e17 	ldw	r2,-584(fp)
 3042730:	10800084 	addi	r2,r2,2
 3042734:	e0bf6e15 	stw	r2,-584(fp)
 3042738:	e0bf6e17 	ldw	r2,-584(fp)
 304273c:	1080000b 	ldhu	r2,0(r2)
 3042740:	10bfffcc 	andi	r2,r2,65535
 3042744:	1004c03a 	cmpne	r2,r2,zero
 3042748:	103fca1e 	bne	r2,zero,3042674 <Fat_FileOpen+0x60>
                }
                szWaveFilename[nPos] = 0;
 304274c:	e0ff6f17 	ldw	r3,-580(fp)
 3042750:	e0bfbe04 	addi	r2,fp,-264
 3042754:	10c5883a 	add	r2,r2,r3
 3042758:	10000005 	stb	zero,0(r2)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
 304275c:	e17fbe04 	addi	r5,fp,-264
 3042760:	e13fff17 	ldw	r4,-4(fp)
 3042764:	304c37c0 	call	304c37c <strcmp>
 3042768:	1004c03a 	cmpne	r2,r2,zero
 304276c:	10000a1e 	bne	r2,zero,3042798 <Fat_FileOpen+0x184>
                    bFind = TRUE;
 3042770:	00800044 	movi	r2,1
 3042774:	e0bf7115 	stw	r2,-572(fp)
 3042778:	00000706 	br	3042798 <Fat_FileOpen+0x184>
            }else{
                if (strcmpi(FileContext.szName, pFilename) == 0)
 304277c:	e13f7404 	addi	r4,fp,-560
 3042780:	e17fff17 	ldw	r5,-4(fp)
 3042784:	304c2cc0 	call	304c2cc <strcasecmp>
 3042788:	1004c03a 	cmpne	r2,r2,zero
 304278c:	1000021e 	bne	r2,zero,3042798 <Fat_FileOpen+0x184>
                    bFind = TRUE;
 3042790:	00800044 	movi	r2,1
 3042794:	e0bf7115 	stw	r2,-572(fp)
 3042798:	e0bf7117 	ldw	r2,-572(fp)
 304279c:	1004c03a 	cmpne	r2,r2,zero
 30427a0:	1000051e 	bne	r2,zero,30427b8 <Fat_FileOpen+0x1a4>
 30427a4:	e13f7204 	addi	r4,fp,-568
 30427a8:	e17f7404 	addi	r5,fp,-560
 30427ac:	3041d8c0 	call	3041d8c <Fat_FileBrowseNext>
 30427b0:	1004c03a 	cmpne	r2,r2,zero
 30427b4:	103fa61e 	bne	r2,zero,3042650 <Fat_FileOpen+0x3c>
            }    
        } // while 
        
        if (bFind){
 30427b8:	e0bf7117 	ldw	r2,-572(fp)
 30427bc:	1005003a 	cmpeq	r2,r2,zero
 30427c0:	10001c1e 	bne	r2,zero,3042834 <Fat_FileOpen+0x220>
            pFile = malloc(sizeof(FAT_FILE_INFO));
 30427c4:	01005004 	movi	r4,320
 30427c8:	304b4080 	call	304b408 <malloc>
 30427cc:	e0bf7015 	stw	r2,-576(fp)
            if (pFile){
 30427d0:	e0bf7017 	ldw	r2,-576(fp)
 30427d4:	1005003a 	cmpeq	r2,r2,zero
 30427d8:	1000161e 	bne	r2,zero,3042834 <Fat_FileOpen+0x220>
                pFile->OpenAttribute = FILE_OPEN_READ; 
 30427dc:	e0ff7017 	ldw	r3,-576(fp)
 30427e0:	00800044 	movi	r2,1
 30427e4:	18800115 	stw	r2,4(r3)
                pFile->SeekPos = 0;
 30427e8:	e0bf7017 	ldw	r2,-576(fp)
 30427ec:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
 30427f0:	e0bf7017 	ldw	r2,-576(fp)
 30427f4:	11000504 	addi	r4,r2,20
 30427f8:	e17f7404 	addi	r5,fp,-560
 30427fc:	01804a04 	movi	r6,296
 3042800:	304bb5c0 	call	304bb5c <memcpy>
                pFile->IsOpened = TRUE;
 3042804:	e0ff7017 	ldw	r3,-576(fp)
 3042808:	00800044 	movi	r2,1
 304280c:	18800015 	stw	r2,0(r3)
                pFile->Cluster = FileContext.FirstLogicalCluster;
 3042810:	e0bfbc8b 	ldhu	r2,-270(fp)
 3042814:	10ffffcc 	andi	r3,r2,65535
 3042818:	e0bf7017 	ldw	r2,-576(fp)
 304281c:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
 3042820:	e0bf7017 	ldw	r2,-576(fp)
 3042824:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
 3042828:	e0ff7017 	ldw	r3,-576(fp)
 304282c:	e0bffe17 	ldw	r2,-8(fp)
 3042830:	18804f15 	stw	r2,316(r3)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
 3042834:	e0bf7017 	ldw	r2,-576(fp)
}
 3042838:	e037883a 	mov	sp,fp
 304283c:	dfc00117 	ldw	ra,4(sp)
 3042840:	df000017 	ldw	fp,0(sp)
 3042844:	dec00204 	addi	sp,sp,8
 3042848:	f800283a 	ret

0304284c <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
 304284c:	defffc04 	addi	sp,sp,-16
 3042850:	df000315 	stw	fp,12(sp)
 3042854:	df000304 	addi	fp,sp,12
 3042858:	e13ffe15 	stw	r4,-8(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
 304285c:	e0bffe17 	ldw	r2,-8(fp)
 3042860:	e0bffd15 	stw	r2,-12(fp)
    if (f->IsOpened)
 3042864:	e0bffd17 	ldw	r2,-12(fp)
 3042868:	10800017 	ldw	r2,0(r2)
 304286c:	1005003a 	cmpeq	r2,r2,zero
 3042870:	1000041e 	bne	r2,zero,3042884 <Fat_FileSize+0x38>
        return f->Directory.FileSize;
 3042874:	e0bffd17 	ldw	r2,-12(fp)
 3042878:	10804e17 	ldw	r2,312(r2)
 304287c:	e0bfff15 	stw	r2,-4(fp)
 3042880:	00000106 	br	3042888 <Fat_FileSize+0x3c>
    return 0;        
 3042884:	e03fff15 	stw	zero,-4(fp)
 3042888:	e0bfff17 	ldw	r2,-4(fp)
}
 304288c:	e037883a 	mov	sp,fp
 3042890:	df000017 	ldw	fp,0(sp)
 3042894:	dec00104 	addi	sp,sp,4
 3042898:	f800283a 	ret

0304289c <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
 304289c:	deffee04 	addi	sp,sp,-72
 30428a0:	dfc01115 	stw	ra,68(sp)
 30428a4:	df001015 	stw	fp,64(sp)
 30428a8:	df001004 	addi	fp,sp,64
 30428ac:	e13ffc15 	stw	r4,-16(fp)
 30428b0:	e17ffd15 	stw	r5,-12(fp)
 30428b4:	e1bffe15 	stw	r6,-8(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
 30428b8:	e0bffc17 	ldw	r2,-16(fp)
 30428bc:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
 30428c0:	e03ff415 	stw	zero,-48(fp)
    int s;
    bool bSuccess= TRUE;
 30428c4:	00800044 	movi	r2,1
 30428c8:	e0bff115 	stw	r2,-60(fp)
    
    if (!f || !f->Fat)
 30428cc:	e0bffb17 	ldw	r2,-20(fp)
 30428d0:	1005003a 	cmpeq	r2,r2,zero
 30428d4:	1000041e 	bne	r2,zero,30428e8 <Fat_FileRead+0x4c>
 30428d8:	e0bffb17 	ldw	r2,-20(fp)
 30428dc:	10804f17 	ldw	r2,316(r2)
 30428e0:	1004c03a 	cmpne	r2,r2,zero
 30428e4:	1000021e 	bne	r2,zero,30428f0 <Fat_FileRead+0x54>
        return FALSE;
 30428e8:	e03fff15 	stw	zero,-4(fp)
 30428ec:	00011b06 	br	3042d5c <Fat_FileRead+0x4c0>
    pVol = (VOLUME_INFO *)f->Fat;        
 30428f0:	e0bffb17 	ldw	r2,-20(fp)
 30428f4:	10804f17 	ldw	r2,316(r2)
 30428f8:	e0bffa15 	stw	r2,-24(fp)
    
    if (!f->IsOpened){
 30428fc:	e0bffb17 	ldw	r2,-20(fp)
 3042900:	10800017 	ldw	r2,0(r2)
 3042904:	1004c03a 	cmpne	r2,r2,zero
 3042908:	1000061e 	bne	r2,zero,3042924 <Fat_FileRead+0x88>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
 304290c:	0100c1b4 	movhi	r4,774
 3042910:	2127b404 	addi	r4,r4,-24880
 3042914:	30469080 	call	3046908 <myprintf>
        return bSuccess;
 3042918:	e0bff117 	ldw	r2,-60(fp)
 304291c:	e0bfff15 	stw	r2,-4(fp)
 3042920:	00010e06 	br	3042d5c <Fat_FileRead+0x4c0>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
 3042924:	e0bffa17 	ldw	r2,-24(fp)
 3042928:	10800c17 	ldw	r2,48(r2)
 304292c:	e0bff515 	stw	r2,-44(fp)
    Pos = f->SeekPos;
 3042930:	e0bffb17 	ldw	r2,-20(fp)
 3042934:	10800217 	ldw	r2,8(r2)
 3042938:	e0bff915 	stw	r2,-28(fp)
    if (BytesPerCluster == 32768){
 304293c:	e0fff517 	ldw	r3,-44(fp)
 3042940:	00a00014 	movui	r2,32768
 3042944:	18800a1e 	bne	r3,r2,3042970 <Fat_FileRead+0xd4>
        nClusterSeq = Pos >> 15;
 3042948:	e0bff917 	ldw	r2,-28(fp)
 304294c:	1004d3fa 	srli	r2,r2,15
 3042950:	e0bff315 	stw	r2,-52(fp)
        Pos -= (f->ClusterSeq << 15);
 3042954:	e0bffb17 	ldw	r2,-20(fp)
 3042958:	10800417 	ldw	r2,16(r2)
 304295c:	100693fa 	slli	r3,r2,15
 3042960:	e0bff917 	ldw	r2,-28(fp)
 3042964:	10c5c83a 	sub	r2,r2,r3
 3042968:	e0bff915 	stw	r2,-28(fp)
 304296c:	00002506 	br	3042a04 <Fat_FileRead+0x168>
    }else if (BytesPerCluster == 16384){
 3042970:	e0bff517 	ldw	r2,-44(fp)
 3042974:	10900018 	cmpnei	r2,r2,16384
 3042978:	10000a1e 	bne	r2,zero,30429a4 <Fat_FileRead+0x108>
        nClusterSeq = Pos >> 14;
 304297c:	e0bff917 	ldw	r2,-28(fp)
 3042980:	1004d3ba 	srli	r2,r2,14
 3042984:	e0bff315 	stw	r2,-52(fp)
        Pos -= (f->ClusterSeq << 14);
 3042988:	e0bffb17 	ldw	r2,-20(fp)
 304298c:	10800417 	ldw	r2,16(r2)
 3042990:	100693ba 	slli	r3,r2,14
 3042994:	e0bff917 	ldw	r2,-28(fp)
 3042998:	10c5c83a 	sub	r2,r2,r3
 304299c:	e0bff915 	stw	r2,-28(fp)
 30429a0:	00001806 	br	3042a04 <Fat_FileRead+0x168>
    }else if (BytesPerCluster == 2048){
 30429a4:	e0bff517 	ldw	r2,-44(fp)
 30429a8:	10820018 	cmpnei	r2,r2,2048
 30429ac:	10000a1e 	bne	r2,zero,30429d8 <Fat_FileRead+0x13c>
        nClusterSeq = Pos >> 11;
 30429b0:	e0bff917 	ldw	r2,-28(fp)
 30429b4:	1004d2fa 	srli	r2,r2,11
 30429b8:	e0bff315 	stw	r2,-52(fp)
        Pos -= (f->ClusterSeq << 11);
 30429bc:	e0bffb17 	ldw	r2,-20(fp)
 30429c0:	10800417 	ldw	r2,16(r2)
 30429c4:	100692fa 	slli	r3,r2,11
 30429c8:	e0bff917 	ldw	r2,-28(fp)
 30429cc:	10c5c83a 	sub	r2,r2,r3
 30429d0:	e0bff915 	stw	r2,-28(fp)
 30429d4:	00000b06 	br	3042a04 <Fat_FileRead+0x168>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
 30429d8:	e13ff917 	ldw	r4,-28(fp)
 30429dc:	e17ff517 	ldw	r5,-44(fp)
 30429e0:	30497ec0 	call	30497ec <__udivsi3>
 30429e4:	e0bff315 	stw	r2,-52(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
 30429e8:	e0bffb17 	ldw	r2,-20(fp)
 30429ec:	10c00417 	ldw	r3,16(r2)
 30429f0:	e0bff517 	ldw	r2,-44(fp)
 30429f4:	1887383a 	mul	r3,r3,r2
 30429f8:	e0bff917 	ldw	r2,-28(fp)
 30429fc:	10c5c83a 	sub	r2,r2,r3
 3042a00:	e0bff915 	stw	r2,-28(fp)
    }    
        
       
    Cluster = f->Cluster;
 3042a04:	e0bffb17 	ldw	r2,-20(fp)
 3042a08:	10800317 	ldw	r2,12(r2)
 3042a0c:	e0bff615 	stw	r2,-40(fp)
    if (nClusterSeq != f->ClusterSeq){
 3042a10:	e0bffb17 	ldw	r2,-20(fp)
 3042a14:	10c00417 	ldw	r3,16(r2)
 3042a18:	e0bff317 	ldw	r2,-52(fp)
 3042a1c:	1880be26 	beq	r3,r2,3042d18 <Fat_FileRead+0x47c>
        Cluster = f->Cluster;  //11/20/2007, richard
 3042a20:	e0bffb17 	ldw	r2,-20(fp)
 3042a24:	10800317 	ldw	r2,12(r2)
 3042a28:	e0bff615 	stw	r2,-40(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
 3042a2c:	00001b06 	br	3042a9c <Fat_FileRead+0x200>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
 3042a30:	e13ffa17 	ldw	r4,-24(fp)
 3042a34:	e17ff617 	ldw	r5,-40(fp)
 3042a38:	30432840 	call	3043284 <fatNextCluster>
 3042a3c:	e0bff715 	stw	r2,-36(fp)
            if (NextCluster == 0){
 3042a40:	e0bff717 	ldw	r2,-36(fp)
 3042a44:	1004c03a 	cmpne	r2,r2,zero
 3042a48:	1000061e 	bne	r2,zero,3042a64 <Fat_FileRead+0x1c8>
                bSuccess = FALSE;
 3042a4c:	e03ff115 	stw	zero,-60(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
 3042a50:	0100c1b4 	movhi	r4,774
 3042a54:	2127be04 	addi	r4,r4,-24840
 3042a58:	e17ff617 	ldw	r5,-40(fp)
 3042a5c:	30469080 	call	3046908 <myprintf>
 3042a60:	00000206 	br	3042a6c <Fat_FileRead+0x1d0>
            }else{
                Cluster = NextCluster;
 3042a64:	e0bff717 	ldw	r2,-36(fp)
 3042a68:	e0bff615 	stw	r2,-40(fp)
            }        
            Pos -= BytesPerCluster;
 3042a6c:	e0fff917 	ldw	r3,-28(fp)
 3042a70:	e0bff517 	ldw	r2,-44(fp)
 3042a74:	1885c83a 	sub	r2,r3,r2
 3042a78:	e0bff915 	stw	r2,-28(fp)
            f->Cluster = Cluster;
 3042a7c:	e0fffb17 	ldw	r3,-20(fp)
 3042a80:	e0bff617 	ldw	r2,-40(fp)
 3042a84:	18800315 	stw	r2,12(r3)
            f->ClusterSeq++; 
 3042a88:	e0bffb17 	ldw	r2,-20(fp)
 3042a8c:	10800417 	ldw	r2,16(r2)
 3042a90:	10c00044 	addi	r3,r2,1
 3042a94:	e0bffb17 	ldw	r2,-20(fp)
 3042a98:	10c00415 	stw	r3,16(r2)
 3042a9c:	e0fff917 	ldw	r3,-28(fp)
 3042aa0:	e0bff517 	ldw	r2,-44(fp)
 3042aa4:	18809c36 	bltu	r3,r2,3042d18 <Fat_FileRead+0x47c>
 3042aa8:	e0bff117 	ldw	r2,-60(fp)
 3042aac:	1004c03a 	cmpne	r2,r2,zero
 3042ab0:	103fdf1e 	bne	r2,zero,3042a30 <Fat_FileRead+0x194>
        }
    }            
    
    // reading
    while(nReadCount < nBufferSize && bSuccess){
 3042ab4:	00009806 	br	3042d18 <Fat_FileRead+0x47c>
        if (pVol->BPB_SecPerCluster == 32)
 3042ab8:	e0bffa17 	ldw	r2,-24(fp)
 3042abc:	10800717 	ldw	r2,28(r2)
 3042ac0:	10800818 	cmpnei	r2,r2,32
 3042ac4:	1000081e 	bne	r2,zero,3042ae8 <Fat_FileRead+0x24c>
            PhysicalSecter = ((Cluster-2) << 5) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
 3042ac8:	e0bff617 	ldw	r2,-40(fp)
 3042acc:	10bfff84 	addi	r2,r2,-2
 3042ad0:	1006917a 	slli	r3,r2,5
 3042ad4:	e0bffa17 	ldw	r2,-24(fp)
 3042ad8:	10800f17 	ldw	r2,60(r2)
 3042adc:	1885883a 	add	r2,r3,r2
 3042ae0:	e0bff815 	stw	r2,-32(fp)
 3042ae4:	00001506 	br	3042b3c <Fat_FileRead+0x2a0>
        else if (pVol->BPB_SecPerCluster == 64)
 3042ae8:	e0bffa17 	ldw	r2,-24(fp)
 3042aec:	10800717 	ldw	r2,28(r2)
 3042af0:	10801018 	cmpnei	r2,r2,64
 3042af4:	1000081e 	bne	r2,zero,3042b18 <Fat_FileRead+0x27c>
            PhysicalSecter = ((Cluster-2) << 6) + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
 3042af8:	e0bff617 	ldw	r2,-40(fp)
 3042afc:	10bfff84 	addi	r2,r2,-2
 3042b00:	100691ba 	slli	r3,r2,6
 3042b04:	e0bffa17 	ldw	r2,-24(fp)
 3042b08:	10800f17 	ldw	r2,60(r2)
 3042b0c:	1885883a 	add	r2,r3,r2
 3042b10:	e0bff815 	stw	r2,-32(fp)
 3042b14:	00000906 	br	3042b3c <Fat_FileRead+0x2a0>
        else
            PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
 3042b18:	e0bff617 	ldw	r2,-40(fp)
 3042b1c:	10ffff84 	addi	r3,r2,-2
 3042b20:	e0bffa17 	ldw	r2,-24(fp)
 3042b24:	10800717 	ldw	r2,28(r2)
 3042b28:	1887383a 	mul	r3,r3,r2
 3042b2c:	e0bffa17 	ldw	r2,-24(fp)
 3042b30:	10800f17 	ldw	r2,60(r2)
 3042b34:	1885883a 	add	r2,r3,r2
 3042b38:	e0bff815 	stw	r2,-32(fp)
        for(s=0;s<pVol->BPB_SecPerCluster && nReadCount < nBufferSize && bSuccess;s++){
 3042b3c:	e03ff215 	stw	zero,-56(fp)
 3042b40:	00005206 	br	3042c8c <Fat_FileRead+0x3f0>
            if (Pos >= pVol->BPB_BytsPerSec){
 3042b44:	e0bffa17 	ldw	r2,-24(fp)
 3042b48:	10c00617 	ldw	r3,24(r2)
 3042b4c:	e0bff917 	ldw	r2,-28(fp)
 3042b50:	10c00636 	bltu	r2,r3,3042b6c <Fat_FileRead+0x2d0>
                Pos -= pVol->BPB_BytsPerSec;
 3042b54:	e0bffa17 	ldw	r2,-24(fp)
 3042b58:	10c00617 	ldw	r3,24(r2)
 3042b5c:	e0bff917 	ldw	r2,-28(fp)
 3042b60:	10c5c83a 	sub	r2,r2,r3
 3042b64:	e0bff915 	stw	r2,-28(fp)
 3042b68:	00004206 	br	3042c74 <Fat_FileRead+0x3d8>
            }else{
                // read secter data
                bSuccess = fatReadSecter(pVol, PhysicalSecter);
 3042b6c:	e13ffa17 	ldw	r4,-24(fp)
 3042b70:	e17ff817 	ldw	r5,-32(fp)
 3042b74:	30441240 	call	3044124 <fatReadSecter>
 3042b78:	e0bff115 	stw	r2,-60(fp)
                
                if (bSuccess){
 3042b7c:	e0bff117 	ldw	r2,-60(fp)
 3042b80:	1005003a 	cmpeq	r2,r2,zero
 3042b84:	10003b1e 	bne	r2,zero,3042c74 <Fat_FileRead+0x3d8>
                    // copy data to user buffer
                
                    int nCopyCount;
                    nCopyCount = pVol->BPB_BytsPerSec;
 3042b88:	e0bffa17 	ldw	r2,-24(fp)
 3042b8c:	10800617 	ldw	r2,24(r2)
 3042b90:	e0bff015 	stw	r2,-64(fp)
                    if (Pos)
 3042b94:	e0bff917 	ldw	r2,-28(fp)
 3042b98:	1005003a 	cmpeq	r2,r2,zero
 3042b9c:	1000041e 	bne	r2,zero,3042bb0 <Fat_FileRead+0x314>
                        nCopyCount -= Pos;
 3042ba0:	e0bff017 	ldw	r2,-64(fp)
 3042ba4:	e0fff917 	ldw	r3,-28(fp)
 3042ba8:	10c5c83a 	sub	r2,r2,r3
 3042bac:	e0bff015 	stw	r2,-64(fp)
                    if (nCopyCount > (nBufferSize-nReadCount))
 3042bb0:	e13ff017 	ldw	r4,-64(fp)
 3042bb4:	e0fffe17 	ldw	r3,-8(fp)
 3042bb8:	e0bff417 	ldw	r2,-48(fp)
 3042bbc:	1885c83a 	sub	r2,r3,r2
 3042bc0:	1100042e 	bgeu	r2,r4,3042bd4 <Fat_FileRead+0x338>
                        nCopyCount = nBufferSize-nReadCount;
 3042bc4:	e0bffe17 	ldw	r2,-8(fp)
 3042bc8:	e0fff417 	ldw	r3,-48(fp)
 3042bcc:	10c5c83a 	sub	r2,r2,r3
 3042bd0:	e0bff015 	stw	r2,-64(fp)
                    if (nCopyCount == 512){
 3042bd4:	e0bff017 	ldw	r2,-64(fp)
 3042bd8:	10808018 	cmpnei	r2,r2,512
 3042bdc:	1000121e 	bne	r2,zero,3042c28 <Fat_FileRead+0x38c>
                        memcpy((char *)pBuffer+nReadCount, pVol->Secter_Data, 512);
 3042be0:	e0fffd17 	ldw	r3,-12(fp)
 3042be4:	e0bff417 	ldw	r2,-48(fp)
 3042be8:	1887883a 	add	r3,r3,r2
 3042bec:	e0bffa17 	ldw	r2,-24(fp)
 3042bf0:	10801004 	addi	r2,r2,64
 3042bf4:	1809883a 	mov	r4,r3
 3042bf8:	100b883a 	mov	r5,r2
 3042bfc:	01808004 	movi	r6,512
 3042c00:	304bb5c0 	call	304bb5c <memcpy>
                        nReadCount += nCopyCount;
 3042c04:	e0fff017 	ldw	r3,-64(fp)
 3042c08:	e0bff417 	ldw	r2,-48(fp)
 3042c0c:	10c5883a 	add	r2,r2,r3
 3042c10:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
 3042c14:	e0bff917 	ldw	r2,-28(fp)
 3042c18:	1005003a 	cmpeq	r2,r2,zero
 3042c1c:	1000151e 	bne	r2,zero,3042c74 <Fat_FileRead+0x3d8>
                            Pos = 0;
 3042c20:	e03ff915 	stw	zero,-28(fp)
 3042c24:	00001306 	br	3042c74 <Fat_FileRead+0x3d8>
                    }else{
                        memcpy((void *)((char *)pBuffer+nReadCount), pVol->Secter_Data+Pos,nCopyCount);
 3042c28:	e0fffd17 	ldw	r3,-12(fp)
 3042c2c:	e0bff417 	ldw	r2,-48(fp)
 3042c30:	1889883a 	add	r4,r3,r2
 3042c34:	e0bffa17 	ldw	r2,-24(fp)
 3042c38:	10c01004 	addi	r3,r2,64
 3042c3c:	e0bff917 	ldw	r2,-28(fp)
 3042c40:	1885883a 	add	r2,r3,r2
 3042c44:	e0fff017 	ldw	r3,-64(fp)
 3042c48:	100b883a 	mov	r5,r2
 3042c4c:	180d883a 	mov	r6,r3
 3042c50:	304bb5c0 	call	304bb5c <memcpy>
                        nReadCount += nCopyCount;
 3042c54:	e0fff017 	ldw	r3,-64(fp)
 3042c58:	e0bff417 	ldw	r2,-48(fp)
 3042c5c:	10c5883a 	add	r2,r2,r3
 3042c60:	e0bff415 	stw	r2,-48(fp)
                        if (Pos > 0)
 3042c64:	e0bff917 	ldw	r2,-28(fp)
 3042c68:	1005003a 	cmpeq	r2,r2,zero
 3042c6c:	1000011e 	bne	r2,zero,3042c74 <Fat_FileRead+0x3d8>
                            Pos = 0;
 3042c70:	e03ff915 	stw	zero,-28(fp)
                    }         
                }    // if bSuccess
                    
            }
            PhysicalSecter++;
 3042c74:	e0bff817 	ldw	r2,-32(fp)
 3042c78:	10800044 	addi	r2,r2,1
 3042c7c:	e0bff815 	stw	r2,-32(fp)
 3042c80:	e0bff217 	ldw	r2,-56(fp)
 3042c84:	10800044 	addi	r2,r2,1
 3042c88:	e0bff215 	stw	r2,-56(fp)
 3042c8c:	e0bff217 	ldw	r2,-56(fp)
 3042c90:	e0fffa17 	ldw	r3,-24(fp)
 3042c94:	18c00717 	ldw	r3,28(r3)
 3042c98:	10c0062e 	bgeu	r2,r3,3042cb4 <Fat_FileRead+0x418>
 3042c9c:	e0fffe17 	ldw	r3,-8(fp)
 3042ca0:	e0bff417 	ldw	r2,-48(fp)
 3042ca4:	10c0032e 	bgeu	r2,r3,3042cb4 <Fat_FileRead+0x418>
 3042ca8:	e0bff117 	ldw	r2,-60(fp)
 3042cac:	1004c03a 	cmpne	r2,r2,zero
 3042cb0:	103fa41e 	bne	r2,zero,3042b44 <Fat_FileRead+0x2a8>
        }    
            
        // next cluster
        if (nReadCount < nBufferSize){
 3042cb4:	e0fffe17 	ldw	r3,-8(fp)
 3042cb8:	e0bff417 	ldw	r2,-48(fp)
 3042cbc:	10c0162e 	bgeu	r2,r3,3042d18 <Fat_FileRead+0x47c>
            NextCluster = fatNextCluster(pVol, Cluster); 
 3042cc0:	e13ffa17 	ldw	r4,-24(fp)
 3042cc4:	e17ff617 	ldw	r5,-40(fp)
 3042cc8:	30432840 	call	3043284 <fatNextCluster>
 3042ccc:	e0bff715 	stw	r2,-36(fp)
            if (NextCluster == 0){
 3042cd0:	e0bff717 	ldw	r2,-36(fp)
 3042cd4:	1004c03a 	cmpne	r2,r2,zero
 3042cd8:	1000051e 	bne	r2,zero,3042cf0 <Fat_FileRead+0x454>
                bSuccess = FALSE;
 3042cdc:	e03ff115 	stw	zero,-60(fp)
                FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
 3042ce0:	0100c1b4 	movhi	r4,774
 3042ce4:	2127cd04 	addi	r4,r4,-24780
 3042ce8:	30469080 	call	3046908 <myprintf>
 3042cec:	00000206 	br	3042cf8 <Fat_FileRead+0x45c>
            }else{
                Cluster = NextCluster;
 3042cf0:	e0bff717 	ldw	r2,-36(fp)
 3042cf4:	e0bff615 	stw	r2,-40(fp)
            }    
            //    
            f->ClusterSeq++; 
 3042cf8:	e0bffb17 	ldw	r2,-20(fp)
 3042cfc:	10800417 	ldw	r2,16(r2)
 3042d00:	10c00044 	addi	r3,r2,1
 3042d04:	e0bffb17 	ldw	r2,-20(fp)
 3042d08:	10c00415 	stw	r3,16(r2)
            f->Cluster = Cluster;
 3042d0c:	e0fffb17 	ldw	r3,-20(fp)
 3042d10:	e0bff617 	ldw	r2,-40(fp)
 3042d14:	18800315 	stw	r2,12(r3)
 3042d18:	e0fffe17 	ldw	r3,-8(fp)
 3042d1c:	e0bff417 	ldw	r2,-48(fp)
 3042d20:	10c0032e 	bgeu	r2,r3,3042d30 <Fat_FileRead+0x494>
 3042d24:	e0bff117 	ldw	r2,-60(fp)
 3042d28:	1004c03a 	cmpne	r2,r2,zero
 3042d2c:	103f621e 	bne	r2,zero,3042ab8 <Fat_FileRead+0x21c>
        }                    
    }
    
    if (bSuccess){
 3042d30:	e0bff117 	ldw	r2,-60(fp)
 3042d34:	1005003a 	cmpeq	r2,r2,zero
 3042d38:	1000061e 	bne	r2,zero,3042d54 <Fat_FileRead+0x4b8>
        f->SeekPos += nBufferSize;
 3042d3c:	e0bffb17 	ldw	r2,-20(fp)
 3042d40:	10c00217 	ldw	r3,8(r2)
 3042d44:	e0bffe17 	ldw	r2,-8(fp)
 3042d48:	1887883a 	add	r3,r3,r2
 3042d4c:	e0bffb17 	ldw	r2,-20(fp)
 3042d50:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
 3042d54:	e0bff117 	ldw	r2,-60(fp)
 3042d58:	e0bfff15 	stw	r2,-4(fp)
 3042d5c:	e0bfff17 	ldw	r2,-4(fp)
}
 3042d60:	e037883a 	mov	sp,fp
 3042d64:	dfc00117 	ldw	ra,4(sp)
 3042d68:	df000017 	ldw	fp,0(sp)
 3042d6c:	dec00204 	addi	sp,sp,8
 3042d70:	f800283a 	ret

03042d74 <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
 3042d74:	defff704 	addi	sp,sp,-36
 3042d78:	df000815 	stw	fp,32(sp)
 3042d7c:	df000804 	addi	fp,sp,32
 3042d80:	e13ffb15 	stw	r4,-20(fp)
 3042d84:	e17ffc15 	stw	r5,-16(fp)
 3042d88:	e1bffd15 	stw	r6,-12(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
 3042d8c:	e0bffb17 	ldw	r2,-20(fp)
 3042d90:	e0bffa15 	stw	r2,-24(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
 3042d94:	00800044 	movi	r2,1
 3042d98:	e0bff815 	stw	r2,-32(fp)

    if (!f || !f->Fat)
 3042d9c:	e0bffa17 	ldw	r2,-24(fp)
 3042da0:	1005003a 	cmpeq	r2,r2,zero
 3042da4:	1000041e 	bne	r2,zero,3042db8 <Fat_FileSeek+0x44>
 3042da8:	e0bffa17 	ldw	r2,-24(fp)
 3042dac:	10804f17 	ldw	r2,316(r2)
 3042db0:	1004c03a 	cmpne	r2,r2,zero
 3042db4:	1000021e 	bne	r2,zero,3042dc0 <Fat_FileSeek+0x4c>
        return FALSE;
 3042db8:	e03ffe15 	stw	zero,-8(fp)
 3042dbc:	00003106 	br	3042e84 <Fat_FileSeek+0x110>
    pVol = (VOLUME_INFO *)f->Fat;        
 3042dc0:	e0bffa17 	ldw	r2,-24(fp)
 3042dc4:	10804f17 	ldw	r2,316(r2)
 3042dc8:	e0bff915 	stw	r2,-28(fp)
    
    if (!f->IsOpened)
 3042dcc:	e0bffa17 	ldw	r2,-24(fp)
 3042dd0:	10800017 	ldw	r2,0(r2)
 3042dd4:	1004c03a 	cmpne	r2,r2,zero
 3042dd8:	1000021e 	bne	r2,zero,3042de4 <Fat_FileSeek+0x70>
        return FALSE;
 3042ddc:	e03ffe15 	stw	zero,-8(fp)
 3042de0:	00002806 	br	3042e84 <Fat_FileSeek+0x110>
        
    switch(SeekPos){
 3042de4:	e0bffc17 	ldw	r2,-16(fp)
 3042de8:	e0bfff15 	stw	r2,-4(fp)
 3042dec:	e0ffff17 	ldw	r3,-4(fp)
 3042df0:	18800060 	cmpeqi	r2,r3,1
 3042df4:	10000b1e 	bne	r2,zero,3042e24 <Fat_FileSeek+0xb0>
 3042df8:	e0ffff17 	ldw	r3,-4(fp)
 3042dfc:	18800070 	cmpltui	r2,r3,1
 3042e00:	1000041e 	bne	r2,zero,3042e14 <Fat_FileSeek+0xa0>
 3042e04:	e0ffff17 	ldw	r3,-4(fp)
 3042e08:	188000a0 	cmpeqi	r2,r3,2
 3042e0c:	10000c1e 	bne	r2,zero,3042e40 <Fat_FileSeek+0xcc>
 3042e10:	00001206 	br	3042e5c <Fat_FileSeek+0xe8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
 3042e14:	e0fffd17 	ldw	r3,-12(fp)
 3042e18:	e0bffa17 	ldw	r2,-24(fp)
 3042e1c:	10c00215 	stw	r3,8(r2)
            break;
 3042e20:	00000f06 	br	3042e60 <Fat_FileSeek+0xec>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
 3042e24:	e0bffa17 	ldw	r2,-24(fp)
 3042e28:	10c00217 	ldw	r3,8(r2)
 3042e2c:	e0bffd17 	ldw	r2,-12(fp)
 3042e30:	1887883a 	add	r3,r3,r2
 3042e34:	e0bffa17 	ldw	r2,-24(fp)
 3042e38:	10c00215 	stw	r3,8(r2)
            break;
 3042e3c:	00000806 	br	3042e60 <Fat_FileSeek+0xec>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
 3042e40:	e0bffa17 	ldw	r2,-24(fp)
 3042e44:	10c04e17 	ldw	r3,312(r2)
 3042e48:	e0bffd17 	ldw	r2,-12(fp)
 3042e4c:	1887883a 	add	r3,r3,r2
 3042e50:	e0bffa17 	ldw	r2,-24(fp)
 3042e54:	10c00215 	stw	r3,8(r2)
            break;
 3042e58:	00000106 	br	3042e60 <Fat_FileSeek+0xec>
        default:
            bSuccess = FALSE;
 3042e5c:	e03ff815 	stw	zero,-32(fp)
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
 3042e60:	e0bffa17 	ldw	r2,-24(fp)
 3042e64:	10804d8b 	ldhu	r2,310(r2)
 3042e68:	10ffffcc 	andi	r3,r2,65535
 3042e6c:	e0bffa17 	ldw	r2,-24(fp)
 3042e70:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
 3042e74:	e0bffa17 	ldw	r2,-24(fp)
 3042e78:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
 3042e7c:	e0bff817 	ldw	r2,-32(fp)
 3042e80:	e0bffe15 	stw	r2,-8(fp)
 3042e84:	e0bffe17 	ldw	r2,-8(fp)
    
}
 3042e88:	e037883a 	mov	sp,fp
 3042e8c:	df000017 	ldw	fp,0(sp)
 3042e90:	dec00104 	addi	sp,sp,4
 3042e94:	f800283a 	ret

03042e98 <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
 3042e98:	defffc04 	addi	sp,sp,-16
 3042e9c:	dfc00315 	stw	ra,12(sp)
 3042ea0:	df000215 	stw	fp,8(sp)
 3042ea4:	df000204 	addi	fp,sp,8
 3042ea8:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
 3042eac:	e0bfff17 	ldw	r2,-4(fp)
 3042eb0:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
 3042eb4:	e0bffe17 	ldw	r2,-8(fp)
 3042eb8:	1005003a 	cmpeq	r2,r2,zero
 3042ebc:	1000021e 	bne	r2,zero,3042ec8 <Fat_FileClose+0x30>
        return;
        
    free(f);        
 3042ec0:	e13ffe17 	ldw	r4,-8(fp)
 3042ec4:	304b3f40 	call	304b3f4 <free>
}
 3042ec8:	e037883a 	mov	sp,fp
 3042ecc:	dfc00117 	ldw	ra,4(sp)
 3042ed0:	df000017 	ldw	fp,0(sp)
 3042ed4:	dec00204 	addi	sp,sp,8
 3042ed8:	f800283a 	ret

03042edc <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
 3042edc:	deff7204 	addi	sp,sp,-568
 3042ee0:	dfc08d15 	stw	ra,564(sp)
 3042ee4:	df008c15 	stw	fp,560(sp)
 3042ee8:	dc008b15 	stw	r16,556(sp)
 3042eec:	df008b04 	addi	fp,sp,556
 3042ef0:	e13ffd15 	stw	r4,-12(fp)
 3042ef4:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
 3042ef8:	00800044 	movi	r2,1
 3042efc:	e0bf7c15 	stw	r2,-528(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
 3042f00:	e03f7815 	stw	zero,-544(fp)
    int nSecter = 0;
 3042f04:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
 3042f08:	e03f7615 	stw	zero,-552(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
 3042f0c:	e0bffd17 	ldw	r2,-12(fp)
 3042f10:	e0bf7515 	stw	r2,-556(fp)
    if (!pVol)
 3042f14:	e0bf7517 	ldw	r2,-556(fp)
 3042f18:	1004c03a 	cmpne	r2,r2,zero
 3042f1c:	1000031e 	bne	r2,zero,3042f2c <Fat_SpeedTest+0x50>
        return 0;
 3042f20:	0005883a 	mov	r2,zero
 3042f24:	e0bfff15 	stw	r2,-4(fp)
 3042f28:	00006b06 	br	30430d8 <Fat_SpeedTest+0x1fc>
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3042f2c:	0080c1b4 	movhi	r2,774
 3042f30:	10b29c04 	addi	r2,r2,-13712
 3042f34:	10800017 	ldw	r2,0(r2)
    time_start = alt_nticks();
 3042f38:	e0bf7b15 	stw	r2,-532(fp)
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3042f3c:	0080c1b4 	movhi	r2,774
 3042f40:	10b29c04 	addi	r2,r2,-13712
 3042f44:	10800017 	ldw	r2,0(r2)
 3042f48:	1021883a 	mov	r16,r2
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
 3042f4c:	e0bffe17 	ldw	r2,-8(fp)
 3042f50:	1100fa24 	muli	r4,r2,1000
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 3042f54:	0080c1b4 	movhi	r2,774
 3042f58:	10b29b04 	addi	r2,r2,-13716
 3042f5c:	10800017 	ldw	r2,0(r2)
 3042f60:	100b883a 	mov	r5,r2
 3042f64:	30497ec0 	call	30497ec <__udivsi3>
 3042f68:	8085883a 	add	r2,r16,r2
 3042f6c:	e0bf7a15 	stw	r2,-536(fp)
    while(alt_nticks() < time_finish && bSuccess){
 3042f70:	00000e06 	br	3042fac <Fat_SpeedTest+0xd0>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
 3042f74:	e0bf7517 	ldw	r2,-556(fp)
 3042f78:	10c00117 	ldw	r3,4(r2)
 3042f7c:	e0bf7517 	ldw	r2,-556(fp)
 3042f80:	11000017 	ldw	r4,0(r2)
 3042f84:	e17f7717 	ldw	r5,-548(fp)
 3042f88:	e1bf7d04 	addi	r6,fp,-524
 3042f8c:	183ee83a 	callr	r3
 3042f90:	e0bf7c15 	stw	r2,-528(fp)
        nSecter++;
 3042f94:	e0bf7717 	ldw	r2,-548(fp)
 3042f98:	10800044 	addi	r2,r2,1
 3042f9c:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
 3042fa0:	e0bf7817 	ldw	r2,-544(fp)
 3042fa4:	10808004 	addi	r2,r2,512
 3042fa8:	e0bf7815 	stw	r2,-544(fp)
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3042fac:	0080c1b4 	movhi	r2,774
 3042fb0:	10b29c04 	addi	r2,r2,-13712
 3042fb4:	10800017 	ldw	r2,0(r2)
 3042fb8:	1007883a 	mov	r3,r2
 3042fbc:	e0bf7a17 	ldw	r2,-536(fp)
 3042fc0:	1880032e 	bgeu	r3,r2,3042fd0 <Fat_SpeedTest+0xf4>
 3042fc4:	e0bf7c17 	ldw	r2,-528(fp)
 3042fc8:	1004c03a 	cmpne	r2,r2,zero
 3042fcc:	103fe91e 	bne	r2,zero,3042f74 <Fat_SpeedTest+0x98>
        
    }        
    if (bSuccess){
 3042fd0:	e0bf7c17 	ldw	r2,-528(fp)
 3042fd4:	1005003a 	cmpeq	r2,r2,zero
 3042fd8:	1000341e 	bne	r2,zero,30430ac <Fat_SpeedTest+0x1d0>
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3042fdc:	0080c1b4 	movhi	r2,774
 3042fe0:	10b29c04 	addi	r2,r2,-13712
 3042fe4:	10800017 	ldw	r2,0(r2)
 3042fe8:	1007883a 	mov	r3,r2
        time_elapsed = alt_nticks() - time_start;
 3042fec:	e0bf7b17 	ldw	r2,-532(fp)
 3042ff0:	1885c83a 	sub	r2,r3,r2
 3042ff4:	e0bf7915 	stw	r2,-540(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
 3042ff8:	e13f7817 	ldw	r4,-544(fp)
 3042ffc:	30492e80 	call	30492e8 <__floatunsisf>
 3043000:	1021883a 	mov	r16,r2
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 3043004:	0080c1b4 	movhi	r2,774
 3043008:	10b29b04 	addi	r2,r2,-13716
 304300c:	10800017 	ldw	r2,0(r2)
 3043010:	1009883a 	mov	r4,r2
 3043014:	30492e80 	call	30492e8 <__floatunsisf>
 3043018:	8009883a 	mov	r4,r16
 304301c:	100b883a 	mov	r5,r2
 3043020:	3048f3c0 	call	3048f3c <__mulsf3>
 3043024:	1021883a 	mov	r16,r2
 3043028:	e13f7917 	ldw	r4,-540(fp)
 304302c:	30492e80 	call	30492e8 <__floatunsisf>
 3043030:	8009883a 	mov	r4,r16
 3043034:	100b883a 	mov	r5,r2
 3043038:	304911c0 	call	304911c <__divsf3>
 304303c:	1009883a 	mov	r4,r2
 3043040:	30492940 	call	3049294 <__extendsfdf2>
 3043044:	100b883a 	mov	r5,r2
 3043048:	180d883a 	mov	r6,r3
 304304c:	2809883a 	mov	r4,r5
 3043050:	300b883a 	mov	r5,r6
 3043054:	000d883a 	mov	r6,zero
 3043058:	01d02434 	movhi	r7,16528
 304305c:	39c00004 	addi	r7,r7,0
 3043060:	30493a80 	call	30493a8 <__divdf3>
 3043064:	1009883a 	mov	r4,r2
 3043068:	180b883a 	mov	r5,r3
 304306c:	2005883a 	mov	r2,r4
 3043070:	2807883a 	mov	r3,r5
 3043074:	1009883a 	mov	r4,r2
 3043078:	180b883a 	mov	r5,r3
 304307c:	000d883a 	mov	r6,zero
 3043080:	01d02434 	movhi	r7,16528
 3043084:	39c00004 	addi	r7,r7,0
 3043088:	30493a80 	call	30493a8 <__divdf3>
 304308c:	1009883a 	mov	r4,r2
 3043090:	180b883a 	mov	r5,r3
 3043094:	2005883a 	mov	r2,r4
 3043098:	2807883a 	mov	r3,r5
 304309c:	1009883a 	mov	r4,r2
 30430a0:	180b883a 	mov	r5,r3
 30430a4:	304963c0 	call	304963c <__truncdfsf2>
 30430a8:	e0bf7615 	stw	r2,-552(fp)
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
 30430ac:	e13f7617 	ldw	r4,-552(fp)
 30430b0:	30492940 	call	3049294 <__extendsfdf2>
 30430b4:	100d883a 	mov	r6,r2
 30430b8:	180f883a 	mov	r7,r3
 30430bc:	0100c1b4 	movhi	r4,774
 30430c0:	2127d704 	addi	r4,r4,-24740
 30430c4:	300b883a 	mov	r5,r6
 30430c8:	380d883a 	mov	r6,r7
 30430cc:	304bd0c0 	call	304bd0c <printf>
    return fMegaBytePerSec;
 30430d0:	e0ff7617 	ldw	r3,-552(fp)
 30430d4:	e0ffff15 	stw	r3,-4(fp)
 30430d8:	e0ffff17 	ldw	r3,-4(fp)
 30430dc:	1805883a 	mov	r2,r3
    
   
}
 30430e0:	e037883a 	mov	sp,fp
 30430e4:	dfc00217 	ldw	ra,8(sp)
 30430e8:	df000117 	ldw	fp,4(sp)
 30430ec:	dc000017 	ldw	r16,0(sp)
 30430f0:	dec00304 	addi	sp,sp,12
 30430f4:	f800283a 	ret

030430f8 <fat16ClusterType>:




CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
 30430f8:	defffd04 	addi	sp,sp,-12
 30430fc:	df000215 	stw	fp,8(sp)
 3043100:	df000204 	addi	fp,sp,8
 3043104:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
 3043108:	e0bfff17 	ldw	r2,-4(fp)
 304310c:	10bfffcc 	andi	r2,r2,65535
 3043110:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
 3043114:	e0bfff17 	ldw	r2,-4(fp)
 3043118:	1005003a 	cmpeq	r2,r2,zero
 304311c:	1000061e 	bne	r2,zero,3043138 <fat16ClusterType+0x40>
 3043120:	e0ffff17 	ldw	r3,-4(fp)
 3043124:	00bffbd4 	movui	r2,65519
 3043128:	10c00336 	bltu	r2,r3,3043138 <fat16ClusterType+0x40>
        Type = CLUSTER_NEXT_INFILE;
 304312c:	00800104 	movi	r2,4
 3043130:	e0bffe15 	stw	r2,-8(fp)
 3043134:	00001906 	br	304319c <fat16ClusterType+0xa4>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
 3043138:	e0ffff17 	ldw	r3,-4(fp)
 304313c:	00bffdd4 	movui	r2,65527
 3043140:	10c0032e 	bgeu	r2,r3,3043150 <fat16ClusterType+0x58>
        Type = CLUSTER_LAST_INFILE;
 3043144:	008000c4 	movi	r2,3
 3043148:	e0bffe15 	stw	r2,-8(fp)
 304314c:	00001306 	br	304319c <fat16ClusterType+0xa4>
    else if (Fat == (alt_u16)0x00)
 3043150:	e0bfff17 	ldw	r2,-4(fp)
 3043154:	1004c03a 	cmpne	r2,r2,zero
 3043158:	1000021e 	bne	r2,zero,3043164 <fat16ClusterType+0x6c>
        Type = CLUSTER_UNUSED;
 304315c:	e03ffe15 	stw	zero,-8(fp)
 3043160:	00000e06 	br	304319c <fat16ClusterType+0xa4>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
 3043164:	e0ffff17 	ldw	r3,-4(fp)
 3043168:	00bffbd4 	movui	r2,65519
 304316c:	10c0062e 	bgeu	r2,r3,3043188 <fat16ClusterType+0x90>
 3043170:	e0ffff17 	ldw	r3,-4(fp)
 3043174:	00bffd94 	movui	r2,65526
 3043178:	10c00336 	bltu	r2,r3,3043188 <fat16ClusterType+0x90>
        Type = CLUSTER_RESERVED;
 304317c:	00800044 	movi	r2,1
 3043180:	e0bffe15 	stw	r2,-8(fp)
 3043184:	00000506 	br	304319c <fat16ClusterType+0xa4>
    else if (Fat == 0xFFF7)
 3043188:	e0ffff17 	ldw	r3,-4(fp)
 304318c:	00bffdd4 	movui	r2,65527
 3043190:	1880021e 	bne	r3,r2,304319c <fat16ClusterType+0xa4>
        Type = CLUSTER_BAD;
 3043194:	00800084 	movi	r2,2
 3043198:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
 304319c:	e0bffe17 	ldw	r2,-8(fp)
         
}
 30431a0:	e037883a 	mov	sp,fp
 30431a4:	df000017 	ldw	fp,0(sp)
 30431a8:	dec00104 	addi	sp,sp,4
 30431ac:	f800283a 	ret

030431b0 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
 30431b0:	defffd04 	addi	sp,sp,-12
 30431b4:	df000215 	stw	fp,8(sp)
 30431b8:	df000204 	addi	fp,sp,8
 30431bc:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
 30431c0:	e0ffff17 	ldw	r3,-4(fp)
 30431c4:	00840034 	movhi	r2,4096
 30431c8:	10bfffc4 	addi	r2,r2,-1
 30431cc:	1884703a 	and	r2,r3,r2
 30431d0:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
 30431d4:	e0bfff17 	ldw	r2,-4(fp)
 30431d8:	1005003a 	cmpeq	r2,r2,zero
 30431dc:	1000071e 	bne	r2,zero,30431fc <fat32ClusterType+0x4c>
 30431e0:	e0ffff17 	ldw	r3,-4(fp)
 30431e4:	00840034 	movhi	r2,4096
 30431e8:	10bffbc4 	addi	r2,r2,-17
 30431ec:	10c00336 	bltu	r2,r3,30431fc <fat32ClusterType+0x4c>
        Type = CLUSTER_NEXT_INFILE;
 30431f0:	00800104 	movi	r2,4
 30431f4:	e0bffe15 	stw	r2,-8(fp)
 30431f8:	00001d06 	br	3043270 <fat32ClusterType+0xc0>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
 30431fc:	e0ffff17 	ldw	r3,-4(fp)
 3043200:	00840034 	movhi	r2,4096
 3043204:	10bffdc4 	addi	r2,r2,-9
 3043208:	10c0032e 	bgeu	r2,r3,3043218 <fat32ClusterType+0x68>
        Type = CLUSTER_LAST_INFILE;
 304320c:	008000c4 	movi	r2,3
 3043210:	e0bffe15 	stw	r2,-8(fp)
 3043214:	00001606 	br	3043270 <fat32ClusterType+0xc0>
    else if (Fat == (alt_u32)0x00)
 3043218:	e0bfff17 	ldw	r2,-4(fp)
 304321c:	1004c03a 	cmpne	r2,r2,zero
 3043220:	1000021e 	bne	r2,zero,304322c <fat32ClusterType+0x7c>
        Type = CLUSTER_UNUSED;
 3043224:	e03ffe15 	stw	zero,-8(fp)
 3043228:	00001106 	br	3043270 <fat32ClusterType+0xc0>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
 304322c:	e0ffff17 	ldw	r3,-4(fp)
 3043230:	00840034 	movhi	r2,4096
 3043234:	10bffbc4 	addi	r2,r2,-17
 3043238:	10c0072e 	bgeu	r2,r3,3043258 <fat32ClusterType+0xa8>
 304323c:	e0ffff17 	ldw	r3,-4(fp)
 3043240:	00840034 	movhi	r2,4096
 3043244:	10bffd84 	addi	r2,r2,-10
 3043248:	10c00336 	bltu	r2,r3,3043258 <fat32ClusterType+0xa8>
        Type = CLUSTER_RESERVED;
 304324c:	00800044 	movi	r2,1
 3043250:	e0bffe15 	stw	r2,-8(fp)
 3043254:	00000606 	br	3043270 <fat32ClusterType+0xc0>
    else if (Fat == 0xFFFFFF7)
 3043258:	e0ffff17 	ldw	r3,-4(fp)
 304325c:	00840034 	movhi	r2,4096
 3043260:	10bffdc4 	addi	r2,r2,-9
 3043264:	1880021e 	bne	r3,r2,3043270 <fat32ClusterType+0xc0>
        Type = CLUSTER_BAD;
 3043268:	00800084 	movi	r2,2
 304326c:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
 3043270:	e0bffe17 	ldw	r2,-8(fp)
         
}
 3043274:	e037883a 	mov	sp,fp
 3043278:	df000017 	ldw	fp,0(sp)
 304327c:	dec00104 	addi	sp,sp,4
 3043280:	f800283a 	ret

03043284 <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
 3043284:	defff504 	addi	sp,sp,-44
 3043288:	dfc00a15 	stw	ra,40(sp)
 304328c:	df000915 	stw	fp,36(sp)
 3043290:	dc000815 	stw	r16,32(sp)
 3043294:	df000804 	addi	fp,sp,32
 3043298:	e13ffd15 	stw	r4,-12(fp)
 304329c:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;
#ifdef FAT_READONLY    
//    const int nFatEntrySize = 2; // 2 byte for FAT16

//    NextCluster =  *(unsigned short *)(gVolumeInfo.szFatTable + ThisCluster*nFatEntrySize); 
    NextCluster =  *(unsigned short *)(pVol->szFatTable + (ThisCluster << 1));
     
    ClusterType = fatClusterType(pVol, NextCluster);
    if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
        NextCluster = 0;  // invalid cluster
    }        
#else
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
 30432a0:	e0bffd17 	ldw	r2,-12(fp)
 30432a4:	10800317 	ldw	r2,12(r2)
 30432a8:	108002d8 	cmpnei	r2,r2,11
 30432ac:	1000031e 	bne	r2,zero,30432bc <fatNextCluster+0x38>
 30432b0:	00800104 	movi	r2,4
 30432b4:	e0bfff15 	stw	r2,-4(fp)
 30432b8:	00000206 	br	30432c4 <fatNextCluster+0x40>
 30432bc:	00800084 	movi	r2,2
 30432c0:	e0bfff15 	stw	r2,-4(fp)
 30432c4:	e0bfff17 	ldw	r2,-4(fp)
 30432c8:	e0bff915 	stw	r2,-28(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
 30432cc:	e0bffd17 	ldw	r2,-12(fp)
 30432d0:	11000617 	ldw	r4,24(r2)
 30432d4:	e17ff917 	ldw	r5,-28(fp)
 30432d8:	30497ec0 	call	30497ec <__udivsi3>
 30432dc:	e0bffa15 	stw	r2,-24(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
 30432e0:	e0bffd17 	ldw	r2,-12(fp)
 30432e4:	14000d17 	ldw	r16,52(r2)
 30432e8:	e0fff917 	ldw	r3,-28(fp)
 30432ec:	e0bffe17 	ldw	r2,-8(fp)
 30432f0:	1889383a 	mul	r4,r3,r2
 30432f4:	e0bffd17 	ldw	r2,-12(fp)
 30432f8:	11400617 	ldw	r5,24(r2)
 30432fc:	30497ec0 	call	30497ec <__udivsi3>
 3043300:	8085883a 	add	r2,r16,r2
 3043304:	e0bff815 	stw	r2,-32(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
 3043308:	e13ffd17 	ldw	r4,-12(fp)
 304330c:	e17ff817 	ldw	r5,-32(fp)
 3043310:	30441240 	call	3044124 <fatReadSecter>
 3043314:	1005003a 	cmpeq	r2,r2,zero
 3043318:	1000291e 	bne	r2,zero,30433c0 <fatNextCluster+0x13c>
        if (pVol->Partition_Type == PARTITION_FAT32){
 304331c:	e0bffd17 	ldw	r2,-12(fp)
 3043320:	10800317 	ldw	r2,12(r2)
 3043324:	108002d8 	cmpnei	r2,r2,11
 3043328:	10000f1e 	bne	r2,zero,3043368 <fatNextCluster+0xe4>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
 304332c:	e0bffd17 	ldw	r2,-12(fp)
 3043330:	14001004 	addi	r16,r2,64
 3043334:	e17ffa17 	ldw	r5,-24(fp)
 3043338:	e13ffe17 	ldw	r4,-8(fp)
 304333c:	30497f40 	call	30497f4 <__umodsi3>
 3043340:	1007883a 	mov	r3,r2
 3043344:	e0bff917 	ldw	r2,-28(fp)
 3043348:	1885383a 	mul	r2,r3,r2
 304334c:	8085883a 	add	r2,r16,r2
 3043350:	10800017 	ldw	r2,0(r2)
 3043354:	e0bffb15 	stw	r2,-20(fp)
            ClusterType = fat32ClusterType(NextCluster);
 3043358:	e13ffb17 	ldw	r4,-20(fp)
 304335c:	30431b00 	call	30431b0 <fat32ClusterType>
 3043360:	e0bffc15 	stw	r2,-16(fp)
 3043364:	00000f06 	br	30433a4 <fatNextCluster+0x120>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
 3043368:	e0bffd17 	ldw	r2,-12(fp)
 304336c:	14001004 	addi	r16,r2,64
 3043370:	e17ffa17 	ldw	r5,-24(fp)
 3043374:	e13ffe17 	ldw	r4,-8(fp)
 3043378:	30497f40 	call	30497f4 <__umodsi3>
 304337c:	1007883a 	mov	r3,r2
 3043380:	e0bff917 	ldw	r2,-28(fp)
 3043384:	1885383a 	mul	r2,r3,r2
 3043388:	8085883a 	add	r2,r16,r2
 304338c:	1080000b 	ldhu	r2,0(r2)
 3043390:	10bfffcc 	andi	r2,r2,65535
 3043394:	e0bffb15 	stw	r2,-20(fp)
            ClusterType = fat16ClusterType(NextCluster);
 3043398:	e13ffb17 	ldw	r4,-20(fp)
 304339c:	30430f80 	call	30430f8 <fat16ClusterType>
 30433a0:	e0bffc15 	stw	r2,-16(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
 30433a4:	e0bffc17 	ldw	r2,-16(fp)
 30433a8:	10800120 	cmpeqi	r2,r2,4
 30433ac:	1000041e 	bne	r2,zero,30433c0 <fatNextCluster+0x13c>
 30433b0:	e0bffc17 	ldw	r2,-16(fp)
 30433b4:	108000e0 	cmpeqi	r2,r2,3
 30433b8:	1000011e 	bne	r2,zero,30433c0 <fatNextCluster+0x13c>
            NextCluster = 0;  // invalid cluster
 30433bc:	e03ffb15 	stw	zero,-20(fp)
    }                
    
    
    return NextCluster;
 30433c0:	e0bffb17 	ldw	r2,-20(fp)

#endif    
    
    return NextCluster;
}
 30433c4:	e037883a 	mov	sp,fp
 30433c8:	dfc00217 	ldw	ra,8(sp)
 30433cc:	df000117 	ldw	fp,4(sp)
 30433d0:	dc000017 	ldw	r16,0(sp)
 30433d4:	dec00304 	addi	sp,sp,12
 30433d8:	f800283a 	ret

030433dc <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
 30433dc:	defff204 	addi	sp,sp,-56
 30433e0:	dfc00d15 	stw	ra,52(sp)
 30433e4:	df000c15 	stw	fp,48(sp)
 30433e8:	dc000b15 	stw	r16,44(sp)
 30433ec:	df000b04 	addi	fp,sp,44
 30433f0:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
 30433f4:	00bfffc4 	movi	r2,-1
 30433f8:	e0bffc15 	stw	r2,-16(fp)
 30433fc:	00800084 	movi	r2,2
 3043400:	e0bffb15 	stw	r2,-20(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
 3043404:	e0bffe17 	ldw	r2,-8(fp)
 3043408:	10800317 	ldw	r2,12(r2)
 304340c:	108002d8 	cmpnei	r2,r2,11
 3043410:	1000031e 	bne	r2,zero,3043420 <fatFindUnusedCluster+0x44>
 3043414:	00800104 	movi	r2,4
 3043418:	e0bfff15 	stw	r2,-4(fp)
 304341c:	00000206 	br	3043428 <fatFindUnusedCluster+0x4c>
 3043420:	00800084 	movi	r2,2
 3043424:	e0bfff15 	stw	r2,-4(fp)
 3043428:	e0bfff17 	ldw	r2,-4(fp)
 304342c:	e0bff815 	stw	r2,-32(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
 3043430:	e0bffe17 	ldw	r2,-8(fp)
 3043434:	11000617 	ldw	r4,24(r2)
 3043438:	e17ff817 	ldw	r5,-32(fp)
 304343c:	30497ec0 	call	30497ec <__udivsi3>
 3043440:	e0bff715 	stw	r2,-36(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
 3043444:	e03ff515 	stw	zero,-44(fp)

    while(!bDone){     
 3043448:	00003806 	br	304352c <fatFindUnusedCluster+0x150>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
 304344c:	e0bffe17 	ldw	r2,-8(fp)
 3043450:	14000d17 	ldw	r16,52(r2)
 3043454:	e0fff817 	ldw	r3,-32(fp)
 3043458:	e0bffb17 	ldw	r2,-20(fp)
 304345c:	1889383a 	mul	r4,r3,r2
 3043460:	e0bffe17 	ldw	r2,-8(fp)
 3043464:	11400617 	ldw	r5,24(r2)
 3043468:	30497ec0 	call	30497ec <__udivsi3>
 304346c:	8085883a 	add	r2,r16,r2
 3043470:	e0bff615 	stw	r2,-40(fp)
        if (fatReadSecter(pVol, Secter)){
 3043474:	e13ffe17 	ldw	r4,-8(fp)
 3043478:	e17ff617 	ldw	r5,-40(fp)
 304347c:	30441240 	call	3044124 <fatReadSecter>
 3043480:	1005003a 	cmpeq	r2,r2,zero
 3043484:	1000241e 	bne	r2,zero,3043518 <fatFindUnusedCluster+0x13c>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
 3043488:	e0bffe17 	ldw	r2,-8(fp)
 304348c:	14001004 	addi	r16,r2,64
 3043490:	e17ff717 	ldw	r5,-36(fp)
 3043494:	e13ffb17 	ldw	r4,-20(fp)
 3043498:	30497f40 	call	30497f4 <__umodsi3>
 304349c:	1007883a 	mov	r3,r2
 30434a0:	e0bff817 	ldw	r2,-32(fp)
 30434a4:	1885383a 	mul	r2,r3,r2
 30434a8:	8085883a 	add	r2,r16,r2
 30434ac:	e0bff915 	stw	r2,-28(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
 30434b0:	e0bffe17 	ldw	r2,-8(fp)
 30434b4:	10800317 	ldw	r2,12(r2)
 30434b8:	108002d8 	cmpnei	r2,r2,11
 30434bc:	1000071e 	bne	r2,zero,30434dc <fatFindUnusedCluster+0x100>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
 30434c0:	e0bff917 	ldw	r2,-28(fp)
 30434c4:	10800017 	ldw	r2,0(r2)
 30434c8:	e0bffa15 	stw	r2,-24(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
 30434cc:	e13ffa17 	ldw	r4,-24(fp)
 30434d0:	30431b00 	call	30431b0 <fat32ClusterType>
 30434d4:	e0bffd15 	stw	r2,-12(fp)
 30434d8:	00000706 	br	30434f8 <fatFindUnusedCluster+0x11c>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
 30434dc:	e0bff917 	ldw	r2,-28(fp)
 30434e0:	1080000b 	ldhu	r2,0(r2)
 30434e4:	10bfffcc 	andi	r2,r2,65535
 30434e8:	e0bffa15 	stw	r2,-24(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
 30434ec:	e13ffa17 	ldw	r4,-24(fp)
 30434f0:	30430f80 	call	30430f8 <fat16ClusterType>
 30434f4:	e0bffd15 	stw	r2,-12(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
 30434f8:	e0bffd17 	ldw	r2,-12(fp)
 30434fc:	1004c03a 	cmpne	r2,r2,zero
 3043500:	1000071e 	bne	r2,zero,3043520 <fatFindUnusedCluster+0x144>
                UnusedCluster = ThisCluster;  // invalid cluster
 3043504:	e0bffb17 	ldw	r2,-20(fp)
 3043508:	e0bffc15 	stw	r2,-16(fp)
                bDone = TRUE;
 304350c:	00800044 	movi	r2,1
 3043510:	e0bff515 	stw	r2,-44(fp)
 3043514:	00000206 	br	3043520 <fatFindUnusedCluster+0x144>
            }    
        }else{
            bDone = TRUE;
 3043518:	00800044 	movi	r2,1
 304351c:	e0bff515 	stw	r2,-44(fp)
        }     
        ThisCluster++;           
 3043520:	e0bffb17 	ldw	r2,-20(fp)
 3043524:	10800044 	addi	r2,r2,1
 3043528:	e0bffb15 	stw	r2,-20(fp)
 304352c:	e0bff517 	ldw	r2,-44(fp)
 3043530:	1005003a 	cmpeq	r2,r2,zero
 3043534:	103fc51e 	bne	r2,zero,304344c <fatFindUnusedCluster+0x70>
    }                
    
    return UnusedCluster;
 3043538:	e0bffc17 	ldw	r2,-16(fp)

}
 304353c:	e037883a 	mov	sp,fp
 3043540:	dfc00217 	ldw	ra,8(sp)
 3043544:	df000117 	ldw	fp,4(sp)
 3043548:	dc000017 	ldw	r16,0(sp)
 304354c:	dec00304 	addi	sp,sp,12
 3043550:	f800283a 	ret

03043554 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
 3043554:	defff104 	addi	sp,sp,-60
 3043558:	dfc00e15 	stw	ra,56(sp)
 304355c:	df000d15 	stw	fp,52(sp)
 3043560:	dc000c15 	stw	r16,48(sp)
 3043564:	df000c04 	addi	fp,sp,48
 3043568:	e13ffd15 	stw	r4,-12(fp)
 304356c:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
 3043570:	00800044 	movi	r2,1
 3043574:	e0bffb15 	stw	r2,-20(fp)
    bool bDone = FALSE;
 3043578:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
 304357c:	e0bffd17 	ldw	r2,-12(fp)
 3043580:	10800317 	ldw	r2,12(r2)
 3043584:	108002d8 	cmpnei	r2,r2,11
 3043588:	1000031e 	bne	r2,zero,3043598 <fatDelClusterList+0x44>
 304358c:	00800104 	movi	r2,4
 3043590:	e0bfff15 	stw	r2,-4(fp)
 3043594:	00000206 	br	30435a0 <fatDelClusterList+0x4c>
 3043598:	00800084 	movi	r2,2
 304359c:	e0bfff15 	stw	r2,-4(fp)
 30435a0:	e0bfff17 	ldw	r2,-4(fp)
 30435a4:	e0bff515 	stw	r2,-44(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
 30435a8:	e0bffd17 	ldw	r2,-12(fp)
 30435ac:	11000617 	ldw	r4,24(r2)
 30435b0:	e17ff517 	ldw	r5,-44(fp)
 30435b4:	30497ec0 	call	30497ec <__udivsi3>
 30435b8:	e0bff415 	stw	r2,-48(fp)
     
    ClusterIndex = StartCluster;
 30435bc:	e0bffe17 	ldw	r2,-8(fp)
 30435c0:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
 30435c4:	00004f06 	br	3043704 <fatDelClusterList+0x1b0>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
 30435c8:	e0bffd17 	ldw	r2,-12(fp)
 30435cc:	14000d17 	ldw	r16,52(r2)
 30435d0:	e0fff517 	ldw	r3,-44(fp)
 30435d4:	e0bff917 	ldw	r2,-28(fp)
 30435d8:	1889383a 	mul	r4,r3,r2
 30435dc:	e0bffd17 	ldw	r2,-12(fp)
 30435e0:	11400617 	ldw	r5,24(r2)
 30435e4:	30497ec0 	call	30497ec <__udivsi3>
 30435e8:	8085883a 	add	r2,r16,r2
 30435ec:	e0bff815 	stw	r2,-32(fp)
        bSuccess = fatReadSecter(pVol, Secter);
 30435f0:	e13ffd17 	ldw	r4,-12(fp)
 30435f4:	e17ff817 	ldw	r5,-32(fp)
 30435f8:	30441240 	call	3044124 <fatReadSecter>
 30435fc:	e0bffb15 	stw	r2,-20(fp)
        if (bSuccess){
 3043600:	e0bffb17 	ldw	r2,-20(fp)
 3043604:	1005003a 	cmpeq	r2,r2,zero
 3043608:	10003e1e 	bne	r2,zero,3043704 <fatDelClusterList+0x1b0>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
 304360c:	e0bffd17 	ldw	r2,-12(fp)
 3043610:	14001004 	addi	r16,r2,64
 3043614:	e17ff417 	ldw	r5,-48(fp)
 3043618:	e13ff917 	ldw	r4,-28(fp)
 304361c:	30497f40 	call	30497f4 <__umodsi3>
 3043620:	1007883a 	mov	r3,r2
 3043624:	e0bff517 	ldw	r2,-44(fp)
 3043628:	1885383a 	mul	r2,r3,r2
 304362c:	8085883a 	add	r2,r16,r2
 3043630:	e0bff615 	stw	r2,-40(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
 3043634:	e0bffd17 	ldw	r2,-12(fp)
 3043638:	10800317 	ldw	r2,12(r2)
 304363c:	108002d8 	cmpnei	r2,r2,11
 3043640:	1000071e 	bne	r2,zero,3043660 <fatDelClusterList+0x10c>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
 3043644:	e0bff617 	ldw	r2,-40(fp)
 3043648:	10800017 	ldw	r2,0(r2)
 304364c:	e0bff715 	stw	r2,-36(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
 3043650:	e13ff717 	ldw	r4,-36(fp)
 3043654:	30431b00 	call	30431b0 <fat32ClusterType>
 3043658:	e0bffc15 	stw	r2,-16(fp)
 304365c:	00000706 	br	304367c <fatDelClusterList+0x128>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
 3043660:	e0bff617 	ldw	r2,-40(fp)
 3043664:	1080000b 	ldhu	r2,0(r2)
 3043668:	10bfffcc 	andi	r2,r2,65535
 304366c:	e0bff715 	stw	r2,-36(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
 3043670:	e13ff717 	ldw	r4,-36(fp)
 3043674:	30430f80 	call	30430f8 <fat16ClusterType>
 3043678:	e0bffc15 	stw	r2,-16(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
 304367c:	e0bffc17 	ldw	r2,-16(fp)
 3043680:	10800120 	cmpeqi	r2,r2,4
 3043684:	1000071e 	bne	r2,zero,30436a4 <fatDelClusterList+0x150>
 3043688:	e0bffc17 	ldw	r2,-16(fp)
 304368c:	108000e0 	cmpeqi	r2,r2,3
 3043690:	1000041e 	bne	r2,zero,30436a4 <fatDelClusterList+0x150>
                bDone = TRUE;
 3043694:	00800044 	movi	r2,1
 3043698:	e0bffa15 	stw	r2,-24(fp)
                bSuccess = FALSE;
 304369c:	e03ffb15 	stw	zero,-20(fp)
 30436a0:	00001806 	br	3043704 <fatDelClusterList+0x1b0>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
 30436a4:	e0bffc17 	ldw	r2,-16(fp)
 30436a8:	108000d8 	cmpnei	r2,r2,3
 30436ac:	1000021e 	bne	r2,zero,30436b8 <fatDelClusterList+0x164>
                    bDone = TRUE; // the last cluster
 30436b0:	00800044 	movi	r2,1
 30436b4:	e0bffa15 	stw	r2,-24(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
 30436b8:	e0bffd17 	ldw	r2,-12(fp)
 30436bc:	10800317 	ldw	r2,12(r2)
 30436c0:	108002d8 	cmpnei	r2,r2,11
 30436c4:	1000031e 	bne	r2,zero,30436d4 <fatDelClusterList+0x180>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
 30436c8:	e0bff617 	ldw	r2,-40(fp)
 30436cc:	10000015 	stw	zero,0(r2)
 30436d0:	00000206 	br	30436dc <fatDelClusterList+0x188>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
 30436d4:	e0bff617 	ldw	r2,-40(fp)
 30436d8:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
 30436dc:	e0bffd17 	ldw	r2,-12(fp)
 30436e0:	10c00217 	ldw	r3,8(r2)
 30436e4:	e0bffd17 	ldw	r2,-12(fp)
 30436e8:	11000017 	ldw	r4,0(r2)
 30436ec:	e0bffd17 	ldw	r2,-12(fp)
 30436f0:	11409017 	ldw	r5,576(r2)
 30436f4:	e0bffd17 	ldw	r2,-12(fp)
 30436f8:	11801004 	addi	r6,r2,64
 30436fc:	183ee83a 	callr	r3
 3043700:	e0bffb15 	stw	r2,-20(fp)
 3043704:	e0bffb17 	ldw	r2,-20(fp)
 3043708:	1005003a 	cmpeq	r2,r2,zero
 304370c:	1000031e 	bne	r2,zero,304371c <fatDelClusterList+0x1c8>
 3043710:	e0bffa17 	ldw	r2,-24(fp)
 3043714:	1005003a 	cmpeq	r2,r2,zero
 3043718:	103fab1e 	bne	r2,zero,30435c8 <fatDelClusterList+0x74>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
 304371c:	e0bffb17 	ldw	r2,-20(fp)

}
 3043720:	e037883a 	mov	sp,fp
 3043724:	dfc00217 	ldw	ra,8(sp)
 3043728:	df000117 	ldw	fp,4(sp)
 304372c:	dc000017 	ldw	r16,0(sp)
 3043730:	dec00304 	addi	sp,sp,12
 3043734:	f800283a 	ret

03043738 <fatDumpDate>:


void fatDumpDate(unsigned short Date){
 3043738:	defffa04 	addi	sp,sp,-24
 304373c:	dfc00515 	stw	ra,20(sp)
 3043740:	df000415 	stw	fp,16(sp)
 3043744:	df000404 	addi	fp,sp,16
 3043748:	e13fff0d 	sth	r4,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
 304374c:	e0bfff0b 	ldhu	r2,-4(fp)
 3043750:	1004d27a 	srli	r2,r2,9
 3043754:	10bfffcc 	andi	r2,r2,65535
 3043758:	108007cc 	andi	r2,r2,31
 304375c:	1081ef04 	addi	r2,r2,1980
 3043760:	e0bffe15 	stw	r2,-8(fp)
    Month = ((Date >> 5) & 0xF);
 3043764:	e0bfff0b 	ldhu	r2,-4(fp)
 3043768:	1004d17a 	srli	r2,r2,5
 304376c:	10bfffcc 	andi	r2,r2,65535
 3043770:	108003cc 	andi	r2,r2,15
 3043774:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
 3043778:	e0bfff0b 	ldhu	r2,-4(fp)
 304377c:	108007cc 	andi	r2,r2,31
 3043780:	e0bffc15 	stw	r2,-16(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
 3043784:	0100c1b4 	movhi	r4,774
 3043788:	2127de04 	addi	r4,r4,-24712
 304378c:	30469080 	call	3046908 <myprintf>
 3043790:	0100c1b4 	movhi	r4,774
 3043794:	2127e004 	addi	r4,r4,-24704
 3043798:	e17ffe17 	ldw	r5,-8(fp)
 304379c:	e1bffd17 	ldw	r6,-12(fp)
 30437a0:	e1fffc17 	ldw	r7,-16(fp)
 30437a4:	30469080 	call	3046908 <myprintf>
}
 30437a8:	e037883a 	mov	sp,fp
 30437ac:	dfc00117 	ldw	ra,4(sp)
 30437b0:	df000017 	ldw	fp,0(sp)
 30437b4:	dec00204 	addi	sp,sp,8
 30437b8:	f800283a 	ret

030437bc <fatDumpTime>:

void fatDumpTime(unsigned short Date){
 30437bc:	defffa04 	addi	sp,sp,-24
 30437c0:	dfc00515 	stw	ra,20(sp)
 30437c4:	df000415 	stw	fp,16(sp)
 30437c8:	df000404 	addi	fp,sp,16
 30437cc:	e13fff0d 	sth	r4,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
 30437d0:	e0bfff0b 	ldhu	r2,-4(fp)
 30437d4:	1004d27a 	srli	r2,r2,9
 30437d8:	10bfffcc 	andi	r2,r2,65535
 30437dc:	108007cc 	andi	r2,r2,31
 30437e0:	e0bffe15 	stw	r2,-8(fp)
    M = ((Date >> 5) & 0x3F);
 30437e4:	e0bfff0b 	ldhu	r2,-4(fp)
 30437e8:	1004d17a 	srli	r2,r2,5
 30437ec:	10bfffcc 	andi	r2,r2,65535
 30437f0:	10800fcc 	andi	r2,r2,63
 30437f4:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
 30437f8:	e0bfff0b 	ldhu	r2,-4(fp)
 30437fc:	108007cc 	andi	r2,r2,31
 3043800:	1085883a 	add	r2,r2,r2
 3043804:	e0bffc15 	stw	r2,-16(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
 3043808:	0100c1b4 	movhi	r4,774
 304380c:	2127de04 	addi	r4,r4,-24712
 3043810:	30469080 	call	3046908 <myprintf>
 3043814:	0100c1b4 	movhi	r4,774
 3043818:	2127e304 	addi	r4,r4,-24692
 304381c:	e17ffe17 	ldw	r5,-8(fp)
 3043820:	e1bffd17 	ldw	r6,-12(fp)
 3043824:	e1fffc17 	ldw	r7,-16(fp)
 3043828:	30469080 	call	3046908 <myprintf>
}
 304382c:	e037883a 	mov	sp,fp
 3043830:	dfc00117 	ldw	ra,4(sp)
 3043834:	df000017 	ldw	fp,0(sp)
 3043838:	dec00204 	addi	sp,sp,8
 304383c:	f800283a 	ret

03043840 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
 3043840:	defffd04 	addi	sp,sp,-12
 3043844:	df000215 	stw	fp,8(sp)
 3043848:	df000204 	addi	fp,sp,8
 304384c:	e13ffe15 	stw	r4,-8(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
 3043850:	e0bffe17 	ldw	r2,-8(fp)
 3043854:	10800003 	ldbu	r2,0(r2)
 3043858:	10803fcc 	andi	r2,r2,255
 304385c:	1080201c 	xori	r2,r2,128
 3043860:	10bfe004 	addi	r2,r2,-128
 3043864:	1004c03a 	cmpne	r2,r2,zero
 3043868:	1000031e 	bne	r2,zero,3043878 <fatIsLastDir+0x38>
        return TRUE;
 304386c:	00800044 	movi	r2,1
 3043870:	e0bfff15 	stw	r2,-4(fp)
 3043874:	00000106 	br	304387c <fatIsLastDir+0x3c>
    return FALSE;        
 3043878:	e03fff15 	stw	zero,-4(fp)
 304387c:	e0bfff17 	ldw	r2,-4(fp)
}
 3043880:	e037883a 	mov	sp,fp
 3043884:	df000017 	ldw	fp,0(sp)
 3043888:	dec00104 	addi	sp,sp,4
 304388c:	f800283a 	ret

03043890 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
 3043890:	defff604 	addi	sp,sp,-40
 3043894:	dfc00915 	stw	ra,36(sp)
 3043898:	df000815 	stw	fp,32(sp)
 304389c:	df000804 	addi	fp,sp,32
 30438a0:	e13ffe15 	stw	r4,-8(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
 30438a4:	0080c1b4 	movhi	r2,774
 30438a8:	10a7e544 	addi	r2,r2,-24683
 30438ac:	e13ff904 	addi	r4,fp,-28
 30438b0:	100b883a 	mov	r5,r2
 30438b4:	01800444 	movi	r6,17
 30438b8:	304bb5c0 	call	304bb5c <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
 30438bc:	e03ff815 	stw	zero,-32(fp)
 30438c0:	00001206 	br	304390c <fatIsValidDir+0x7c>
        if (pDir->Name[0] == szTest[i]){
 30438c4:	e0bffe17 	ldw	r2,-8(fp)
 30438c8:	11000003 	ldbu	r4,0(r2)
 30438cc:	e0fff817 	ldw	r3,-32(fp)
 30438d0:	e0bff904 	addi	r2,fp,-28
 30438d4:	10c5883a 	add	r2,r2,r3
 30438d8:	10800003 	ldbu	r2,0(r2)
 30438dc:	20c03fcc 	andi	r3,r4,255
 30438e0:	18c0201c 	xori	r3,r3,128
 30438e4:	18ffe004 	addi	r3,r3,-128
 30438e8:	10803fcc 	andi	r2,r2,255
 30438ec:	1080201c 	xori	r2,r2,128
 30438f0:	10bfe004 	addi	r2,r2,-128
 30438f4:	1880021e 	bne	r3,r2,3043900 <fatIsValidDir+0x70>
            return FALSE;
 30438f8:	e03fff15 	stw	zero,-4(fp)
 30438fc:	00000806 	br	3043920 <fatIsValidDir+0x90>
 3043900:	e0bff817 	ldw	r2,-32(fp)
 3043904:	10800044 	addi	r2,r2,1
 3043908:	e0bff815 	stw	r2,-32(fp)
 304390c:	e0bff817 	ldw	r2,-32(fp)
 3043910:	10800470 	cmpltui	r2,r2,17
 3043914:	103feb1e 	bne	r2,zero,30438c4 <fatIsValidDir+0x34>
        }
    }    
    return TRUE;
 3043918:	00800044 	movi	r2,1
 304391c:	e0bfff15 	stw	r2,-4(fp)
 3043920:	e0bfff17 	ldw	r2,-4(fp)
    
}
 3043924:	e037883a 	mov	sp,fp
 3043928:	dfc00117 	ldw	ra,4(sp)
 304392c:	df000017 	ldw	fp,0(sp)
 3043930:	dec00204 	addi	sp,sp,8
 3043934:	f800283a 	ret

03043938 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
 3043938:	defffd04 	addi	sp,sp,-12
 304393c:	df000215 	stw	fp,8(sp)
 3043940:	df000204 	addi	fp,sp,8
 3043944:	e13ffe15 	stw	r4,-8(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
 3043948:	e0bffe17 	ldw	r2,-8(fp)
 304394c:	10800003 	ldbu	r2,0(r2)
 3043950:	10803fcc 	andi	r2,r2,255
 3043954:	1080201c 	xori	r2,r2,128
 3043958:	10bfe004 	addi	r2,r2,-128
 304395c:	10bff958 	cmpnei	r2,r2,-27
 3043960:	1000031e 	bne	r2,zero,3043970 <fatIsUnusedDir+0x38>
        return TRUE;
 3043964:	00800044 	movi	r2,1
 3043968:	e0bfff15 	stw	r2,-4(fp)
 304396c:	00000106 	br	3043974 <fatIsUnusedDir+0x3c>
    return FALSE; 
 3043970:	e03fff15 	stw	zero,-4(fp)
 3043974:	e0bfff17 	ldw	r2,-4(fp)
}
 3043978:	e037883a 	mov	sp,fp
 304397c:	df000017 	ldw	fp,0(sp)
 3043980:	dec00104 	addi	sp,sp,4
 3043984:	f800283a 	ret

03043988 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
 3043988:	defff304 	addi	sp,sp,-52
 304398c:	dfc00c15 	stw	ra,48(sp)
 3043990:	df000b15 	stw	fp,44(sp)
 3043994:	df000b04 	addi	fp,sp,44
 3043998:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
 304399c:	0080c1b4 	movhi	r2,774
 30439a0:	10a7e984 	addi	r2,r2,-24666
 30439a4:	e13ffb04 	addi	r4,fp,-20
 30439a8:	100b883a 	mov	r5,r2
 30439ac:	018003c4 	movi	r6,15
 30439b0:	304bb5c0 	call	304bb5c <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
 30439b4:	e0bfff17 	ldw	r2,-4(fp)
 30439b8:	10800003 	ldbu	r2,0(r2)
 30439bc:	10803fcc 	andi	r2,r2,255
 30439c0:	1080201c 	xori	r2,r2,128
 30439c4:	10bfe004 	addi	r2,r2,-128
 30439c8:	10bff958 	cmpnei	r2,r2,-27
 30439cc:	1000071e 	bne	r2,zero,30439ec <fatDump+0x64>
        FAT_DEBUG(("the directory entry is free.\n"));
 30439d0:	0100c1b4 	movhi	r4,774
 30439d4:	2127de04 	addi	r4,r4,-24712
 30439d8:	30469080 	call	3046908 <myprintf>
 30439dc:	0100c1b4 	movhi	r4,774
 30439e0:	2127ee04 	addi	r4,r4,-24648
 30439e4:	30469080 	call	3046908 <myprintf>
        return;
 30439e8:	0001a606 	br	3044084 <fatDump+0x6fc>
    }
    if (pDir->Name[0] == 0x00){
 30439ec:	e0bfff17 	ldw	r2,-4(fp)
 30439f0:	10800003 	ldbu	r2,0(r2)
 30439f4:	10803fcc 	andi	r2,r2,255
 30439f8:	1080201c 	xori	r2,r2,128
 30439fc:	10bfe004 	addi	r2,r2,-128
 3043a00:	1004c03a 	cmpne	r2,r2,zero
 3043a04:	1000071e 	bne	r2,zero,3043a24 <fatDump+0x9c>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
 3043a08:	0100c1b4 	movhi	r4,774
 3043a0c:	2127de04 	addi	r4,r4,-24712
 3043a10:	30469080 	call	3046908 <myprintf>
 3043a14:	0100c1b4 	movhi	r4,774
 3043a18:	2127f604 	addi	r4,r4,-24616
 3043a1c:	30469080 	call	3046908 <myprintf>
        return;
 3043a20:	00019806 	br	3044084 <fatDump+0x6fc>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
 3043a24:	e0bfff17 	ldw	r2,-4(fp)
 3043a28:	10800003 	ldbu	r2,0(r2)
 3043a2c:	10803fcc 	andi	r2,r2,255
 3043a30:	1080201c 	xori	r2,r2,128
 3043a34:	10bfe004 	addi	r2,r2,-128
 3043a38:	10800848 	cmpgei	r2,r2,33
 3043a3c:	10000e1e 	bne	r2,zero,3043a78 <fatDump+0xf0>
 3043a40:	e0bfff17 	ldw	r2,-4(fp)
 3043a44:	10800003 	ldbu	r2,0(r2)
 3043a48:	10803fcc 	andi	r2,r2,255
 3043a4c:	1080201c 	xori	r2,r2,128
 3043a50:	10bfe004 	addi	r2,r2,-128
 3043a54:	10800160 	cmpeqi	r2,r2,5
 3043a58:	1000071e 	bne	r2,zero,3043a78 <fatDump+0xf0>
        FAT_DEBUG(("Invalid file name.\n"));
 3043a5c:	0100c1b4 	movhi	r4,774
 3043a60:	2127de04 	addi	r4,r4,-24712
 3043a64:	30469080 	call	3046908 <myprintf>
 3043a68:	0100c1b4 	movhi	r4,774
 3043a6c:	21280d04 	addi	r4,r4,-24524
 3043a70:	30469080 	call	3046908 <myprintf>
        return;
 3043a74:	00018306 	br	3044084 <fatDump+0x6fc>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
 3043a78:	e03ffa15 	stw	zero,-24(fp)
 3043a7c:	00001706 	br	3043adc <fatDump+0x154>
        if (pDir->Name[0] == szInvalidName[i]){
 3043a80:	e0bfff17 	ldw	r2,-4(fp)
 3043a84:	11000003 	ldbu	r4,0(r2)
 3043a88:	e0fffa17 	ldw	r3,-24(fp)
 3043a8c:	e0bffb04 	addi	r2,fp,-20
 3043a90:	10c5883a 	add	r2,r2,r3
 3043a94:	10800003 	ldbu	r2,0(r2)
 3043a98:	20c03fcc 	andi	r3,r4,255
 3043a9c:	18c0201c 	xori	r3,r3,128
 3043aa0:	18ffe004 	addi	r3,r3,-128
 3043aa4:	10803fcc 	andi	r2,r2,255
 3043aa8:	1080201c 	xori	r2,r2,128
 3043aac:	10bfe004 	addi	r2,r2,-128
 3043ab0:	1880071e 	bne	r3,r2,3043ad0 <fatDump+0x148>
            FAT_DEBUG(("Invalid file name.\n"));
 3043ab4:	0100c1b4 	movhi	r4,774
 3043ab8:	2127de04 	addi	r4,r4,-24712
 3043abc:	30469080 	call	3046908 <myprintf>
 3043ac0:	0100c1b4 	movhi	r4,774
 3043ac4:	21280d04 	addi	r4,r4,-24524
 3043ac8:	30469080 	call	3046908 <myprintf>
            return;
 3043acc:	00016d06 	br	3044084 <fatDump+0x6fc>
 3043ad0:	e0bffa17 	ldw	r2,-24(fp)
 3043ad4:	10800044 	addi	r2,r2,1
 3043ad8:	e0bffa15 	stw	r2,-24(fp)
 3043adc:	e0bffa17 	ldw	r2,-24(fp)
 3043ae0:	108003f0 	cmpltui	r2,r2,15
 3043ae4:	103fe61e 	bne	r2,zero,3043a80 <fatDump+0xf8>
        }
    }    
    
    //printf("sizeof(FAT_TABLE):%d\n", (int)sizeof(FAT_TABLE));
    if (pDir->Name[0] == 0x05){
 3043ae8:	e0bfff17 	ldw	r2,-4(fp)
 3043aec:	10800003 	ldbu	r2,0(r2)
 3043af0:	10803fcc 	andi	r2,r2,255
 3043af4:	1080201c 	xori	r2,r2,128
 3043af8:	10bfe004 	addi	r2,r2,-128
 3043afc:	10800158 	cmpnei	r2,r2,5
 3043b00:	1000301e 	bne	r2,zero,3043bc4 <fatDump+0x23c>
        FAT_DEBUG(("Name:%c%c%c%c%c%c%c%c\n", 0xE5,pDir->Name[1],pDir->Name[2],pDir->Name[3],pDir->Name[4],pDir->Name[5],pDir->Name[6],pDir->Name[6]));
 3043b04:	0100c1b4 	movhi	r4,774
 3043b08:	2127de04 	addi	r4,r4,-24712
 3043b0c:	30469080 	call	3046908 <myprintf>
 3043b10:	e0bfff17 	ldw	r2,-4(fp)
 3043b14:	10800043 	ldbu	r2,1(r2)
 3043b18:	11803fcc 	andi	r6,r2,255
 3043b1c:	3180201c 	xori	r6,r6,128
 3043b20:	31bfe004 	addi	r6,r6,-128
 3043b24:	e0bfff17 	ldw	r2,-4(fp)
 3043b28:	10800083 	ldbu	r2,2(r2)
 3043b2c:	11c03fcc 	andi	r7,r2,255
 3043b30:	39c0201c 	xori	r7,r7,128
 3043b34:	39ffe004 	addi	r7,r7,-128
 3043b38:	e0bfff17 	ldw	r2,-4(fp)
 3043b3c:	108000c3 	ldbu	r2,3(r2)
 3043b40:	11403fcc 	andi	r5,r2,255
 3043b44:	2940201c 	xori	r5,r5,128
 3043b48:	297fe004 	addi	r5,r5,-128
 3043b4c:	e0bfff17 	ldw	r2,-4(fp)
 3043b50:	10800103 	ldbu	r2,4(r2)
 3043b54:	12003fcc 	andi	r8,r2,255
 3043b58:	4200201c 	xori	r8,r8,128
 3043b5c:	423fe004 	addi	r8,r8,-128
 3043b60:	e0bfff17 	ldw	r2,-4(fp)
 3043b64:	10800143 	ldbu	r2,5(r2)
 3043b68:	10c03fcc 	andi	r3,r2,255
 3043b6c:	18c0201c 	xori	r3,r3,128
 3043b70:	18ffe004 	addi	r3,r3,-128
 3043b74:	e0bfff17 	ldw	r2,-4(fp)
 3043b78:	10800183 	ldbu	r2,6(r2)
 3043b7c:	11003fcc 	andi	r4,r2,255
 3043b80:	2100201c 	xori	r4,r4,128
 3043b84:	213fe004 	addi	r4,r4,-128
 3043b88:	e0bfff17 	ldw	r2,-4(fp)
 3043b8c:	10800183 	ldbu	r2,6(r2)
 3043b90:	10803fcc 	andi	r2,r2,255
 3043b94:	1080201c 	xori	r2,r2,128
 3043b98:	10bfe004 	addi	r2,r2,-128
 3043b9c:	d9400015 	stw	r5,0(sp)
 3043ba0:	da000115 	stw	r8,4(sp)
 3043ba4:	d8c00215 	stw	r3,8(sp)
 3043ba8:	d9000315 	stw	r4,12(sp)
 3043bac:	d8800415 	stw	r2,16(sp)
 3043bb0:	0100c1b4 	movhi	r4,774
 3043bb4:	21281204 	addi	r4,r4,-24504
 3043bb8:	01403944 	movi	r5,229
 3043bbc:	30469080 	call	3046908 <myprintf>
 3043bc0:	00003306 	br	3043c90 <fatDump+0x308>
    }else{
        FAT_DEBUG(("Name:%c%c%c%c%c%c%c%c\n", pDir->Name[0],pDir->Name[1],pDir->Name[2],pDir->Name[3],pDir->Name[4],pDir->Name[5],pDir->Name[6],pDir->Name[6]));
 3043bc4:	0100c1b4 	movhi	r4,774
 3043bc8:	2127de04 	addi	r4,r4,-24712
 3043bcc:	30469080 	call	3046908 <myprintf>
 3043bd0:	e0bfff17 	ldw	r2,-4(fp)
 3043bd4:	10800003 	ldbu	r2,0(r2)
 3043bd8:	11403fcc 	andi	r5,r2,255
 3043bdc:	2940201c 	xori	r5,r5,128
 3043be0:	297fe004 	addi	r5,r5,-128
 3043be4:	e0bfff17 	ldw	r2,-4(fp)
 3043be8:	10800043 	ldbu	r2,1(r2)
 3043bec:	11803fcc 	andi	r6,r2,255
 3043bf0:	3180201c 	xori	r6,r6,128
 3043bf4:	31bfe004 	addi	r6,r6,-128
 3043bf8:	e0bfff17 	ldw	r2,-4(fp)
 3043bfc:	10800083 	ldbu	r2,2(r2)
 3043c00:	11c03fcc 	andi	r7,r2,255
 3043c04:	39c0201c 	xori	r7,r7,128
 3043c08:	39ffe004 	addi	r7,r7,-128
 3043c0c:	e0bfff17 	ldw	r2,-4(fp)
 3043c10:	108000c3 	ldbu	r2,3(r2)
 3043c14:	12003fcc 	andi	r8,r2,255
 3043c18:	4200201c 	xori	r8,r8,128
 3043c1c:	423fe004 	addi	r8,r8,-128
 3043c20:	e0bfff17 	ldw	r2,-4(fp)
 3043c24:	10800103 	ldbu	r2,4(r2)
 3043c28:	12403fcc 	andi	r9,r2,255
 3043c2c:	4a40201c 	xori	r9,r9,128
 3043c30:	4a7fe004 	addi	r9,r9,-128
 3043c34:	e0bfff17 	ldw	r2,-4(fp)
 3043c38:	10800143 	ldbu	r2,5(r2)
 3043c3c:	10c03fcc 	andi	r3,r2,255
 3043c40:	18c0201c 	xori	r3,r3,128
 3043c44:	18ffe004 	addi	r3,r3,-128
 3043c48:	e0bfff17 	ldw	r2,-4(fp)
 3043c4c:	10800183 	ldbu	r2,6(r2)
 3043c50:	11003fcc 	andi	r4,r2,255
 3043c54:	2100201c 	xori	r4,r4,128
 3043c58:	213fe004 	addi	r4,r4,-128
 3043c5c:	e0bfff17 	ldw	r2,-4(fp)
 3043c60:	10800183 	ldbu	r2,6(r2)
 3043c64:	10803fcc 	andi	r2,r2,255
 3043c68:	1080201c 	xori	r2,r2,128
 3043c6c:	10bfe004 	addi	r2,r2,-128
 3043c70:	da000015 	stw	r8,0(sp)
 3043c74:	da400115 	stw	r9,4(sp)
 3043c78:	d8c00215 	stw	r3,8(sp)
 3043c7c:	d9000315 	stw	r4,12(sp)
 3043c80:	d8800415 	stw	r2,16(sp)
 3043c84:	0100c1b4 	movhi	r4,774
 3043c88:	21281204 	addi	r4,r4,-24504
 3043c8c:	30469080 	call	3046908 <myprintf>
    }        
    FAT_DEBUG(("Extention:%c%c%c\n", pDir->Extension[0],pDir->Extension[1],pDir->Extension[2]));
 3043c90:	0100c1b4 	movhi	r4,774
 3043c94:	2127de04 	addi	r4,r4,-24712
 3043c98:	30469080 	call	3046908 <myprintf>
 3043c9c:	e0bfff17 	ldw	r2,-4(fp)
 3043ca0:	10800203 	ldbu	r2,8(r2)
 3043ca4:	11403fcc 	andi	r5,r2,255
 3043ca8:	2940201c 	xori	r5,r5,128
 3043cac:	297fe004 	addi	r5,r5,-128
 3043cb0:	e0bfff17 	ldw	r2,-4(fp)
 3043cb4:	10800243 	ldbu	r2,9(r2)
 3043cb8:	11803fcc 	andi	r6,r2,255
 3043cbc:	3180201c 	xori	r6,r6,128
 3043cc0:	31bfe004 	addi	r6,r6,-128
 3043cc4:	e0bfff17 	ldw	r2,-4(fp)
 3043cc8:	10800283 	ldbu	r2,10(r2)
 3043ccc:	11c03fcc 	andi	r7,r2,255
 3043cd0:	39c0201c 	xori	r7,r7,128
 3043cd4:	39ffe004 	addi	r7,r7,-128
 3043cd8:	0100c1b4 	movhi	r4,774
 3043cdc:	21281804 	addi	r4,r4,-24480
 3043ce0:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("Attribute:%02Xh\n", pDir->Attribute));
 3043ce4:	0100c1b4 	movhi	r4,774
 3043ce8:	2127de04 	addi	r4,r4,-24712
 3043cec:	30469080 	call	3046908 <myprintf>
 3043cf0:	e0bfff17 	ldw	r2,-4(fp)
 3043cf4:	108002c3 	ldbu	r2,11(r2)
 3043cf8:	11403fcc 	andi	r5,r2,255
 3043cfc:	2940201c 	xori	r5,r5,128
 3043d00:	297fe004 	addi	r5,r5,-128
 3043d04:	0100c1b4 	movhi	r4,774
 3043d08:	21281d04 	addi	r4,r4,-24460
 3043d0c:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_READ_ONLY)
 3043d10:	e0bfff17 	ldw	r2,-4(fp)
 3043d14:	108002c3 	ldbu	r2,11(r2)
 3043d18:	10803fcc 	andi	r2,r2,255
 3043d1c:	1080004c 	andi	r2,r2,1
 3043d20:	10803fcc 	andi	r2,r2,255
 3043d24:	1005003a 	cmpeq	r2,r2,zero
 3043d28:	1000061e 	bne	r2,zero,3043d44 <fatDump+0x3bc>
        FAT_DEBUG(("  Read-Only\n"));
 3043d2c:	0100c1b4 	movhi	r4,774
 3043d30:	2127de04 	addi	r4,r4,-24712
 3043d34:	30469080 	call	3046908 <myprintf>
 3043d38:	0100c1b4 	movhi	r4,774
 3043d3c:	21282204 	addi	r4,r4,-24440
 3043d40:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_HIDDEN)
 3043d44:	e0bfff17 	ldw	r2,-4(fp)
 3043d48:	108002c3 	ldbu	r2,11(r2)
 3043d4c:	10803fcc 	andi	r2,r2,255
 3043d50:	1080008c 	andi	r2,r2,2
 3043d54:	1005003a 	cmpeq	r2,r2,zero
 3043d58:	1000061e 	bne	r2,zero,3043d74 <fatDump+0x3ec>
        FAT_DEBUG(("  Hidden\n"));
 3043d5c:	0100c1b4 	movhi	r4,774
 3043d60:	2127de04 	addi	r4,r4,-24712
 3043d64:	30469080 	call	3046908 <myprintf>
 3043d68:	0100c1b4 	movhi	r4,774
 3043d6c:	21282604 	addi	r4,r4,-24424
 3043d70:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_SYSTEM)
 3043d74:	e0bfff17 	ldw	r2,-4(fp)
 3043d78:	108002c3 	ldbu	r2,11(r2)
 3043d7c:	10803fcc 	andi	r2,r2,255
 3043d80:	1080010c 	andi	r2,r2,4
 3043d84:	1005003a 	cmpeq	r2,r2,zero
 3043d88:	1000061e 	bne	r2,zero,3043da4 <fatDump+0x41c>
        FAT_DEBUG(("  System\n"));
 3043d8c:	0100c1b4 	movhi	r4,774
 3043d90:	2127de04 	addi	r4,r4,-24712
 3043d94:	30469080 	call	3046908 <myprintf>
 3043d98:	0100c1b4 	movhi	r4,774
 3043d9c:	21282904 	addi	r4,r4,-24412
 3043da0:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_VOLUME_ID)
 3043da4:	e0bfff17 	ldw	r2,-4(fp)
 3043da8:	108002c3 	ldbu	r2,11(r2)
 3043dac:	10803fcc 	andi	r2,r2,255
 3043db0:	1080020c 	andi	r2,r2,8
 3043db4:	1005003a 	cmpeq	r2,r2,zero
 3043db8:	1000061e 	bne	r2,zero,3043dd4 <fatDump+0x44c>
        FAT_DEBUG(("  Volume\n"));
 3043dbc:	0100c1b4 	movhi	r4,774
 3043dc0:	2127de04 	addi	r4,r4,-24712
 3043dc4:	30469080 	call	3046908 <myprintf>
 3043dc8:	0100c1b4 	movhi	r4,774
 3043dcc:	21282c04 	addi	r4,r4,-24400
 3043dd0:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_DIRECTORY)
 3043dd4:	e0bfff17 	ldw	r2,-4(fp)
 3043dd8:	108002c3 	ldbu	r2,11(r2)
 3043ddc:	10803fcc 	andi	r2,r2,255
 3043de0:	1080040c 	andi	r2,r2,16
 3043de4:	1005003a 	cmpeq	r2,r2,zero
 3043de8:	1000061e 	bne	r2,zero,3043e04 <fatDump+0x47c>
        FAT_DEBUG(("  Directory\n"));
 3043dec:	0100c1b4 	movhi	r4,774
 3043df0:	2127de04 	addi	r4,r4,-24712
 3043df4:	30469080 	call	3046908 <myprintf>
 3043df8:	0100c1b4 	movhi	r4,774
 3043dfc:	21282f04 	addi	r4,r4,-24388
 3043e00:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_ARCHIVE)
 3043e04:	e0bfff17 	ldw	r2,-4(fp)
 3043e08:	108002c3 	ldbu	r2,11(r2)
 3043e0c:	10803fcc 	andi	r2,r2,255
 3043e10:	1080080c 	andi	r2,r2,32
 3043e14:	1005003a 	cmpeq	r2,r2,zero
 3043e18:	1000061e 	bne	r2,zero,3043e34 <fatDump+0x4ac>
        FAT_DEBUG(("  Archive\n"));
 3043e1c:	0100c1b4 	movhi	r4,774
 3043e20:	2127de04 	addi	r4,r4,-24712
 3043e24:	30469080 	call	3046908 <myprintf>
 3043e28:	0100c1b4 	movhi	r4,774
 3043e2c:	21283304 	addi	r4,r4,-24372
 3043e30:	30469080 	call	3046908 <myprintf>
    if (pDir->Attribute & ATTR_LONG_NAME)
 3043e34:	e0bfff17 	ldw	r2,-4(fp)
 3043e38:	108002c3 	ldbu	r2,11(r2)
 3043e3c:	10803fcc 	andi	r2,r2,255
 3043e40:	108003cc 	andi	r2,r2,15
 3043e44:	1005003a 	cmpeq	r2,r2,zero
 3043e48:	1000061e 	bne	r2,zero,3043e64 <fatDump+0x4dc>
        FAT_DEBUG(("  Long Name\n"));
 3043e4c:	0100c1b4 	movhi	r4,774
 3043e50:	2127de04 	addi	r4,r4,-24712
 3043e54:	30469080 	call	3046908 <myprintf>
 3043e58:	0100c1b4 	movhi	r4,774
 3043e5c:	21283604 	addi	r4,r4,-24360
 3043e60:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
 3043e64:	0100c1b4 	movhi	r4,774
 3043e68:	2127de04 	addi	r4,r4,-24712
 3043e6c:	30469080 	call	3046908 <myprintf>
 3043e70:	0100c1b4 	movhi	r4,774
 3043e74:	21283a04 	addi	r4,r4,-24344
 3043e78:	30469080 	call	3046908 <myprintf>
 3043e7c:	e0bfff17 	ldw	r2,-4(fp)
 3043e80:	10c00383 	ldbu	r3,14(r2)
 3043e84:	108003c3 	ldbu	r2,15(r2)
 3043e88:	1004923a 	slli	r2,r2,8
 3043e8c:	10c4b03a 	or	r2,r2,r3
 3043e90:	113fffcc 	andi	r4,r2,65535
 3043e94:	30437bc0 	call	30437bc <fatDumpTime>
 3043e98:	0100c1b4 	movhi	r4,774
 3043e9c:	2127de04 	addi	r4,r4,-24712
 3043ea0:	30469080 	call	3046908 <myprintf>
 3043ea4:	0100c1b4 	movhi	r4,774
 3043ea8:	21283d04 	addi	r4,r4,-24332
 3043eac:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
 3043eb0:	0100c1b4 	movhi	r4,774
 3043eb4:	2127de04 	addi	r4,r4,-24712
 3043eb8:	30469080 	call	3046908 <myprintf>
 3043ebc:	0100c1b4 	movhi	r4,774
 3043ec0:	21283e04 	addi	r4,r4,-24328
 3043ec4:	30469080 	call	3046908 <myprintf>
 3043ec8:	e0bfff17 	ldw	r2,-4(fp)
 3043ecc:	10c00483 	ldbu	r3,18(r2)
 3043ed0:	108004c3 	ldbu	r2,19(r2)
 3043ed4:	1004923a 	slli	r2,r2,8
 3043ed8:	10c4b03a 	or	r2,r2,r3
 3043edc:	113fffcc 	andi	r4,r2,65535
 3043ee0:	30437380 	call	3043738 <fatDumpDate>
 3043ee4:	0100c1b4 	movhi	r4,774
 3043ee8:	2127de04 	addi	r4,r4,-24712
 3043eec:	30469080 	call	3046908 <myprintf>
 3043ef0:	0100c1b4 	movhi	r4,774
 3043ef4:	21283d04 	addi	r4,r4,-24332
 3043ef8:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
 3043efc:	0100c1b4 	movhi	r4,774
 3043f00:	2127de04 	addi	r4,r4,-24712
 3043f04:	30469080 	call	3046908 <myprintf>
 3043f08:	e0bfff17 	ldw	r2,-4(fp)
 3043f0c:	10c00503 	ldbu	r3,20(r2)
 3043f10:	10800543 	ldbu	r2,21(r2)
 3043f14:	1004923a 	slli	r2,r2,8
 3043f18:	10c4b03a 	or	r2,r2,r3
 3043f1c:	117fffcc 	andi	r5,r2,65535
 3043f20:	0100c1b4 	movhi	r4,774
 3043f24:	21284104 	addi	r4,r4,-24316
 3043f28:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
 3043f2c:	0100c1b4 	movhi	r4,774
 3043f30:	2127de04 	addi	r4,r4,-24712
 3043f34:	30469080 	call	3046908 <myprintf>
 3043f38:	0100c1b4 	movhi	r4,774
 3043f3c:	21284604 	addi	r4,r4,-24296
 3043f40:	30469080 	call	3046908 <myprintf>
 3043f44:	e0bfff17 	ldw	r2,-4(fp)
 3043f48:	10c00583 	ldbu	r3,22(r2)
 3043f4c:	108005c3 	ldbu	r2,23(r2)
 3043f50:	1004923a 	slli	r2,r2,8
 3043f54:	10c4b03a 	or	r2,r2,r3
 3043f58:	113fffcc 	andi	r4,r2,65535
 3043f5c:	30437bc0 	call	30437bc <fatDumpTime>
 3043f60:	0100c1b4 	movhi	r4,774
 3043f64:	2127de04 	addi	r4,r4,-24712
 3043f68:	30469080 	call	3046908 <myprintf>
 3043f6c:	0100c1b4 	movhi	r4,774
 3043f70:	21283d04 	addi	r4,r4,-24332
 3043f74:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
 3043f78:	0100c1b4 	movhi	r4,774
 3043f7c:	2127de04 	addi	r4,r4,-24712
 3043f80:	30469080 	call	3046908 <myprintf>
 3043f84:	0100c1b4 	movhi	r4,774
 3043f88:	21284a04 	addi	r4,r4,-24280
 3043f8c:	30469080 	call	3046908 <myprintf>
 3043f90:	e0bfff17 	ldw	r2,-4(fp)
 3043f94:	10c00603 	ldbu	r3,24(r2)
 3043f98:	10800643 	ldbu	r2,25(r2)
 3043f9c:	1004923a 	slli	r2,r2,8
 3043fa0:	10c4b03a 	or	r2,r2,r3
 3043fa4:	113fffcc 	andi	r4,r2,65535
 3043fa8:	30437380 	call	3043738 <fatDumpDate>
 3043fac:	0100c1b4 	movhi	r4,774
 3043fb0:	2127de04 	addi	r4,r4,-24712
 3043fb4:	30469080 	call	3046908 <myprintf>
 3043fb8:	0100c1b4 	movhi	r4,774
 3043fbc:	21283d04 	addi	r4,r4,-24332
 3043fc0:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
 3043fc4:	0100c1b4 	movhi	r4,774
 3043fc8:	2127de04 	addi	r4,r4,-24712
 3043fcc:	30469080 	call	3046908 <myprintf>
 3043fd0:	e0bfff17 	ldw	r2,-4(fp)
 3043fd4:	10c00683 	ldbu	r3,26(r2)
 3043fd8:	108006c3 	ldbu	r2,27(r2)
 3043fdc:	1004923a 	slli	r2,r2,8
 3043fe0:	10c4b03a 	or	r2,r2,r3
 3043fe4:	117fffcc 	andi	r5,r2,65535
 3043fe8:	e0bfff17 	ldw	r2,-4(fp)
 3043fec:	10c00683 	ldbu	r3,26(r2)
 3043ff0:	108006c3 	ldbu	r2,27(r2)
 3043ff4:	1004923a 	slli	r2,r2,8
 3043ff8:	10c4b03a 	or	r2,r2,r3
 3043ffc:	11bfffcc 	andi	r6,r2,65535
 3044000:	0100c1b4 	movhi	r4,774
 3044004:	21284e04 	addi	r4,r4,-24264
 3044008:	30469080 	call	3046908 <myprintf>
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
 304400c:	0100c1b4 	movhi	r4,774
 3044010:	2127de04 	addi	r4,r4,-24712
 3044014:	30469080 	call	3046908 <myprintf>
 3044018:	e0ffff17 	ldw	r3,-4(fp)
 304401c:	19000703 	ldbu	r4,28(r3)
 3044020:	18800743 	ldbu	r2,29(r3)
 3044024:	1004923a 	slli	r2,r2,8
 3044028:	1108b03a 	or	r4,r2,r4
 304402c:	18800783 	ldbu	r2,30(r3)
 3044030:	1004943a 	slli	r2,r2,16
 3044034:	1108b03a 	or	r4,r2,r4
 3044038:	188007c3 	ldbu	r2,31(r3)
 304403c:	1004963a 	slli	r2,r2,24
 3044040:	1104b03a 	or	r2,r2,r4
 3044044:	100b883a 	mov	r5,r2
 3044048:	e0ffff17 	ldw	r3,-4(fp)
 304404c:	19000703 	ldbu	r4,28(r3)
 3044050:	18800743 	ldbu	r2,29(r3)
 3044054:	1004923a 	slli	r2,r2,8
 3044058:	1108b03a 	or	r4,r2,r4
 304405c:	18800783 	ldbu	r2,30(r3)
 3044060:	1004943a 	slli	r2,r2,16
 3044064:	1108b03a 	or	r4,r2,r4
 3044068:	188007c3 	ldbu	r2,31(r3)
 304406c:	1004963a 	slli	r2,r2,24
 3044070:	1104b03a 	or	r2,r2,r4
 3044074:	100d883a 	mov	r6,r2
 3044078:	0100c1b4 	movhi	r4,774
 304407c:	21285304 	addi	r4,r4,-24244
 3044080:	30469080 	call	3046908 <myprintf>
}
 3044084:	e037883a 	mov	sp,fp
 3044088:	dfc00117 	ldw	ra,4(sp)
 304408c:	df000017 	ldw	fp,0(sp)
 3044090:	dec00204 	addi	sp,sp,8
 3044094:	f800283a 	ret

03044098 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
 3044098:	defffa04 	addi	sp,sp,-24
 304409c:	df000515 	stw	fp,20(sp)
 30440a0:	df000504 	addi	fp,sp,20
 30440a4:	e13ffe15 	stw	r4,-8(fp)
 30440a8:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
 30440ac:	e0ffff17 	ldw	r3,-4(fp)
 30440b0:	e0bffe17 	ldw	r2,-8(fp)
 30440b4:	1885883a 	add	r2,r3,r2
 30440b8:	10bfffc4 	addi	r2,r2,-1
 30440bc:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
 30440c0:	e03ffb15 	stw	zero,-20(fp)
 30440c4:	00000f06 	br	3044104 <fatArray2Value+0x6c>
        nValue <<= 8;
 30440c8:	e0bffc17 	ldw	r2,-16(fp)
 30440cc:	1004923a 	slli	r2,r2,8
 30440d0:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
 30440d4:	e0bffd17 	ldw	r2,-12(fp)
 30440d8:	10800003 	ldbu	r2,0(r2)
 30440dc:	10c03fcc 	andi	r3,r2,255
 30440e0:	e0bffc17 	ldw	r2,-16(fp)
 30440e4:	10c4b03a 	or	r2,r2,r3
 30440e8:	e0bffc15 	stw	r2,-16(fp)
 30440ec:	e0bffd17 	ldw	r2,-12(fp)
 30440f0:	10bfffc4 	addi	r2,r2,-1
 30440f4:	e0bffd15 	stw	r2,-12(fp)
 30440f8:	e0bffb17 	ldw	r2,-20(fp)
 30440fc:	10800044 	addi	r2,r2,1
 3044100:	e0bffb15 	stw	r2,-20(fp)
 3044104:	e0fffb17 	ldw	r3,-20(fp)
 3044108:	e0bfff17 	ldw	r2,-4(fp)
 304410c:	18bfee36 	bltu	r3,r2,30440c8 <fatArray2Value+0x30>
        
    }
    
    return nValue;
 3044110:	e0bffc17 	ldw	r2,-16(fp)
}
 3044114:	e037883a 	mov	sp,fp
 3044118:	df000017 	ldw	fp,0(sp)
 304411c:	dec00104 	addi	sp,sp,4
 3044120:	f800283a 	ret

03044124 <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
 3044124:	defffb04 	addi	sp,sp,-20
 3044128:	dfc00415 	stw	ra,16(sp)
 304412c:	df000315 	stw	fp,12(sp)
 3044130:	df000304 	addi	fp,sp,12
 3044134:	e13ffe15 	stw	r4,-8(fp)
 3044138:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
 304413c:	00800044 	movi	r2,1
 3044140:	e0bffd15 	stw	r2,-12(fp)
    if (nSecter != pVol->Secter_Index){
 3044144:	e0bffe17 	ldw	r2,-8(fp)
 3044148:	10c09017 	ldw	r3,576(r2)
 304414c:	e0bfff17 	ldw	r2,-4(fp)
 3044150:	18801226 	beq	r3,r2,304419c <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
 3044154:	e0bffe17 	ldw	r2,-8(fp)
 3044158:	10c00117 	ldw	r3,4(r2)
 304415c:	e0bffe17 	ldw	r2,-8(fp)
 3044160:	11000017 	ldw	r4,0(r2)
 3044164:	e0bffe17 	ldw	r2,-8(fp)
 3044168:	11801004 	addi	r6,r2,64
 304416c:	e17fff17 	ldw	r5,-4(fp)
 3044170:	183ee83a 	callr	r3
 3044174:	1004c03a 	cmpne	r2,r2,zero
 3044178:	1000051e 	bne	r2,zero,3044190 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
 304417c:	e0fffe17 	ldw	r3,-8(fp)
 3044180:	00bfffc4 	movi	r2,-1
 3044184:	18809015 	stw	r2,576(r3)
            bSuccess = FALSE;
 3044188:	e03ffd15 	stw	zero,-12(fp)
 304418c:	00000306 	br	304419c <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
 3044190:	e0fffe17 	ldw	r3,-8(fp)
 3044194:	e0bfff17 	ldw	r2,-4(fp)
 3044198:	18809015 	stw	r2,576(r3)
        }
    }
    return bSuccess;          
 304419c:	e0bffd17 	ldw	r2,-12(fp)
}     
 30441a0:	e037883a 	mov	sp,fp
 30441a4:	dfc00117 	ldw	ra,4(sp)
 30441a8:	df000017 	ldw	fp,0(sp)
 30441ac:	dec00204 	addi	sp,sp,8
 30441b0:	f800283a 	ret

030441b4 <fatFindDirectory>:

//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
 30441b4:	defff804 	addi	sp,sp,-32
 30441b8:	dfc00715 	stw	ra,28(sp)
 30441bc:	df000615 	stw	fp,24(sp)
 30441c0:	df000604 	addi	fp,sp,24
 30441c4:	e13ffe15 	stw	r4,-8(fp)
 30441c8:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
 30441cc:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
 30441d0:	e0bfff17 	ldw	r2,-4(fp)
 30441d4:	1008917a 	slli	r4,r2,5
 30441d8:	e0bffe17 	ldw	r2,-8(fp)
 30441dc:	11400617 	ldw	r5,24(r2)
 30441e0:	30497ec0 	call	30497ec <__udivsi3>
 30441e4:	e0bffc15 	stw	r2,-16(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
 30441e8:	e0bffe17 	ldw	r2,-8(fp)
 30441ec:	10c00e17 	ldw	r3,56(r2)
 30441f0:	e0bffc17 	ldw	r2,-16(fp)
 30441f4:	1885883a 	add	r2,r3,r2
 30441f8:	e0bffb15 	stw	r2,-20(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
 30441fc:	e13ffe17 	ldw	r4,-8(fp)
 3044200:	e17ffb17 	ldw	r5,-20(fp)
 3044204:	30441240 	call	3044124 <fatReadSecter>
 3044208:	1005003a 	cmpeq	r2,r2,zero
 304420c:	10000b1e 	bne	r2,zero,304423c <fatFindDirectory+0x88>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
 3044210:	e0bfff17 	ldw	r2,-4(fp)
 3044214:	1008917a 	slli	r4,r2,5
 3044218:	e0bffe17 	ldw	r2,-8(fp)
 304421c:	11400617 	ldw	r5,24(r2)
 3044220:	30497f40 	call	30497f4 <__umodsi3>
 3044224:	e0bffa15 	stw	r2,-24(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
 3044228:	e0bffe17 	ldw	r2,-8(fp)
 304422c:	10c01004 	addi	r3,r2,64
 3044230:	e0bffa17 	ldw	r2,-24(fp)
 3044234:	1885883a 	add	r2,r3,r2
 3044238:	e0bffd15 	stw	r2,-12(fp)
    }        
        
    return pDir;        
 304423c:	e0bffd17 	ldw	r2,-12(fp)
}
 3044240:	e037883a 	mov	sp,fp
 3044244:	dfc00117 	ldw	ra,4(sp)
 3044248:	df000017 	ldw	fp,0(sp)
 304424c:	dec00204 	addi	sp,sp,8
 3044250:	f800283a 	ret

03044254 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
 3044254:	defff604 	addi	sp,sp,-40
 3044258:	dfc00915 	stw	ra,36(sp)
 304425c:	df000815 	stw	fp,32(sp)
 3044260:	df000804 	addi	fp,sp,32
 3044264:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
 3044268:	00bfffc4 	movi	r2,-1
 304426c:	e0bffe15 	stw	r2,-8(fp)
    FAT_DIRECTORY *pDir=NULL;
 3044270:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
 3044274:	00800084 	movi	r2,2
 3044278:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
 304427c:	e03ff815 	stw	zero,-32(fp)
             
    while(!bDone){             
 3044280:	00003006 	br	3044344 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
 3044284:	e0bff917 	ldw	r2,-28(fp)
 3044288:	1008917a 	slli	r4,r2,5
 304428c:	e0bfff17 	ldw	r2,-4(fp)
 3044290:	11400617 	ldw	r5,24(r2)
 3044294:	30497ec0 	call	30497ec <__udivsi3>
 3044298:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
 304429c:	e0bfff17 	ldw	r2,-4(fp)
 30442a0:	10c00e17 	ldw	r3,56(r2)
 30442a4:	e0bffc17 	ldw	r2,-16(fp)
 30442a8:	1885883a 	add	r2,r3,r2
 30442ac:	e0bffb15 	stw	r2,-20(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
 30442b0:	e13fff17 	ldw	r4,-4(fp)
 30442b4:	e17ffb17 	ldw	r5,-20(fp)
 30442b8:	30441240 	call	3044124 <fatReadSecter>
 30442bc:	1005003a 	cmpeq	r2,r2,zero
 30442c0:	10001f1e 	bne	r2,zero,3044340 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
 30442c4:	e0bff917 	ldw	r2,-28(fp)
 30442c8:	1008917a 	slli	r4,r2,5
 30442cc:	e0bfff17 	ldw	r2,-4(fp)
 30442d0:	11400617 	ldw	r5,24(r2)
 30442d4:	30497f40 	call	30497f4 <__umodsi3>
 30442d8:	e0bffa15 	stw	r2,-24(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
 30442dc:	e0bfff17 	ldw	r2,-4(fp)
 30442e0:	10c01004 	addi	r3,r2,64
 30442e4:	e0bffa17 	ldw	r2,-24(fp)
 30442e8:	1885883a 	add	r2,r3,r2
 30442ec:	e0bffd15 	stw	r2,-12(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
 30442f0:	e13ffd17 	ldw	r4,-12(fp)
 30442f4:	30438400 	call	3043840 <fatIsLastDir>
 30442f8:	1004c03a 	cmpne	r2,r2,zero
 30442fc:	1000041e 	bne	r2,zero,3044310 <fatFindUnusedDirectory+0xbc>
 3044300:	e13ffd17 	ldw	r4,-12(fp)
 3044304:	30439380 	call	3043938 <fatIsUnusedDir>
 3044308:	1005003a 	cmpeq	r2,r2,zero
 304430c:	1000081e 	bne	r2,zero,3044330 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
 3044310:	00800044 	movi	r2,1
 3044314:	e0bff815 	stw	r2,-32(fp)
                if (fatIsUnusedDir(pDir))
 3044318:	e13ffd17 	ldw	r4,-12(fp)
 304431c:	30439380 	call	3043938 <fatIsUnusedDir>
 3044320:	1005003a 	cmpeq	r2,r2,zero
 3044324:	1000021e 	bne	r2,zero,3044330 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
 3044328:	e0bff917 	ldw	r2,-28(fp)
 304432c:	e0bffe15 	stw	r2,-8(fp)
            }
            nDirectoryIndex++;        
 3044330:	e0bff917 	ldw	r2,-28(fp)
 3044334:	10800044 	addi	r2,r2,1
 3044338:	e0bff915 	stw	r2,-28(fp)
 304433c:	00000106 	br	3044344 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
 3044340:	e03ff815 	stw	zero,-32(fp)
 3044344:	e0bff817 	ldw	r2,-32(fp)
 3044348:	1005003a 	cmpeq	r2,r2,zero
 304434c:	103fcd1e 	bne	r2,zero,3044284 <fatFindUnusedDirectory+0x30>
        }
    }             
    
    return Dir;      
 3044350:	e0bffe17 	ldw	r2,-8(fp)
}
 3044354:	e037883a 	mov	sp,fp
 3044358:	dfc00117 	ldw	ra,4(sp)
 304435c:	df000017 	ldw	fp,0(sp)
 3044360:	dec00204 	addi	sp,sp,8
 3044364:	f800283a 	ret

03044368 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
 3044368:	deff7504 	addi	sp,sp,-556
 304436c:	dfc08a15 	stw	ra,552(sp)
 3044370:	df008915 	stw	fp,548(sp)
 3044374:	dc008815 	stw	r16,544(sp)
 3044378:	df008804 	addi	fp,sp,544
 304437c:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
 3044380:	00800044 	movi	r2,1
 3044384:	e0bf7d15 	stw	r2,-524(fp)
    alt_32 FirstPartitionEntry,PartitionType,FirstSectionInVolume1;
    alt_32 nFatTableSize,nFatTableSecterNum;//, i;
    alt_u8 szBlock[512];
    
    // parsing Boot Sector system
    // Read the Master Boot Record(MBR) of FAT file system (Locate the section 0)
    // Offset: 
    // 000h(446 bytes): Executable Code (Boots Computer) 
    // 1BEh( 16 bytes): 1st Partition Entry
    // 1CEh( 16 bytes): 2nd Partition Entry
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
 3044388:	e0bffe17 	ldw	r2,-8(fp)
 304438c:	10c00117 	ldw	r3,4(r2)
 3044390:	e0bffe17 	ldw	r2,-8(fp)
 3044394:	11000017 	ldw	r4,0(r2)
 3044398:	e1bf7e04 	addi	r6,fp,-520
 304439c:	000b883a 	mov	r5,zero
 30443a0:	183ee83a 	callr	r3
 30443a4:	1004c03a 	cmpne	r2,r2,zero
 30443a8:	1000081e 	bne	r2,zero,30443cc <fatMount+0x64>
        FAT_DEBUG(("Read section 0 error.\n"));
 30443ac:	0100c1b4 	movhi	r4,774
 30443b0:	2127de04 	addi	r4,r4,-24712
 30443b4:	30469080 	call	3046908 <myprintf>
 30443b8:	0100c1b4 	movhi	r4,774
 30443bc:	21285904 	addi	r4,r4,-24220
 30443c0:	30469080 	call	3046908 <myprintf>
        return FALSE;
 30443c4:	e03fff15 	stw	zero,-4(fp)
 30443c8:	0000d306 	br	3044718 <fatMount+0x3b0>
    }    
    /*
    if (szBlock[510] != 0x55 || szBlock[511] != 0x55){
        FAT_DEBUG(("Invalid 0xAA55 signature\n"));
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
 30443cc:	00806f84 	movi	r2,446
 30443d0:	e0bf7c15 	stw	r2,-528(fp)
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    //PartitionType = szBlock[0x01C2];
    PartitionType = PARTITION_FAT16; // UPF MUDOU
 30443d4:	00800184 	movi	r2,6
 30443d8:	e0bf7b15 	stw	r2,-532(fp)
    if (PartitionType == PARTITION_FAT16){
 30443dc:	e0bf7b17 	ldw	r2,-532(fp)
 30443e0:	10800198 	cmpnei	r2,r2,6
 30443e4:	1000071e 	bne	r2,zero,3044404 <fatMount+0x9c>
        FAT_DEBUG(("FAT16\n"));
 30443e8:	0100c1b4 	movhi	r4,774
 30443ec:	2127de04 	addi	r4,r4,-24712
 30443f0:	30469080 	call	3046908 <myprintf>
 30443f4:	0100c1b4 	movhi	r4,774
 30443f8:	21285f04 	addi	r4,r4,-24196
 30443fc:	30469080 	call	3046908 <myprintf>
 3044400:	00001306 	br	3044450 <fatMount+0xe8>
    }else if (PartitionType == PARTITION_FAT32){
 3044404:	e0bf7b17 	ldw	r2,-532(fp)
 3044408:	108002d8 	cmpnei	r2,r2,11
 304440c:	1000071e 	bne	r2,zero,304442c <fatMount+0xc4>
        FAT_DEBUG(("FAT32\n"));
 3044410:	0100c1b4 	movhi	r4,774
 3044414:	2127de04 	addi	r4,r4,-24712
 3044418:	30469080 	call	3046908 <myprintf>
 304441c:	0100c1b4 	movhi	r4,774
 3044420:	21286104 	addi	r4,r4,-24188
 3044424:	30469080 	call	3046908 <myprintf>
 3044428:	00000906 	br	3044450 <fatMount+0xe8>
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
 304442c:	0100c1b4 	movhi	r4,774
 3044430:	2127de04 	addi	r4,r4,-24712
 3044434:	30469080 	call	3046908 <myprintf>
 3044438:	0100c1b4 	movhi	r4,774
 304443c:	21286304 	addi	r4,r4,-24180
 3044440:	e17f7b17 	ldw	r5,-532(fp)
 3044444:	30469080 	call	3046908 <myprintf>
        return FALSE; // only support FAT16 in this example
 3044448:	e03fff15 	stw	zero,-4(fp)
 304444c:	0000b206 	br	3044718 <fatMount+0x3b0>
    }       
    pVol->Partition_Type = PartitionType; 
 3044450:	e0ff7b17 	ldw	r3,-532(fp)
 3044454:	e0bffe17 	ldw	r2,-8(fp)
 3044458:	10c00315 	stw	r3,12(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
 304445c:	e0ff7c17 	ldw	r3,-528(fp)
 3044460:	e0bf7e04 	addi	r2,fp,-520
 3044464:	10c5883a 	add	r2,r2,r3
 3044468:	11000204 	addi	r4,r2,8
 304446c:	01400104 	movi	r5,4
 3044470:	30440980 	call	3044098 <fatArray2Value>
 3044474:	e0bf7a15 	stw	r2,-536(fp)
                            //szBlock[FirstPartitionEntry + 8 + 3]*256*256*256 + 
                            //szBlock[FirstPartitionEntry + 8 + 2]*256*256 + 
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
 3044478:	e0bffe17 	ldw	r2,-8(fp)
 304447c:	10c00117 	ldw	r3,4(r2)
 3044480:	e0bffe17 	ldw	r2,-8(fp)
 3044484:	11000017 	ldw	r4,0(r2)
 3044488:	e17f7a17 	ldw	r5,-536(fp)
 304448c:	e1bf7e04 	addi	r6,fp,-520
 3044490:	183ee83a 	callr	r3
 3044494:	1004c03a 	cmpne	r2,r2,zero
 3044498:	1000081e 	bne	r2,zero,30444bc <fatMount+0x154>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
 304449c:	0100c1b4 	movhi	r4,774
 30444a0:	2127de04 	addi	r4,r4,-24712
 30444a4:	30469080 	call	3046908 <myprintf>
 30444a8:	0100c1b4 	movhi	r4,774
 30444ac:	21286e04 	addi	r4,r4,-24136
 30444b0:	30469080 	call	3046908 <myprintf>
        return FALSE;
 30444b4:	e03fff15 	stw	zero,-4(fp)
 30444b8:	00009706 	br	3044718 <fatMount+0x3b0>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
 30444bc:	e0ff7a17 	ldw	r3,-536(fp)
 30444c0:	e0bffe17 	ldw	r2,-8(fp)
 30444c4:	10c00515 	stw	r3,20(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
 30444c8:	e0bf8103 	ldbu	r2,-508(fp)
 30444cc:	10803fcc 	andi	r2,r2,255
 30444d0:	1006923a 	slli	r3,r2,8
 30444d4:	e0bf80c3 	ldbu	r2,-509(fp)
 30444d8:	10803fcc 	andi	r2,r2,255
 30444dc:	1885883a 	add	r2,r3,r2
 30444e0:	1007883a 	mov	r3,r2
 30444e4:	e0bffe17 	ldw	r2,-8(fp)
 30444e8:	10c00615 	stw	r3,24(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
 30444ec:	e0bf8143 	ldbu	r2,-507(fp)
 30444f0:	10c03fcc 	andi	r3,r2,255
 30444f4:	e0bffe17 	ldw	r2,-8(fp)
 30444f8:	10c00715 	stw	r3,28(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
 30444fc:	e0bf81c3 	ldbu	r2,-505(fp)
 3044500:	10803fcc 	andi	r2,r2,255
 3044504:	1006923a 	slli	r3,r2,8
 3044508:	e0bf8183 	ldbu	r2,-506(fp)
 304450c:	10803fcc 	andi	r2,r2,255
 3044510:	1885883a 	add	r2,r3,r2
 3044514:	1007883a 	mov	r3,r2
 3044518:	e0bffe17 	ldw	r2,-8(fp)
 304451c:	10c00815 	stw	r3,32(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
 3044520:	e0bf8203 	ldbu	r2,-504(fp)
 3044524:	10c03fcc 	andi	r3,r2,255
 3044528:	e0bffe17 	ldw	r2,-8(fp)
 304452c:	10c00915 	stw	r3,36(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
 3044530:	e0bf8283 	ldbu	r2,-502(fp)
 3044534:	10803fcc 	andi	r2,r2,255
 3044538:	1006923a 	slli	r3,r2,8
 304453c:	e0bf8243 	ldbu	r2,-503(fp)
 3044540:	10803fcc 	andi	r2,r2,255
 3044544:	1885883a 	add	r2,r3,r2
 3044548:	1007883a 	mov	r3,r2
 304454c:	e0bffe17 	ldw	r2,-8(fp)
 3044550:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
 3044554:	e0bf83c3 	ldbu	r2,-497(fp)
 3044558:	10803fcc 	andi	r2,r2,255
 304455c:	1006923a 	slli	r3,r2,8
 3044560:	e0bf8383 	ldbu	r2,-498(fp)
 3044564:	10803fcc 	andi	r2,r2,255
 3044568:	1885883a 	add	r2,r3,r2
 304456c:	1007883a 	mov	r3,r2
 3044570:	e0bffe17 	ldw	r2,-8(fp)
 3044574:	10c00b15 	stw	r3,44(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
 3044578:	e0fffe17 	ldw	r3,-8(fp)
 304457c:	00bfffc4 	movi	r2,-1
 3044580:	18809015 	stw	r2,576(r3)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
 3044584:	e0bffe17 	ldw	r2,-8(fp)
 3044588:	10801004 	addi	r2,r2,64
 304458c:	1009883a 	mov	r4,r2
 3044590:	01808004 	movi	r6,512
 3044594:	000b883a 	mov	r5,zero
 3044598:	304bbfc0 	call	304bbfc <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
 304459c:	e0bffe17 	ldw	r2,-8(fp)
 30445a0:	10800317 	ldw	r2,12(r2)
 30445a4:	108002d8 	cmpnei	r2,r2,11
 30445a8:	1000071e 	bne	r2,zero,30445c8 <fatMount+0x260>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
 30445ac:	e0bf7e04 	addi	r2,fp,-520
 30445b0:	11000904 	addi	r4,r2,36
 30445b4:	01400104 	movi	r5,4
 30445b8:	30440980 	call	3044098 <fatArray2Value>
 30445bc:	1007883a 	mov	r3,r2
 30445c0:	e0bffe17 	ldw	r2,-8(fp)
 30445c4:	10c00b15 	stw	r3,44(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
 30445c8:	e0bffe17 	ldw	r2,-8(fp)
 30445cc:	10800617 	ldw	r2,24(r2)
 30445d0:	10808020 	cmpeqi	r2,r2,512
 30445d4:	1000091e 	bne	r2,zero,30445fc <fatMount+0x294>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
 30445d8:	0100c1b4 	movhi	r4,774
 30445dc:	2127de04 	addi	r4,r4,-24712
 30445e0:	30469080 	call	3046908 <myprintf>
 30445e4:	0100c1b4 	movhi	r4,774
 30445e8:	21287804 	addi	r4,r4,-24096
 30445ec:	01408004 	movi	r5,512
 30445f0:	30469080 	call	3046908 <myprintf>
        return FALSE; // only support FAT16 in this example
 30445f4:	e03fff15 	stw	zero,-4(fp)
 30445f8:	00004706 	br	3044718 <fatMount+0x3b0>
    }       
#ifdef DUMP_DEBUG    
    FAT_DEBUG(("First section in partition 1: %04Xh(%d)\n", gVolumeInfo.PartitionStartSecter, gVolumeInfo.PartitionStartSecter));
    FAT_DEBUG(("Byte Per Sector: %04Xh(%d)\n", gVolumeInfo.BPB_BytsPerSec, gVolumeInfo.BPB_BytsPerSec));
    FAT_DEBUG(("Sector Per Clusoter: %02Xh(%d)\n", gVolumeInfo.BPB_SecPerCluster, gVolumeInfo.BPB_SecPerCluster)); 
    FAT_DEBUG(("Reserved Sectors: %04Xh(%d)\n", gVolumeInfo.BPB_RsvdSecCnt, gVolumeInfo.BPB_RsvdSecCnt));
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", gVolumeInfo.BPB_NumFATs, gVolumeInfo.BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", gVolumeInfo.BPB_RootEntCnt, gVolumeInfo.BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", gVolumeInfo.BPB_FATSz, gVolumeInfo.BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
 30445fc:	e0bffe17 	ldw	r2,-8(fp)
 3044600:	10c00517 	ldw	r3,20(r2)
 3044604:	e0bffe17 	ldw	r2,-8(fp)
 3044608:	10800817 	ldw	r2,32(r2)
 304460c:	1887883a 	add	r3,r3,r2
 3044610:	e0bffe17 	ldw	r2,-8(fp)
 3044614:	10c00d15 	stw	r3,52(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
 3044618:	e0bffe17 	ldw	r2,-8(fp)
 304461c:	11000d17 	ldw	r4,52(r2)
 3044620:	e0bffe17 	ldw	r2,-8(fp)
 3044624:	10c00917 	ldw	r3,36(r2)
 3044628:	e0bffe17 	ldw	r2,-8(fp)
 304462c:	10800b17 	ldw	r2,44(r2)
 3044630:	1885383a 	mul	r2,r3,r2
 3044634:	2087883a 	add	r3,r4,r2
 3044638:	e0bffe17 	ldw	r2,-8(fp)
 304463c:	10c00e15 	stw	r3,56(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
 3044640:	e0bffe17 	ldw	r2,-8(fp)
 3044644:	14000e17 	ldw	r16,56(r2)
 3044648:	e0bffe17 	ldw	r2,-8(fp)
 304464c:	10800a17 	ldw	r2,40(r2)
 3044650:	1006917a 	slli	r3,r2,5
 3044654:	e0bffe17 	ldw	r2,-8(fp)
 3044658:	10800617 	ldw	r2,24(r2)
 304465c:	1885883a 	add	r2,r3,r2
 3044660:	113fffc4 	addi	r4,r2,-1
 3044664:	e0bffe17 	ldw	r2,-8(fp)
 3044668:	11400617 	ldw	r5,24(r2)
 304466c:	30497ec0 	call	30497ec <__udivsi3>
 3044670:	8087883a 	add	r3,r16,r2
 3044674:	e0bffe17 	ldw	r2,-8(fp)
 3044678:	10c00f15 	stw	r3,60(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
 304467c:	e0bffe17 	ldw	r2,-8(fp)
 3044680:	10c00617 	ldw	r3,24(r2)
 3044684:	e0bffe17 	ldw	r2,-8(fp)
 3044688:	10800717 	ldw	r2,28(r2)
 304468c:	1887383a 	mul	r3,r3,r2
 3044690:	e0bffe17 	ldw	r2,-8(fp)
 3044694:	10c00c15 	stw	r3,48(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
 3044698:	e0bffe17 	ldw	r2,-8(fp)
 304469c:	10c00917 	ldw	r3,36(r2)
 30446a0:	e0bffe17 	ldw	r2,-8(fp)
 30446a4:	10800b17 	ldw	r2,44(r2)
 30446a8:	1885383a 	mul	r2,r3,r2
 30446ac:	e0bf7815 	stw	r2,-544(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
 30446b0:	e0bffe17 	ldw	r2,-8(fp)
 30446b4:	10c00617 	ldw	r3,24(r2)
 30446b8:	e0bf7817 	ldw	r2,-544(fp)
 30446bc:	1885383a 	mul	r2,r3,r2
 30446c0:	e0bf7915 	stw	r2,-540(fp)
#ifdef FAT_READONLY    
    pVol->szFatTable = malloc(nFatTableSize);
    if (!pVol->szFatTable){
        FAT_DEBUG(("fat malloc(%d) fail!", nFatTableSize));
        return FALSE;
    }
    for(i=0;i<nFatTableSecterNum && bSuccess; i++ ){
        if (!pVol->ReadBlock512(pVol->DiskHandle, pVol->FatEntrySecter+i, pVol->szFatTable + i*pVol->BPB_BytsPerSec)){
            FAT_DEBUG(("Read first sector in volume one fail.\n"));
            bSuccess = FALSE;
        }          
    }
    
    
    if (!bSuccess && pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }
#endif    
    
  
    if (bSuccess){
 30446c4:	e0bf7d17 	ldw	r2,-524(fp)
 30446c8:	1005003a 	cmpeq	r2,r2,zero
 30446cc:	1000071e 	bne	r2,zero,30446ec <fatMount+0x384>
        FAT_DEBUG(("Fat_Mount success\n"));
 30446d0:	0100c1b4 	movhi	r4,774
 30446d4:	2127de04 	addi	r4,r4,-24712
 30446d8:	30469080 	call	3046908 <myprintf>
 30446dc:	0100c1b4 	movhi	r4,774
 30446e0:	21288604 	addi	r4,r4,-24040
 30446e4:	30469080 	call	3046908 <myprintf>
 30446e8:	00000606 	br	3044704 <fatMount+0x39c>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
 30446ec:	0100c1b4 	movhi	r4,774
 30446f0:	2127de04 	addi	r4,r4,-24712
 30446f4:	30469080 	call	3046908 <myprintf>
 30446f8:	0100c1b4 	movhi	r4,774
 30446fc:	21288b04 	addi	r4,r4,-24020
 3044700:	30469080 	call	3046908 <myprintf>
    }        
    pVol->bMount = bSuccess;
 3044704:	e0fffe17 	ldw	r3,-8(fp)
 3044708:	e0bf7d17 	ldw	r2,-524(fp)
 304470c:	18800415 	stw	r2,16(r3)
    return bSuccess;   
 3044710:	e0bf7d17 	ldw	r2,-524(fp)
 3044714:	e0bfff15 	stw	r2,-4(fp)
 3044718:	e0bfff17 	ldw	r2,-4(fp)
    

}
 304471c:	e037883a 	mov	sp,fp
 3044720:	dfc00217 	ldw	ra,8(sp)
 3044724:	df000117 	ldw	fp,4(sp)
 3044728:	dc000017 	ldw	r16,0(sp)
 304472c:	dec00304 	addi	sp,sp,12
 3044730:	f800283a 	ret

03044734 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
 3044734:	defffb04 	addi	sp,sp,-20
 3044738:	dfc00415 	stw	ra,16(sp)
 304473c:	df000315 	stw	fp,12(sp)
 3044740:	df000304 	addi	fp,sp,12
 3044744:	e13ffd15 	stw	r4,-12(fp)
 3044748:	e17ffe15 	stw	r5,-8(fp)
 304474c:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
 3044750:	e13ffe17 	ldw	r4,-8(fp)
 3044754:	e17fff17 	ldw	r5,-4(fp)
 3044758:	30477280 	call	3047728 <SDLIB_ReadBlock512>
}
 304475c:	e037883a 	mov	sp,fp
 3044760:	dfc00117 	ldw	ra,4(sp)
 3044764:	df000017 	ldw	fp,0(sp)
 3044768:	dec00204 	addi	sp,sp,8
 304476c:	f800283a 	ret

03044770 <SD_WriteBlock512>:

bool SD_WriteBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
 3044770:	defffb04 	addi	sp,sp,-20
 3044774:	dfc00415 	stw	ra,16(sp)
 3044778:	df000315 	stw	fp,12(sp)
 304477c:	df000304 	addi	fp,sp,12
 3044780:	e13ffd15 	stw	r4,-12(fp)
 3044784:	e17ffe15 	stw	r5,-8(fp)
 3044788:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_WriteBlock512(PysicalSelector, szBuf);
 304478c:	e13ffe17 	ldw	r4,-8(fp)
 3044790:	e17fff17 	ldw	r5,-4(fp)
 3044794:	30477b80 	call	30477b8 <SDLIB_WriteBlock512>
}
 3044798:	e037883a 	mov	sp,fp
 304479c:	dfc00117 	ldw	ra,4(sp)
 30447a0:	df000017 	ldw	fp,0(sp)
 30447a4:	dec00204 	addi	sp,sp,8
 30447a8:	f800283a 	ret

030447ac <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
 30447ac:	defff704 	addi	sp,sp,-36
 30447b0:	dfc00815 	stw	ra,32(sp)
 30447b4:	df000715 	stw	fp,28(sp)
 30447b8:	df000704 	addi	fp,sp,28
    FAT_HANDLE hFat = 0;
 30447bc:	e03ffe15 	stw	zero,-8(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
 30447c0:	00800284 	movi	r2,10
 30447c4:	e0bffc15 	stw	r2,-16(fp)
    bool bFind = FALSE;
 30447c8:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
 30447cc:	e03ffa15 	stw	zero,-24(fp)
    bool bSuccess = TRUE;
 30447d0:	00800044 	movi	r2,1
 30447d4:	e0bff915 	stw	r2,-28(fp)
    
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
 30447d8:	00000806 	br	30447fc <fatMountSdcard+0x50>
        bFind = SDLIB_Init();
 30447dc:	30473880 	call	3047388 <SDLIB_Init>
 30447e0:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
 30447e4:	e0bffb17 	ldw	r2,-20(fp)
 30447e8:	1004c03a 	cmpne	r2,r2,zero
 30447ec:	1000031e 	bne	r2,zero,30447fc <fatMountSdcard+0x50>
            usleep(100*1000);
 30447f0:	010000b4 	movhi	r4,2
 30447f4:	2121a804 	addi	r4,r4,-31072
 30447f8:	30540480 	call	3054048 <usleep>
 30447fc:	e0bffb17 	ldw	r2,-20(fp)
 3044800:	1004c03a 	cmpne	r2,r2,zero
 3044804:	10000a1e 	bne	r2,zero,3044830 <fatMountSdcard+0x84>
 3044808:	e0fffa17 	ldw	r3,-24(fp)
 304480c:	e0bffc17 	ldw	r2,-16(fp)
 3044810:	1884803a 	cmplt	r2,r3,r2
 3044814:	1007883a 	mov	r3,r2
 3044818:	e0bffa17 	ldw	r2,-24(fp)
 304481c:	10800044 	addi	r2,r2,1
 3044820:	e0bffa15 	stw	r2,-24(fp)
 3044824:	18803fcc 	andi	r2,r3,255
 3044828:	1004c03a 	cmpne	r2,r2,zero
 304482c:	103feb1e 	bne	r2,zero,30447dc <fatMountSdcard+0x30>
    }
    if (!bFind){
 3044830:	e0bffb17 	ldw	r2,-20(fp)
 3044834:	1004c03a 	cmpne	r2,r2,zero
 3044838:	1000091e 	bne	r2,zero,3044860 <fatMountSdcard+0xb4>
        FAT_DEBUG(("Cannot find SD card.\n"));
 304483c:	0100c1b4 	movhi	r4,774
 3044840:	2127de04 	addi	r4,r4,-24712
 3044844:	30469080 	call	3046908 <myprintf>
 3044848:	0100c1b4 	movhi	r4,774
 304484c:	21288f04 	addi	r4,r4,-24004
 3044850:	30469080 	call	3046908 <myprintf>
        return hFat;
 3044854:	e0bffe17 	ldw	r2,-8(fp)
 3044858:	e0bfff15 	stw	r2,-4(fp)
 304485c:	00002806 	br	3044900 <fatMountSdcard+0x154>
    }    
    
    hFat = malloc(sizeof(VOLUME_INFO));
 3044860:	01009104 	movi	r4,580
 3044864:	304b4080 	call	304b408 <malloc>
 3044868:	e0bffe15 	stw	r2,-8(fp)
    pVol = (VOLUME_INFO *)hFat;
 304486c:	e0bffe17 	ldw	r2,-8(fp)
 3044870:	e0bffd15 	stw	r2,-12(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
 3044874:	e0fffd17 	ldw	r3,-12(fp)
 3044878:	0080c134 	movhi	r2,772
 304487c:	1091cd04 	addi	r2,r2,18228
 3044880:	18800115 	stw	r2,4(r3)
    pVol->WriteBlock512 = SD_WriteBlock512;
 3044884:	e0fffd17 	ldw	r3,-12(fp)
 3044888:	0080c134 	movhi	r2,772
 304488c:	1091dc04 	addi	r2,r2,18288
 3044890:	18800215 	stw	r2,8(r3)
    bSuccess = fatMount(pVol);
 3044894:	e13ffd17 	ldw	r4,-12(fp)
 3044898:	30443680 	call	3044368 <fatMount>
 304489c:	e0bff915 	stw	r2,-28(fp)
        
    
  
    if (bSuccess){
 30448a0:	e0bff917 	ldw	r2,-28(fp)
 30448a4:	1005003a 	cmpeq	r2,r2,zero
 30448a8:	10000a1e 	bne	r2,zero,30448d4 <fatMountSdcard+0x128>
        FAT_DEBUG(("Fat_Mount success\n"));
 30448ac:	0100c1b4 	movhi	r4,774
 30448b0:	2127de04 	addi	r4,r4,-24712
 30448b4:	30469080 	call	3046908 <myprintf>
 30448b8:	0100c1b4 	movhi	r4,774
 30448bc:	21288604 	addi	r4,r4,-24040
 30448c0:	30469080 	call	3046908 <myprintf>
        pVol->bMount = TRUE;
 30448c4:	e0fffd17 	ldw	r3,-12(fp)
 30448c8:	00800044 	movi	r2,1
 30448cc:	18800415 	stw	r2,16(r3)
 30448d0:	00000906 	br	30448f8 <fatMountSdcard+0x14c>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
 30448d4:	0100c1b4 	movhi	r4,774
 30448d8:	2127de04 	addi	r4,r4,-24712
 30448dc:	30469080 	call	3046908 <myprintf>
 30448e0:	0100c1b4 	movhi	r4,774
 30448e4:	21288b04 	addi	r4,r4,-24020
 30448e8:	30469080 	call	3046908 <myprintf>
        free((void *)hFat);
 30448ec:	e13ffe17 	ldw	r4,-8(fp)
 30448f0:	304b3f40 	call	304b3f4 <free>
        hFat = 0;
 30448f4:	e03ffe15 	stw	zero,-8(fp)
    }        

    return hFat;   
 30448f8:	e0bffe17 	ldw	r2,-8(fp)
 30448fc:	e0bfff15 	stw	r2,-4(fp)
 3044900:	e0bfff17 	ldw	r2,-4(fp)
}
 3044904:	e037883a 	mov	sp,fp
 3044908:	dfc00117 	ldw	ra,4(sp)
 304490c:	df000017 	ldw	fp,0(sp)
 3044910:	dec00204 	addi	sp,sp,8
 3044914:	f800283a 	ret

03044918 <AUDIO_Init>:
/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void){
 3044918:	defffc04 	addi	sp,sp,-16
 304491c:	dfc00315 	stw	ra,12(sp)
 3044920:	df000215 	stw	fp,8(sp)
 3044924:	df000204 	addi	fp,sp,8
   bool bSuccess = TRUE;
 3044928:	00800044 	movi	r2,1
 304492c:	e0bffe15 	stw	r2,-8(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));
 3044930:	0100c1b4 	movhi	r4,774
 3044934:	21289504 	addi	r4,r4,-23980
 3044938:	30469080 	call	3046908 <myprintf>

    if (bSuccess)
 304493c:	e0bffe17 	ldw	r2,-8(fp)
 3044940:	1005003a 	cmpeq	r2,r2,zero
 3044944:	1000041e 	bne	r2,zero,3044958 <AUDIO_Init+0x40>
        bSuccess = aduio_RegWrite(15, 0x0000);  // reset
 3044948:	010003c4 	movi	r4,15
 304494c:	000b883a 	mov	r5,zero
 3044950:	30454640 	call	3045464 <aduio_RegWrite>
 3044954:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
 3044958:	e0bffe17 	ldw	r2,-8(fp)
 304495c:	1005003a 	cmpeq	r2,r2,zero
 3044960:	1000041e 	bne	r2,zero,3044974 <AUDIO_Init+0x5c>
        bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
 3044964:	01000244 	movi	r4,9
 3044968:	000b883a 	mov	r5,zero
 304496c:	30454640 	call	3045464 <aduio_RegWrite>
 3044970:	e0bffe15 	stw	r2,-8(fp)
       
    //usleep(20*1000);    
    if (bSuccess)
 3044974:	e0bffe17 	ldw	r2,-8(fp)
 3044978:	1005003a 	cmpeq	r2,r2,zero
 304497c:	1000041e 	bne	r2,zero,3044990 <AUDIO_Init+0x78>
        bSuccess = aduio_RegWrite(0, 0x0017);  // Left Line In: set left line in volume
 3044980:	0009883a 	mov	r4,zero
 3044984:	014005c4 	movi	r5,23
 3044988:	30454640 	call	3045464 <aduio_RegWrite>
 304498c:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
 3044990:	e0bffe17 	ldw	r2,-8(fp)
 3044994:	1005003a 	cmpeq	r2,r2,zero
 3044998:	1000041e 	bne	r2,zero,30449ac <AUDIO_Init+0x94>
        bSuccess = aduio_RegWrite(1, 0x0017);  // Right Line In: set right line in volume
 304499c:	01000044 	movi	r4,1
 30449a0:	014005c4 	movi	r5,23
 30449a4:	30454640 	call	3045464 <aduio_RegWrite>
 30449a8:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
 30449ac:	e0bffe17 	ldw	r2,-8(fp)
 30449b0:	1005003a 	cmpeq	r2,r2,zero
 30449b4:	1000041e 	bne	r2,zero,30449c8 <AUDIO_Init+0xb0>
        bSuccess = aduio_RegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
 30449b8:	01000084 	movi	r4,2
 30449bc:	014016c4 	movi	r5,91
 30449c0:	30454640 	call	3045464 <aduio_RegWrite>
 30449c4:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)
 30449c8:	e0bffe17 	ldw	r2,-8(fp)
 30449cc:	1005003a 	cmpeq	r2,r2,zero
 30449d0:	1000041e 	bne	r2,zero,30449e4 <AUDIO_Init+0xcc>
        bSuccess = aduio_RegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
 30449d4:	010000c4 	movi	r4,3
 30449d8:	014016c4 	movi	r5,91
 30449dc:	30454640 	call	3045464 <aduio_RegWrite>
 30449e0:	e0bffe15 	stw	r2,-8(fp)
        
    if (bSuccess)   // enable mic-boost, bypass and sidetone   
 30449e4:	e0bffe17 	ldw	r2,-8(fp)
 30449e8:	1005003a 	cmpeq	r2,r2,zero
 30449ec:	1000041e 	bne	r2,zero,3044a00 <AUDIO_Init+0xe8>
        bSuccess = aduio_RegWrite(4, 0x0015 | 0x20 | 0x08 | 0x01);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac          
 30449f0:	01000104 	movi	r4,4
 30449f4:	01400f44 	movi	r5,61
 30449f8:	30454640 	call	3045464 <aduio_RegWrite>
 30449fc:	e0bffe15 	stw	r2,-8(fp)
       // bSuccess = aduio_RegWrite(4, 0x0015);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac         
                
    if (bSuccess)
 3044a00:	e0bffe17 	ldw	r2,-8(fp)
 3044a04:	1005003a 	cmpeq	r2,r2,zero
 3044a08:	1000041e 	bne	r2,zero,3044a1c <AUDIO_Init+0x104>
        bSuccess = aduio_RegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute         
 3044a0c:	01000144 	movi	r4,5
 3044a10:	000b883a 	mov	r5,zero
 3044a14:	30454640 	call	3045464 <aduio_RegWrite>
 3044a18:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
 3044a1c:	e0bffe17 	ldw	r2,-8(fp)
 3044a20:	1005003a 	cmpeq	r2,r2,zero
 3044a24:	1000041e 	bne	r2,zero,3044a38 <AUDIO_Init+0x120>
        bSuccess = aduio_RegWrite(6, 0);  // power down control: power on all         
 3044a28:	01000184 	movi	r4,6
 3044a2c:	000b883a 	mov	r5,zero
 3044a30:	30454640 	call	3045464 <aduio_RegWrite>
 3044a34:	e0bffe15 	stw	r2,-8(fp)

    if (bSuccess)
 3044a38:	e0bffe17 	ldw	r2,-8(fp)
 3044a3c:	1005003a 	cmpeq	r2,r2,zero
 3044a40:	1000041e 	bne	r2,zero,3044a54 <AUDIO_Init+0x13c>
        bSuccess = aduio_RegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode         
 3044a44:	010001c4 	movi	r4,7
 3044a48:	01401084 	movi	r5,66
 3044a4c:	30454640 	call	3045464 <aduio_RegWrite>
 3044a50:	e0bffe15 	stw	r2,-8(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

    if (bSuccess)
 3044a54:	e0bffe17 	ldw	r2,-8(fp)
 3044a58:	1005003a 	cmpeq	r2,r2,zero
 3044a5c:	1000041e 	bne	r2,zero,3044a70 <AUDIO_Init+0x158>
        bSuccess = aduio_RegWrite(8, 0x0002);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
 3044a60:	01000204 	movi	r4,8
 3044a64:	01400084 	movi	r5,2
 3044a68:	30454640 	call	3045464 <aduio_RegWrite>
 3044a6c:	e0bffe15 	stw	r2,-8(fp)


    if (bSuccess)
 3044a70:	e0bffe17 	ldw	r2,-8(fp)
 3044a74:	1005003a 	cmpeq	r2,r2,zero
 3044a78:	1000041e 	bne	r2,zero,3044a8c <AUDIO_Init+0x174>
        bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
 3044a7c:	01000244 	movi	r4,9
 3044a80:	01400044 	movi	r5,1
 3044a84:	30454640 	call	3045464 <aduio_RegWrite>
 3044a88:	e0bffe15 	stw	r2,-8(fp)
        
        
         
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));        
 3044a8c:	e0bffe17 	ldw	r2,-8(fp)
 3044a90:	1005003a 	cmpeq	r2,r2,zero
 3044a94:	1000041e 	bne	r2,zero,3044aa8 <AUDIO_Init+0x190>
 3044a98:	0080c1b4 	movhi	r2,774
 3044a9c:	10a89b04 	addi	r2,r2,-23956
 3044aa0:	e0bfff15 	stw	r2,-4(fp)
 3044aa4:	00000306 	br	3044ab4 <AUDIO_Init+0x19c>
 3044aa8:	0080c1b4 	movhi	r2,774
 3044aac:	10a89d04 	addi	r2,r2,-23948
 3044ab0:	e0bfff15 	stw	r2,-4(fp)
 3044ab4:	0100c1b4 	movhi	r4,774
 3044ab8:	21289f04 	addi	r4,r4,-23940
 3044abc:	e17fff17 	ldw	r5,-4(fp)
 3044ac0:	30469080 	call	3046908 <myprintf>
    
    return bSuccess;        
 3044ac4:	e0bffe17 	ldw	r2,-8(fp)
         
}
 3044ac8:	e037883a 	mov	sp,fp
 3044acc:	dfc00117 	ldw	ra,4(sp)
 3044ad0:	df000017 	ldw	fp,0(sp)
 3044ad4:	dec00204 	addi	sp,sp,8
 3044ad8:	f800283a 	ret

03044adc <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive){
 3044adc:	defffc04 	addi	sp,sp,-16
 3044ae0:	dfc00315 	stw	ra,12(sp)
 3044ae4:	df000215 	stw	fp,8(sp)
 3044ae8:	df000204 	addi	fp,sp,8
 3044aec:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    bSuccess = aduio_RegWrite(9, bActive?0x0001:0x0000); 
 3044af0:	e0bfff17 	ldw	r2,-4(fp)
 3044af4:	100ac03a 	cmpne	r5,r2,zero
 3044af8:	01000244 	movi	r4,9
 3044afc:	30454640 	call	3045464 <aduio_RegWrite>
 3044b00:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 3044b04:	e0bffe17 	ldw	r2,-8(fp)
}
 3044b08:	e037883a 	mov	sp,fp
 3044b0c:	dfc00117 	ldw	ra,4(sp)
 3044b10:	df000017 	ldw	fp,0(sp)
 3044b14:	dec00204 	addi	sp,sp,8
 3044b18:	f800283a 	ret

03044b1c <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost){
 3044b1c:	defffb04 	addi	sp,sp,-20
 3044b20:	dfc00415 	stw	ra,16(sp)
 3044b24:	df000315 	stw	fp,12(sp)
 3044b28:	df000304 	addi	fp,sp,12
 3044b2c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[4];
 3044b30:	0080c1b4 	movhi	r2,774
 3044b34:	10be9604 	addi	r2,r2,-1448
 3044b38:	1080020b 	ldhu	r2,8(r2)
 3044b3c:	e0bffd0d 	sth	r2,-12(fp)
    if (bBoost)
 3044b40:	e0bfff17 	ldw	r2,-4(fp)
 3044b44:	1005003a 	cmpeq	r2,r2,zero
 3044b48:	1000041e 	bne	r2,zero,3044b5c <AUDIO_MicBoost+0x40>
        control |= 0x0001;
 3044b4c:	e0bffd0b 	ldhu	r2,-12(fp)
 3044b50:	10800054 	ori	r2,r2,1
 3044b54:	e0bffd0d 	sth	r2,-12(fp)
 3044b58:	00000406 	br	3044b6c <AUDIO_MicBoost+0x50>
    else        
        control &= 0xFFFE;
 3044b5c:	00bfff84 	movi	r2,-2
 3044b60:	e0fffd0b 	ldhu	r3,-12(fp)
 3044b64:	1884703a 	and	r2,r3,r2
 3044b68:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 3044b6c:	e17ffd0b 	ldhu	r5,-12(fp)
 3044b70:	01000104 	movi	r4,4
 3044b74:	30454640 	call	3045464 <aduio_RegWrite>
 3044b78:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 3044b7c:	e0bffe17 	ldw	r2,-8(fp)
}
 3044b80:	e037883a 	mov	sp,fp
 3044b84:	dfc00117 	ldw	ra,4(sp)
 3044b88:	df000017 	ldw	fp,0(sp)
 3044b8c:	dec00204 	addi	sp,sp,8
 3044b90:	f800283a 	ret

03044b94 <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable){
 3044b94:	defffb04 	addi	sp,sp,-20
 3044b98:	dfc00415 	stw	ra,16(sp)
 3044b9c:	df000315 	stw	fp,12(sp)
 3044ba0:	df000304 	addi	fp,sp,12
 3044ba4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 3044ba8:	0080c1b4 	movhi	r2,774
 3044bac:	10be9604 	addi	r2,r2,-1448
 3044bb0:	1080028b 	ldhu	r2,10(r2)
 3044bb4:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 3044bb8:	e0bfff17 	ldw	r2,-4(fp)
 3044bbc:	1005003a 	cmpeq	r2,r2,zero
 3044bc0:	1000051e 	bne	r2,zero,3044bd8 <AUDIO_AdcEnableHighPassFilter+0x44>
        control &= 0xFFFE;
 3044bc4:	00bfff84 	movi	r2,-2
 3044bc8:	e0fffd0b 	ldhu	r3,-12(fp)
 3044bcc:	1884703a 	and	r2,r3,r2
 3044bd0:	e0bffd0d 	sth	r2,-12(fp)
 3044bd4:	00000306 	br	3044be4 <AUDIO_AdcEnableHighPassFilter+0x50>
    else        
        control |= 0x0001;
 3044bd8:	e0bffd0b 	ldhu	r2,-12(fp)
 3044bdc:	10800054 	ori	r2,r2,1
 3044be0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 3044be4:	e17ffd0b 	ldhu	r5,-12(fp)
 3044be8:	01000144 	movi	r4,5
 3044bec:	30454640 	call	3045464 <aduio_RegWrite>
 3044bf0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;    
 3044bf4:	e0bffe17 	ldw	r2,-8(fp)
}
 3044bf8:	e037883a 	mov	sp,fp
 3044bfc:	dfc00117 	ldw	ra,4(sp)
 3044c00:	df000017 	ldw	fp,0(sp)
 3044c04:	dec00204 	addi	sp,sp,8
 3044c08:	f800283a 	ret

03044c0c <AUDIO_DacDeemphasisControl>:



bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type){
 3044c0c:	defffa04 	addi	sp,sp,-24
 3044c10:	dfc00515 	stw	ra,20(sp)
 3044c14:	df000415 	stw	fp,16(sp)
 3044c18:	df000404 	addi	fp,sp,16
 3044c1c:	e13ffe05 	stb	r4,-8(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 3044c20:	0080c1b4 	movhi	r2,774
 3044c24:	10be9604 	addi	r2,r2,-1448
 3044c28:	1080028b 	ldhu	r2,10(r2)
 3044c2c:	e0bffc0d 	sth	r2,-16(fp)
    control &= 0xFFF9;
 3044c30:	00fffe44 	movi	r3,-7
 3044c34:	e0bffc0b 	ldhu	r2,-16(fp)
 3044c38:	10c4703a 	and	r2,r2,r3
 3044c3c:	e0bffc0d 	sth	r2,-16(fp)
    switch(deemphasis_type){
 3044c40:	e0bffe03 	ldbu	r2,-8(fp)
 3044c44:	e0bfff15 	stw	r2,-4(fp)
 3044c48:	e0ffff17 	ldw	r3,-4(fp)
 3044c4c:	188000a0 	cmpeqi	r2,r3,2
 3044c50:	10000b1e 	bne	r2,zero,3044c80 <AUDIO_DacDeemphasisControl+0x74>
 3044c54:	e0ffff17 	ldw	r3,-4(fp)
 3044c58:	188000e0 	cmpeqi	r2,r3,3
 3044c5c:	10000c1e 	bne	r2,zero,3044c90 <AUDIO_DacDeemphasisControl+0x84>
 3044c60:	e0ffff17 	ldw	r3,-4(fp)
 3044c64:	18800060 	cmpeqi	r2,r3,1
 3044c68:	1000011e 	bne	r2,zero,3044c70 <AUDIO_DacDeemphasisControl+0x64>
 3044c6c:	00000b06 	br	3044c9c <AUDIO_DacDeemphasisControl+0x90>
        case DEEMPHASIS_48K: control |= ((0x03) << 1); break;
 3044c70:	e0bffc0b 	ldhu	r2,-16(fp)
 3044c74:	10800194 	ori	r2,r2,6
 3044c78:	e0bffc0d 	sth	r2,-16(fp)
 3044c7c:	00000706 	br	3044c9c <AUDIO_DacDeemphasisControl+0x90>
        case DEEMPHASIS_44K1: control |= ((0x02) << 1); break;
 3044c80:	e0bffc0b 	ldhu	r2,-16(fp)
 3044c84:	10800114 	ori	r2,r2,4
 3044c88:	e0bffc0d 	sth	r2,-16(fp)
 3044c8c:	00000306 	br	3044c9c <AUDIO_DacDeemphasisControl+0x90>
        case DEEMPHASIS_32K: control |= ((0x01) << 1); break;
 3044c90:	e0bffc0b 	ldhu	r2,-16(fp)
 3044c94:	10800094 	ori	r2,r2,2
 3044c98:	e0bffc0d 	sth	r2,-16(fp)
    }
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 3044c9c:	e17ffc0b 	ldhu	r5,-16(fp)
 3044ca0:	01000144 	movi	r4,5
 3044ca4:	30454640 	call	3045464 <aduio_RegWrite>
 3044ca8:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;       
 3044cac:	e0bffd17 	ldw	r2,-12(fp)
}
 3044cb0:	e037883a 	mov	sp,fp
 3044cb4:	dfc00117 	ldw	ra,4(sp)
 3044cb8:	df000017 	ldw	fp,0(sp)
 3044cbc:	dec00204 	addi	sp,sp,8
 3044cc0:	f800283a 	ret

03044cc4 <AUDIO_DacEnableZeroCross>:

bool AUDIO_DacEnableZeroCross(bool bEnable){
 3044cc4:	defffa04 	addi	sp,sp,-24
 3044cc8:	dfc00515 	stw	ra,20(sp)
 3044ccc:	df000415 	stw	fp,16(sp)
 3044cd0:	df000404 	addi	fp,sp,16
 3044cd4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[2];
 3044cd8:	0080c1b4 	movhi	r2,774
 3044cdc:	10be9604 	addi	r2,r2,-1448
 3044ce0:	1080010b 	ldhu	r2,4(r2)
 3044ce4:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[3];
 3044ce8:	0080c1b4 	movhi	r2,774
 3044cec:	10be9604 	addi	r2,r2,-1448
 3044cf0:	1080018b 	ldhu	r2,6(r2)
 3044cf4:	e0bffc8d 	sth	r2,-14(fp)
    mask = 0x01 << 7;
 3044cf8:	00802004 	movi	r2,128
 3044cfc:	e0bffc0d 	sth	r2,-16(fp)
    if (bEnable){
 3044d00:	e0bfff17 	ldw	r2,-4(fp)
 3044d04:	1005003a 	cmpeq	r2,r2,zero
 3044d08:	1000091e 	bne	r2,zero,3044d30 <AUDIO_DacEnableZeroCross+0x6c>
        control_l |= mask;
 3044d0c:	e0fffd0b 	ldhu	r3,-12(fp)
 3044d10:	e0bffc0b 	ldhu	r2,-16(fp)
 3044d14:	1884b03a 	or	r2,r3,r2
 3044d18:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 3044d1c:	e0fffc8b 	ldhu	r3,-14(fp)
 3044d20:	e0bffc0b 	ldhu	r2,-16(fp)
 3044d24:	1884b03a 	or	r2,r3,r2
 3044d28:	e0bffc8d 	sth	r2,-14(fp)
 3044d2c:	00000c06 	br	3044d60 <AUDIO_DacEnableZeroCross+0x9c>
    }else{        
        control_l &= ~mask;
 3044d30:	e0bffc0b 	ldhu	r2,-16(fp)
 3044d34:	0084303a 	nor	r2,zero,r2
 3044d38:	1007883a 	mov	r3,r2
 3044d3c:	e0bffd0b 	ldhu	r2,-12(fp)
 3044d40:	1884703a 	and	r2,r3,r2
 3044d44:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 3044d48:	e0bffc0b 	ldhu	r2,-16(fp)
 3044d4c:	0084303a 	nor	r2,zero,r2
 3044d50:	1007883a 	mov	r3,r2
 3044d54:	e0bffc8b 	ldhu	r2,-14(fp)
 3044d58:	1884703a 	and	r2,r3,r2
 3044d5c:	e0bffc8d 	sth	r2,-14(fp)
    }        
    bSuccess = aduio_RegWrite(2, control_l);  // Left Line In: set left line in volume
 3044d60:	e17ffd0b 	ldhu	r5,-12(fp)
 3044d64:	01000084 	movi	r4,2
 3044d68:	30454640 	call	3045464 <aduio_RegWrite>
 3044d6c:	e0bffe15 	stw	r2,-8(fp)
    if (bSuccess)
 3044d70:	e0bffe17 	ldw	r2,-8(fp)
 3044d74:	1005003a 	cmpeq	r2,r2,zero
 3044d78:	1000041e 	bne	r2,zero,3044d8c <AUDIO_DacEnableZeroCross+0xc8>
        bSuccess = aduio_RegWrite(3, control_r);  // Left Line In: set left line in volume
 3044d7c:	e17ffc8b 	ldhu	r5,-14(fp)
 3044d80:	010000c4 	movi	r4,3
 3044d84:	30454640 	call	3045464 <aduio_RegWrite>
 3044d88:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 3044d8c:	e0bffe17 	ldw	r2,-8(fp)
}
 3044d90:	e037883a 	mov	sp,fp
 3044d94:	dfc00117 	ldw	ra,4(sp)
 3044d98:	df000017 	ldw	fp,0(sp)
 3044d9c:	dec00204 	addi	sp,sp,8
 3044da0:	f800283a 	ret

03044da4 <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable){
 3044da4:	defffb04 	addi	sp,sp,-20
 3044da8:	dfc00415 	stw	ra,16(sp)
 3044dac:	df000315 	stw	fp,12(sp)
 3044db0:	df000304 	addi	fp,sp,12
 3044db4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[5];
 3044db8:	0080c1b4 	movhi	r2,774
 3044dbc:	10be9604 	addi	r2,r2,-1448
 3044dc0:	1080028b 	ldhu	r2,10(r2)
 3044dc4:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 3;
 3044dc8:	00800204 	movi	r2,8
 3044dcc:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 3044dd0:	e0bfff17 	ldw	r2,-4(fp)
 3044dd4:	1005003a 	cmpeq	r2,r2,zero
 3044dd8:	1000051e 	bne	r2,zero,3044df0 <AUDIO_DacEnableSoftMute+0x4c>
        control |= mask;
 3044ddc:	e0bffd8b 	ldhu	r2,-10(fp)
 3044de0:	e0fffd0b 	ldhu	r3,-12(fp)
 3044de4:	10c4b03a 	or	r2,r2,r3
 3044de8:	e0bffd8d 	sth	r2,-10(fp)
 3044dec:	00000606 	br	3044e08 <AUDIO_DacEnableSoftMute+0x64>
    else        
        control &= ~mask;
 3044df0:	e0bffd0b 	ldhu	r2,-12(fp)
 3044df4:	0084303a 	nor	r2,zero,r2
 3044df8:	1007883a 	mov	r3,r2
 3044dfc:	e0bffd8b 	ldhu	r2,-10(fp)
 3044e00:	1884703a 	and	r2,r3,r2
 3044e04:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 3044e08:	e17ffd8b 	ldhu	r5,-10(fp)
 3044e0c:	01000144 	movi	r4,5
 3044e10:	30454640 	call	3045464 <aduio_RegWrite>
 3044e14:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 3044e18:	e0bffe17 	ldw	r2,-8(fp)
}
 3044e1c:	e037883a 	mov	sp,fp
 3044e20:	dfc00117 	ldw	ra,4(sp)
 3044e24:	df000017 	ldw	fp,0(sp)
 3044e28:	dec00204 	addi	sp,sp,8
 3044e2c:	f800283a 	ret

03044e30 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute){
 3044e30:	defffb04 	addi	sp,sp,-20
 3044e34:	dfc00415 	stw	ra,16(sp)
 3044e38:	df000315 	stw	fp,12(sp)
 3044e3c:	df000304 	addi	fp,sp,12
 3044e40:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 3044e44:	0080c1b4 	movhi	r2,774
 3044e48:	10be9604 	addi	r2,r2,-1448
 3044e4c:	1080020b 	ldhu	r2,8(r2)
 3044e50:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 1;
 3044e54:	00800084 	movi	r2,2
 3044e58:	e0bffd0d 	sth	r2,-12(fp)
    if (bMute)
 3044e5c:	e0bfff17 	ldw	r2,-4(fp)
 3044e60:	1005003a 	cmpeq	r2,r2,zero
 3044e64:	1000051e 	bne	r2,zero,3044e7c <AUDIO_MicMute+0x4c>
        control |= mask;
 3044e68:	e0bffd8b 	ldhu	r2,-10(fp)
 3044e6c:	e0fffd0b 	ldhu	r3,-12(fp)
 3044e70:	10c4b03a 	or	r2,r2,r3
 3044e74:	e0bffd8d 	sth	r2,-10(fp)
 3044e78:	00000606 	br	3044e94 <AUDIO_MicMute+0x64>
    else        
        control &= ~mask;
 3044e7c:	e0bffd0b 	ldhu	r2,-12(fp)
 3044e80:	0084303a 	nor	r2,zero,r2
 3044e84:	1007883a 	mov	r3,r2
 3044e88:	e0bffd8b 	ldhu	r2,-10(fp)
 3044e8c:	1884703a 	and	r2,r3,r2
 3044e90:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 3044e94:	e17ffd8b 	ldhu	r5,-10(fp)
 3044e98:	01000104 	movi	r4,4
 3044e9c:	30454640 	call	3045464 <aduio_RegWrite>
 3044ea0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 3044ea4:	e0bffe17 	ldw	r2,-8(fp)
}
 3044ea8:	e037883a 	mov	sp,fp
 3044eac:	dfc00117 	ldw	ra,4(sp)
 3044eb0:	df000017 	ldw	fp,0(sp)
 3044eb4:	dec00204 	addi	sp,sp,8
 3044eb8:	f800283a 	ret

03044ebc <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute){
 3044ebc:	defffa04 	addi	sp,sp,-24
 3044ec0:	dfc00515 	stw	ra,20(sp)
 3044ec4:	df000415 	stw	fp,16(sp)
 3044ec8:	df000404 	addi	fp,sp,16
 3044ecc:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[0];
 3044ed0:	0080c1b4 	movhi	r2,774
 3044ed4:	10be9604 	addi	r2,r2,-1448
 3044ed8:	1080000b 	ldhu	r2,0(r2)
 3044edc:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[1];
 3044ee0:	0080c1b4 	movhi	r2,774
 3044ee4:	10be9604 	addi	r2,r2,-1448
 3044ee8:	1080008b 	ldhu	r2,2(r2)
 3044eec:	e0bffc8d 	sth	r2,-14(fp)
    mask = 0x01 << 7;
 3044ef0:	00802004 	movi	r2,128
 3044ef4:	e0bffc0d 	sth	r2,-16(fp)
    if (bMute){
 3044ef8:	e0bfff17 	ldw	r2,-4(fp)
 3044efc:	1005003a 	cmpeq	r2,r2,zero
 3044f00:	1000091e 	bne	r2,zero,3044f28 <AUDIO_LineInMute+0x6c>
        control_l |= mask;
 3044f04:	e0fffd0b 	ldhu	r3,-12(fp)
 3044f08:	e0bffc0b 	ldhu	r2,-16(fp)
 3044f0c:	1884b03a 	or	r2,r3,r2
 3044f10:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 3044f14:	e0fffc8b 	ldhu	r3,-14(fp)
 3044f18:	e0bffc0b 	ldhu	r2,-16(fp)
 3044f1c:	1884b03a 	or	r2,r3,r2
 3044f20:	e0bffc8d 	sth	r2,-14(fp)
 3044f24:	00000c06 	br	3044f58 <AUDIO_LineInMute+0x9c>
    }else{        
        control_l &= ~mask;
 3044f28:	e0bffc0b 	ldhu	r2,-16(fp)
 3044f2c:	0084303a 	nor	r2,zero,r2
 3044f30:	1007883a 	mov	r3,r2
 3044f34:	e0bffd0b 	ldhu	r2,-12(fp)
 3044f38:	1884703a 	and	r2,r3,r2
 3044f3c:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 3044f40:	e0bffc0b 	ldhu	r2,-16(fp)
 3044f44:	0084303a 	nor	r2,zero,r2
 3044f48:	1007883a 	mov	r3,r2
 3044f4c:	e0bffc8b 	ldhu	r2,-14(fp)
 3044f50:	1884703a 	and	r2,r3,r2
 3044f54:	e0bffc8d 	sth	r2,-14(fp)
    }        
    bSuccess = aduio_RegWrite(0, control_l);  // Left Line In: set left line in volume
 3044f58:	e17ffd0b 	ldhu	r5,-12(fp)
 3044f5c:	0009883a 	mov	r4,zero
 3044f60:	30454640 	call	3045464 <aduio_RegWrite>
 3044f64:	e0bffe15 	stw	r2,-8(fp)
    if (bSuccess)
 3044f68:	e0bffe17 	ldw	r2,-8(fp)
 3044f6c:	1005003a 	cmpeq	r2,r2,zero
 3044f70:	1000041e 	bne	r2,zero,3044f84 <AUDIO_LineInMute+0xc8>
        bSuccess = aduio_RegWrite(1, control_r);  // Left Line In: set left line in volume
 3044f74:	e17ffc8b 	ldhu	r5,-14(fp)
 3044f78:	01000044 	movi	r4,1
 3044f7c:	30454640 	call	3045464 <aduio_RegWrite>
 3044f80:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 3044f84:	e0bffe17 	ldw	r2,-8(fp)
}
 3044f88:	e037883a 	mov	sp,fp
 3044f8c:	dfc00117 	ldw	ra,4(sp)
 3044f90:	df000017 	ldw	fp,0(sp)
 3044f94:	dec00204 	addi	sp,sp,8
 3044f98:	f800283a 	ret

03044f9c <AUDIO_SetInputSource>:



bool AUDIO_SetInputSource(alt_u8 InputSource){
 3044f9c:	defffb04 	addi	sp,sp,-20
 3044fa0:	dfc00415 	stw	ra,16(sp)
 3044fa4:	df000315 	stw	fp,12(sp)
 3044fa8:	df000304 	addi	fp,sp,12
 3044fac:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 3044fb0:	0080c1b4 	movhi	r2,774
 3044fb4:	10be9604 	addi	r2,r2,-1448
 3044fb8:	1080020b 	ldhu	r2,8(r2)
 3044fbc:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 2;
 3044fc0:	00800104 	movi	r2,4
 3044fc4:	e0bffd0d 	sth	r2,-12(fp)
    if (InputSource == SOURCE_MIC)
 3044fc8:	e0bfff03 	ldbu	r2,-4(fp)
 3044fcc:	1004c03a 	cmpne	r2,r2,zero
 3044fd0:	1000051e 	bne	r2,zero,3044fe8 <AUDIO_SetInputSource+0x4c>
        control |= mask;
 3044fd4:	e0bffd8b 	ldhu	r2,-10(fp)
 3044fd8:	e0fffd0b 	ldhu	r3,-12(fp)
 3044fdc:	10c4b03a 	or	r2,r2,r3
 3044fe0:	e0bffd8d 	sth	r2,-10(fp)
 3044fe4:	00000606 	br	3045000 <AUDIO_SetInputSource+0x64>
    else        
        control &= ~mask;
 3044fe8:	e0bffd0b 	ldhu	r2,-12(fp)
 3044fec:	0084303a 	nor	r2,zero,r2
 3044ff0:	1007883a 	mov	r3,r2
 3044ff4:	e0bffd8b 	ldhu	r2,-10(fp)
 3044ff8:	1884703a 	and	r2,r3,r2
 3044ffc:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 3045000:	e17ffd8b 	ldhu	r5,-10(fp)
 3045004:	01000104 	movi	r4,4
 3045008:	30454640 	call	3045464 <aduio_RegWrite>
 304500c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 3045010:	e0bffe17 	ldw	r2,-8(fp)
}
 3045014:	e037883a 	mov	sp,fp
 3045018:	dfc00117 	ldw	ra,4(sp)
 304501c:	df000017 	ldw	fp,0(sp)
 3045020:	dec00204 	addi	sp,sp,8
 3045024:	f800283a 	ret

03045028 <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate){
 3045028:	defffa04 	addi	sp,sp,-24
 304502c:	dfc00515 	stw	ra,20(sp)
 3045030:	df000415 	stw	fp,16(sp)
 3045034:	df000404 	addi	fp,sp,16
 3045038:	e13ffe05 	stb	r4,-8(fp)
    bool bSuccess;
    alt_u16 control;
    control = 0;
 304503c:	e03ffc0d 	sth	zero,-16(fp)

    switch(SampleRate){
 3045040:	e0bffe03 	ldbu	r2,-8(fp)
 3045044:	e0bfff15 	stw	r2,-4(fp)
 3045048:	e0ffff17 	ldw	r3,-4(fp)
 304504c:	188001e8 	cmpgeui	r2,r3,7
 3045050:	1000231e 	bne	r2,zero,30450e0 <AUDIO_SetSampleRate+0xb8>
 3045054:	e13fff17 	ldw	r4,-4(fp)
 3045058:	e13fff17 	ldw	r4,-4(fp)
 304505c:	2105883a 	add	r2,r4,r4
 3045060:	1087883a 	add	r3,r2,r2
 3045064:	0080c134 	movhi	r2,772
 3045068:	10941e04 	addi	r2,r2,20600
 304506c:	1885883a 	add	r2,r3,r2
 3045070:	10800017 	ldw	r2,0(r2)
 3045074:	1000683a 	jmp	r2
 3045078:	03045094 	movui	r12,4418
 304507c:	0304509c 	xori	r12,zero,4418
 3045080:	030450a8 	cmpgeui	r12,zero,4418
 3045084:	030450b4 	movhi	r12,4418
 3045088:	030450c0 	call	30450c <__alt_mem_av_tri_s1_cfi_flash_0-0x24fbaf4>
 304508c:	030450cc 	andi	r12,zero,4419
 3045090:	030450d8 	cmpnei	r12,zero,4419
         // MCLK = 18.432
        case RATE_ADC48K_DAC48K: control = (0x0) << 2; break;
 3045094:	e03ffc0d 	sth	zero,-16(fp)
 3045098:	00001106 	br	30450e0 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC48K_DAC8K: control = (0x1) << 2; break;
 304509c:	00800104 	movi	r2,4
 30450a0:	e0bffc0d 	sth	r2,-16(fp)
 30450a4:	00000e06 	br	30450e0 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC8K_DAC48K: control = (0x2) << 2; break;
 30450a8:	00800204 	movi	r2,8
 30450ac:	e0bffc0d 	sth	r2,-16(fp)
 30450b0:	00000b06 	br	30450e0 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC8K_DAC8K: control = (0x3) << 2; break;
 30450b4:	00800304 	movi	r2,12
 30450b8:	e0bffc0d 	sth	r2,-16(fp)
 30450bc:	00000806 	br	30450e0 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC32K_DAC32K: control = (0x6) << 2; break;
 30450c0:	00800604 	movi	r2,24
 30450c4:	e0bffc0d 	sth	r2,-16(fp)
 30450c8:	00000506 	br	30450e0 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC96K_DAC96K: control = (0x7) << 2; break;
 30450cc:	00800704 	movi	r2,28
 30450d0:	e0bffc0d 	sth	r2,-16(fp)
 30450d4:	00000206 	br	30450e0 <AUDIO_SetSampleRate+0xb8>
        case RATE_ADC44K1_DAC44K1: control = (0x8) << 2; break;
 30450d8:	00800804 	movi	r2,32
 30450dc:	e0bffc0d 	sth	r2,-16(fp)
        // MCLK = 11.2896
      //  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
      //  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
    }
    control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
 30450e0:	e0bffc0b 	ldhu	r2,-16(fp)
 30450e4:	10800094 	ori	r2,r2,2
 30450e8:	e0bffc0d 	sth	r2,-16(fp)
        
    bSuccess = aduio_RegWrite(8, control);  // Left Line In: set left line in volume
 30450ec:	e17ffc0b 	ldhu	r5,-16(fp)
 30450f0:	01000204 	movi	r4,8
 30450f4:	30454640 	call	3045464 <aduio_RegWrite>
 30450f8:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;      
 30450fc:	e0bffd17 	ldw	r2,-12(fp)
}
 3045100:	e037883a 	mov	sp,fp
 3045104:	dfc00117 	ldw	ra,4(sp)
 3045108:	df000017 	ldw	fp,0(sp)
 304510c:	dec00204 	addi	sp,sp,8
 3045110:	f800283a 	ret

03045114 <AUDIO_SetLineInVol>:





bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol){
 3045114:	defff704 	addi	sp,sp,-36
 3045118:	dfc00815 	stw	ra,32(sp)
 304511c:	df000715 	stw	fp,28(sp)
 3045120:	df000704 	addi	fp,sp,28
 3045124:	e13ffb0d 	sth	r4,-20(fp)
 3045128:	e17ffc0d 	sth	r5,-16(fp)
    bool bSuccess;
    alt_u16 control;
    
    // left
    control = reg_file[0];
 304512c:	0080c1b4 	movhi	r2,774
 3045130:	10be9604 	addi	r2,r2,-1448
 3045134:	1080000b 	ldhu	r2,0(r2)
 3045138:	e0bff90d 	sth	r2,-28(fp)
    control &= 0xFFE0;
 304513c:	00fff804 	movi	r3,-32
 3045140:	e0bff90b 	ldhu	r2,-28(fp)
 3045144:	10c4703a 	and	r2,r2,r3
 3045148:	e0bff90d 	sth	r2,-28(fp)
    control += l_vol & 0x1F;
 304514c:	e0bffb0b 	ldhu	r2,-20(fp)
 3045150:	108007cc 	andi	r2,r2,31
 3045154:	1007883a 	mov	r3,r2
 3045158:	e0bff90b 	ldhu	r2,-28(fp)
 304515c:	10c5883a 	add	r2,r2,r3
 3045160:	e0bff90d 	sth	r2,-28(fp)
    bSuccess = aduio_RegWrite(0, control);
 3045164:	e17ff90b 	ldhu	r5,-28(fp)
 3045168:	0009883a 	mov	r4,zero
 304516c:	30454640 	call	3045464 <aduio_RegWrite>
 3045170:	e0bffa15 	stw	r2,-24(fp)
    
    if (bSuccess){
 3045174:	e0bffa17 	ldw	r2,-24(fp)
 3045178:	1005003a 	cmpeq	r2,r2,zero
 304517c:	1000121e 	bne	r2,zero,30451c8 <AUDIO_SetLineInVol+0xb4>
        // right
        control = reg_file[1];
 3045180:	0080c1b4 	movhi	r2,774
 3045184:	10be9604 	addi	r2,r2,-1448
 3045188:	1080008b 	ldhu	r2,2(r2)
 304518c:	e0bff90d 	sth	r2,-28(fp)
        control &= 0xFFE0;
 3045190:	00fff804 	movi	r3,-32
 3045194:	e0bff90b 	ldhu	r2,-28(fp)
 3045198:	10c4703a 	and	r2,r2,r3
 304519c:	e0bff90d 	sth	r2,-28(fp)
        control += r_vol & 0x1F;
 30451a0:	e0bffc0b 	ldhu	r2,-16(fp)
 30451a4:	108007cc 	andi	r2,r2,31
 30451a8:	1007883a 	mov	r3,r2
 30451ac:	e0bff90b 	ldhu	r2,-28(fp)
 30451b0:	10c5883a 	add	r2,r2,r3
 30451b4:	e0bff90d 	sth	r2,-28(fp)
        bSuccess = aduio_RegWrite(1, control);        
 30451b8:	e17ff90b 	ldhu	r5,-28(fp)
 30451bc:	01000044 	movi	r4,1
 30451c0:	30454640 	call	3045464 <aduio_RegWrite>
 30451c4:	e0bffa15 	stw	r2,-24(fp)
    }
    
    AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));        
 30451c8:	e0bffb0b 	ldhu	r2,-20(fp)
 30451cc:	e0bfff15 	stw	r2,-4(fp)
 30451d0:	e0bffc0b 	ldhu	r2,-16(fp)
 30451d4:	e0bffe15 	stw	r2,-8(fp)
 30451d8:	e0bffa17 	ldw	r2,-24(fp)
 30451dc:	1005003a 	cmpeq	r2,r2,zero
 30451e0:	1000041e 	bne	r2,zero,30451f4 <AUDIO_SetLineInVol+0xe0>
 30451e4:	0080c1b4 	movhi	r2,774
 30451e8:	10a89b04 	addi	r2,r2,-23956
 30451ec:	e0bffd15 	stw	r2,-12(fp)
 30451f0:	00000306 	br	3045200 <AUDIO_SetLineInVol+0xec>
 30451f4:	0080c1b4 	movhi	r2,774
 30451f8:	10a89d04 	addi	r2,r2,-23948
 30451fc:	e0bffd15 	stw	r2,-12(fp)
 3045200:	0100c1b4 	movhi	r4,774
 3045204:	2128a504 	addi	r4,r4,-23916
 3045208:	e17fff17 	ldw	r5,-4(fp)
 304520c:	e1bffe17 	ldw	r6,-8(fp)
 3045210:	e1fffd17 	ldw	r7,-12(fp)
 3045214:	30469080 	call	3046908 <myprintf>
    return bSuccess;
 3045218:	e0bffa17 	ldw	r2,-24(fp)
}
 304521c:	e037883a 	mov	sp,fp
 3045220:	dfc00117 	ldw	ra,4(sp)
 3045224:	df000017 	ldw	fp,0(sp)
 3045228:	dec00204 	addi	sp,sp,8
 304522c:	f800283a 	ret

03045230 <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol){
 3045230:	defff704 	addi	sp,sp,-36
 3045234:	dfc00815 	stw	ra,32(sp)
 3045238:	df000715 	stw	fp,28(sp)
 304523c:	df000704 	addi	fp,sp,28
 3045240:	e13ffb0d 	sth	r4,-20(fp)
 3045244:	e17ffc0d 	sth	r5,-16(fp)
    bool bSuccess;
    alt_u16 control;

 
    // left
    control = reg_file[2];
 3045248:	0080c1b4 	movhi	r2,774
 304524c:	10be9604 	addi	r2,r2,-1448
 3045250:	1080010b 	ldhu	r2,4(r2)
 3045254:	e0bff90d 	sth	r2,-28(fp)
    control &= 0xFF80;
 3045258:	00ffe004 	movi	r3,-128
 304525c:	e0bff90b 	ldhu	r2,-28(fp)
 3045260:	10c4703a 	and	r2,r2,r3
 3045264:	e0bff90d 	sth	r2,-28(fp)
    control += l_vol & 0x7F;
 3045268:	e0bffb0b 	ldhu	r2,-20(fp)
 304526c:	10801fcc 	andi	r2,r2,127
 3045270:	1007883a 	mov	r3,r2
 3045274:	e0bff90b 	ldhu	r2,-28(fp)
 3045278:	10c5883a 	add	r2,r2,r3
 304527c:	e0bff90d 	sth	r2,-28(fp)
    bSuccess = aduio_RegWrite(2, control);
 3045280:	e17ff90b 	ldhu	r5,-28(fp)
 3045284:	01000084 	movi	r4,2
 3045288:	30454640 	call	3045464 <aduio_RegWrite>
 304528c:	e0bffa15 	stw	r2,-24(fp)
    
    if (bSuccess){
 3045290:	e0bffa17 	ldw	r2,-24(fp)
 3045294:	1005003a 	cmpeq	r2,r2,zero
 3045298:	1000121e 	bne	r2,zero,30452e4 <AUDIO_SetLineOutVol+0xb4>
        // right
        control = reg_file[3];
 304529c:	0080c1b4 	movhi	r2,774
 30452a0:	10be9604 	addi	r2,r2,-1448
 30452a4:	1080018b 	ldhu	r2,6(r2)
 30452a8:	e0bff90d 	sth	r2,-28(fp)
        control &= 0xFF80;
 30452ac:	00ffe004 	movi	r3,-128
 30452b0:	e0bff90b 	ldhu	r2,-28(fp)
 30452b4:	10c4703a 	and	r2,r2,r3
 30452b8:	e0bff90d 	sth	r2,-28(fp)
        control += r_vol & 0x7F;
 30452bc:	e0bffc0b 	ldhu	r2,-16(fp)
 30452c0:	10801fcc 	andi	r2,r2,127
 30452c4:	1007883a 	mov	r3,r2
 30452c8:	e0bff90b 	ldhu	r2,-28(fp)
 30452cc:	10c5883a 	add	r2,r2,r3
 30452d0:	e0bff90d 	sth	r2,-28(fp)
        bSuccess = aduio_RegWrite(3, control);        
 30452d4:	e17ff90b 	ldhu	r5,-28(fp)
 30452d8:	010000c4 	movi	r4,3
 30452dc:	30454640 	call	3045464 <aduio_RegWrite>
 30452e0:	e0bffa15 	stw	r2,-24(fp)
    }    
    
    AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
 30452e4:	e0bffb0b 	ldhu	r2,-20(fp)
 30452e8:	e0bfff15 	stw	r2,-4(fp)
 30452ec:	e0bffc0b 	ldhu	r2,-16(fp)
 30452f0:	e0bffe15 	stw	r2,-8(fp)
 30452f4:	e0bffa17 	ldw	r2,-24(fp)
 30452f8:	1005003a 	cmpeq	r2,r2,zero
 30452fc:	1000041e 	bne	r2,zero,3045310 <AUDIO_SetLineOutVol+0xe0>
 3045300:	0080c1b4 	movhi	r2,774
 3045304:	10a89b04 	addi	r2,r2,-23956
 3045308:	e0bffd15 	stw	r2,-12(fp)
 304530c:	00000306 	br	304531c <AUDIO_SetLineOutVol+0xec>
 3045310:	0080c1b4 	movhi	r2,774
 3045314:	10a89d04 	addi	r2,r2,-23948
 3045318:	e0bffd15 	stw	r2,-12(fp)
 304531c:	0100c1b4 	movhi	r4,774
 3045320:	2128ae04 	addi	r4,r4,-23880
 3045324:	e17fff17 	ldw	r5,-4(fp)
 3045328:	e1bffe17 	ldw	r6,-8(fp)
 304532c:	e1fffd17 	ldw	r7,-12(fp)
 3045330:	30469080 	call	3046908 <myprintf>
    
    return bSuccess;
 3045334:	e0bffa17 	ldw	r2,-24(fp)
}
 3045338:	e037883a 	mov	sp,fp
 304533c:	dfc00117 	ldw	ra,4(sp)
 3045340:	df000017 	ldw	fp,0(sp)
 3045344:	dec00204 	addi	sp,sp,8
 3045348:	f800283a 	ret

0304534c <AUDIO_EnableByPass>:


bool AUDIO_EnableByPass(bool bEnable){
 304534c:	defffb04 	addi	sp,sp,-20
 3045350:	dfc00415 	stw	ra,16(sp)
 3045354:	df000315 	stw	fp,12(sp)
 3045358:	df000304 	addi	fp,sp,12
 304535c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 3045360:	0080c1b4 	movhi	r2,774
 3045364:	10be9604 	addi	r2,r2,-1448
 3045368:	1080020b 	ldhu	r2,8(r2)
 304536c:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 3;
 3045370:	00800204 	movi	r2,8
 3045374:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 3045378:	e0bfff17 	ldw	r2,-4(fp)
 304537c:	1005003a 	cmpeq	r2,r2,zero
 3045380:	1000051e 	bne	r2,zero,3045398 <AUDIO_EnableByPass+0x4c>
        control |= mask;
 3045384:	e0bffd8b 	ldhu	r2,-10(fp)
 3045388:	e0fffd0b 	ldhu	r3,-12(fp)
 304538c:	10c4b03a 	or	r2,r2,r3
 3045390:	e0bffd8d 	sth	r2,-10(fp)
 3045394:	00000606 	br	30453b0 <AUDIO_EnableByPass+0x64>
    else        
        control &= ~mask;
 3045398:	e0bffd0b 	ldhu	r2,-12(fp)
 304539c:	0084303a 	nor	r2,zero,r2
 30453a0:	1007883a 	mov	r3,r2
 30453a4:	e0bffd8b 	ldhu	r2,-10(fp)
 30453a8:	1884703a 	and	r2,r3,r2
 30453ac:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control); 
 30453b0:	e17ffd8b 	ldhu	r5,-10(fp)
 30453b4:	01000104 	movi	r4,4
 30453b8:	30454640 	call	3045464 <aduio_RegWrite>
 30453bc:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;  	
 30453c0:	e0bffe17 	ldw	r2,-8(fp)
}
 30453c4:	e037883a 	mov	sp,fp
 30453c8:	dfc00117 	ldw	ra,4(sp)
 30453cc:	df000017 	ldw	fp,0(sp)
 30453d0:	dec00204 	addi	sp,sp,8
 30453d4:	f800283a 	ret

030453d8 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable){
 30453d8:	defffb04 	addi	sp,sp,-20
 30453dc:	dfc00415 	stw	ra,16(sp)
 30453e0:	df000315 	stw	fp,12(sp)
 30453e4:	df000304 	addi	fp,sp,12
 30453e8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 30453ec:	0080c1b4 	movhi	r2,774
 30453f0:	10be9604 	addi	r2,r2,-1448
 30453f4:	1080020b 	ldhu	r2,8(r2)
 30453f8:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 5;
 30453fc:	00800804 	movi	r2,32
 3045400:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 3045404:	e0bfff17 	ldw	r2,-4(fp)
 3045408:	1005003a 	cmpeq	r2,r2,zero
 304540c:	1000051e 	bne	r2,zero,3045424 <AUDIO_EnableSiteTone+0x4c>
        control |= mask;
 3045410:	e0bffd8b 	ldhu	r2,-10(fp)
 3045414:	e0fffd0b 	ldhu	r3,-12(fp)
 3045418:	10c4b03a 	or	r2,r2,r3
 304541c:	e0bffd8d 	sth	r2,-10(fp)
 3045420:	00000606 	br	304543c <AUDIO_EnableSiteTone+0x64>
    else        
        control &= ~mask;
 3045424:	e0bffd0b 	ldhu	r2,-12(fp)
 3045428:	0084303a 	nor	r2,zero,r2
 304542c:	1007883a 	mov	r3,r2
 3045430:	e0bffd8b 	ldhu	r2,-10(fp)
 3045434:	1884703a 	and	r2,r3,r2
 3045438:	e0bffd8d 	sth	r2,-10(fp)
    bSuccess = aduio_RegWrite(4, control); 
 304543c:	e17ffd8b 	ldhu	r5,-10(fp)
 3045440:	01000104 	movi	r4,4
 3045444:	30454640 	call	3045464 <aduio_RegWrite>
 3045448:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 304544c:	e0bffe17 	ldw	r2,-8(fp)
}
 3045450:	e037883a 	mov	sp,fp
 3045454:	dfc00117 	ldw	ra,4(sp)
 3045458:	df000017 	ldw	fp,0(sp)
 304545c:	dec00204 	addi	sp,sp,8
 3045460:	f800283a 	ret

03045464 <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16){
 3045464:	defff904 	addi	sp,sp,-28
 3045468:	dfc00615 	stw	ra,24(sp)
 304546c:	df000515 	stw	fp,20(sp)
 3045470:	df000504 	addi	fp,sp,20
 3045474:	e13ffe05 	stb	r4,-8(fp)
 3045478:	e17fff0d 	sth	r5,-4(fp)
    bool bSuccess;
    alt_u8 data, control;
    if (reg_index <= 10)
 304547c:	e0bffe03 	ldbu	r2,-8(fp)
 3045480:	108002e8 	cmpgeui	r2,r2,11
 3045484:	1000071e 	bne	r2,zero,30454a4 <aduio_RegWrite+0x40>
        reg_file[reg_index] = data16;
 3045488:	e0bffe03 	ldbu	r2,-8(fp)
 304548c:	00c0c1b4 	movhi	r3,774
 3045490:	18fe9604 	addi	r3,r3,-1448
 3045494:	1085883a 	add	r2,r2,r2
 3045498:	10c7883a 	add	r3,r2,r3
 304549c:	e0bfff0b 	ldhu	r2,-4(fp)
 30454a0:	1880000d 	sth	r2,0(r3)
    data = data16 & 0xFF;
 30454a4:	e0bfff0b 	ldhu	r2,-4(fp)
 30454a8:	1007883a 	mov	r3,r2
 30454ac:	00bfffc4 	movi	r2,-1
 30454b0:	1884703a 	and	r2,r3,r2
 30454b4:	e0bffc45 	stb	r2,-15(fp)
    control = (reg_index << 1) & 0xFE;
 30454b8:	e0bffe03 	ldbu	r2,-8(fp)
 30454bc:	1085883a 	add	r2,r2,r2
 30454c0:	1007883a 	mov	r3,r2
 30454c4:	00bfff84 	movi	r2,-2
 30454c8:	1884703a 	and	r2,r3,r2
 30454cc:	e0bffc05 	stb	r2,-16(fp)
    control |= ((data16 >> 8) & 0x01);
 30454d0:	e0bfff0b 	ldhu	r2,-4(fp)
 30454d4:	1004d23a 	srli	r2,r2,8
 30454d8:	1080004c 	andi	r2,r2,1
 30454dc:	1007883a 	mov	r3,r2
 30454e0:	e0bffc03 	ldbu	r2,-16(fp)
 30454e4:	1884b03a 	or	r2,r3,r2
 30454e8:	e0bffc05 	stb	r2,-16(fp)
    AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
 30454ec:	e17ffe03 	ldbu	r5,-8(fp)
 30454f0:	e1bfff0b 	ldhu	r6,-4(fp)
 30454f4:	0100c1b4 	movhi	r4,774
 30454f8:	2128b804 	addi	r4,r4,-23840
 30454fc:	30469080 	call	3046908 <myprintf>
    bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
 3045500:	e1fffc03 	ldbu	r7,-16(fp)
 3045504:	e0bffc43 	ldbu	r2,-15(fp)
 3045508:	d8800015 	stw	r2,0(sp)
 304550c:	01004034 	movhi	r4,256
 3045510:	21002804 	addi	r4,r4,160
 3045514:	01404034 	movhi	r5,256
 3045518:	29402c04 	addi	r5,r5,176
 304551c:	01800d04 	movi	r6,52
 3045520:	30456b00 	call	30456b0 <I2C_Write>
 3045524:	e0bffd15 	stw	r2,-12(fp)
    if (!bSuccess) 
 3045528:	e0bffd17 	ldw	r2,-12(fp)
 304552c:	1004c03a 	cmpne	r2,r2,zero
 3045530:	1000031e 	bne	r2,zero,3045540 <aduio_RegWrite+0xdc>
        AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
 3045534:	0100c1b4 	movhi	r4,774
 3045538:	2128c204 	addi	r4,r4,-23800
 304553c:	30469080 	call	3046908 <myprintf>
    usleep(50*1000);  // wait audio chip read        
 3045540:	0130d414 	movui	r4,50000
 3045544:	30540480 	call	3054048 <usleep>
    return bSuccess;        
 3045548:	e0bffd17 	ldw	r2,-12(fp)
}
 304554c:	e037883a 	mov	sp,fp
 3045550:	dfc00117 	ldw	ra,4(sp)
 3045554:	df000017 	ldw	fp,0(sp)
 3045558:	dec00204 	addi	sp,sp,8
 304555c:	f800283a 	ret

03045560 <AUDIO_DacFifoNotFull>:


/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Recor ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void){
 3045560:	defffd04 	addi	sp,sp,-12
 3045564:	df000215 	stw	fp,8(sp)
 3045568:	df000204 	addi	fp,sp,8
    bool bReady;
    bReady = AUDIO_DAC_FULL()?FALSE:TRUE;
 304556c:	0080c234 	movhi	r2,776
 3045570:	10840504 	addi	r2,r2,4116
 3045574:	10800037 	ldwio	r2,0(r2)
 3045578:	1080004c 	andi	r2,r2,1
 304557c:	10803fcc 	andi	r2,r2,255
 3045580:	1005003a 	cmpeq	r2,r2,zero
 3045584:	1000021e 	bne	r2,zero,3045590 <AUDIO_DacFifoNotFull+0x30>
 3045588:	e03fff15 	stw	zero,-4(fp)
 304558c:	00000206 	br	3045598 <AUDIO_DacFifoNotFull+0x38>
 3045590:	00800044 	movi	r2,1
 3045594:	e0bfff15 	stw	r2,-4(fp)
 3045598:	e0bfff17 	ldw	r2,-4(fp)
 304559c:	e0bffe15 	stw	r2,-8(fp)
    return bReady;
 30455a0:	e0bffe17 	ldw	r2,-8(fp)
}
 30455a4:	e037883a 	mov	sp,fp
 30455a8:	df000017 	ldw	fp,0(sp)
 30455ac:	dec00104 	addi	sp,sp,4
 30455b0:	f800283a 	ret

030455b4 <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right){
 30455b4:	defffd04 	addi	sp,sp,-12
 30455b8:	df000215 	stw	fp,8(sp)
 30455bc:	df000204 	addi	fp,sp,8
 30455c0:	e13ffe0d 	sth	r4,-8(fp)
 30455c4:	e17fff0d 	sth	r5,-4(fp)
    AUDIO_DAC_WRITE_L(ch_left);
 30455c8:	e0fffe0f 	ldh	r3,-8(fp)
 30455cc:	0080c234 	movhi	r2,776
 30455d0:	10840004 	addi	r2,r2,4096
 30455d4:	10c00035 	stwio	r3,0(r2)
    AUDIO_DAC_WRITE_R(ch_right);
 30455d8:	e0ffff0f 	ldh	r3,-4(fp)
 30455dc:	0080c234 	movhi	r2,776
 30455e0:	10840104 	addi	r2,r2,4100
 30455e4:	10c00035 	stwio	r3,0(r2)
}
 30455e8:	e037883a 	mov	sp,fp
 30455ec:	df000017 	ldw	fp,0(sp)
 30455f0:	dec00104 	addi	sp,sp,4
 30455f4:	f800283a 	ret

030455f8 <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void){
 30455f8:	defffe04 	addi	sp,sp,-8
 30455fc:	df000115 	stw	fp,4(sp)
 3045600:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_ADC_EMPTY()?FALSE:TRUE;
 3045604:	0080c234 	movhi	r2,776
 3045608:	10840504 	addi	r2,r2,4116
 304560c:	10800037 	ldwio	r2,0(r2)
 3045610:	1080008c 	andi	r2,r2,2
 3045614:	1005003a 	cmpeq	r2,r2,zero
 3045618:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 304561c:	e0bfff17 	ldw	r2,-4(fp)
}
 3045620:	e037883a 	mov	sp,fp
 3045624:	df000017 	ldw	fp,0(sp)
 3045628:	dec00104 	addi	sp,sp,4
 304562c:	f800283a 	ret

03045630 <AUDIO_AdcFifoGetData>:


// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right){
 3045630:	defffd04 	addi	sp,sp,-12
 3045634:	df000215 	stw	fp,8(sp)
 3045638:	df000204 	addi	fp,sp,8
 304563c:	e13ffe15 	stw	r4,-8(fp)
 3045640:	e17fff15 	stw	r5,-4(fp)
    *pch_left = AUDIO_ADC_READ_L();
 3045644:	0080c234 	movhi	r2,776
 3045648:	10840204 	addi	r2,r2,4104
 304564c:	10800037 	ldwio	r2,0(r2)
 3045650:	1007883a 	mov	r3,r2
 3045654:	e0bffe17 	ldw	r2,-8(fp)
 3045658:	10c0000d 	sth	r3,0(r2)
    *pch_right = AUDIO_ADC_READ_R();
 304565c:	0080c234 	movhi	r2,776
 3045660:	10840304 	addi	r2,r2,4108
 3045664:	10800037 	ldwio	r2,0(r2)
 3045668:	1007883a 	mov	r3,r2
 304566c:	e0bfff17 	ldw	r2,-4(fp)
 3045670:	10c0000d 	sth	r3,0(r2)
    
}
 3045674:	e037883a 	mov	sp,fp
 3045678:	df000017 	ldw	fp,0(sp)
 304567c:	dec00104 	addi	sp,sp,4
 3045680:	f800283a 	ret

03045684 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void){
 3045684:	deffff04 	addi	sp,sp,-4
 3045688:	df000015 	stw	fp,0(sp)
 304568c:	d839883a 	mov	fp,sp
    AUDIO_FIFO_CLEAR();
 3045690:	00c0c234 	movhi	r3,776
 3045694:	18c40404 	addi	r3,r3,4112
 3045698:	00800044 	movi	r2,1
 304569c:	18800035 	stwio	r2,0(r3)
}
 30456a0:	e037883a 	mov	sp,fp
 30456a4:	df000017 	ldw	fp,0(sp)
 30456a8:	dec00104 	addi	sp,sp,4
 30456ac:	f800283a 	ret

030456b0 <I2C_Write>:
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 30456b0:	defff804 	addi	sp,sp,-32
 30456b4:	dfc00715 	stw	ra,28(sp)
 30456b8:	df000615 	stw	fp,24(sp)
 30456bc:	df000604 	addi	fp,sp,24
 30456c0:	e13ffb15 	stw	r4,-20(fp)
 30456c4:	e17ffc15 	stw	r5,-16(fp)
 30456c8:	e0800217 	ldw	r2,8(fp)
 30456cc:	e1bffd05 	stb	r6,-12(fp)
 30456d0:	e1fffe05 	stb	r7,-8(fp)
 30456d4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 30456d8:	00800044 	movi	r2,1
 30456dc:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 30456e0:	e13ffb17 	ldw	r4,-20(fp)
 30456e4:	e17ffc17 	ldw	r5,-16(fp)
 30456e8:	3045a580 	call	3045a58 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 30456ec:	e0bffd03 	ldbu	r2,-12(fp)
 30456f0:	11803fcc 	andi	r6,r2,255
 30456f4:	e13ffb17 	ldw	r4,-20(fp)
 30456f8:	e17ffc17 	ldw	r5,-16(fp)
 30456fc:	3045b580 	call	3045b58 <i2c_write>
 3045700:	1004c03a 	cmpne	r2,r2,zero
 3045704:	1000041e 	bne	r2,zero,3045718 <I2C_Write+0x68>
        bSuccess = FALSE;
 3045708:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 304570c:	0100c1b4 	movhi	r4,774
 3045710:	2128ca04 	addi	r4,r4,-23768
 3045714:	30469080 	call	3046908 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 3045718:	e0bffa17 	ldw	r2,-24(fp)
 304571c:	1005003a 	cmpeq	r2,r2,zero
 3045720:	10000a1e 	bne	r2,zero,304574c <I2C_Write+0x9c>
 3045724:	e1bffe03 	ldbu	r6,-8(fp)
 3045728:	e13ffb17 	ldw	r4,-20(fp)
 304572c:	e17ffc17 	ldw	r5,-16(fp)
 3045730:	3045b580 	call	3045b58 <i2c_write>
 3045734:	1004c03a 	cmpne	r2,r2,zero
 3045738:	1000041e 	bne	r2,zero,304574c <I2C_Write+0x9c>
        bSuccess = FALSE;
 304573c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 3045740:	0100c1b4 	movhi	r4,774
 3045744:	2128d204 	addi	r4,r4,-23736
 3045748:	30469080 	call	3046908 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 304574c:	e0bffa17 	ldw	r2,-24(fp)
 3045750:	1005003a 	cmpeq	r2,r2,zero
 3045754:	10000a1e 	bne	r2,zero,3045780 <I2C_Write+0xd0>
 3045758:	e1bfff03 	ldbu	r6,-4(fp)
 304575c:	e13ffb17 	ldw	r4,-20(fp)
 3045760:	e17ffc17 	ldw	r5,-16(fp)
 3045764:	3045b580 	call	3045b58 <i2c_write>
 3045768:	1004c03a 	cmpne	r2,r2,zero
 304576c:	1000041e 	bne	r2,zero,3045780 <I2C_Write+0xd0>
        bSuccess = FALSE;
 3045770:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 3045774:	0100c1b4 	movhi	r4,774
 3045778:	2128db04 	addi	r4,r4,-23700
 304577c:	30469080 	call	3046908 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 3045780:	e13ffb17 	ldw	r4,-20(fp)
 3045784:	e17ffc17 	ldw	r5,-16(fp)
 3045788:	3045ae00 	call	3045ae0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 304578c:	0106d604 	movi	r4,7000
 3045790:	30540480 	call	3054048 <usleep>
    
    return bSuccess;
 3045794:	e0bffa17 	ldw	r2,-24(fp)

    
}
 3045798:	e037883a 	mov	sp,fp
 304579c:	dfc00117 	ldw	ra,4(sp)
 30457a0:	df000017 	ldw	fp,0(sp)
 30457a4:	dec00204 	addi	sp,sp,8
 30457a8:	f800283a 	ret

030457ac <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 30457ac:	defff904 	addi	sp,sp,-28
 30457b0:	dfc00615 	stw	ra,24(sp)
 30457b4:	df000515 	stw	fp,20(sp)
 30457b8:	df000504 	addi	fp,sp,20
 30457bc:	e13ffc15 	stw	r4,-16(fp)
 30457c0:	e17ffd15 	stw	r5,-12(fp)
 30457c4:	e1bffe05 	stb	r6,-8(fp)
 30457c8:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 30457cc:	00800044 	movi	r2,1
 30457d0:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 30457d4:	e13ffc17 	ldw	r4,-16(fp)
 30457d8:	e17ffd17 	ldw	r5,-12(fp)
 30457dc:	3045a580 	call	3045a58 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 30457e0:	e0bffe03 	ldbu	r2,-8(fp)
 30457e4:	11803fcc 	andi	r6,r2,255
 30457e8:	e13ffc17 	ldw	r4,-16(fp)
 30457ec:	e17ffd17 	ldw	r5,-12(fp)
 30457f0:	3045b580 	call	3045b58 <i2c_write>
 30457f4:	1004c03a 	cmpne	r2,r2,zero
 30457f8:	1000041e 	bne	r2,zero,304580c <I2C_Read+0x60>
        bSuccess = FALSE;
 30457fc:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 3045800:	0100c1b4 	movhi	r4,774
 3045804:	2128ca04 	addi	r4,r4,-23768
 3045808:	30469080 	call	3046908 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 304580c:	e0bffb17 	ldw	r2,-20(fp)
 3045810:	1005003a 	cmpeq	r2,r2,zero
 3045814:	10000a1e 	bne	r2,zero,3045840 <I2C_Read+0x94>
 3045818:	e1bfff03 	ldbu	r6,-4(fp)
 304581c:	e13ffc17 	ldw	r4,-16(fp)
 3045820:	e17ffd17 	ldw	r5,-12(fp)
 3045824:	3045b580 	call	3045b58 <i2c_write>
 3045828:	1004c03a 	cmpne	r2,r2,zero
 304582c:	1000041e 	bne	r2,zero,3045840 <I2C_Read+0x94>
        bSuccess = FALSE;
 3045830:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 3045834:	0100c1b4 	movhi	r4,774
 3045838:	2128d204 	addi	r4,r4,-23736
 304583c:	30469080 	call	3046908 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 3045840:	e13ffc17 	ldw	r4,-16(fp)
 3045844:	e17ffd17 	ldw	r5,-12(fp)
 3045848:	3045a580 	call	3045a58 <i2c_start>
    DeviceAddr |= 1; // Read
 304584c:	e0bffe03 	ldbu	r2,-8(fp)
 3045850:	10800054 	ori	r2,r2,1
 3045854:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 3045858:	e0bffb17 	ldw	r2,-20(fp)
 304585c:	1005003a 	cmpeq	r2,r2,zero
 3045860:	10000b1e 	bne	r2,zero,3045890 <I2C_Read+0xe4>
 3045864:	e0bffe03 	ldbu	r2,-8(fp)
 3045868:	11803fcc 	andi	r6,r2,255
 304586c:	e13ffc17 	ldw	r4,-16(fp)
 3045870:	e17ffd17 	ldw	r5,-12(fp)
 3045874:	3045b580 	call	3045b58 <i2c_write>
 3045878:	1004c03a 	cmpne	r2,r2,zero
 304587c:	1000041e 	bne	r2,zero,3045890 <I2C_Read+0xe4>
        bSuccess = FALSE;
 3045880:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 3045884:	0100c1b4 	movhi	r4,774
 3045888:	2128e304 	addi	r4,r4,-23668
 304588c:	30469080 	call	3046908 <myprintf>
    }
    
    if (bSuccess){
 3045890:	e0bffb17 	ldw	r2,-20(fp)
 3045894:	1005003a 	cmpeq	r2,r2,zero
 3045898:	1000051e 	bne	r2,zero,30458b0 <I2C_Read+0x104>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 304589c:	e13ffc17 	ldw	r4,-16(fp)
 30458a0:	e17ffd17 	ldw	r5,-12(fp)
 30458a4:	e1800217 	ldw	r6,8(fp)
 30458a8:	000f883a 	mov	r7,zero
 30458ac:	3045c7c0 	call	3045c7c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 30458b0:	e13ffc17 	ldw	r4,-16(fp)
 30458b4:	e17ffd17 	ldw	r5,-12(fp)
 30458b8:	3045ae00 	call	3045ae0 <i2c_stop>
    
    return bSuccess;
 30458bc:	e0bffb17 	ldw	r2,-20(fp)
}
 30458c0:	e037883a 	mov	sp,fp
 30458c4:	dfc00117 	ldw	ra,4(sp)
 30458c8:	df000017 	ldw	fp,0(sp)
 30458cc:	dec00204 	addi	sp,sp,8
 30458d0:	f800283a 	ret

030458d4 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
 30458d4:	defff604 	addi	sp,sp,-40
 30458d8:	dfc00915 	stw	ra,36(sp)
 30458dc:	df000815 	stw	fp,32(sp)
 30458e0:	df000804 	addi	fp,sp,32
 30458e4:	e13ffb15 	stw	r4,-20(fp)
 30458e8:	e17ffc15 	stw	r5,-16(fp)
 30458ec:	e1fffe15 	stw	r7,-8(fp)
 30458f0:	e0800217 	ldw	r2,8(fp)
 30458f4:	e1bffd05 	stb	r6,-12(fp)
 30458f8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 30458fc:	00800044 	movi	r2,1
 3045900:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
 3045904:	e03ff805 	stb	zero,-32(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 3045908:	e13ffb17 	ldw	r4,-20(fp)
 304590c:	e17ffc17 	ldw	r5,-16(fp)
 3045910:	3045a580 	call	3045a58 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 3045914:	e0bffd03 	ldbu	r2,-12(fp)
 3045918:	11803fcc 	andi	r6,r2,255
 304591c:	e13ffb17 	ldw	r4,-20(fp)
 3045920:	e17ffc17 	ldw	r5,-16(fp)
 3045924:	3045b580 	call	3045b58 <i2c_write>
 3045928:	1004c03a 	cmpne	r2,r2,zero
 304592c:	1000041e 	bne	r2,zero,3045940 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
 3045930:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 3045934:	0100c1b4 	movhi	r4,774
 3045938:	2128ca04 	addi	r4,r4,-23768
 304593c:	30469080 	call	3046908 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 3045940:	e0bff917 	ldw	r2,-28(fp)
 3045944:	1005003a 	cmpeq	r2,r2,zero
 3045948:	10000a1e 	bne	r2,zero,3045974 <I2C_MultipleRead+0xa0>
 304594c:	e1bff803 	ldbu	r6,-32(fp)
 3045950:	e13ffb17 	ldw	r4,-20(fp)
 3045954:	e17ffc17 	ldw	r5,-16(fp)
 3045958:	3045b580 	call	3045b58 <i2c_write>
 304595c:	1004c03a 	cmpne	r2,r2,zero
 3045960:	1000041e 	bne	r2,zero,3045974 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 3045964:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 3045968:	0100c1b4 	movhi	r4,774
 304596c:	2128d204 	addi	r4,r4,-23736
 3045970:	30469080 	call	3046908 <myprintf>
    }    
    if (bSuccess)        
 3045974:	e0bff917 	ldw	r2,-28(fp)
 3045978:	1005003a 	cmpeq	r2,r2,zero
 304597c:	1000031e 	bne	r2,zero,304598c <I2C_MultipleRead+0xb8>
        i2c_start(clk_base, data_base);  // restart
 3045980:	e13ffb17 	ldw	r4,-20(fp)
 3045984:	e17ffc17 	ldw	r5,-16(fp)
 3045988:	3045a580 	call	3045a58 <i2c_start>
    DeviceAddr |= 1; // Read
 304598c:	e0bffd03 	ldbu	r2,-12(fp)
 3045990:	10800054 	ori	r2,r2,1
 3045994:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 3045998:	e0bff917 	ldw	r2,-28(fp)
 304599c:	1005003a 	cmpeq	r2,r2,zero
 30459a0:	10000b1e 	bne	r2,zero,30459d0 <I2C_MultipleRead+0xfc>
 30459a4:	e0bffd03 	ldbu	r2,-12(fp)
 30459a8:	11803fcc 	andi	r6,r2,255
 30459ac:	e13ffb17 	ldw	r4,-20(fp)
 30459b0:	e17ffc17 	ldw	r5,-16(fp)
 30459b4:	3045b580 	call	3045b58 <i2c_write>
 30459b8:	1004c03a 	cmpne	r2,r2,zero
 30459bc:	1000041e 	bne	r2,zero,30459d0 <I2C_MultipleRead+0xfc>
        bSuccess = FALSE;
 30459c0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 30459c4:	0100c1b4 	movhi	r4,774
 30459c8:	2128e304 	addi	r4,r4,-23668
 30459cc:	30469080 	call	3046908 <myprintf>
    }
    
    if (bSuccess){
 30459d0:	e0bff917 	ldw	r2,-28(fp)
 30459d4:	1005003a 	cmpeq	r2,r2,zero
 30459d8:	1000161e 	bne	r2,zero,3045a34 <I2C_MultipleRead+0x160>
        for(i=0;i<len && bSuccess;i++){
 30459dc:	e03ffa15 	stw	zero,-24(fp)
 30459e0:	00000e06 	br	3045a1c <I2C_MultipleRead+0x148>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 30459e4:	e0bffa17 	ldw	r2,-24(fp)
 30459e8:	1007883a 	mov	r3,r2
 30459ec:	e0bffe17 	ldw	r2,-8(fp)
 30459f0:	188d883a 	add	r6,r3,r2
 30459f4:	e0bfff0b 	ldhu	r2,-4(fp)
 30459f8:	10ffffc4 	addi	r3,r2,-1
 30459fc:	e0bffa17 	ldw	r2,-24(fp)
 3045a00:	188ec03a 	cmpne	r7,r3,r2
 3045a04:	e13ffb17 	ldw	r4,-20(fp)
 3045a08:	e17ffc17 	ldw	r5,-16(fp)
 3045a0c:	3045c7c0 	call	3045c7c <i2c_read>
 3045a10:	e0bffa17 	ldw	r2,-24(fp)
 3045a14:	10800044 	addi	r2,r2,1
 3045a18:	e0bffa15 	stw	r2,-24(fp)
 3045a1c:	e0ffff0b 	ldhu	r3,-4(fp)
 3045a20:	e0bffa17 	ldw	r2,-24(fp)
 3045a24:	10c0030e 	bge	r2,r3,3045a34 <I2C_MultipleRead+0x160>
 3045a28:	e0bff917 	ldw	r2,-28(fp)
 3045a2c:	1004c03a 	cmpne	r2,r2,zero
 3045a30:	103fec1e 	bne	r2,zero,30459e4 <I2C_MultipleRead+0x110>
        }            
    }        
    i2c_stop(clk_base, data_base);
 3045a34:	e13ffb17 	ldw	r4,-20(fp)
 3045a38:	e17ffc17 	ldw	r5,-16(fp)
 3045a3c:	3045ae00 	call	3045ae0 <i2c_stop>
    
    return bSuccess;    
 3045a40:	e0bff917 	ldw	r2,-28(fp)
    
}
 3045a44:	e037883a 	mov	sp,fp
 3045a48:	dfc00117 	ldw	ra,4(sp)
 3045a4c:	df000017 	ldw	fp,0(sp)
 3045a50:	dec00204 	addi	sp,sp,8
 3045a54:	f800283a 	ret

03045a58 <i2c_start>:




/////////////////////////////////////////////////////////////////////////////////////////////
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 3045a58:	defffc04 	addi	sp,sp,-16
 3045a5c:	dfc00315 	stw	ra,12(sp)
 3045a60:	df000215 	stw	fp,8(sp)
 3045a64:	df000204 	addi	fp,sp,8
 3045a68:	e13ffe15 	stw	r4,-8(fp)
 3045a6c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 3045a70:	e0bfff17 	ldw	r2,-4(fp)
 3045a74:	10800104 	addi	r2,r2,4
 3045a78:	1007883a 	mov	r3,r2
 3045a7c:	00800044 	movi	r2,1
 3045a80:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
 3045a84:	e0bfff17 	ldw	r2,-4(fp)
 3045a88:	1007883a 	mov	r3,r2
 3045a8c:	00800044 	movi	r2,1
 3045a90:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 3045a94:	e0bffe17 	ldw	r2,-8(fp)
 3045a98:	1007883a 	mov	r3,r2
 3045a9c:	00800044 	movi	r2,1
 3045aa0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 3045aa4:	01000044 	movi	r4,1
 3045aa8:	30540480 	call	3054048 <usleep>
     
    SDA_LOW(data_base); // data low
 3045aac:	e0bfff17 	ldw	r2,-4(fp)
 3045ab0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 3045ab4:	01000044 	movi	r4,1
 3045ab8:	30540480 	call	3054048 <usleep>
    SCL_LOW(clk_base); // clock low
 3045abc:	e0bffe17 	ldw	r2,-8(fp)
 3045ac0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 3045ac4:	01000044 	movi	r4,1
 3045ac8:	30540480 	call	3054048 <usleep>
}
 3045acc:	e037883a 	mov	sp,fp
 3045ad0:	dfc00117 	ldw	ra,4(sp)
 3045ad4:	df000017 	ldw	fp,0(sp)
 3045ad8:	dec00204 	addi	sp,sp,8
 3045adc:	f800283a 	ret

03045ae0 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 3045ae0:	defffc04 	addi	sp,sp,-16
 3045ae4:	dfc00315 	stw	ra,12(sp)
 3045ae8:	df000215 	stw	fp,8(sp)
 3045aec:	df000204 	addi	fp,sp,8
 3045af0:	e13ffe15 	stw	r4,-8(fp)
 3045af4:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 3045af8:	e0bfff17 	ldw	r2,-4(fp)
 3045afc:	10800104 	addi	r2,r2,4
 3045b00:	1007883a 	mov	r3,r2
 3045b04:	00800044 	movi	r2,1
 3045b08:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 3045b0c:	e0bfff17 	ldw	r2,-4(fp)
 3045b10:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 3045b14:	e0bffe17 	ldw	r2,-8(fp)
 3045b18:	1007883a 	mov	r3,r2
 3045b1c:	00800044 	movi	r2,1
 3045b20:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 3045b24:	01000044 	movi	r4,1
 3045b28:	30540480 	call	3054048 <usleep>
    SDA_HIGH(data_base); // data high
 3045b2c:	e0bfff17 	ldw	r2,-4(fp)
 3045b30:	1007883a 	mov	r3,r2
 3045b34:	00800044 	movi	r2,1
 3045b38:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 3045b3c:	01000044 	movi	r4,1
 3045b40:	30540480 	call	3054048 <usleep>
}
 3045b44:	e037883a 	mov	sp,fp
 3045b48:	dfc00117 	ldw	ra,4(sp)
 3045b4c:	df000017 	ldw	fp,0(sp)
 3045b50:	dec00204 	addi	sp,sp,8
 3045b54:	f800283a 	ret

03045b58 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 3045b58:	defff804 	addi	sp,sp,-32
 3045b5c:	dfc00715 	stw	ra,28(sp)
 3045b60:	df000615 	stw	fp,24(sp)
 3045b64:	df000604 	addi	fp,sp,24
 3045b68:	e13ffd15 	stw	r4,-12(fp)
 3045b6c:	e17ffe15 	stw	r5,-8(fp)
 3045b70:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 3045b74:	00bfe004 	movi	r2,-128
 3045b78:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 3045b7c:	e0bffe17 	ldw	r2,-8(fp)
 3045b80:	10800104 	addi	r2,r2,4
 3045b84:	1007883a 	mov	r3,r2
 3045b88:	00800044 	movi	r2,1
 3045b8c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 3045b90:	e03ffa15 	stw	zero,-24(fp)
 3045b94:	00001f06 	br	3045c14 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 3045b98:	e0bffd17 	ldw	r2,-12(fp)
 3045b9c:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 3045ba0:	e0ffff03 	ldbu	r3,-4(fp)
 3045ba4:	e0bffc03 	ldbu	r2,-16(fp)
 3045ba8:	1884703a 	and	r2,r3,r2
 3045bac:	10803fcc 	andi	r2,r2,255
 3045bb0:	1005003a 	cmpeq	r2,r2,zero
 3045bb4:	1000051e 	bne	r2,zero,3045bcc <i2c_write+0x74>
            SDA_HIGH(data_base);
 3045bb8:	e0bffe17 	ldw	r2,-8(fp)
 3045bbc:	1007883a 	mov	r3,r2
 3045bc0:	00800044 	movi	r2,1
 3045bc4:	18800035 	stwio	r2,0(r3)
 3045bc8:	00000206 	br	3045bd4 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 3045bcc:	e0bffe17 	ldw	r2,-8(fp)
 3045bd0:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 3045bd4:	e0bffc03 	ldbu	r2,-16(fp)
 3045bd8:	1004d07a 	srli	r2,r2,1
 3045bdc:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
 3045be0:	e0bffd17 	ldw	r2,-12(fp)
 3045be4:	1007883a 	mov	r3,r2
 3045be8:	00800044 	movi	r2,1
 3045bec:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 3045bf0:	01000044 	movi	r4,1
 3045bf4:	30540480 	call	3054048 <usleep>
        SCL_LOW(clk_base);
 3045bf8:	e0bffd17 	ldw	r2,-12(fp)
 3045bfc:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 3045c00:	01000044 	movi	r4,1
 3045c04:	30540480 	call	3054048 <usleep>
 3045c08:	e0bffa17 	ldw	r2,-24(fp)
 3045c0c:	10800044 	addi	r2,r2,1
 3045c10:	e0bffa15 	stw	r2,-24(fp)
 3045c14:	e0bffa17 	ldw	r2,-24(fp)
 3045c18:	10800210 	cmplti	r2,r2,8
 3045c1c:	103fde1e 	bne	r2,zero,3045b98 <i2c_write+0x40>
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 3045c20:	e0bffe17 	ldw	r2,-8(fp)
 3045c24:	10800104 	addi	r2,r2,4
 3045c28:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 3045c2c:	e0bffd17 	ldw	r2,-12(fp)
 3045c30:	1007883a 	mov	r3,r2
 3045c34:	00800044 	movi	r2,1
 3045c38:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 3045c3c:	01000044 	movi	r4,1
 3045c40:	30540480 	call	3054048 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 3045c44:	e0bffe17 	ldw	r2,-8(fp)
 3045c48:	10800037 	ldwio	r2,0(r2)
 3045c4c:	1005003a 	cmpeq	r2,r2,zero
 3045c50:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 3045c54:	e0bffd17 	ldw	r2,-12(fp)
 3045c58:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 3045c5c:	01000044 	movi	r4,1
 3045c60:	30540480 	call	3054048 <usleep>
    return bAck;
 3045c64:	e0bffb17 	ldw	r2,-20(fp)
}    
 3045c68:	e037883a 	mov	sp,fp
 3045c6c:	dfc00117 	ldw	ra,4(sp)
 3045c70:	df000017 	ldw	fp,0(sp)
 3045c74:	dec00204 	addi	sp,sp,8
 3045c78:	f800283a 	ret

03045c7c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 3045c7c:	defff804 	addi	sp,sp,-32
 3045c80:	dfc00715 	stw	ra,28(sp)
 3045c84:	df000615 	stw	fp,24(sp)
 3045c88:	df000604 	addi	fp,sp,24
 3045c8c:	e13ffc15 	stw	r4,-16(fp)
 3045c90:	e17ffd15 	stw	r5,-12(fp)
 3045c94:	e1bffe15 	stw	r6,-8(fp)
 3045c98:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 3045c9c:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 3045ca0:	e0bffd17 	ldw	r2,-12(fp)
 3045ca4:	10800104 	addi	r2,r2,4
 3045ca8:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 3045cac:	e0bffc17 	ldw	r2,-16(fp)
 3045cb0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 3045cb4:	01000044 	movi	r4,1
 3045cb8:	30540480 	call	3054048 <usleep>

    for(i=0;i<8;i++){
 3045cbc:	e03ffa15 	stw	zero,-24(fp)
 3045cc0:	00001706 	br	3045d20 <i2c_read+0xa4>
        Data <<= 1;
 3045cc4:	e0bffb03 	ldbu	r2,-20(fp)
 3045cc8:	1085883a 	add	r2,r2,r2
 3045ccc:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 3045cd0:	e0bffc17 	ldw	r2,-16(fp)
 3045cd4:	1007883a 	mov	r3,r2
 3045cd8:	00800044 	movi	r2,1
 3045cdc:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 3045ce0:	01000044 	movi	r4,1
 3045ce4:	30540480 	call	3054048 <usleep>
        if (SDA_READ(data_base))  // read data   
 3045ce8:	e0bffd17 	ldw	r2,-12(fp)
 3045cec:	10800037 	ldwio	r2,0(r2)
 3045cf0:	1005003a 	cmpeq	r2,r2,zero
 3045cf4:	1000031e 	bne	r2,zero,3045d04 <i2c_read+0x88>
            Data |= 0x01;
 3045cf8:	e0bffb03 	ldbu	r2,-20(fp)
 3045cfc:	10800054 	ori	r2,r2,1
 3045d00:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 3045d04:	e0bffc17 	ldw	r2,-16(fp)
 3045d08:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 3045d0c:	01000044 	movi	r4,1
 3045d10:	30540480 	call	3054048 <usleep>
 3045d14:	e0bffa17 	ldw	r2,-24(fp)
 3045d18:	10800044 	addi	r2,r2,1
 3045d1c:	e0bffa15 	stw	r2,-24(fp)
 3045d20:	e0bffa17 	ldw	r2,-24(fp)
 3045d24:	10800210 	cmplti	r2,r2,8
 3045d28:	103fe61e 	bne	r2,zero,3045cc4 <i2c_read+0x48>
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 3045d2c:	e0bffc17 	ldw	r2,-16(fp)
 3045d30:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 3045d34:	e0bffd17 	ldw	r2,-12(fp)
 3045d38:	10800104 	addi	r2,r2,4
 3045d3c:	1007883a 	mov	r3,r2
 3045d40:	00800044 	movi	r2,1
 3045d44:	18800035 	stwio	r2,0(r3)
    if (bAck)
 3045d48:	e0bfff17 	ldw	r2,-4(fp)
 3045d4c:	1005003a 	cmpeq	r2,r2,zero
 3045d50:	1000031e 	bne	r2,zero,3045d60 <i2c_read+0xe4>
        SDA_LOW(data_base);
 3045d54:	e0bffd17 	ldw	r2,-12(fp)
 3045d58:	10000035 	stwio	zero,0(r2)
 3045d5c:	00000406 	br	3045d70 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 3045d60:	e0bffd17 	ldw	r2,-12(fp)
 3045d64:	1007883a 	mov	r3,r2
 3045d68:	00800044 	movi	r2,1
 3045d6c:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 3045d70:	e0bffc17 	ldw	r2,-16(fp)
 3045d74:	1007883a 	mov	r3,r2
 3045d78:	00800044 	movi	r2,1
 3045d7c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 3045d80:	01000044 	movi	r4,1
 3045d84:	30540480 	call	3054048 <usleep>
    SCL_LOW(clk_base); // clock low
 3045d88:	e0bffc17 	ldw	r2,-16(fp)
 3045d8c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 3045d90:	01000044 	movi	r4,1
 3045d94:	30540480 	call	3054048 <usleep>
    SDA_LOW(data_base);  // data low
 3045d98:	e0bffd17 	ldw	r2,-12(fp)
 3045d9c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 3045da0:	01000044 	movi	r4,1
 3045da4:	30540480 	call	3054048 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 3045da8:	e0fffe17 	ldw	r3,-8(fp)
 3045dac:	e0bffb03 	ldbu	r2,-20(fp)
 3045db0:	18800005 	stb	r2,0(r3)
}
 3045db4:	e037883a 	mov	sp,fp
 3045db8:	dfc00117 	ldw	ra,4(sp)
 3045dbc:	df000017 	ldw	fp,0(sp)
 3045dc0:	dec00204 	addi	sp,sp,8
 3045dc4:	f800283a 	ret

03045dc8 <LCD_Open>:
// (\n): Move the cursor to the start of the line and move it donw one line

static FILE *fp=0;

bool LCD_Open(void){
 3045dc8:	defffd04 	addi	sp,sp,-12
 3045dcc:	dfc00215 	stw	ra,8(sp)
 3045dd0:	df000115 	stw	fp,4(sp)
 3045dd4:	df000104 	addi	fp,sp,4
    fp = fopen(LCD_NAME, "w");
 3045dd8:	0100c1b4 	movhi	r4,774
 3045ddc:	2128ec04 	addi	r4,r4,-23632
 3045de0:	0140c1b4 	movhi	r5,774
 3045de4:	2968ef04 	addi	r5,r5,-23620
 3045de8:	304a6cc0 	call	304a6cc <fopen>
 3045dec:	d0a77915 	stw	r2,-25116(gp)
    if (fp)
 3045df0:	d0a77917 	ldw	r2,-25116(gp)
 3045df4:	1005003a 	cmpeq	r2,r2,zero
 3045df8:	1000031e 	bne	r2,zero,3045e08 <LCD_Open+0x40>
        return TRUE;
 3045dfc:	00800044 	movi	r2,1
 3045e00:	e0bfff15 	stw	r2,-4(fp)
 3045e04:	00000106 	br	3045e0c <LCD_Open+0x44>
    return FALSE;        
 3045e08:	e03fff15 	stw	zero,-4(fp)
 3045e0c:	e0bfff17 	ldw	r2,-4(fp)
}
 3045e10:	e037883a 	mov	sp,fp
 3045e14:	dfc00117 	ldw	ra,4(sp)
 3045e18:	df000017 	ldw	fp,0(sp)
 3045e1c:	dec00204 	addi	sp,sp,8
 3045e20:	f800283a 	ret

03045e24 <LCD_TextOut>:
bool LCD_TextOut(char *pText){
 3045e24:	defffc04 	addi	sp,sp,-16
 3045e28:	dfc00315 	stw	ra,12(sp)
 3045e2c:	df000215 	stw	fp,8(sp)
 3045e30:	df000204 	addi	fp,sp,8
 3045e34:	e13ffe15 	stw	r4,-8(fp)
    if (!fp)
 3045e38:	d0a77917 	ldw	r2,-25116(gp)
 3045e3c:	1004c03a 	cmpne	r2,r2,zero
 3045e40:	1000021e 	bne	r2,zero,3045e4c <LCD_TextOut+0x28>
        return FALSE;
 3045e44:	e03fff15 	stw	zero,-4(fp)
 3045e48:	00000906 	br	3045e70 <LCD_TextOut+0x4c>
    fwrite(pText, strlen(pText), 1, fp);        
 3045e4c:	e13ffe17 	ldw	r4,-8(fp)
 3045e50:	304c4c40 	call	304c4c4 <strlen>
 3045e54:	100b883a 	mov	r5,r2
 3045e58:	d1e77917 	ldw	r7,-25116(gp)
 3045e5c:	e13ffe17 	ldw	r4,-8(fp)
 3045e60:	01800044 	movi	r6,1
 3045e64:	304b2200 	call	304b220 <fwrite>
    return TRUE;        
 3045e68:	00800044 	movi	r2,1
 3045e6c:	e0bfff15 	stw	r2,-4(fp)
 3045e70:	e0bfff17 	ldw	r2,-4(fp)
}
 3045e74:	e037883a 	mov	sp,fp
 3045e78:	dfc00117 	ldw	ra,4(sp)
 3045e7c:	df000017 	ldw	fp,0(sp)
 3045e80:	dec00204 	addi	sp,sp,8
 3045e84:	f800283a 	ret

03045e88 <LCD_Clear>:

bool LCD_Clear(void){
 3045e88:	defff504 	addi	sp,sp,-44
 3045e8c:	dfc00a15 	stw	ra,40(sp)
 3045e90:	df000915 	stw	fp,36(sp)
 3045e94:	df000904 	addi	fp,sp,36
    char szText[32]="\n\n";
 3045e98:	00c0c1b4 	movhi	r3,774
 3045e9c:	18e8f004 	addi	r3,r3,-23616
 3045ea0:	1880000b 	ldhu	r2,0(r3)
 3045ea4:	e0bff70d 	sth	r2,-36(fp)
 3045ea8:	18800083 	ldbu	r2,2(r3)
 3045eac:	e0bff785 	stb	r2,-34(fp)
 3045eb0:	e13ff7c4 	addi	r4,fp,-33
 3045eb4:	01800744 	movi	r6,29
 3045eb8:	000b883a 	mov	r5,zero
 3045ebc:	304bbfc0 	call	304bbfc <memset>
    if (!fp)
 3045ec0:	d0a77917 	ldw	r2,-25116(gp)
 3045ec4:	1004c03a 	cmpne	r2,r2,zero
 3045ec8:	1000021e 	bne	r2,zero,3045ed4 <LCD_Clear+0x4c>
        return FALSE;
 3045ecc:	e03fff15 	stw	zero,-4(fp)
 3045ed0:	00000906 	br	3045ef8 <LCD_Clear+0x70>
    fwrite(szText, strlen(szText), 1, fp);        
 3045ed4:	e13ff704 	addi	r4,fp,-36
 3045ed8:	304c4c40 	call	304c4c4 <strlen>
 3045edc:	100b883a 	mov	r5,r2
 3045ee0:	d1e77917 	ldw	r7,-25116(gp)
 3045ee4:	e13ff704 	addi	r4,fp,-36
 3045ee8:	01800044 	movi	r6,1
 3045eec:	304b2200 	call	304b220 <fwrite>
    return TRUE;        
 3045ef0:	00800044 	movi	r2,1
 3045ef4:	e0bfff15 	stw	r2,-4(fp)
 3045ef8:	e0bfff17 	ldw	r2,-4(fp)
}
 3045efc:	e037883a 	mov	sp,fp
 3045f00:	dfc00117 	ldw	ra,4(sp)
 3045f04:	df000017 	ldw	fp,0(sp)
 3045f08:	dec00204 	addi	sp,sp,8
 3045f0c:	f800283a 	ret

03045f10 <LCD_Close>:


void LCD_Close(void){
 3045f10:	defffe04 	addi	sp,sp,-8
 3045f14:	dfc00115 	stw	ra,4(sp)
 3045f18:	df000015 	stw	fp,0(sp)
 3045f1c:	d839883a 	mov	fp,sp
    if (fp)
 3045f20:	d0a77917 	ldw	r2,-25116(gp)
 3045f24:	1005003a 	cmpeq	r2,r2,zero
 3045f28:	1000021e 	bne	r2,zero,3045f34 <LCD_Close+0x24>
        fclose(fp);
 3045f2c:	d1277917 	ldw	r4,-25116(gp)
 3045f30:	304a0d40 	call	304a0d4 <fclose>
    fp = 0;        
 3045f34:	d0277915 	stw	zero,-25116(gp)
}
 3045f38:	e037883a 	mov	sp,fp
 3045f3c:	dfc00117 	ldw	ra,4(sp)
 3045f40:	df000017 	ldw	fp,0(sp)
 3045f44:	dec00204 	addi	sp,sp,8
 3045f48:	f800283a 	ret

03045f4c <LED_AllOn>:

#define LED_INIT_MASK   (0x01 << 24)


void LED_AllOn(void){
 3045f4c:	defffe04 	addi	sp,sp,-8
 3045f50:	dfc00115 	stw	ra,4(sp)
 3045f54:	df000015 	stw	fp,0(sp)
 3045f58:	d839883a 	mov	fp,sp
    LED_Display(0xFFFFFFFF);       
 3045f5c:	013fffc4 	movi	r4,-1
 3045f60:	3045fa40 	call	3045fa4 <LED_Display>
}
 3045f64:	e037883a 	mov	sp,fp
 3045f68:	dfc00117 	ldw	ra,4(sp)
 3045f6c:	df000017 	ldw	fp,0(sp)
 3045f70:	dec00204 	addi	sp,sp,8
 3045f74:	f800283a 	ret

03045f78 <LED_AllOff>:

void LED_AllOff(void){
 3045f78:	defffe04 	addi	sp,sp,-8
 3045f7c:	dfc00115 	stw	ra,4(sp)
 3045f80:	df000015 	stw	fp,0(sp)
 3045f84:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
 3045f88:	0009883a 	mov	r4,zero
 3045f8c:	3045fa40 	call	3045fa4 <LED_Display>
}
 3045f90:	e037883a 	mov	sp,fp
 3045f94:	dfc00117 	ldw	ra,4(sp)
 3045f98:	df000017 	ldw	fp,0(sp)
 3045f9c:	dec00204 	addi	sp,sp,8
 3045fa0:	f800283a 	ret

03045fa4 <LED_Display>:

void LED_Display(alt_u32 Mask){ // 1: light, 0:unlight
 3045fa4:	defffd04 	addi	sp,sp,-12
 3045fa8:	df000215 	stw	fp,8(sp)
 3045fac:	df000204 	addi	fp,sp,8
 3045fb0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 ThisMask;
    ThisMask = Mask;//~(Mask & 0x7FFFFFF);
 3045fb4:	e0bfff17 	ldw	r2,-4(fp)
 3045fb8:	e0bffe15 	stw	r2,-8(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, ThisMask);  //0:ligh, 1:unlight
 3045fbc:	e0fffe17 	ldw	r3,-8(fp)
 3045fc0:	00804034 	movhi	r2,256
 3045fc4:	10802004 	addi	r2,r2,128
 3045fc8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, ThisMask >> 9);  //0:ligh, 1:unlight
 3045fcc:	e0bffe17 	ldw	r2,-8(fp)
 3045fd0:	1004d27a 	srli	r2,r2,9
 3045fd4:	1007883a 	mov	r3,r2
 3045fd8:	00804034 	movhi	r2,256
 3045fdc:	10802404 	addi	r2,r2,144
 3045fe0:	10c00035 	stwio	r3,0(r2)
    
}
 3045fe4:	e037883a 	mov	sp,fp
 3045fe8:	df000017 	ldw	fp,0(sp)
 3045fec:	dec00104 	addi	sp,sp,4
 3045ff0:	f800283a 	ret

03045ff4 <LED_LightCount>:

void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
 3045ff4:	defffc04 	addi	sp,sp,-16
 3045ff8:	df000315 	stw	fp,12(sp)
 3045ffc:	df000304 	addi	fp,sp,12
 3046000:	e13fff05 	stb	r4,-4(fp)
    alt_u32 Mask = 0;
 3046004:	e03ffe15 	stw	zero,-8(fp)
    int i;
    for(i=0;i<LightCount;i++){
 3046008:	e03ffd15 	stw	zero,-12(fp)
 304600c:	00000906 	br	3046034 <LED_LightCount+0x40>
        Mask <<= 1;
 3046010:	e0bffe17 	ldw	r2,-8(fp)
 3046014:	1085883a 	add	r2,r2,r2
 3046018:	e0bffe15 	stw	r2,-8(fp)
        Mask |= 0x01;
 304601c:	e0bffe17 	ldw	r2,-8(fp)
 3046020:	10800054 	ori	r2,r2,1
 3046024:	e0bffe15 	stw	r2,-8(fp)
 3046028:	e0bffd17 	ldw	r2,-12(fp)
 304602c:	10800044 	addi	r2,r2,1
 3046030:	e0bffd15 	stw	r2,-12(fp)
 3046034:	e0ffff03 	ldbu	r3,-4(fp)
 3046038:	e0bffd17 	ldw	r2,-12(fp)
 304603c:	10fff416 	blt	r2,r3,3046010 <LED_LightCount+0x1c>
    }
    IOWR_ALTERA_AVALON_PIO_DATA(LEDG_BASE, Mask);  //0:ligh, 1:unlight
 3046040:	e0fffe17 	ldw	r3,-8(fp)
 3046044:	00804034 	movhi	r2,256
 3046048:	10802004 	addi	r2,r2,128
 304604c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, Mask >> 8);  //0:ligh, 1:unlight
 3046050:	e0bffe17 	ldw	r2,-8(fp)
 3046054:	1004d23a 	srli	r2,r2,8
 3046058:	1007883a 	mov	r3,r2
 304605c:	00804034 	movhi	r2,256
 3046060:	10802404 	addi	r2,r2,144
 3046064:	10c00035 	stwio	r3,0(r2)
    
}
 3046068:	e037883a 	mov	sp,fp
 304606c:	df000017 	ldw	fp,0(sp)
 3046070:	dec00104 	addi	sp,sp,4
 3046074:	f800283a 	ret

03046078 <SEG7_Clear>:
        63, 6, 91, 79, 102, 109, 125, 7, 
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
 3046078:	defffe04 	addi	sp,sp,-8
 304607c:	df000115 	stw	fp,4(sp)
 3046080:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 3046084:	e03fff15 	stw	zero,-4(fp)
 3046088:	00000b06 	br	30460b8 <SEG7_Clear+0x40>
        SEG7_SET(i, 0x00);
 304608c:	e0bfff17 	ldw	r2,-4(fp)
 3046090:	1085883a 	add	r2,r2,r2
 3046094:	1085883a 	add	r2,r2,r2
 3046098:	1007883a 	mov	r3,r2
 304609c:	00804034 	movhi	r2,256
 30460a0:	10801004 	addi	r2,r2,64
 30460a4:	1885883a 	add	r2,r3,r2
 30460a8:	10000035 	stwio	zero,0(r2)
 30460ac:	e0bfff17 	ldw	r2,-4(fp)
 30460b0:	10800044 	addi	r2,r2,1
 30460b4:	e0bfff15 	stw	r2,-4(fp)
 30460b8:	e0bfff17 	ldw	r2,-4(fp)
 30460bc:	10800210 	cmplti	r2,r2,8
 30460c0:	103ff21e 	bne	r2,zero,304608c <SEG7_Clear+0x14>
    }        
}
 30460c4:	e037883a 	mov	sp,fp
 30460c8:	df000017 	ldw	fp,0(sp)
 30460cc:	dec00104 	addi	sp,sp,4
 30460d0:	f800283a 	ret

030460d4 <SEG7_Full>:
void SEG7_Full(void){
 30460d4:	defffe04 	addi	sp,sp,-8
 30460d8:	df000115 	stw	fp,4(sp)
 30460dc:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 30460e0:	e03fff15 	stw	zero,-4(fp)
 30460e4:	00000d06 	br	304611c <SEG7_Full+0x48>
        SEG7_SET(i, 0xFF);
 30460e8:	e0bfff17 	ldw	r2,-4(fp)
 30460ec:	1085883a 	add	r2,r2,r2
 30460f0:	1085883a 	add	r2,r2,r2
 30460f4:	1007883a 	mov	r3,r2
 30460f8:	00804034 	movhi	r2,256
 30460fc:	10801004 	addi	r2,r2,64
 3046100:	1885883a 	add	r2,r3,r2
 3046104:	1007883a 	mov	r3,r2
 3046108:	00803fc4 	movi	r2,255
 304610c:	18800035 	stwio	r2,0(r3)
 3046110:	e0bfff17 	ldw	r2,-4(fp)
 3046114:	10800044 	addi	r2,r2,1
 3046118:	e0bfff15 	stw	r2,-4(fp)
 304611c:	e0bfff17 	ldw	r2,-4(fp)
 3046120:	10800210 	cmplti	r2,r2,8
 3046124:	103ff01e 	bne	r2,zero,30460e8 <SEG7_Full+0x14>
    }        
}
 3046128:	e037883a 	mov	sp,fp
 304612c:	df000017 	ldw	fp,0(sp)
 3046130:	dec00104 	addi	sp,sp,4
 3046134:	f800283a 	ret

03046138 <SEG7_Number>:

void SEG7_Number(void){
 3046138:	defffe04 	addi	sp,sp,-8
 304613c:	df000115 	stw	fp,4(sp)
 3046140:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 3046144:	e03fff15 	stw	zero,-4(fp)
 3046148:	00001206 	br	3046194 <SEG7_Number+0x5c>
        SEG7_SET(i, szMap[i]);
 304614c:	e0bfff17 	ldw	r2,-4(fp)
 3046150:	1085883a 	add	r2,r2,r2
 3046154:	1085883a 	add	r2,r2,r2
 3046158:	1007883a 	mov	r3,r2
 304615c:	00804034 	movhi	r2,256
 3046160:	10801004 	addi	r2,r2,64
 3046164:	1889883a 	add	r4,r3,r2
 3046168:	e0ffff17 	ldw	r3,-4(fp)
 304616c:	0080c1b4 	movhi	r2,774
 3046170:	10ab4b04 	addi	r2,r2,-21204
 3046174:	10c5883a 	add	r2,r2,r3
 3046178:	10800003 	ldbu	r2,0(r2)
 304617c:	10c03fcc 	andi	r3,r2,255
 3046180:	2005883a 	mov	r2,r4
 3046184:	10c00035 	stwio	r3,0(r2)
 3046188:	e0bfff17 	ldw	r2,-4(fp)
 304618c:	10800044 	addi	r2,r2,1
 3046190:	e0bfff15 	stw	r2,-4(fp)
 3046194:	e0bfff17 	ldw	r2,-4(fp)
 3046198:	10800210 	cmplti	r2,r2,8
 304619c:	103feb1e 	bne	r2,zero,304614c <SEG7_Number+0x14>
    }        
}
 30461a0:	e037883a 	mov	sp,fp
 30461a4:	df000017 	ldw	fp,0(sp)
 30461a8:	dec00104 	addi	sp,sp,4
 30461ac:	f800283a 	ret

030461b0 <SEG7_Hex>:

void SEG7_Hex(alt_u32 Data, alt_u8 point_mask){
 30461b0:	defffb04 	addi	sp,sp,-20
 30461b4:	df000415 	stw	fp,16(sp)
 30461b8:	df000404 	addi	fp,sp,16
 30461bc:	e13ffe15 	stw	r4,-8(fp)
 30461c0:	e17fff05 	stb	r5,-4(fp)
    alt_u8 mask = 0x01;
 30461c4:	00800044 	movi	r2,1
 30461c8:	e0bffd45 	stb	r2,-11(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 30461cc:	e03ffd05 	stb	zero,-12(fp)
    for(i=0;i<SEG7_NUM;i++){
 30461d0:	e03ffc15 	stw	zero,-16(fp)
 30461d4:	00002306 	br	3046264 <SEG7_Hex+0xb4>
        seg_mask = szMap[Data & 0x0F];
 30461d8:	e0bffe17 	ldw	r2,-8(fp)
 30461dc:	10c003cc 	andi	r3,r2,15
 30461e0:	0080c1b4 	movhi	r2,774
 30461e4:	10ab4b04 	addi	r2,r2,-21204
 30461e8:	10c5883a 	add	r2,r2,r3
 30461ec:	10800003 	ldbu	r2,0(r2)
 30461f0:	e0bffd05 	stb	r2,-12(fp)
        Data >>= 4;
 30461f4:	e0bffe17 	ldw	r2,-8(fp)
 30461f8:	1004d13a 	srli	r2,r2,4
 30461fc:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 3046200:	e0ffff03 	ldbu	r3,-4(fp)
 3046204:	e0bffd43 	ldbu	r2,-11(fp)
 3046208:	1884703a 	and	r2,r3,r2
 304620c:	10803fcc 	andi	r2,r2,255
 3046210:	1005003a 	cmpeq	r2,r2,zero
 3046214:	1000041e 	bne	r2,zero,3046228 <SEG7_Hex+0x78>
            seg_mask |= 0x80;
 3046218:	e0bffd03 	ldbu	r2,-12(fp)
 304621c:	00ffe004 	movi	r3,-128
 3046220:	10c4b03a 	or	r2,r2,r3
 3046224:	e0bffd05 	stb	r2,-12(fp)
        mask <<= 1;     
 3046228:	e0bffd43 	ldbu	r2,-11(fp)
 304622c:	1085883a 	add	r2,r2,r2
 3046230:	e0bffd45 	stb	r2,-11(fp)
        SEG7_SET(i, seg_mask);
 3046234:	e0bffc17 	ldw	r2,-16(fp)
 3046238:	1085883a 	add	r2,r2,r2
 304623c:	1085883a 	add	r2,r2,r2
 3046240:	1007883a 	mov	r3,r2
 3046244:	00804034 	movhi	r2,256
 3046248:	10801004 	addi	r2,r2,64
 304624c:	1885883a 	add	r2,r3,r2
 3046250:	e0fffd03 	ldbu	r3,-12(fp)
 3046254:	10c00035 	stwio	r3,0(r2)
 3046258:	e0bffc17 	ldw	r2,-16(fp)
 304625c:	10800044 	addi	r2,r2,1
 3046260:	e0bffc15 	stw	r2,-16(fp)
 3046264:	e0bffc17 	ldw	r2,-16(fp)
 3046268:	10800210 	cmplti	r2,r2,8
 304626c:	103fda1e 	bne	r2,zero,30461d8 <SEG7_Hex+0x28>
    }        
}
 3046270:	e037883a 	mov	sp,fp
 3046274:	df000017 	ldw	fp,0(sp)
 3046278:	dec00104 	addi	sp,sp,4
 304627c:	f800283a 	ret

03046280 <SEG7_Decimal>:

void SEG7_Decimal(alt_u32 Data, alt_u8 point_mask){
 3046280:	defffa04 	addi	sp,sp,-24
 3046284:	dfc00515 	stw	ra,20(sp)
 3046288:	df000415 	stw	fp,16(sp)
 304628c:	df000404 	addi	fp,sp,16
 3046290:	e13ffe15 	stw	r4,-8(fp)
 3046294:	e17fff05 	stb	r5,-4(fp)
    alt_u8 mask = 0x01;
 3046298:	00800044 	movi	r2,1
 304629c:	e0bffd45 	stb	r2,-11(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 30462a0:	e03ffd05 	stb	zero,-12(fp)
    for(i=0;i<SEG7_NUM;i++){
 30462a4:	e03ffc15 	stw	zero,-16(fp)
 30462a8:	00002606 	br	3046344 <SEG7_Decimal+0xc4>
        seg_mask = szMap[Data%10];
 30462ac:	e13ffe17 	ldw	r4,-8(fp)
 30462b0:	01400284 	movi	r5,10
 30462b4:	30497f40 	call	30497f4 <__umodsi3>
 30462b8:	1007883a 	mov	r3,r2
 30462bc:	0080c1b4 	movhi	r2,774
 30462c0:	10ab4b04 	addi	r2,r2,-21204
 30462c4:	10c5883a 	add	r2,r2,r3
 30462c8:	10800003 	ldbu	r2,0(r2)
 30462cc:	e0bffd05 	stb	r2,-12(fp)
        Data /= 10;
 30462d0:	e13ffe17 	ldw	r4,-8(fp)
 30462d4:	01400284 	movi	r5,10
 30462d8:	30497ec0 	call	30497ec <__udivsi3>
 30462dc:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 30462e0:	e0ffff03 	ldbu	r3,-4(fp)
 30462e4:	e0bffd43 	ldbu	r2,-11(fp)
 30462e8:	1884703a 	and	r2,r3,r2
 30462ec:	10803fcc 	andi	r2,r2,255
 30462f0:	1005003a 	cmpeq	r2,r2,zero
 30462f4:	1000041e 	bne	r2,zero,3046308 <SEG7_Decimal+0x88>
            seg_mask |= 0x80;
 30462f8:	e0bffd03 	ldbu	r2,-12(fp)
 30462fc:	00ffe004 	movi	r3,-128
 3046300:	10c4b03a 	or	r2,r2,r3
 3046304:	e0bffd05 	stb	r2,-12(fp)
        mask <<= 1;   
 3046308:	e0bffd43 	ldbu	r2,-11(fp)
 304630c:	1085883a 	add	r2,r2,r2
 3046310:	e0bffd45 	stb	r2,-11(fp)
        SEG7_SET(i, seg_mask);
 3046314:	e0bffc17 	ldw	r2,-16(fp)
 3046318:	1085883a 	add	r2,r2,r2
 304631c:	1085883a 	add	r2,r2,r2
 3046320:	1007883a 	mov	r3,r2
 3046324:	00804034 	movhi	r2,256
 3046328:	10801004 	addi	r2,r2,64
 304632c:	1885883a 	add	r2,r3,r2
 3046330:	e0fffd03 	ldbu	r3,-12(fp)
 3046334:	10c00035 	stwio	r3,0(r2)
 3046338:	e0bffc17 	ldw	r2,-16(fp)
 304633c:	10800044 	addi	r2,r2,1
 3046340:	e0bffc15 	stw	r2,-16(fp)
 3046344:	e0bffc17 	ldw	r2,-16(fp)
 3046348:	10800210 	cmplti	r2,r2,8
 304634c:	103fd71e 	bne	r2,zero,30462ac <SEG7_Decimal+0x2c>
    }        
  
} 
 3046350:	e037883a 	mov	sp,fp
 3046354:	dfc00117 	ldw	ra,4(sp)
 3046358:	df000017 	ldw	fp,0(sp)
 304635c:	dec00204 	addi	sp,sp,8
 3046360:	f800283a 	ret

03046364 <waveGetChunkOffset>:
//#pragma pack(pop)
#pragma pack()

int waveGetChunkOffset(char *szWave, const int nSize, const unsigned int ChunkID);
int waveGetChunkOffset(char *szWave, const int nSize, const unsigned int ChunkID){
 3046364:	defff804 	addi	sp,sp,-32
 3046368:	df000715 	stw	fp,28(sp)
 304636c:	df000704 	addi	fp,sp,28
 3046370:	e13ffd15 	stw	r4,-12(fp)
 3046374:	e17ffe15 	stw	r5,-8(fp)
 3046378:	e1bfff15 	stw	r6,-4(fp)
        int nNum = 0;
 304637c:	e03ffc15 	stw	zero,-16(fp)
        if (nSize >= sizeof(WAVE_HEADER)){
 3046380:	e0bffe17 	ldw	r2,-8(fp)
 3046384:	10800330 	cmpltui	r2,r2,12
 3046388:	10003e1e 	bne	r2,zero,3046484 <waveGetChunkOffset+0x120>
                int nOffset = sizeof(WAVE_HEADER);
 304638c:	00800304 	movi	r2,12
 3046390:	e0bffb15 	stw	r2,-20(fp)
                CHUNK *pChunk = (CHUNK *)(szWave+nOffset);
 3046394:	e0bffb17 	ldw	r2,-20(fp)
 3046398:	1007883a 	mov	r3,r2
 304639c:	e0bffd17 	ldw	r2,-12(fp)
 30463a0:	1885883a 	add	r2,r3,r2
 30463a4:	e0bffa15 	stw	r2,-24(fp)
                while ((pChunk->ID != ChunkID) && nOffset < nSize){
 30463a8:	00001506 	br	3046400 <waveGetChunkOffset+0x9c>
                        int nSkip = sizeof(CHUNK) + pChunk->Size;
 30463ac:	e0fffa17 	ldw	r3,-24(fp)
 30463b0:	19000103 	ldbu	r4,4(r3)
 30463b4:	18800143 	ldbu	r2,5(r3)
 30463b8:	1004923a 	slli	r2,r2,8
 30463bc:	1108b03a 	or	r4,r2,r4
 30463c0:	18800183 	ldbu	r2,6(r3)
 30463c4:	1004943a 	slli	r2,r2,16
 30463c8:	1108b03a 	or	r4,r2,r4
 30463cc:	188001c3 	ldbu	r2,7(r3)
 30463d0:	1004963a 	slli	r2,r2,24
 30463d4:	1104b03a 	or	r2,r2,r4
 30463d8:	10800204 	addi	r2,r2,8
 30463dc:	e0bff915 	stw	r2,-28(fp)
                        pChunk = (CHUNK *)((alt_u8 *)pChunk + nSkip);
 30463e0:	e0fffa17 	ldw	r3,-24(fp)
 30463e4:	e0bff917 	ldw	r2,-28(fp)
 30463e8:	1885883a 	add	r2,r3,r2
 30463ec:	e0bffa15 	stw	r2,-24(fp)
                        nOffset += nSkip;
 30463f0:	e0fffb17 	ldw	r3,-20(fp)
 30463f4:	e0bff917 	ldw	r2,-28(fp)
 30463f8:	1885883a 	add	r2,r3,r2
 30463fc:	e0bffb15 	stw	r2,-20(fp)
 3046400:	e0fffa17 	ldw	r3,-24(fp)
 3046404:	19000003 	ldbu	r4,0(r3)
 3046408:	18800043 	ldbu	r2,1(r3)
 304640c:	1004923a 	slli	r2,r2,8
 3046410:	1108b03a 	or	r4,r2,r4
 3046414:	18800083 	ldbu	r2,2(r3)
 3046418:	1004943a 	slli	r2,r2,16
 304641c:	1108b03a 	or	r4,r2,r4
 3046420:	188000c3 	ldbu	r2,3(r3)
 3046424:	1004963a 	slli	r2,r2,24
 3046428:	1104b03a 	or	r2,r2,r4
 304642c:	1007883a 	mov	r3,r2
 3046430:	e0bfff17 	ldw	r2,-4(fp)
 3046434:	18800326 	beq	r3,r2,3046444 <waveGetChunkOffset+0xe0>
 3046438:	e0fffb17 	ldw	r3,-20(fp)
 304643c:	e0bffe17 	ldw	r2,-8(fp)
 3046440:	18bfda16 	blt	r3,r2,30463ac <waveGetChunkOffset+0x48>
                }
                if (pChunk->ID == ChunkID)
 3046444:	e0fffa17 	ldw	r3,-24(fp)
 3046448:	19000003 	ldbu	r4,0(r3)
 304644c:	18800043 	ldbu	r2,1(r3)
 3046450:	1004923a 	slli	r2,r2,8
 3046454:	1108b03a 	or	r4,r2,r4
 3046458:	18800083 	ldbu	r2,2(r3)
 304645c:	1004943a 	slli	r2,r2,16
 3046460:	1108b03a 	or	r4,r2,r4
 3046464:	188000c3 	ldbu	r2,3(r3)
 3046468:	1004963a 	slli	r2,r2,24
 304646c:	1104b03a 	or	r2,r2,r4
 3046470:	1007883a 	mov	r3,r2
 3046474:	e0bfff17 	ldw	r2,-4(fp)
 3046478:	1880021e 	bne	r3,r2,3046484 <waveGetChunkOffset+0x120>
                        nNum = nOffset;
 304647c:	e0bffb17 	ldw	r2,-20(fp)
 3046480:	e0bffc15 	stw	r2,-16(fp)
        }
        return nNum;
 3046484:	e0bffc17 	ldw	r2,-16(fp)
}
 3046488:	e037883a 	mov	sp,fp
 304648c:	df000017 	ldw	fp,0(sp)
 3046490:	dec00104 	addi	sp,sp,4
 3046494:	f800283a 	ret

03046498 <WAVE_IsWaveFile>:

bool WAVE_IsWaveFile(char *szWave, const int nSize){
 3046498:	defff804 	addi	sp,sp,-32
 304649c:	dfc00715 	stw	ra,28(sp)
 30464a0:	df000615 	stw	fp,24(sp)
 30464a4:	df000604 	addi	fp,sp,24
 30464a8:	e13ffe15 	stw	r4,-8(fp)
 30464ac:	e17fff15 	stw	r5,-4(fp)
        bool bYes = FALSE;
 30464b0:	e03ffd15 	stw	zero,-12(fp)
        if (nSize >= sizeof(WAVE_HEADER)){
 30464b4:	e0bfff17 	ldw	r2,-4(fp)
 30464b8:	10800330 	cmpltui	r2,r2,12
 30464bc:	10004f1e 	bne	r2,zero,30465fc <WAVE_IsWaveFile+0x164>
                WAVE_HEADER *pHeader = (WAVE_HEADER *)szWave;
 30464c0:	e0bffe17 	ldw	r2,-8(fp)
 30464c4:	e0bffc15 	stw	r2,-16(fp)
                if ((pHeader->ChunkID == TAG_RIFF) && (pHeader->Format == TAG_WAVE)){
 30464c8:	e0fffc17 	ldw	r3,-16(fp)
 30464cc:	19000003 	ldbu	r4,0(r3)
 30464d0:	18800043 	ldbu	r2,1(r3)
 30464d4:	1004923a 	slli	r2,r2,8
 30464d8:	1108b03a 	or	r4,r2,r4
 30464dc:	18800083 	ldbu	r2,2(r3)
 30464e0:	1004943a 	slli	r2,r2,16
 30464e4:	1108b03a 	or	r4,r2,r4
 30464e8:	188000c3 	ldbu	r2,3(r3)
 30464ec:	1004963a 	slli	r2,r2,24
 30464f0:	1104b03a 	or	r2,r2,r4
 30464f4:	1007883a 	mov	r3,r2
 30464f8:	009191b4 	movhi	r2,17990
 30464fc:	10925484 	addi	r2,r2,18770
 3046500:	1880411e 	bne	r3,r2,3046608 <WAVE_IsWaveFile+0x170>
 3046504:	e0fffc17 	ldw	r3,-16(fp)
 3046508:	19000203 	ldbu	r4,8(r3)
 304650c:	18800243 	ldbu	r2,9(r3)
 3046510:	1004923a 	slli	r2,r2,8
 3046514:	1108b03a 	or	r4,r2,r4
 3046518:	18800283 	ldbu	r2,10(r3)
 304651c:	1004943a 	slli	r2,r2,16
 3046520:	1108b03a 	or	r4,r2,r4
 3046524:	188002c3 	ldbu	r2,11(r3)
 3046528:	1004963a 	slli	r2,r2,24
 304652c:	1104b03a 	or	r2,r2,r4
 3046530:	1007883a 	mov	r3,r2
 3046534:	009155b4 	movhi	r2,17750
 3046538:	109055c4 	addi	r2,r2,16727
 304653c:	1880321e 	bne	r3,r2,3046608 <WAVE_IsWaveFile+0x170>
        	printf("TESTE 1/n");
 3046540:	0100c1b4 	movhi	r4,774
 3046544:	2128f804 	addi	r4,r4,-23584
 3046548:	304bd0c0 	call	304bd0c <printf>
                        int nOffset = waveGetChunkOffset(szWave, nSize, CHUNK_FORMAT);
 304654c:	e13ffe17 	ldw	r4,-8(fp)
 3046550:	e17fff17 	ldw	r5,-4(fp)
 3046554:	01881d34 	movhi	r6,8308
 3046558:	319b5984 	addi	r6,r6,28006
 304655c:	30463640 	call	3046364 <waveGetChunkOffset>
 3046560:	e0bffb15 	stw	r2,-20(fp)
                        if (nOffset){printf("TESTE 2/n");
 3046564:	e0bffb17 	ldw	r2,-20(fp)
 3046568:	1005003a 	cmpeq	r2,r2,zero
 304656c:	1000261e 	bne	r2,zero,3046608 <WAVE_IsWaveFile+0x170>
 3046570:	0100c1b4 	movhi	r4,774
 3046574:	2128fb04 	addi	r4,r4,-23572
 3046578:	304bd0c0 	call	304bd0c <printf>
                                PCM_FORMAT_CHUNK *pPcmChunk = (PCM_FORMAT_CHUNK *)(szWave+nOffset);
 304657c:	e0bffb17 	ldw	r2,-20(fp)
 3046580:	1007883a 	mov	r3,r2
 3046584:	e0bffe17 	ldw	r2,-8(fp)
 3046588:	1885883a 	add	r2,r3,r2
 304658c:	e0bffa15 	stw	r2,-24(fp)
                                if (pPcmChunk->Size == 16 && pPcmChunk->AudioFormat == 1){ // uncompress PCM
 3046590:	e0fffa17 	ldw	r3,-24(fp)
 3046594:	19000103 	ldbu	r4,4(r3)
 3046598:	18800143 	ldbu	r2,5(r3)
 304659c:	1004923a 	slli	r2,r2,8
 30465a0:	1108b03a 	or	r4,r2,r4
 30465a4:	18800183 	ldbu	r2,6(r3)
 30465a8:	1004943a 	slli	r2,r2,16
 30465ac:	1108b03a 	or	r4,r2,r4
 30465b0:	188001c3 	ldbu	r2,7(r3)
 30465b4:	1004963a 	slli	r2,r2,24
 30465b8:	1104b03a 	or	r2,r2,r4
 30465bc:	10800418 	cmpnei	r2,r2,16
 30465c0:	1000111e 	bne	r2,zero,3046608 <WAVE_IsWaveFile+0x170>
 30465c4:	e0bffa17 	ldw	r2,-24(fp)
 30465c8:	10c00203 	ldbu	r3,8(r2)
 30465cc:	10800243 	ldbu	r2,9(r2)
 30465d0:	1004923a 	slli	r2,r2,8
 30465d4:	10c4b03a 	or	r2,r2,r3
 30465d8:	10bfffcc 	andi	r2,r2,65535
 30465dc:	10800058 	cmpnei	r2,r2,1
 30465e0:	1000091e 	bne	r2,zero,3046608 <WAVE_IsWaveFile+0x170>
                                	printf("TESTE 3/n"); bYes = TRUE;
 30465e4:	0100c1b4 	movhi	r4,774
 30465e8:	2128fe04 	addi	r4,r4,-23560
 30465ec:	304bd0c0 	call	304bd0c <printf>
 30465f0:	00800044 	movi	r2,1
 30465f4:	e0bffd15 	stw	r2,-12(fp)
 30465f8:	00000306 	br	3046608 <WAVE_IsWaveFile+0x170>
                                }
                        }
                }

        }
        else
        	printf("TESTE falhou");
 30465fc:	0100c1b4 	movhi	r4,774
 3046600:	21290104 	addi	r4,r4,-23548
 3046604:	304bd0c0 	call	304bd0c <printf>
        return bYes;
 3046608:	e0bffd17 	ldw	r2,-12(fp)
}
 304660c:	e037883a 	mov	sp,fp
 3046610:	dfc00117 	ldw	ra,4(sp)
 3046614:	df000017 	ldw	fp,0(sp)
 3046618:	dec00204 	addi	sp,sp,8
 304661c:	f800283a 	ret

03046620 <Wave_GetSampleRate>:

int Wave_GetSampleRate(char *szWave, const int nSize){
 3046620:	defff904 	addi	sp,sp,-28
 3046624:	dfc00615 	stw	ra,24(sp)
 3046628:	df000515 	stw	fp,20(sp)
 304662c:	df000504 	addi	fp,sp,20
 3046630:	e13ffe15 	stw	r4,-8(fp)
 3046634:	e17fff15 	stw	r5,-4(fp)
	 printf("WAV.\n");
 3046638:	0100c1b4 	movhi	r4,774
 304663c:	21290504 	addi	r4,r4,-23532
 3046640:	304be480 	call	304be48 <puts>
        int nNum = 0;
 3046644:	e03ffd15 	stw	zero,-12(fp)
        int nOffset = waveGetChunkOffset(szWave, nSize, CHUNK_FORMAT);
 3046648:	e13ffe17 	ldw	r4,-8(fp)
 304664c:	e17fff17 	ldw	r5,-4(fp)
 3046650:	01881d34 	movhi	r6,8308
 3046654:	319b5984 	addi	r6,r6,28006
 3046658:	30463640 	call	3046364 <waveGetChunkOffset>
 304665c:	e0bffc15 	stw	r2,-16(fp)
        if (nOffset){
 3046660:	e0bffc17 	ldw	r2,-16(fp)
 3046664:	1005003a 	cmpeq	r2,r2,zero
 3046668:	1000111e 	bne	r2,zero,30466b0 <Wave_GetSampleRate+0x90>
               PCM_FORMAT_CHUNK *pPcmChunk = (PCM_FORMAT_CHUNK *)(szWave+nOffset);
 304666c:	e0bffc17 	ldw	r2,-16(fp)
 3046670:	1007883a 	mov	r3,r2
 3046674:	e0bffe17 	ldw	r2,-8(fp)
 3046678:	1885883a 	add	r2,r3,r2
 304667c:	e0bffb15 	stw	r2,-20(fp)
               nNum = pPcmChunk->SampleRate;
 3046680:	e0fffb17 	ldw	r3,-20(fp)
 3046684:	19000303 	ldbu	r4,12(r3)
 3046688:	18800343 	ldbu	r2,13(r3)
 304668c:	1004923a 	slli	r2,r2,8
 3046690:	1108b03a 	or	r4,r2,r4
 3046694:	18800383 	ldbu	r2,14(r3)
 3046698:	1004943a 	slli	r2,r2,16
 304669c:	1108b03a 	or	r4,r2,r4
 30466a0:	188003c3 	ldbu	r2,15(r3)
 30466a4:	1004963a 	slli	r2,r2,24
 30466a8:	1104b03a 	or	r2,r2,r4
 30466ac:	e0bffd15 	stw	r2,-12(fp)
        }
        return nNum;
 30466b0:	e0bffd17 	ldw	r2,-12(fp)

}
 30466b4:	e037883a 	mov	sp,fp
 30466b8:	dfc00117 	ldw	ra,4(sp)
 30466bc:	df000017 	ldw	fp,0(sp)
 30466c0:	dec00204 	addi	sp,sp,8
 30466c4:	f800283a 	ret

030466c8 <Wave_GetChannelNum>:

int Wave_GetChannelNum(char *szWave, const int nSize){
 30466c8:	defff904 	addi	sp,sp,-28
 30466cc:	dfc00615 	stw	ra,24(sp)
 30466d0:	df000515 	stw	fp,20(sp)
 30466d4:	df000504 	addi	fp,sp,20
 30466d8:	e13ffe15 	stw	r4,-8(fp)
 30466dc:	e17fff15 	stw	r5,-4(fp)
        int nNum = 0;
 30466e0:	e03ffd15 	stw	zero,-12(fp)
        int nOffset = waveGetChunkOffset(szWave, nSize, CHUNK_FORMAT);
 30466e4:	e13ffe17 	ldw	r4,-8(fp)
 30466e8:	e17fff17 	ldw	r5,-4(fp)
 30466ec:	01881d34 	movhi	r6,8308
 30466f0:	319b5984 	addi	r6,r6,28006
 30466f4:	30463640 	call	3046364 <waveGetChunkOffset>
 30466f8:	e0bffc15 	stw	r2,-16(fp)
        if (nOffset){
 30466fc:	e0bffc17 	ldw	r2,-16(fp)
 3046700:	1005003a 	cmpeq	r2,r2,zero
 3046704:	10000c1e 	bne	r2,zero,3046738 <Wave_GetChannelNum+0x70>
               PCM_FORMAT_CHUNK *pPcmChunk = (PCM_FORMAT_CHUNK *)(szWave+nOffset);
 3046708:	e0bffc17 	ldw	r2,-16(fp)
 304670c:	1007883a 	mov	r3,r2
 3046710:	e0bffe17 	ldw	r2,-8(fp)
 3046714:	1885883a 	add	r2,r3,r2
 3046718:	e0bffb15 	stw	r2,-20(fp)
               nNum = pPcmChunk->NumChannels;
 304671c:	e0bffb17 	ldw	r2,-20(fp)
 3046720:	10c00283 	ldbu	r3,10(r2)
 3046724:	108002c3 	ldbu	r2,11(r2)
 3046728:	1004923a 	slli	r2,r2,8
 304672c:	10c4b03a 	or	r2,r2,r3
 3046730:	10bfffcc 	andi	r2,r2,65535
 3046734:	e0bffd15 	stw	r2,-12(fp)
        }
        return nNum;
 3046738:	e0bffd17 	ldw	r2,-12(fp)
}
 304673c:	e037883a 	mov	sp,fp
 3046740:	dfc00117 	ldw	ra,4(sp)
 3046744:	df000017 	ldw	fp,0(sp)
 3046748:	dec00204 	addi	sp,sp,8
 304674c:	f800283a 	ret

03046750 <Wave_GetSampleBitNum>:

int Wave_GetSampleBitNum(char *szWave, const int nSize){
 3046750:	defff904 	addi	sp,sp,-28
 3046754:	dfc00615 	stw	ra,24(sp)
 3046758:	df000515 	stw	fp,20(sp)
 304675c:	df000504 	addi	fp,sp,20
 3046760:	e13ffe15 	stw	r4,-8(fp)
 3046764:	e17fff15 	stw	r5,-4(fp)
        int nNum = 0;
 3046768:	e03ffd15 	stw	zero,-12(fp)
        int nOffset = waveGetChunkOffset(szWave, nSize, CHUNK_FORMAT);
 304676c:	e13ffe17 	ldw	r4,-8(fp)
 3046770:	e17fff17 	ldw	r5,-4(fp)
 3046774:	01881d34 	movhi	r6,8308
 3046778:	319b5984 	addi	r6,r6,28006
 304677c:	30463640 	call	3046364 <waveGetChunkOffset>
 3046780:	e0bffc15 	stw	r2,-16(fp)
        if (nOffset){
 3046784:	e0bffc17 	ldw	r2,-16(fp)
 3046788:	1005003a 	cmpeq	r2,r2,zero
 304678c:	10000c1e 	bne	r2,zero,30467c0 <Wave_GetSampleBitNum+0x70>
               PCM_FORMAT_CHUNK *pPcmChunk = (PCM_FORMAT_CHUNK *)(szWave+nOffset);
 3046790:	e0bffc17 	ldw	r2,-16(fp)
 3046794:	1007883a 	mov	r3,r2
 3046798:	e0bffe17 	ldw	r2,-8(fp)
 304679c:	1885883a 	add	r2,r3,r2
 30467a0:	e0bffb15 	stw	r2,-20(fp)
               nNum = pPcmChunk->BitsPerSample;
 30467a4:	e0bffb17 	ldw	r2,-20(fp)
 30467a8:	10c00583 	ldbu	r3,22(r2)
 30467ac:	108005c3 	ldbu	r2,23(r2)
 30467b0:	1004923a 	slli	r2,r2,8
 30467b4:	10c4b03a 	or	r2,r2,r3
 30467b8:	10bfffcc 	andi	r2,r2,65535
 30467bc:	e0bffd15 	stw	r2,-12(fp)
        }
        return nNum;
 30467c0:	e0bffd17 	ldw	r2,-12(fp)
}
 30467c4:	e037883a 	mov	sp,fp
 30467c8:	dfc00117 	ldw	ra,4(sp)
 30467cc:	df000017 	ldw	fp,0(sp)
 30467d0:	dec00204 	addi	sp,sp,8
 30467d4:	f800283a 	ret

030467d8 <Wave_GetDataByteSize>:



int Wave_GetDataByteSize(char *szWave, const int nSize){
 30467d8:	defff904 	addi	sp,sp,-28
 30467dc:	dfc00615 	stw	ra,24(sp)
 30467e0:	df000515 	stw	fp,20(sp)
 30467e4:	df000504 	addi	fp,sp,20
 30467e8:	e13ffe15 	stw	r4,-8(fp)
 30467ec:	e17fff15 	stw	r5,-4(fp)
    int nNum = 0;
 30467f0:	e03ffd15 	stw	zero,-12(fp)
    int nOffset;
    nOffset = waveGetChunkOffset(szWave, nSize, CHUNK_DATA);
 30467f4:	e13ffe17 	ldw	r4,-8(fp)
 30467f8:	e17fff17 	ldw	r5,-4(fp)
 30467fc:	01985d34 	movhi	r6,24948
 3046800:	31985904 	addi	r6,r6,24932
 3046804:	30463640 	call	3046364 <waveGetChunkOffset>
 3046808:	e0bffc15 	stw	r2,-16(fp)
    if (nOffset){
 304680c:	e0bffc17 	ldw	r2,-16(fp)
 3046810:	1005003a 	cmpeq	r2,r2,zero
 3046814:	1000111e 	bne	r2,zero,304685c <Wave_GetDataByteSize+0x84>
            CHUNK *pChunk = (CHUNK *)(szWave+nOffset);
 3046818:	e0bffc17 	ldw	r2,-16(fp)
 304681c:	1007883a 	mov	r3,r2
 3046820:	e0bffe17 	ldw	r2,-8(fp)
 3046824:	1885883a 	add	r2,r3,r2
 3046828:	e0bffb15 	stw	r2,-20(fp)
            nNum = pChunk->Size;
 304682c:	e0fffb17 	ldw	r3,-20(fp)
 3046830:	19000103 	ldbu	r4,4(r3)
 3046834:	18800143 	ldbu	r2,5(r3)
 3046838:	1004923a 	slli	r2,r2,8
 304683c:	1108b03a 	or	r4,r2,r4
 3046840:	18800183 	ldbu	r2,6(r3)
 3046844:	1004943a 	slli	r2,r2,16
 3046848:	1108b03a 	or	r4,r2,r4
 304684c:	188001c3 	ldbu	r2,7(r3)
 3046850:	1004963a 	slli	r2,r2,24
 3046854:	1104b03a 	or	r2,r2,r4
 3046858:	e0bffd15 	stw	r2,-12(fp)
    }
    return nNum;
 304685c:	e0bffd17 	ldw	r2,-12(fp)
}
 3046860:	e037883a 	mov	sp,fp
 3046864:	dfc00117 	ldw	ra,4(sp)
 3046868:	df000017 	ldw	fp,0(sp)
 304686c:	dec00204 	addi	sp,sp,8
 3046870:	f800283a 	ret

03046874 <Wave_GetWaveOffset>:

int Wave_GetWaveOffset(char *szWave, const int nSize){
 3046874:	defffa04 	addi	sp,sp,-24
 3046878:	dfc00515 	stw	ra,20(sp)
 304687c:	df000415 	stw	fp,16(sp)
 3046880:	df000404 	addi	fp,sp,16
 3046884:	e13ffe15 	stw	r4,-8(fp)
 3046888:	e17fff15 	stw	r5,-4(fp)
        int nNum = 0;
 304688c:	e03ffd15 	stw	zero,-12(fp)
        int nOffset;
        nOffset = waveGetChunkOffset(szWave, nSize, CHUNK_DATA);
 3046890:	e13ffe17 	ldw	r4,-8(fp)
 3046894:	e17fff17 	ldw	r5,-4(fp)
 3046898:	01985d34 	movhi	r6,24948
 304689c:	31985904 	addi	r6,r6,24932
 30468a0:	30463640 	call	3046364 <waveGetChunkOffset>
 30468a4:	e0bffc15 	stw	r2,-16(fp)
        if (nOffset)
 30468a8:	e0bffc17 	ldw	r2,-16(fp)
 30468ac:	1005003a 	cmpeq	r2,r2,zero
 30468b0:	1000031e 	bne	r2,zero,30468c0 <Wave_GetWaveOffset+0x4c>
                nNum = nOffset + sizeof(CHUNK);
 30468b4:	e0bffc17 	ldw	r2,-16(fp)
 30468b8:	10800204 	addi	r2,r2,8
 30468bc:	e0bffd15 	stw	r2,-12(fp)
        return nNum;
 30468c0:	e0bffd17 	ldw	r2,-12(fp)

}
 30468c4:	e037883a 	mov	sp,fp
 30468c8:	dfc00117 	ldw	ra,4(sp)
 30468cc:	df000017 	ldw	fp,0(sp)
 30468d0:	dec00204 	addi	sp,sp,8
 30468d4:	f800283a 	ret

030468d8 <debug_output>:
}

#else

void debug_output(char *pMessage){
 30468d8:	defffd04 	addi	sp,sp,-12
 30468dc:	dfc00215 	stw	ra,8(sp)
 30468e0:	df000115 	stw	fp,4(sp)
 30468e4:	df000104 	addi	fp,sp,4
 30468e8:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 30468ec:	e13fff17 	ldw	r4,-4(fp)
 30468f0:	304bd0c0 	call	304bd0c <printf>
}
 30468f4:	e037883a 	mov	sp,fp
 30468f8:	dfc00117 	ldw	ra,4(sp)
 30468fc:	df000017 	ldw	fp,0(sp)
 3046900:	dec00204 	addi	sp,sp,8
 3046904:	f800283a 	ret

03046908 <myprintf>:

#endif





int myprintf(char *format, ...){
 3046908:	deff7804 	addi	sp,sp,-544
 304690c:	dfc08415 	stw	ra,528(sp)
 3046910:	df008315 	stw	fp,524(sp)
 3046914:	df008304 	addi	fp,sp,524
 3046918:	e1400215 	stw	r5,8(fp)
 304691c:	e1800315 	stw	r6,12(fp)
 3046920:	e1c00415 	stw	r7,16(fp)
 3046924:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 3046928:	e0800204 	addi	r2,fp,8
 304692c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 3046930:	e1fffe17 	ldw	r7,-8(fp)
 3046934:	e13f7e04 	addi	r4,fp,-520
 3046938:	01408004 	movi	r5,512
 304693c:	e1bfff17 	ldw	r6,-4(fp)
 3046940:	304e3b80 	call	304e3b8 <vsnprintf>
 3046944:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 3046948:	e13f7e04 	addi	r4,fp,-520
 304694c:	30468d80 	call	30468d8 <debug_output>

    return rc;    
 3046950:	e0bf7d17 	ldw	r2,-524(fp)
}
 3046954:	e037883a 	mov	sp,fp
 3046958:	dfc00117 	ldw	ra,4(sp)
 304695c:	df000017 	ldw	fp,0(sp)
 3046960:	dec00504 	addi	sp,sp,20
 3046964:	f800283a 	ret

03046968 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 3046968:	defff704 	addi	sp,sp,-36
 304696c:	dfc00815 	stw	ra,32(sp)
 3046970:	df000715 	stw	fp,28(sp)
 3046974:	df000704 	addi	fp,sp,28
 3046978:	e13ffe15 	stw	r4,-8(fp)
 304697c:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 3046980:	e03ff915 	stw	zero,-28(fp)
 3046984:	00000f06 	br	30469c4 <myprintf_hexarray+0x5c>
        sprintf(szText, "[%02X]", *(pHex+i));
 3046988:	e13ffa04 	addi	r4,fp,-24
 304698c:	e0bff917 	ldw	r2,-28(fp)
 3046990:	1007883a 	mov	r3,r2
 3046994:	e0bffe17 	ldw	r2,-8(fp)
 3046998:	1885883a 	add	r2,r3,r2
 304699c:	10800003 	ldbu	r2,0(r2)
 30469a0:	11803fcc 	andi	r6,r2,255
 30469a4:	0140c1b4 	movhi	r5,774
 30469a8:	29690704 	addi	r5,r5,-23524
 30469ac:	304c0ac0 	call	304c0ac <sprintf>
        DEBUG((szText));
 30469b0:	e13ffa04 	addi	r4,fp,-24
 30469b4:	30469080 	call	3046908 <myprintf>
 30469b8:	e0bff917 	ldw	r2,-28(fp)
 30469bc:	10800044 	addi	r2,r2,1
 30469c0:	e0bff915 	stw	r2,-28(fp)
 30469c4:	e0fff917 	ldw	r3,-28(fp)
 30469c8:	e0bfff17 	ldw	r2,-4(fp)
 30469cc:	18bfee16 	blt	r3,r2,3046988 <myprintf_hexarray+0x20>
    }
    return len;
 30469d0:	e0bfff17 	ldw	r2,-4(fp)
}
 30469d4:	e037883a 	mov	sp,fp
 30469d8:	dfc00117 	ldw	ra,4(sp)
 30469dc:	df000017 	ldw	fp,0(sp)
 30469e0:	dec00204 	addi	sp,sp,8
 30469e4:	f800283a 	ret

030469e8 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 30469e8:	defff704 	addi	sp,sp,-36
 30469ec:	dfc00815 	stw	ra,32(sp)
 30469f0:	df000715 	stw	fp,28(sp)
 30469f4:	df000704 	addi	fp,sp,28
 30469f8:	e13ffe15 	stw	r4,-8(fp)
 30469fc:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 3046a00:	e03ff915 	stw	zero,-28(fp)
 3046a04:	00001006 	br	3046a48 <myprintf_dwordarray+0x60>
        sprintf(szText, "[%08X]", *(pArray+i));
 3046a08:	e0bff917 	ldw	r2,-28(fp)
 3046a0c:	1085883a 	add	r2,r2,r2
 3046a10:	1085883a 	add	r2,r2,r2
 3046a14:	1007883a 	mov	r3,r2
 3046a18:	e0bffe17 	ldw	r2,-8(fp)
 3046a1c:	1885883a 	add	r2,r3,r2
 3046a20:	11800017 	ldw	r6,0(r2)
 3046a24:	e13ffa04 	addi	r4,fp,-24
 3046a28:	0140c1b4 	movhi	r5,774
 3046a2c:	29690904 	addi	r5,r5,-23516
 3046a30:	304c0ac0 	call	304c0ac <sprintf>
        DEBUG((szText));
 3046a34:	e13ffa04 	addi	r4,fp,-24
 3046a38:	30469080 	call	3046908 <myprintf>
 3046a3c:	e0bff917 	ldw	r2,-28(fp)
 3046a40:	10800044 	addi	r2,r2,1
 3046a44:	e0bff915 	stw	r2,-28(fp)
 3046a48:	e0fff917 	ldw	r3,-28(fp)
 3046a4c:	e0bfff17 	ldw	r2,-4(fp)
 3046a50:	18bfed16 	blt	r3,r2,3046a08 <myprintf_dwordarray+0x20>
    }
    return nElementCount;
 3046a54:	e0bfff17 	ldw	r2,-4(fp)
}
 3046a58:	e037883a 	mov	sp,fp
 3046a5c:	dfc00117 	ldw	ra,4(sp)
 3046a60:	df000017 	ldw	fp,0(sp)
 3046a64:	dec00204 	addi	sp,sp,8
 3046a68:	f800283a 	ret

03046a6c <crc16>:
    0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
alt_u16 crc16(const alt_u8 *buffer, int len){
 3046a6c:	defffb04 	addi	sp,sp,-20
 3046a70:	df000415 	stw	fp,16(sp)
 3046a74:	df000404 	addi	fp,sp,16
 3046a78:	e13ffe15 	stw	r4,-8(fp)
 3046a7c:	e17fff15 	stw	r5,-4(fp)

    int counter;
    alt_u16 crc = 0;
 3046a80:	e03ffc0d 	sth	zero,-16(fp)
    for( counter = 0; counter < len; counter++)
 3046a84:	e03ffd15 	stw	zero,-12(fp)
 3046a88:	00001a06 	br	3046af4 <crc16+0x88>
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buffer++)&0x00FF];
 3046a8c:	e0bffc0b 	ldhu	r2,-16(fp)
 3046a90:	1004923a 	slli	r2,r2,8
 3046a94:	1009883a 	mov	r4,r2
 3046a98:	e0bffc0b 	ldhu	r2,-16(fp)
 3046a9c:	1004d23a 	srli	r2,r2,8
 3046aa0:	10ffffcc 	andi	r3,r2,65535
 3046aa4:	e0bffe17 	ldw	r2,-8(fp)
 3046aa8:	10800003 	ldbu	r2,0(r2)
 3046aac:	10803fcc 	andi	r2,r2,255
 3046ab0:	1080201c 	xori	r2,r2,128
 3046ab4:	10bfe004 	addi	r2,r2,-128
 3046ab8:	1884f03a 	xor	r2,r3,r2
 3046abc:	10803fcc 	andi	r2,r2,255
 3046ac0:	00c0c1b4 	movhi	r3,774
 3046ac4:	18e90b04 	addi	r3,r3,-23508
 3046ac8:	1085883a 	add	r2,r2,r2
 3046acc:	10c5883a 	add	r2,r2,r3
 3046ad0:	1080000b 	ldhu	r2,0(r2)
 3046ad4:	2084f03a 	xor	r2,r4,r2
 3046ad8:	e0bffc0d 	sth	r2,-16(fp)
 3046adc:	e0bffe17 	ldw	r2,-8(fp)
 3046ae0:	10800044 	addi	r2,r2,1
 3046ae4:	e0bffe15 	stw	r2,-8(fp)
 3046ae8:	e0bffd17 	ldw	r2,-12(fp)
 3046aec:	10800044 	addi	r2,r2,1
 3046af0:	e0bffd15 	stw	r2,-12(fp)
 3046af4:	e0fffd17 	ldw	r3,-12(fp)
 3046af8:	e0bfff17 	ldw	r2,-4(fp)
 3046afc:	18bfe316 	blt	r3,r2,3046a8c <crc16+0x20>
    return crc;
 3046b00:	e0bffc0b 	ldhu	r2,-16(fp)
}
 3046b04:	e037883a 	mov	sp,fp
 3046b08:	df000017 	ldw	fp,0(sp)
 3046b0c:	dec00104 	addi	sp,sp,4
 3046b10:	f800283a 	ret

03046b14 <crc7_byte>:
      0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};

alt_u8 crc7_byte(alt_u8 crc, alt_u8 data)
{
 3046b14:	defffd04 	addi	sp,sp,-12
 3046b18:	df000215 	stw	fp,8(sp)
 3046b1c:	df000204 	addi	fp,sp,8
 3046b20:	e13ffe05 	stb	r4,-8(fp)
 3046b24:	e17fff05 	stb	r5,-4(fp)
        return crc7_syndrome_table[(crc << 1) ^ data];
 3046b28:	e0bffe03 	ldbu	r2,-8(fp)
 3046b2c:	1085883a 	add	r2,r2,r2
 3046b30:	1007883a 	mov	r3,r2
 3046b34:	e0bfff03 	ldbu	r2,-4(fp)
 3046b38:	1886f03a 	xor	r3,r3,r2
 3046b3c:	0080c1b4 	movhi	r2,774
 3046b40:	10a98b04 	addi	r2,r2,-22996
 3046b44:	10c5883a 	add	r2,r2,r3
 3046b48:	10800003 	ldbu	r2,0(r2)
 3046b4c:	10803fcc 	andi	r2,r2,255
}
 3046b50:	e037883a 	mov	sp,fp
 3046b54:	df000017 	ldw	fp,0(sp)
 3046b58:	dec00104 	addi	sp,sp,4
 3046b5c:	f800283a 	ret

03046b60 <crc7>:


/**
 * crc7 - update the CRC7 for the data buffer
 * @crc:     previous CRC7 value
 * @buffer:  data pointer
 * @len:     number of bytes in the buffer
 * Context: any
 *
 * Returns the updated CRC7 value.
 */
alt_u8 crc7(alt_u8 crc, const alt_u8 *buffer, int len)
{
 3046b60:	defffb04 	addi	sp,sp,-20
 3046b64:	dfc00415 	stw	ra,16(sp)
 3046b68:	df000315 	stw	fp,12(sp)
 3046b6c:	df000304 	addi	fp,sp,12
 3046b70:	e17ffe15 	stw	r5,-8(fp)
 3046b74:	e1bfff15 	stw	r6,-4(fp)
 3046b78:	e13ffd05 	stb	r4,-12(fp)
      while (len--)
 3046b7c:	00000906 	br	3046ba4 <crc7+0x44>
            crc = crc7_byte(crc, *buffer++);
 3046b80:	e13ffd03 	ldbu	r4,-12(fp)
 3046b84:	e0bffe17 	ldw	r2,-8(fp)
 3046b88:	10800003 	ldbu	r2,0(r2)
 3046b8c:	11403fcc 	andi	r5,r2,255
 3046b90:	e0bffe17 	ldw	r2,-8(fp)
 3046b94:	10800044 	addi	r2,r2,1
 3046b98:	e0bffe15 	stw	r2,-8(fp)
 3046b9c:	3046b140 	call	3046b14 <crc7_byte>
 3046ba0:	e0bffd05 	stb	r2,-12(fp)
 3046ba4:	e0bfff17 	ldw	r2,-4(fp)
 3046ba8:	10bfffc4 	addi	r2,r2,-1
 3046bac:	e0bfff15 	stw	r2,-4(fp)
 3046bb0:	e0bfff17 	ldw	r2,-4(fp)
 3046bb4:	10bfffd8 	cmpnei	r2,r2,-1
 3046bb8:	103ff11e 	bne	r2,zero,3046b80 <crc7+0x20>
      return crc;
 3046bbc:	e0bffd03 	ldbu	r2,-12(fp)
}
 3046bc0:	e037883a 	mov	sp,fp
 3046bc4:	dfc00117 	ldw	ra,4(sp)
 3046bc8:	df000017 	ldw	fp,0(sp)
 3046bcc:	dec00204 	addi	sp,sp,8
 3046bd0:	f800283a 	ret

03046bd4 <SDHAL_IsSupport4Bits>:
#include "sd_hw.h"
#include "crc16.h"


bool SDHAL_IsSupport4Bits(void){
 3046bd4:	defffe04 	addi	sp,sp,-8
 3046bd8:	df000115 	stw	fp,4(sp)
 3046bdc:	df000104 	addi	fp,sp,4
    bool bYes = FALSE;
 3046be0:	e03fff15 	stw	zero,-4(fp)
#ifdef SD_4BIT_MODE
    bYes = TRUE;
 3046be4:	00800044 	movi	r2,1
 3046be8:	e0bfff15 	stw	r2,-4(fp)
#endif    
    return bYes;
 3046bec:	e0bfff17 	ldw	r2,-4(fp)
}
 3046bf0:	e037883a 	mov	sp,fp
 3046bf4:	df000017 	ldw	fp,0(sp)
 3046bf8:	dec00104 	addi	sp,sp,4
 3046bfc:	f800283a 	ret

03046c00 <SDHAL_Init>:

void SDHAL_Init(void){
 3046c00:	deffff04 	addi	sp,sp,-4
 3046c04:	df000015 	stw	fp,0(sp)
 3046c08:	d839883a 	mov	fp,sp
    SD_CMD_OUT;
 3046c0c:	00c04034 	movhi	r3,256
 3046c10:	18c04104 	addi	r3,r3,260
 3046c14:	00800044 	movi	r2,1
 3046c18:	18800035 	stwio	r2,0(r3)
    SD_DAT_IN;
 3046c1c:	00804034 	movhi	r2,256
 3046c20:	10804504 	addi	r2,r2,276
 3046c24:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
 3046c28:	00c04034 	movhi	r3,256
 3046c2c:	18c03c04 	addi	r3,r3,240
 3046c30:	00800044 	movi	r2,1
 3046c34:	18800035 	stwio	r2,0(r3)
    SD_CMD_HIGH;
 3046c38:	00c04034 	movhi	r3,256
 3046c3c:	18c04004 	addi	r3,r3,256
 3046c40:	00800044 	movi	r2,1
 3046c44:	18800035 	stwio	r2,0(r3)
    SD_DAT_LOW;    
 3046c48:	00804034 	movhi	r2,256
 3046c4c:	10804404 	addi	r2,r2,272
 3046c50:	10000035 	stwio	zero,0(r2)
}
 3046c54:	e037883a 	mov	sp,fp
 3046c58:	df000017 	ldw	fp,0(sp)
 3046c5c:	dec00104 	addi	sp,sp,4
 3046c60:	f800283a 	ret

03046c64 <SDHAL_SendCmd>:

void SDHAL_SendCmd(alt_u8 szCommand[6], int nCmdLen){
 3046c64:	defffa04 	addi	sp,sp,-24
 3046c68:	df000515 	stw	fp,20(sp)
 3046c6c:	df000504 	addi	fp,sp,20
 3046c70:	e13ffe15 	stw	r4,-8(fp)
 3046c74:	e17fff15 	stw	r5,-4(fp)

    int i, k;
    alt_u8 Mask, Data;
    
    SD_CMD_OUT;
 3046c78:	00c04034 	movhi	r3,256
 3046c7c:	18c04104 	addi	r3,r3,260
 3046c80:	00800044 	movi	r2,1
 3046c84:	18800035 	stwio	r2,0(r3)
    for(i=0;i<nCmdLen;i++){
 3046c88:	e03ffd15 	stw	zero,-12(fp)
 3046c8c:	00002b06 	br	3046d3c <SDHAL_SendCmd+0xd8>
        Mask = 0x80;
 3046c90:	00bfe004 	movi	r2,-128
 3046c94:	e0bffb45 	stb	r2,-19(fp)
        Data = szCommand[i];
 3046c98:	e0bffd17 	ldw	r2,-12(fp)
 3046c9c:	1007883a 	mov	r3,r2
 3046ca0:	e0bffe17 	ldw	r2,-8(fp)
 3046ca4:	1885883a 	add	r2,r3,r2
 3046ca8:	10800003 	ldbu	r2,0(r2)
 3046cac:	e0bffb05 	stb	r2,-20(fp)
        for(k=0;k<8;k++){
 3046cb0:	e03ffc15 	stw	zero,-16(fp)
 3046cb4:	00001b06 	br	3046d24 <SDHAL_SendCmd+0xc0>
            SD_CLK_LOW;
 3046cb8:	00804034 	movhi	r2,256
 3046cbc:	10803c04 	addi	r2,r2,240
 3046cc0:	10000035 	stwio	zero,0(r2)
            if (Data & Mask)
 3046cc4:	e0fffb03 	ldbu	r3,-20(fp)
 3046cc8:	e0bffb43 	ldbu	r2,-19(fp)
 3046ccc:	1884703a 	and	r2,r3,r2
 3046cd0:	10803fcc 	andi	r2,r2,255
 3046cd4:	1005003a 	cmpeq	r2,r2,zero
 3046cd8:	1000051e 	bne	r2,zero,3046cf0 <SDHAL_SendCmd+0x8c>
                SD_CMD_HIGH;
 3046cdc:	00c04034 	movhi	r3,256
 3046ce0:	18c04004 	addi	r3,r3,256
 3046ce4:	00800044 	movi	r2,1
 3046ce8:	18800035 	stwio	r2,0(r3)
 3046cec:	00000306 	br	3046cfc <SDHAL_SendCmd+0x98>
            else
                SD_CMD_LOW;
 3046cf0:	00804034 	movhi	r2,256
 3046cf4:	10804004 	addi	r2,r2,256
 3046cf8:	10000035 	stwio	zero,0(r2)
            SD_CLK_HIGH;    
 3046cfc:	00c04034 	movhi	r3,256
 3046d00:	18c03c04 	addi	r3,r3,240
 3046d04:	00800044 	movi	r2,1
 3046d08:	18800035 	stwio	r2,0(r3)
            //    
            Mask >>= 1;
 3046d0c:	e0bffb43 	ldbu	r2,-19(fp)
 3046d10:	1004d07a 	srli	r2,r2,1
 3046d14:	e0bffb45 	stb	r2,-19(fp)
 3046d18:	e0bffc17 	ldw	r2,-16(fp)
 3046d1c:	10800044 	addi	r2,r2,1
 3046d20:	e0bffc15 	stw	r2,-16(fp)
 3046d24:	e0bffc17 	ldw	r2,-16(fp)
 3046d28:	10800210 	cmplti	r2,r2,8
 3046d2c:	103fe21e 	bne	r2,zero,3046cb8 <SDHAL_SendCmd+0x54>
 3046d30:	e0bffd17 	ldw	r2,-12(fp)
 3046d34:	10800044 	addi	r2,r2,1
 3046d38:	e0bffd15 	stw	r2,-12(fp)
 3046d3c:	e0fffd17 	ldw	r3,-12(fp)
 3046d40:	e0bfff17 	ldw	r2,-4(fp)
 3046d44:	18bfd216 	blt	r3,r2,3046c90 <SDHAL_SendCmd+0x2c>
           // usleep(1);
        }
    }
}
 3046d48:	e037883a 	mov	sp,fp
 3046d4c:	df000017 	ldw	fp,0(sp)
 3046d50:	dec00104 	addi	sp,sp,4
 3046d54:	f800283a 	ret

03046d58 <SDHAL_GetResponse>:




bool SDHAL_GetResponse(alt_u8 szResponse[], int nLen){
 3046d58:	defff104 	addi	sp,sp,-60
 3046d5c:	dfc00e15 	stw	ra,56(sp)
 3046d60:	df000d15 	stw	fp,52(sp)
 3046d64:	df000d04 	addi	fp,sp,52
 3046d68:	e13ffa15 	stw	r4,-24(fp)
 3046d6c:	e17ffb15 	stw	r5,-20(fp)
    bool bDone, bTimeout;
    const int nMaxCnt = 20; // !!!! Note. the value should be large than 8
 3046d70:	00800504 	movi	r2,20
 3046d74:	e0bff715 	stw	r2,-36(fp)
    int nCnt, nBitCnt, nIndex;
    alt_u8 Value;
    

    SD_CMD_IN;
 3046d78:	00804034 	movhi	r2,256
 3046d7c:	10804104 	addi	r2,r2,260
 3046d80:	10000035 	stwio	zero,0(r2)
    
    //===== check start bit == 0
    nCnt = 0;
 3046d84:	e03ff615 	stw	zero,-40(fp)
    bDone = FALSE;
 3046d88:	e03ff915 	stw	zero,-28(fp)
    bTimeout = FALSE;
 3046d8c:	e03ff815 	stw	zero,-32(fp)
    while(!bDone && !bTimeout){
 3046d90:	00001b06 	br	3046e00 <SDHAL_GetResponse+0xa8>
        SD_CLK_LOW;
 3046d94:	00804034 	movhi	r2,256
 3046d98:	10803c04 	addi	r2,r2,240
 3046d9c:	10000035 	stwio	zero,0(r2)
        SD_CLK_HIGH;
 3046da0:	00c04034 	movhi	r3,256
 3046da4:	18c03c04 	addi	r3,r3,240
 3046da8:	00800044 	movi	r2,1
 3046dac:	18800035 	stwio	r2,0(r3)
        if(!(SD_TEST_CMD))
 3046db0:	00804034 	movhi	r2,256
 3046db4:	10804004 	addi	r2,r2,256
 3046db8:	10800037 	ldwio	r2,0(r2)
 3046dbc:	1004c03a 	cmpne	r2,r2,zero
 3046dc0:	1000031e 	bne	r2,zero,3046dd0 <SDHAL_GetResponse+0x78>
            bDone = TRUE;
 3046dc4:	00800044 	movi	r2,1
 3046dc8:	e0bff915 	stw	r2,-28(fp)
 3046dcc:	00000c06 	br	3046e00 <SDHAL_GetResponse+0xa8>
        else if(nCnt++ > nMaxCnt)
 3046dd0:	e0fff617 	ldw	r3,-40(fp)
 3046dd4:	e0bff717 	ldw	r2,-36(fp)
 3046dd8:	10c4803a 	cmplt	r2,r2,r3
 3046ddc:	1007883a 	mov	r3,r2
 3046de0:	e0bff617 	ldw	r2,-40(fp)
 3046de4:	10800044 	addi	r2,r2,1
 3046de8:	e0bff615 	stw	r2,-40(fp)
 3046dec:	18803fcc 	andi	r2,r3,255
 3046df0:	1005003a 	cmpeq	r2,r2,zero
 3046df4:	1000021e 	bne	r2,zero,3046e00 <SDHAL_GetResponse+0xa8>
            bTimeout = TRUE;
 3046df8:	00800044 	movi	r2,1
 3046dfc:	e0bff815 	stw	r2,-32(fp)
 3046e00:	e0bff917 	ldw	r2,-28(fp)
 3046e04:	1004c03a 	cmpne	r2,r2,zero
 3046e08:	1000031e 	bne	r2,zero,3046e18 <SDHAL_GetResponse+0xc0>
 3046e0c:	e0bff817 	ldw	r2,-32(fp)
 3046e10:	1005003a 	cmpeq	r2,r2,zero
 3046e14:	103fdf1e 	bne	r2,zero,3046d94 <SDHAL_GetResponse+0x3c>
    }
    
    if (!bDone || bTimeout)
 3046e18:	e0bff917 	ldw	r2,-28(fp)
 3046e1c:	1005003a 	cmpeq	r2,r2,zero
 3046e20:	1000031e 	bne	r2,zero,3046e30 <SDHAL_GetResponse+0xd8>
 3046e24:	e0bff817 	ldw	r2,-32(fp)
 3046e28:	1005003a 	cmpeq	r2,r2,zero
 3046e2c:	1000021e 	bne	r2,zero,3046e38 <SDHAL_GetResponse+0xe0>
        return FALSE;
 3046e30:	e03ffc15 	stw	zero,-16(fp)
 3046e34:	00006a06 	br	3046fe0 <SDHAL_GetResponse+0x288>
  
    //===== check transmitter bit == 0

    SD_CLK_LOW;
 3046e38:	00804034 	movhi	r2,256
 3046e3c:	10803c04 	addi	r2,r2,240
 3046e40:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
 3046e44:	00c04034 	movhi	r3,256
 3046e48:	18c03c04 	addi	r3,r3,240
 3046e4c:	00800044 	movi	r2,1
 3046e50:	18800035 	stwio	r2,0(r3)
    if (SD_TEST_CMD)
 3046e54:	00804034 	movhi	r2,256
 3046e58:	10804004 	addi	r2,r2,256
 3046e5c:	10800037 	ldwio	r2,0(r2)
 3046e60:	1005003a 	cmpeq	r2,r2,zero
 3046e64:	1000021e 	bne	r2,zero,3046e70 <SDHAL_GetResponse+0x118>
        return FALSE;   // 0 is expected
 3046e68:	e03ffc15 	stw	zero,-16(fp)
 3046e6c:	00005c06 	br	3046fe0 <SDHAL_GetResponse+0x288>

    
    //===== read content + CRC + end-bits ======
    nIndex = 2;
 3046e70:	00800084 	movi	r2,2
 3046e74:	e0bff415 	stw	r2,-48(fp)
    nBitCnt = nLen*8;
 3046e78:	e0bffb17 	ldw	r2,-20(fp)
 3046e7c:	100490fa 	slli	r2,r2,3
 3046e80:	e0bff515 	stw	r2,-44(fp)
    bDone = FALSE;
 3046e84:	e03ff915 	stw	zero,-28(fp)
    Value = 0;
 3046e88:	e03ff305 	stb	zero,-52(fp)
    while(nIndex < nBitCnt){
 3046e8c:	00004d06 	br	3046fc4 <SDHAL_GetResponse+0x26c>
        SD_CLK_LOW;
 3046e90:	00804034 	movhi	r2,256
 3046e94:	10803c04 	addi	r2,r2,240
 3046e98:	10000035 	stwio	zero,0(r2)
        SD_CLK_HIGH;
 3046e9c:	00c04034 	movhi	r3,256
 3046ea0:	18c03c04 	addi	r3,r3,240
 3046ea4:	00800044 	movi	r2,1
 3046ea8:	18800035 	stwio	r2,0(r3)
        if (SD_TEST_CMD){
 3046eac:	00804034 	movhi	r2,256
 3046eb0:	10804004 	addi	r2,r2,256
 3046eb4:	10800037 	ldwio	r2,0(r2)
 3046eb8:	1005003a 	cmpeq	r2,r2,zero
 3046ebc:	1000191e 	bne	r2,zero,3046f24 <SDHAL_GetResponse+0x1cc>
            Value |= 0x80 >> (nIndex % 8);
 3046ec0:	e0bff417 	ldw	r2,-48(fp)
 3046ec4:	00e00034 	movhi	r3,32768
 3046ec8:	18c001c4 	addi	r3,r3,7
 3046ecc:	10c4703a 	and	r2,r2,r3
 3046ed0:	e0bffd15 	stw	r2,-12(fp)
 3046ed4:	e0fffd17 	ldw	r3,-12(fp)
 3046ed8:	1804403a 	cmpge	r2,r3,zero
 3046edc:	10000a1e 	bne	r2,zero,3046f08 <SDHAL_GetResponse+0x1b0>
 3046ee0:	e0bffd17 	ldw	r2,-12(fp)
 3046ee4:	10bfffc4 	addi	r2,r2,-1
 3046ee8:	e0bffd15 	stw	r2,-12(fp)
 3046eec:	00bffe04 	movi	r2,-8
 3046ef0:	e0fffd17 	ldw	r3,-12(fp)
 3046ef4:	1886b03a 	or	r3,r3,r2
 3046ef8:	e0fffd15 	stw	r3,-12(fp)
 3046efc:	e0bffd17 	ldw	r2,-12(fp)
 3046f00:	10800044 	addi	r2,r2,1
 3046f04:	e0bffd15 	stw	r2,-12(fp)
 3046f08:	e0fffd17 	ldw	r3,-12(fp)
 3046f0c:	00802004 	movi	r2,128
 3046f10:	10c5d83a 	sra	r2,r2,r3
 3046f14:	1007883a 	mov	r3,r2
 3046f18:	e0bff303 	ldbu	r2,-52(fp)
 3046f1c:	1884b03a 	or	r2,r3,r2
 3046f20:	e0bff305 	stb	r2,-52(fp)
        }
        if (nIndex%8 == 7){
 3046f24:	e0bff417 	ldw	r2,-48(fp)
 3046f28:	00e00034 	movhi	r3,32768
 3046f2c:	18c001c4 	addi	r3,r3,7
 3046f30:	10c4703a 	and	r2,r2,r3
 3046f34:	e0bffe15 	stw	r2,-8(fp)
 3046f38:	e0fffe17 	ldw	r3,-8(fp)
 3046f3c:	1804403a 	cmpge	r2,r3,zero
 3046f40:	10000a1e 	bne	r2,zero,3046f6c <SDHAL_GetResponse+0x214>
 3046f44:	e0bffe17 	ldw	r2,-8(fp)
 3046f48:	10bfffc4 	addi	r2,r2,-1
 3046f4c:	e0bffe15 	stw	r2,-8(fp)
 3046f50:	00bffe04 	movi	r2,-8
 3046f54:	e0fffe17 	ldw	r3,-8(fp)
 3046f58:	1886b03a 	or	r3,r3,r2
 3046f5c:	e0fffe15 	stw	r3,-8(fp)
 3046f60:	e0bffe17 	ldw	r2,-8(fp)
 3046f64:	10800044 	addi	r2,r2,1
 3046f68:	e0bffe15 	stw	r2,-8(fp)
 3046f6c:	e0bffe17 	ldw	r2,-8(fp)
 3046f70:	108001d8 	cmpnei	r2,r2,7
 3046f74:	1000101e 	bne	r2,zero,3046fb8 <SDHAL_GetResponse+0x260>
            szResponse[nIndex/8] = Value;
 3046f78:	e0bff417 	ldw	r2,-48(fp)
 3046f7c:	e0bfff15 	stw	r2,-4(fp)
 3046f80:	e0ffff17 	ldw	r3,-4(fp)
 3046f84:	1804403a 	cmpge	r2,r3,zero
 3046f88:	1000031e 	bne	r2,zero,3046f98 <SDHAL_GetResponse+0x240>
 3046f8c:	e0bfff17 	ldw	r2,-4(fp)
 3046f90:	108001c4 	addi	r2,r2,7
 3046f94:	e0bfff15 	stw	r2,-4(fp)
 3046f98:	e0ffff17 	ldw	r3,-4(fp)
 3046f9c:	1805d0fa 	srai	r2,r3,3
 3046fa0:	1007883a 	mov	r3,r2
 3046fa4:	e0bffa17 	ldw	r2,-24(fp)
 3046fa8:	1887883a 	add	r3,r3,r2
 3046fac:	e0bff303 	ldbu	r2,-52(fp)
 3046fb0:	18800005 	stb	r2,0(r3)
            Value = 0;
 3046fb4:	e03ff305 	stb	zero,-52(fp)
        }
        nIndex++;
 3046fb8:	e0bff417 	ldw	r2,-48(fp)
 3046fbc:	10800044 	addi	r2,r2,1
 3046fc0:	e0bff415 	stw	r2,-48(fp)
 3046fc4:	e0fff417 	ldw	r3,-48(fp)
 3046fc8:	e0bff517 	ldw	r2,-44(fp)
 3046fcc:	18bfb016 	blt	r3,r2,3046e90 <SDHAL_GetResponse+0x138>
    } 
    
    // A command with response. 8 clocks after the card response end bit.
    SDHAL_DummyClock(8);
 3046fd0:	01000204 	movi	r4,8
 3046fd4:	304732c0 	call	304732c <SDHAL_DummyClock>
    
    return TRUE;
 3046fd8:	00800044 	movi	r2,1
 3046fdc:	e0bffc15 	stw	r2,-16(fp)
 3046fe0:	e0bffc17 	ldw	r2,-16(fp)
}
 3046fe4:	e037883a 	mov	sp,fp
 3046fe8:	dfc00117 	ldw	ra,4(sp)
 3046fec:	df000017 	ldw	fp,0(sp)
 3046ff0:	dec00204 	addi	sp,sp,8
 3046ff4:	f800283a 	ret

03046ff8 <SDHAL_ReadData>:


bool SDHAL_ReadData(alt_u8 szBuf[], int nBufLen){
 3046ff8:	defff604 	addi	sp,sp,-40
 3046ffc:	df000915 	stw	fp,36(sp)
 3047000:	df000904 	addi	fp,sp,36
 3047004:	e13ffd15 	stw	r4,-12(fp)
 3047008:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
 304700c:	00800044 	movi	r2,1
 3047010:	e0bffc15 	stw	r2,-16(fp)
    int nTry = 0;
 3047014:	e03ffb15 	stw	zero,-20(fp)
    const  int nMaxTry = 9000;
 3047018:	0088ca04 	movi	r2,9000
 304701c:	e0bffa15 	stw	r2,-24(fp)
    int i, j;   
    alt_u8 Data8;
#ifndef SD_4BIT_MODE     
    alt_u16 DataCrc16, MyCrc16;
#endif    
    
    SD_DAT_IN;
 3047020:	00804034 	movhi	r2,256
 3047024:	10804504 	addi	r2,r2,276
 3047028:	10000035 	stwio	zero,0(r2)
    
    // wait start bits (zero)
    while(1){
      SD_CLK_LOW;
 304702c:	00804034 	movhi	r2,256
 3047030:	10803c04 	addi	r2,r2,240
 3047034:	10000035 	stwio	zero,0(r2)
      SD_CLK_HIGH;
 3047038:	00c04034 	movhi	r3,256
 304703c:	18c03c04 	addi	r3,r3,240
 3047040:	00800044 	movi	r2,1
 3047044:	18800035 	stwio	r2,0(r3)
#ifdef SD_4BIT_MODE
      if((SD_TEST_DAT & 0x0F) == 0x00) // check start bits (zero is expected)
 3047048:	00804034 	movhi	r2,256
 304704c:	10804404 	addi	r2,r2,272
 3047050:	10800037 	ldwio	r2,0(r2)
 3047054:	108003cc 	andi	r2,r2,15
 3047058:	1005003a 	cmpeq	r2,r2,zero
 304705c:	10000c1e 	bne	r2,zero,3047090 <SDHAL_ReadData+0x98>
#else      
      if((SD_TEST_DAT & 0x01) == 0x00) // check start bits (zero is expected)
#endif      
        break;
      if (nTry++ > nMaxTry)
 3047060:	e0fffb17 	ldw	r3,-20(fp)
 3047064:	e0bffa17 	ldw	r2,-24(fp)
 3047068:	10c4803a 	cmplt	r2,r2,r3
 304706c:	1007883a 	mov	r3,r2
 3047070:	e0bffb17 	ldw	r2,-20(fp)
 3047074:	10800044 	addi	r2,r2,1
 3047078:	e0bffb15 	stw	r2,-20(fp)
 304707c:	18803fcc 	andi	r2,r3,255
 3047080:	1005003a 	cmpeq	r2,r2,zero
 3047084:	103fe91e 	bne	r2,zero,304702c <SDHAL_ReadData+0x34>
        return FALSE;        
 3047088:	e03fff15 	stw	zero,-4(fp)
 304708c:	00002b06 	br	304713c <SDHAL_ReadData+0x144>
    }    
    
    // read data (512byte = 1 block)
    for(i=0;i<nBufLen;i++)
 3047090:	e03ff915 	stw	zero,-28(fp)
 3047094:	00002406 	br	3047128 <SDHAL_ReadData+0x130>
    {
      Data8 = 0;
 3047098:	e03ff705 	stb	zero,-36(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
 304709c:	e03ff815 	stw	zero,-32(fp)
 30470a0:	00001506 	br	30470f8 <SDHAL_ReadData+0x100>
      {
        SD_CLK_LOW;
 30470a4:	00804034 	movhi	r2,256
 30470a8:	10803c04 	addi	r2,r2,240
 30470ac:	10000035 	stwio	zero,0(r2)
        SD_CLK_HIGH;
 30470b0:	00c04034 	movhi	r3,256
 30470b4:	18c03c04 	addi	r3,r3,240
 30470b8:	00800044 	movi	r2,1
 30470bc:	18800035 	stwio	r2,0(r3)
        Data8 <<= 4; 
 30470c0:	e0bff703 	ldbu	r2,-36(fp)
 30470c4:	1004913a 	slli	r2,r2,4
 30470c8:	e0bff705 	stb	r2,-36(fp)
        Data8 |= (SD_TEST_DAT & 0x0F);
 30470cc:	00804034 	movhi	r2,256
 30470d0:	10804404 	addi	r2,r2,272
 30470d4:	10800037 	ldwio	r2,0(r2)
 30470d8:	108003cc 	andi	r2,r2,15
 30470dc:	1007883a 	mov	r3,r2
 30470e0:	e0bff703 	ldbu	r2,-36(fp)
 30470e4:	1884b03a 	or	r2,r3,r2
 30470e8:	e0bff705 	stb	r2,-36(fp)
 30470ec:	e0bff817 	ldw	r2,-32(fp)
 30470f0:	10800044 	addi	r2,r2,1
 30470f4:	e0bff815 	stw	r2,-32(fp)
 30470f8:	e0bff817 	ldw	r2,-32(fp)
 30470fc:	10800090 	cmplti	r2,r2,2
 3047100:	103fe81e 	bne	r2,zero,30470a4 <SDHAL_ReadData+0xac>
      } 
#else      
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
        SD_CLK_HIGH;
        Data8 <<= 1; 
        if(SD_TEST_DAT & 0x01)  // check bit0
            Data8 |= 0x01;
      } 
#endif  

      szBuf[i]=Data8;
 3047104:	e0bff917 	ldw	r2,-28(fp)
 3047108:	1007883a 	mov	r3,r2
 304710c:	e0bffd17 	ldw	r2,-12(fp)
 3047110:	1887883a 	add	r3,r3,r2
 3047114:	e0bff703 	ldbu	r2,-36(fp)
 3047118:	18800005 	stb	r2,0(r3)
 304711c:	e0bff917 	ldw	r2,-28(fp)
 3047120:	10800044 	addi	r2,r2,1
 3047124:	e0bff915 	stw	r2,-28(fp)
 3047128:	e0fff917 	ldw	r3,-28(fp)
 304712c:	e0bffe17 	ldw	r2,-8(fp)
 3047130:	18bfd916 	blt	r3,r2,3047098 <SDHAL_ReadData+0xa0>
    }

    //===== CRC16 and end-bit check (each channel is seperated)
#ifdef SD_4BIT_MODE 
    // Not implement yet
#else
    // read rcr
    DataCrc16 = 0;
    for(i=0;i<16;i++){
        SD_CLK_LOW;
        SD_CLK_HIGH;
        DataCrc16 <<= 1;
        if (SD_TEST_DAT & 0x01)
            DataCrc16 |= 0x01;
    }
    
    // check end bit (value 'one' is expected
    SD_CLK_LOW;
    SD_CLK_HIGH;
    if ((SD_TEST_DAT & 0x01) != 0x01)
        bSuccess = FALSE;
     
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
     
    // check crc    
    if (bSuccess){
        MyCrc16 = crc16(szBuf, nBufLen);
        if (MyCrc16 != DataCrc16)
            bSuccess = FALSE;
    }            
    
#endif

    
    return bSuccess;
 3047134:	e0bffc17 	ldw	r2,-16(fp)
 3047138:	e0bfff15 	stw	r2,-4(fp)
 304713c:	e0bfff17 	ldw	r2,-4(fp)
    
}
 3047140:	e037883a 	mov	sp,fp
 3047144:	df000017 	ldw	fp,0(sp)
 3047148:	dec00104 	addi	sp,sp,4
 304714c:	f800283a 	ret

03047150 <SDHAL_WriteData>:

bool SDHAL_WriteData(alt_u8 szDataWrite[], int nDataLen){
 3047150:	defff704 	addi	sp,sp,-36
 3047154:	dfc00815 	stw	ra,32(sp)
 3047158:	df000715 	stw	fp,28(sp)
 304715c:	df000704 	addi	fp,sp,28
 3047160:	e13ffe15 	stw	r4,-8(fp)
 3047164:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
 3047168:	00800044 	movi	r2,1
 304716c:	e0bffd15 	stw	r2,-12(fp)
  //  int nTry = 0;
  //  const int nMaxTry = 5000; 
    int i, j;   
    alt_u8 Data8;
    alt_u16 DataCrc16;
    
    DataCrc16 = crc16(szDataWrite, nDataLen);
 3047170:	e13ffe17 	ldw	r4,-8(fp)
 3047174:	e17fff17 	ldw	r5,-4(fp)
 3047178:	3046a6c0 	call	3046a6c <crc16>
 304717c:	e0bffa0d 	sth	r2,-24(fp)
    
    /*
    // wait ready
    while(1){
      SD_CLK_LOW;
      SD_CLK_HIGH;
      if((SD_TEST_DAT & 0x01) == 0x00) // check bit0 
        break;
      if (nTry++ > nMaxTry)
        return FALSE;        
    } */    
    
    SD_DAT_OUT;
 3047180:	00c04034 	movhi	r3,256
 3047184:	18c04504 	addi	r3,r3,276
 3047188:	00800044 	movi	r2,1
 304718c:	18800035 	stwio	r2,0(r3)
    // start bits (zero value)
    SD_CLK_LOW;
 3047190:	00804034 	movhi	r2,256
 3047194:	10803c04 	addi	r2,r2,240
 3047198:	10000035 	stwio	zero,0(r2)
    SD_DAT_WRITE(0x00);  
 304719c:	00804034 	movhi	r2,256
 30471a0:	10804404 	addi	r2,r2,272
 30471a4:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
 30471a8:	00c04034 	movhi	r3,256
 30471ac:	18c03c04 	addi	r3,r3,240
 30471b0:	00800044 	movi	r2,1
 30471b4:	18800035 	stwio	r2,0(r3)
    
    // write data (512byte = 1 block)
    for(i=0;i<nDataLen;i++)
 30471b8:	e03ffc15 	stw	zero,-16(fp)
 30471bc:	00002206 	br	3047248 <SDHAL_WriteData+0xf8>
    {
      Data8 = szDataWrite[i];
 30471c0:	e0bffc17 	ldw	r2,-16(fp)
 30471c4:	1007883a 	mov	r3,r2
 30471c8:	e0bffe17 	ldw	r2,-8(fp)
 30471cc:	1885883a 	add	r2,r3,r2
 30471d0:	10800003 	ldbu	r2,0(r2)
 30471d4:	e0bffa85 	stb	r2,-22(fp)
#ifdef SD_4BIT_MODE
      for(j=0;j<2;j++)
 30471d8:	e03ffb15 	stw	zero,-20(fp)
 30471dc:	00001406 	br	3047230 <SDHAL_WriteData+0xe0>
      {
        SD_CLK_LOW;
 30471e0:	00804034 	movhi	r2,256
 30471e4:	10803c04 	addi	r2,r2,240
 30471e8:	10000035 	stwio	zero,0(r2)
        //
        SD_DAT_WRITE((Data8 >> 4) & 0x0F);
 30471ec:	e0bffa83 	ldbu	r2,-22(fp)
 30471f0:	1004d13a 	srli	r2,r2,4
 30471f4:	10803fcc 	andi	r2,r2,255
 30471f8:	10c003cc 	andi	r3,r2,15
 30471fc:	00804034 	movhi	r2,256
 3047200:	10804404 	addi	r2,r2,272
 3047204:	10c00035 	stwio	r3,0(r2)
        //            
        SD_CLK_HIGH;
 3047208:	00c04034 	movhi	r3,256
 304720c:	18c03c04 	addi	r3,r3,240
 3047210:	00800044 	movi	r2,1
 3047214:	18800035 	stwio	r2,0(r3)
        Data8 <<= 4; 
 3047218:	e0bffa83 	ldbu	r2,-22(fp)
 304721c:	1004913a 	slli	r2,r2,4
 3047220:	e0bffa85 	stb	r2,-22(fp)
 3047224:	e0bffb17 	ldw	r2,-20(fp)
 3047228:	10800044 	addi	r2,r2,1
 304722c:	e0bffb15 	stw	r2,-20(fp)
 3047230:	e0bffb17 	ldw	r2,-20(fp)
 3047234:	10800090 	cmplti	r2,r2,2
 3047238:	103fe91e 	bne	r2,zero,30471e0 <SDHAL_WriteData+0x90>
 304723c:	e0bffc17 	ldw	r2,-16(fp)
 3047240:	10800044 	addi	r2,r2,1
 3047244:	e0bffc15 	stw	r2,-16(fp)
 3047248:	e0fffc17 	ldw	r3,-16(fp)
 304724c:	e0bfff17 	ldw	r2,-4(fp)
 3047250:	18bfdb16 	blt	r3,r2,30471c0 <SDHAL_WriteData+0x70>
      } 
#else      
      for(j=0;j<8;j++)
      {
        SD_CLK_LOW;
        //
        if (Data8 & 0x80)
            SD_DAT_HIGH;
        else
            SD_DAT_LOW;
        //    
        SD_CLK_HIGH;
        Data8 <<= 1; 
      } 
#endif  

        
    }
    
#ifdef SD_4BIT_MODE
    // not implement yet
#else    
    
    // send CRC
    for(i=0;i<16;i++){
        SD_CLK_LOW;
        if (DataCrc16 & 0x8000)
            SD_DAT_HIGH;
        else
            SD_DAT_LOW;
        //    
        SD_CLK_HIGH;
        DataCrc16 <<= 1;         
    }
    
    

    
#endif    

    // stop bits (value 'one')
    SD_CLK_LOW;
 3047254:	00804034 	movhi	r2,256
 3047258:	10803c04 	addi	r2,r2,240
 304725c:	10000035 	stwio	zero,0(r2)
#ifdef SD_4BIT_MODE
    SD_DAT_WRITE(0x0F);
 3047260:	00c04034 	movhi	r3,256
 3047264:	18c04404 	addi	r3,r3,272
 3047268:	008003c4 	movi	r2,15
 304726c:	18800035 	stwio	r2,0(r3)
#else    
    SD_DAT_HIGH;
#endif     
    SD_CLK_HIGH;
 3047270:	00c04034 	movhi	r3,256
 3047274:	18c03c04 	addi	r3,r3,240
 3047278:	00800044 	movi	r2,1
 304727c:	18800035 	stwio	r2,0(r3)
    
    //===== check busy bits (data0 only)
    SD_DAT_IN;
 3047280:	00804034 	movhi	r2,256
 3047284:	10804504 	addi	r2,r2,276
 3047288:	10000035 	stwio	zero,0(r2)
bool bWriteSuccess = FALSE;    
 304728c:	e03ff915 	stw	zero,-28(fp)
for(i=0;i<32 && !bWriteSuccess;i++){        
 3047290:	e03ffc15 	stw	zero,-16(fp)
 3047294:	00001306 	br	30472e4 <SDHAL_WriteData+0x194>
    SD_CLK_LOW;
 3047298:	00804034 	movhi	r2,256
 304729c:	10803c04 	addi	r2,r2,240
 30472a0:	10000035 	stwio	zero,0(r2)
    SD_CLK_HIGH;
 30472a4:	00c04034 	movhi	r3,256
 30472a8:	18c03c04 	addi	r3,r3,240
 30472ac:	00800044 	movi	r2,1
 30472b0:	18800035 	stwio	r2,0(r3)
    if ((SD_TEST_DAT & 0x01) == 0x01) // (DAT0==LOW: busy indicate
 30472b4:	00804034 	movhi	r2,256
 30472b8:	10804404 	addi	r2,r2,272
 30472bc:	10800037 	ldwio	r2,0(r2)
 30472c0:	1080004c 	andi	r2,r2,1
 30472c4:	10803fcc 	andi	r2,r2,255
 30472c8:	1005003a 	cmpeq	r2,r2,zero
 30472cc:	1000021e 	bne	r2,zero,30472d8 <SDHAL_WriteData+0x188>
        bWriteSuccess = TRUE;
 30472d0:	00800044 	movi	r2,1
 30472d4:	e0bff915 	stw	r2,-28(fp)
 30472d8:	e0bffc17 	ldw	r2,-16(fp)
 30472dc:	10800044 	addi	r2,r2,1
 30472e0:	e0bffc15 	stw	r2,-16(fp)
 30472e4:	e0bffc17 	ldw	r2,-16(fp)
 30472e8:	10800808 	cmpgei	r2,r2,32
 30472ec:	1000031e 	bne	r2,zero,30472fc <SDHAL_WriteData+0x1ac>
 30472f0:	e0bff917 	ldw	r2,-28(fp)
 30472f4:	1005003a 	cmpeq	r2,r2,zero
 30472f8:	103fe71e 	bne	r2,zero,3047298 <SDHAL_WriteData+0x148>
}
    if (!bWriteSuccess)
 30472fc:	e0bff917 	ldw	r2,-28(fp)
 3047300:	1004c03a 	cmpne	r2,r2,zero
 3047304:	1000011e 	bne	r2,zero,304730c <SDHAL_WriteData+0x1bc>
        bSuccess = FALSE;
 3047308:	e03ffd15 	stw	zero,-12(fp)
                
    // to provide8 (eight) clock cycles for the card to complete the operation before shutting down the clock 
    SDHAL_DummyClock(8);     
 304730c:	01000204 	movi	r4,8
 3047310:	304732c0 	call	304732c <SDHAL_DummyClock>

    /*
    //
    for(i=0; i<16; i++){
        SD_CLK_LOW;
        SD_CLK_HIGH;
    }*/
    
    return bSuccess;
 3047314:	e0bffd17 	ldw	r2,-12(fp)
    
}
 3047318:	e037883a 	mov	sp,fp
 304731c:	dfc00117 	ldw	ra,4(sp)
 3047320:	df000017 	ldw	fp,0(sp)
 3047324:	dec00204 	addi	sp,sp,8
 3047328:	f800283a 	ret

0304732c <SDHAL_DummyClock>:


void SDHAL_DummyClock(int nClockCnt){
 304732c:	defffd04 	addi	sp,sp,-12
 3047330:	df000215 	stw	fp,8(sp)
 3047334:	df000204 	addi	fp,sp,8
 3047338:	e13fff15 	stw	r4,-4(fp)
    int i;
    for(i=0;i<nClockCnt;i++){
 304733c:	e03ffe15 	stw	zero,-8(fp)
 3047340:	00000a06 	br	304736c <SDHAL_DummyClock+0x40>
        SD_CLK_LOW;
 3047344:	00804034 	movhi	r2,256
 3047348:	10803c04 	addi	r2,r2,240
 304734c:	10000035 	stwio	zero,0(r2)
        SD_CLK_HIGH;
 3047350:	00c04034 	movhi	r3,256
 3047354:	18c03c04 	addi	r3,r3,240
 3047358:	00800044 	movi	r2,1
 304735c:	18800035 	stwio	r2,0(r3)
 3047360:	e0bffe17 	ldw	r2,-8(fp)
 3047364:	10800044 	addi	r2,r2,1
 3047368:	e0bffe15 	stw	r2,-8(fp)
 304736c:	e0fffe17 	ldw	r3,-8(fp)
 3047370:	e0bfff17 	ldw	r2,-4(fp)
 3047374:	18bff316 	blt	r3,r2,3047344 <SDHAL_DummyClock+0x18>
    }
}
 3047378:	e037883a 	mov	sp,fp
 304737c:	df000017 	ldw	fp,0(sp)
 3047380:	dec00104 	addi	sp,sp,4
 3047384:	f800283a 	ret

03047388 <SDLIB_Init>:


//-------------------------------------------------------------------------
bool SDLIB_Init(void)
{
 3047388:	defff504 	addi	sp,sp,-44
 304738c:	dfc00a15 	stw	ra,40(sp)
 3047390:	df000915 	stw	fp,36(sp)
 3047394:	df000904 	addi	fp,sp,36
    bool bSuccess = FALSE, bTimeout = FALSE;
 3047398:	e03ffa15 	stw	zero,-24(fp)
 304739c:	e03ff915 	stw	zero,-28(fp)
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 30473a0:	0080c1b4 	movhi	r2,774
 30473a4:	10b29b04 	addi	r2,r2,-13716
 30473a8:	10800017 	ldw	r2,0(r2)
    alt_u8  szThisCID[16];
    const int nTimeout = alt_ticks_per_second();
 30473ac:	e0bff815 	stw	r2,-32(fp)
    alt_u32 TimeStart;

    
   // alt_u8 x,y;
    memset(&gSdInfo, 0, sizeof(gSdInfo));
 30473b0:	0080c1b4 	movhi	r2,774
 30473b4:	10bea004 	addi	r2,r2,-1408
 30473b8:	10000015 	stw	zero,0(r2)
 30473bc:	10000115 	stw	zero,4(r2)
 30473c0:	10000215 	stw	zero,8(r2)
 30473c4:	10000315 	stw	zero,12(r2)
 30473c8:	10000415 	stw	zero,16(r2)
 30473cc:	10000515 	stw	zero,20(r2)
 30473d0:	10000615 	stw	zero,24(r2)
 30473d4:	10000715 	stw	zero,28(r2)
 30473d8:	10000815 	stw	zero,32(r2)
 30473dc:	10000915 	stw	zero,36(r2)
 30473e0:	10000a15 	stw	zero,40(r2)
 30473e4:	10000b15 	stw	zero,44(r2)
 30473e8:	10000c15 	stw	zero,48(r2)
 30473ec:	10000d15 	stw	zero,52(r2)
    gSdInfo.bSupport4Bits = SD_IsSupport4Bits();
 30473f0:	30478700 	call	3047870 <SD_IsSupport4Bits>
 30473f4:	1007883a 	mov	r3,r2
 30473f8:	0080c1b4 	movhi	r2,774
 30473fc:	10bea004 	addi	r2,r2,-1408
 3047400:	10c00015 	stw	r3,0(r2)

    SDCARD_DEBUG(("--- Power On, Card Identification Mode, Idle State\r\n"));
    SDCARD_DEBUG(("sd %d-bit mode\r\n", gSdInfo.bSupport4Bits?4:1));
  
    usleep(74*10);
 3047404:	0100b904 	movi	r4,740
 3047408:	30540480 	call	3054048 <usleep>
    
    SD_Init();
 304740c:	30478480 	call	3047848 <SD_Init>

    
    //========================== CMD0 (None Response) ========
    // Reset all cards to idle state
    SD_CMD0();
 3047410:	30478980 	call	3047898 <SD_CMD0>
    usleep(100*1000);
 3047414:	010000b4 	movhi	r4,2
 3047418:	2121a804 	addi	r4,r4,-31072
 304741c:	30540480 	call	3054048 <usleep>
    
    //========================== CMD8 (Response R7) ==========
    //Sends SD Memory Card interface condition (Added in SDHC 2.0)
    if (SD_CMD8(SD_VHS_2V7_3V6, CMD8_DEFAULT_TEST_PATTERN)){
 3047420:	01000044 	movi	r4,1
 3047424:	01402a84 	movi	r5,170
 3047428:	30479180 	call	3047918 <SD_CMD8>
 304742c:	1005003a 	cmpeq	r2,r2,zero
 3047430:	10000e1e 	bne	r2,zero,304746c <SDLIB_Init+0xe4>
        // OCR: Operation Condistions Register
        //gSdInfo.HostOCR32 = 0x01 << 30; //argument=0x40FF8000; // support HC
        gSdInfo.HostOCR32 = 0x40FF8000;
 3047434:	00c0c1b4 	movhi	r3,774
 3047438:	18fea004 	addi	r3,r3,-1408
 304743c:	00904034 	movhi	r2,16640
 3047440:	10a00004 	addi	r2,r2,-32768
 3047444:	18800315 	stw	r2,12(r3)
        gSdInfo.bVer2 = TRUE;
 3047448:	00c0c1b4 	movhi	r3,774
 304744c:	18fea004 	addi	r3,r3,-1408
 3047450:	00800044 	movi	r2,1
 3047454:	18800115 	stw	r2,4(r3)
        gSdInfo.bSDHC = TRUE;
 3047458:	00c0c1b4 	movhi	r3,774
 304745c:	18fea004 	addi	r3,r3,-1408
 3047460:	00800044 	movi	r2,1
 3047464:	18800215 	stw	r2,8(r3)
 3047468:	00000906 	br	3047490 <SDLIB_Init+0x108>
        SDCARD_DEBUG((" 2.0 \r\n"));
    }else{
        gSdInfo.HostOCR32 = 0x00040000;   
 304746c:	00c0c1b4 	movhi	r3,774
 3047470:	18fea004 	addi	r3,r3,-1408
 3047474:	00800134 	movhi	r2,4
 3047478:	10800004 	addi	r2,r2,0
 304747c:	18800315 	stw	r2,12(r3)
        SDCARD_TRACE(("CMD8 not supported\r\n"));
        
        // Reset cards to idle state
        SD_CMD0();
 3047480:	30478980 	call	3047898 <SD_CMD0>
        usleep(100*1000);        
 3047484:	010000b4 	movhi	r4,2
 3047488:	2121a804 	addi	r4,r4,-31072
 304748c:	30540480 	call	3054048 <usleep>
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3047490:	0080c1b4 	movhi	r2,774
 3047494:	10b29c04 	addi	r2,r2,-13712
 3047498:	10800017 	ldw	r2,0(r2)
    }
    //========================== ACMD41 (CMD55) ==============
    TimeStart = alt_nticks();
 304749c:	e0bff715 	stw	r2,-36(fp)
    while(!bSuccess && !bTimeout){
 30474a0:	00003206 	br	304756c <SDLIB_Init+0x1e4>
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_IDLE)){  // execute cmd55 before execute and ACMD
 30474a4:	0080c1b4 	movhi	r2,774
 30474a8:	10bea004 	addi	r2,r2,-1408
 30474ac:	1080050b 	ldhu	r2,20(r2)
 30474b0:	113fffcc 	andi	r4,r2,65535
 30474b4:	000b883a 	mov	r5,zero
 30474b8:	3047aa80 	call	3047aa8 <SD_CMD55>
 30474bc:	1004c03a 	cmpne	r2,r2,zero
 30474c0:	1000021e 	bne	r2,zero,30474cc <SDLIB_Init+0x144>
            SDCARD_ERROR(("CMD55 NG\r\n"));
            return FALSE;
 30474c4:	e03fff15 	stw	zero,-4(fp)
 30474c8:	00009106 	br	3047710 <SDLIB_Init+0x388>
        }else{    
            bSuccess = SD_ACMD41(gSdInfo.HostOCR32, &gSdInfo.OCR32);
 30474cc:	0080c1b4 	movhi	r2,774
 30474d0:	10bea004 	addi	r2,r2,-1408
 30474d4:	11000317 	ldw	r4,12(r2)
 30474d8:	0140c1b4 	movhi	r5,774
 30474dc:	297ea404 	addi	r5,r5,-1392
 30474e0:	3047c2c0 	call	3047c2c <SD_ACMD41>
 30474e4:	e0bffa15 	stw	r2,-24(fp)
            if (bSuccess && gSdInfo.bSDHC && ((gSdInfo.OCR32 & 0x40000000) == 0x00)){
 30474e8:	e0bffa17 	ldw	r2,-24(fp)
 30474ec:	1005003a 	cmpeq	r2,r2,zero
 30474f0:	10000e1e 	bne	r2,zero,304752c <SDLIB_Init+0x1a4>
 30474f4:	0080c1b4 	movhi	r2,774
 30474f8:	10bea004 	addi	r2,r2,-1408
 30474fc:	10800217 	ldw	r2,8(r2)
 3047500:	1005003a 	cmpeq	r2,r2,zero
 3047504:	1000091e 	bne	r2,zero,304752c <SDLIB_Init+0x1a4>
 3047508:	0080c1b4 	movhi	r2,774
 304750c:	10bea004 	addi	r2,r2,-1408
 3047510:	10800417 	ldw	r2,16(r2)
 3047514:	1090002c 	andhi	r2,r2,16384
 3047518:	1004c03a 	cmpne	r2,r2,zero
 304751c:	1000031e 	bne	r2,zero,304752c <SDLIB_Init+0x1a4>
                gSdInfo.bSDHC = FALSE;
 3047520:	0080c1b4 	movhi	r2,774
 3047524:	10bea004 	addi	r2,r2,-1408
 3047528:	10000215 	stw	zero,8(r2)
            }    
            // check timeout
            if (!bSuccess){
 304752c:	e0bffa17 	ldw	r2,-24(fp)
 3047530:	1004c03a 	cmpne	r2,r2,zero
 3047534:	10000d1e 	bne	r2,zero,304756c <SDLIB_Init+0x1e4>
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 3047538:	0080c1b4 	movhi	r2,774
 304753c:	10b29c04 	addi	r2,r2,-13712
 3047540:	10800017 	ldw	r2,0(r2)
 3047544:	1007883a 	mov	r3,r2
                if ((alt_nticks() - TimeStart) > nTimeout){
 3047548:	e0bff717 	ldw	r2,-36(fp)
 304754c:	1887c83a 	sub	r3,r3,r2
 3047550:	e0bff817 	ldw	r2,-32(fp)
 3047554:	10c0032e 	bgeu	r2,r3,3047564 <SDLIB_Init+0x1dc>
                    SDCARD_ERROR(("ACMD41[SD_APP_OP_COND] fail\r\n"));
                    bTimeout = TRUE;
 3047558:	00800044 	movi	r2,1
 304755c:	e0bff915 	stw	r2,-28(fp)
 3047560:	00000206 	br	304756c <SDLIB_Init+0x1e4>
                }else{
                    usleep(10*1000);
 3047564:	0109c404 	movi	r4,10000
 3047568:	30540480 	call	3054048 <usleep>
 304756c:	e0bffa17 	ldw	r2,-24(fp)
 3047570:	1004c03a 	cmpne	r2,r2,zero
 3047574:	1000031e 	bne	r2,zero,3047584 <SDLIB_Init+0x1fc>
 3047578:	e0bff917 	ldw	r2,-28(fp)
 304757c:	1005003a 	cmpeq	r2,r2,zero
 3047580:	103fc81e 	bne	r2,zero,30474a4 <SDLIB_Init+0x11c>
                }    
            }
        }
    }
    if (!bSuccess){
 3047584:	e0bffa17 	ldw	r2,-24(fp)
 3047588:	1004c03a 	cmpne	r2,r2,zero
 304758c:	1000021e 	bne	r2,zero,3047598 <SDLIB_Init+0x210>
        return FALSE;
 3047590:	e03fff15 	stw	zero,-4(fp)
 3047594:	00005e06 	br	3047710 <SDLIB_Init+0x388>
    }
   
    //========================== CMD2 ========================    
    // issue cmd2 & wait response 
    // ALL_SEND_CID (CMD2): Asks any card to send the CID numbers on the CMD line
    if (!SD_CMD2(gSdInfo.szCID, sizeof(gSdInfo.szCID))){
 3047598:	0100c1b4 	movhi	r4,774
 304759c:	213ea584 	addi	r4,r4,-1386
 30475a0:	01400444 	movi	r5,17
 30475a4:	3047dd00 	call	3047dd0 <SD_CMD2>
 30475a8:	1004c03a 	cmpne	r2,r2,zero
 30475ac:	1000021e 	bne	r2,zero,30475b8 <SDLIB_Init+0x230>
        SDCARD_ERROR(("CMD2 fail\r\n"));
        return FALSE;
 30475b0:	e03fff15 	stw	zero,-4(fp)
 30475b4:	00005606 	br	3047710 <SDLIB_Init+0x388>
    }
    SDCARD_TRACE(("--- Power On, Card Identification Mode, Identification State\r\n"));

    //========================== CMD3 ========================        
    // issue cmd3 & wait response, finally get RCA
    // CMD3 (SEND_RELATIVE_ADDR): Ask the card to publish a new relative address (RCA)
    if (!SD_CMD3(&gSdInfo.RCA16)){
 30475b8:	0100c1b4 	movhi	r4,774
 30475bc:	213ea504 	addi	r4,r4,-1388
 30475c0:	3047f740 	call	3047f74 <SD_CMD3>
 30475c4:	1004c03a 	cmpne	r2,r2,zero
 30475c8:	1000021e 	bne	r2,zero,30475d4 <SDLIB_Init+0x24c>
        SDCARD_ERROR(("CMD3 fail\r\n"));
        return FALSE;
 30475cc:	e03fff15 	stw	zero,-4(fp)
 30475d0:	00004f06 	br	3047710 <SDLIB_Init+0x388>
    }    
    
    // above is Card Identification Mode
    //*************** now, wer are in Data Transfer Mode ********************************/
    //### Standby-by state in Data-transfer mode
    
    //========================== CMD9 ========================
    SDCARD_DEBUG(("--- enter data-transfer mode, Standby state\r\n"));
    // issue cmd9 with given RCA & wait response 
    if (!SD_CMD9(gSdInfo.RCA16, gSdInfo.szCSD, sizeof(gSdInfo.szCSD))){
 30475d4:	0080c1b4 	movhi	r2,774
 30475d8:	10bea004 	addi	r2,r2,-1408
 30475dc:	1080050b 	ldhu	r2,20(r2)
 30475e0:	113fffcc 	andi	r4,r2,65535
 30475e4:	0140c1b4 	movhi	r5,774
 30475e8:	297ea9c4 	addi	r5,r5,-1369
 30475ec:	01800444 	movi	r6,17
 30475f0:	30481180 	call	3048118 <SD_CMD9>
 30475f4:	1004c03a 	cmpne	r2,r2,zero
 30475f8:	1000021e 	bne	r2,zero,3047604 <SDLIB_Init+0x27c>
        SDCARD_DEBUG(("CMD9 fail\r\n"));
        return FALSE;
 30475fc:	e03fff15 	stw	zero,-4(fp)
 3047600:	00004306 	br	3047710 <SDLIB_Init+0x388>
    }
    
    //========================== CMD10 ========================
    // richard add  (query card identification)  
    if (!SD_CMD10(gSdInfo.RCA16, szThisCID, sizeof(szThisCID))){
 3047604:	0080c1b4 	movhi	r2,774
 3047608:	10bea004 	addi	r2,r2,-1408
 304760c:	1080050b 	ldhu	r2,20(r2)
 3047610:	113fffcc 	andi	r4,r2,65535
 3047614:	e17ffb04 	addi	r5,fp,-20
 3047618:	01800404 	movi	r6,16
 304761c:	30482ec0 	call	30482ec <SD_CMD10>
 3047620:	1004c03a 	cmpne	r2,r2,zero
 3047624:	1000021e 	bne	r2,zero,3047630 <SDLIB_Init+0x2a8>
        SDCARD_DEBUG(("CMD10 fail\r\n"));
        return FALSE;
 3047628:	e03fff15 	stw	zero,-4(fp)
 304762c:	00003806 	br	3047710 <SDLIB_Init+0x388>
    }    

    // can issue cmd 4, 9, 10, in (stdandby state)         
         
    // issue cmd9 with given RCA & wait response
    
    //========================== CMD7 ========================
    // richard: issue cmd7 to enter transfer state
    // cmd7: toggle between Standy-by and Trasfer State
    if (!SD_CMD7(gSdInfo.RCA16)){
 3047630:	0080c1b4 	movhi	r2,774
 3047634:	10bea004 	addi	r2,r2,-1408
 3047638:	1080050b 	ldhu	r2,20(r2)
 304763c:	113fffcc 	andi	r4,r2,65535
 3047640:	30484c00 	call	30484c0 <SD_CMD7>
 3047644:	1004c03a 	cmpne	r2,r2,zero
 3047648:	1000021e 	bne	r2,zero,3047654 <SDLIB_Init+0x2cc>
        SDCARD_DEBUG(("CMD7 fail\r\n"));
        return FALSE;
 304764c:	e03fff15 	stw	zero,-4(fp)
 3047650:	00002f06 	br	3047710 <SDLIB_Init+0x388>
    }      
    //### Transfer state in Data-transfer mode     
    SDCARD_DEBUG(("--- enter data-transfer mode, Transfer state\r\n"));
       
    //========================== CMD16 ========================   
    // issue cmd16 (select a block length) & wait response
    if (!SD_CMD16(512)){  // 512 bytes
 3047654:	01008004 	movi	r4,512
 3047658:	30486480 	call	3048648 <SD_CMD16>
 304765c:	1004c03a 	cmpne	r2,r2,zero
 3047660:	1000021e 	bne	r2,zero,304766c <SDLIB_Init+0x2e4>
        SDCARD_DEBUG(("CMD16 fail\r\n"));
        return FALSE;
 3047664:	e03fff15 	stw	zero,-4(fp)
 3047668:	00002906 	br	3047710 <SDLIB_Init+0x388>
    }       
    
    if (gSdInfo.bSupport4Bits){ 
 304766c:	0080c1b4 	movhi	r2,774
 3047670:	10bea004 	addi	r2,r2,-1408
 3047674:	10800017 	ldw	r2,0(r2)
 3047678:	1005003a 	cmpeq	r2,r2,zero
 304767c:	1000221e 	bne	r2,zero,3047708 <SDLIB_Init+0x380>
        // richard add: set bus width
        // Note. This command is valid only in "transfer state", i.e. after CMD7 is issued

        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
 3047680:	0080c1b4 	movhi	r2,774
 3047684:	10bea004 	addi	r2,r2,-1408
 3047688:	1080050b 	ldhu	r2,20(r2)
 304768c:	113fffcc 	andi	r4,r2,65535
 3047690:	01400104 	movi	r5,4
 3047694:	3047aa80 	call	3047aa8 <SD_CMD55>
 3047698:	1004c03a 	cmpne	r2,r2,zero
 304769c:	1000021e 	bne	r2,zero,30476a8 <SDLIB_Init+0x320>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
 30476a0:	e03fff15 	stw	zero,-4(fp)
 30476a4:	00001a06 	br	3047710 <SDLIB_Init+0x388>
        }       
    
        SDCARD_DEBUG(("ACMD6[SET_BUS_WIDTH], 4-bit\r\n"));
        if (!SD_ACMD6(TRUE, SD_STATE_TRAN)){  // 4-bit mode
 30476a8:	01000044 	movi	r4,1
 30476ac:	01400104 	movi	r5,4
 30476b0:	30487e80 	call	30487e8 <SD_ACMD6>
 30476b4:	1004c03a 	cmpne	r2,r2,zero
 30476b8:	1000021e 	bne	r2,zero,30476c4 <SDLIB_Init+0x33c>
            SDCARD_DEBUG(("ACMD6 NG\r\n"));
            return FALSE;
 30476bc:	e03fff15 	stw	zero,-4(fp)
 30476c0:	00001306 	br	3047710 <SDLIB_Init+0x388>
        }         
    
    
        //
        if (!SD_CMD55(gSdInfo.RCA16, SD_STATE_TRAN)){  // execute cmd55 before execute and ACMD, RCA = 0
 30476c4:	0080c1b4 	movhi	r2,774
 30476c8:	10bea004 	addi	r2,r2,-1408
 30476cc:	1080050b 	ldhu	r2,20(r2)
 30476d0:	113fffcc 	andi	r4,r2,65535
 30476d4:	01400104 	movi	r5,4
 30476d8:	3047aa80 	call	3047aa8 <SD_CMD55>
 30476dc:	1004c03a 	cmpne	r2,r2,zero
 30476e0:	1000021e 	bne	r2,zero,30476ec <SDLIB_Init+0x364>
            SDCARD_DEBUG(("CMD55 NG\r\n"));
            return FALSE;
 30476e4:	e03fff15 	stw	zero,-4(fp)
 30476e8:	00000906 	br	3047710 <SDLIB_Init+0x388>
        }    
    
       
        SDCARD_DEBUG(("ACMD42[SET_CLR_CARD_DETECT], connect card\r\n"));
        if (!SD_ACMD42(TRUE, SD_STATE_TRAN)){  // connect card
 30476ec:	01000044 	movi	r4,1
 30476f0:	01400104 	movi	r5,4
 30476f4:	30489800 	call	3048980 <SD_ACMD42>
 30476f8:	1004c03a 	cmpne	r2,r2,zero
 30476fc:	1000021e 	bne	r2,zero,3047708 <SDLIB_Init+0x380>
            SDCARD_DEBUG(("ACMD42 NG\r\n"));
            return FALSE;
 3047700:	e03fff15 	stw	zero,-4(fp)
 3047704:	00000206 	br	3047710 <SDLIB_Init+0x388>
        }   
    }
    
    
    //
#if 0
    int i;
    bool test_ok;
    alt_u8 szWrite[512];
    for(i=0;i<512;i++)
        szWrite[i] = i;
    test_ok = SDLIB_WriteBlock512(100, szWrite);
    if (!test_ok)
        printf("!!!!!SDLIB_WriteBlock512 ng\r\n");
    if (test_ok){
        test_ok = SDLIB_ReadBlock512(100, szWrite);
        if (!test_ok)
            printf("!!!!!SDLIB_ReadBlock512 ng\r\n");
    }            
        
    if (test_ok && szWrite[1] == 1)
        printf("!!!!!write success\r\n");
    else     
        printf("!!!!!write ng\r\n");
#endif
     
    SDCARD_DEBUG(("SDLIB_Init success\r\n"));
    
    return TRUE;
 3047708:	00800044 	movi	r2,1
 304770c:	e0bfff15 	stw	r2,-4(fp)
 3047710:	e0bfff17 	ldw	r2,-4(fp)
}
 3047714:	e037883a 	mov	sp,fp
 3047718:	dfc00117 	ldw	ra,4(sp)
 304771c:	df000017 	ldw	fp,0(sp)
 3047720:	dec00204 	addi	sp,sp,8
 3047724:	f800283a 	ret

03047728 <SDLIB_ReadBlock512>:


bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff)
{
 3047728:	defff904 	addi	sp,sp,-28
 304772c:	dfc00615 	stw	ra,24(sp)
 3047730:	df000515 	stw	fp,20(sp)
 3047734:	df000504 	addi	fp,sp,20
 3047738:	e13ffd15 	stw	r4,-12(fp)
 304773c:	e17ffe15 	stw	r5,-8(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd17 for 'Single Block Read'. parameter: block address
    if (gSdInfo.bSDHC)
 3047740:	0080c1b4 	movhi	r2,774
 3047744:	10bea004 	addi	r2,r2,-1408
 3047748:	10800217 	ldw	r2,8(r2)
 304774c:	1005003a 	cmpeq	r2,r2,zero
 3047750:	1000031e 	bne	r2,zero,3047760 <SDLIB_ReadBlock512+0x38>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
 3047754:	e0bffd17 	ldw	r2,-12(fp)
 3047758:	e0bffb15 	stw	r2,-20(fp)
 304775c:	00000306 	br	304776c <SDLIB_ReadBlock512+0x44>
    else 
        addr = block_number * 512;
 3047760:	e0bffd17 	ldw	r2,-12(fp)
 3047764:	1004927a 	slli	r2,r2,9
 3047768:	e0bffb15 	stw	r2,-20(fp)
    if (!SD_CMD17(addr, SD_STATE_TRAN)){  // 4-bit mode
 304776c:	e13ffb17 	ldw	r4,-20(fp)
 3047770:	01400104 	movi	r5,4
 3047774:	3048afc0 	call	3048afc <SD_CMD17>
 3047778:	1004c03a 	cmpne	r2,r2,zero
 304777c:	1000021e 	bne	r2,zero,3047788 <SDLIB_ReadBlock512+0x60>
        SDCARD_DEBUG(("CMD17 NG\r\n"));
        return FALSE;
 3047780:	e03fff15 	stw	zero,-4(fp)
 3047784:	00000606 	br	30477a0 <SDLIB_ReadBlock512+0x78>
    }
    //

    bSuccess = SD_ReadData(buff, 512);  // read 512 bytes
 3047788:	e13ffe17 	ldw	r4,-8(fp)
 304778c:	01408004 	movi	r5,512
 3047790:	3048e440 	call	3048e44 <SD_ReadData>
 3047794:	e0bffc15 	stw	r2,-16(fp)
    
    //
    return bSuccess;
 3047798:	e0bffc17 	ldw	r2,-16(fp)
 304779c:	e0bfff15 	stw	r2,-4(fp)
 30477a0:	e0bfff17 	ldw	r2,-4(fp)
}
 30477a4:	e037883a 	mov	sp,fp
 30477a8:	dfc00117 	ldw	ra,4(sp)
 30477ac:	df000017 	ldw	fp,0(sp)
 30477b0:	dec00204 	addi	sp,sp,8
 30477b4:	f800283a 	ret

030477b8 <SDLIB_WriteBlock512>:

bool SDLIB_WriteBlock512(alt_u32 block_number, alt_u8 *szDataWrite)
{
 30477b8:	defff904 	addi	sp,sp,-28
 30477bc:	dfc00615 	stw	ra,24(sp)
 30477c0:	df000515 	stw	fp,20(sp)
 30477c4:	df000504 	addi	fp,sp,20
 30477c8:	e13ffd15 	stw	r4,-12(fp)
 30477cc:	e17ffe15 	stw	r5,-8(fp)
    // buffer size muse be 512 byte
    bool bSuccess;  
    alt_u32  addr;
  
    // issue cmd24 for 'Single Block write'. parameter: block address
    if (gSdInfo.bSDHC)
 30477d0:	0080c1b4 	movhi	r2,774
 30477d4:	10bea004 	addi	r2,r2,-1408
 30477d8:	10800217 	ldw	r2,8(r2)
 30477dc:	1005003a 	cmpeq	r2,r2,zero
 30477e0:	1000031e 	bne	r2,zero,30477f0 <SDLIB_WriteBlock512+0x38>
        addr = block_number; // note. for SDHC, argument for addr of CMD7 is block number
 30477e4:	e0bffd17 	ldw	r2,-12(fp)
 30477e8:	e0bffb15 	stw	r2,-20(fp)
 30477ec:	00000306 	br	30477fc <SDLIB_WriteBlock512+0x44>
    else 
        addr = block_number * 512;
 30477f0:	e0bffd17 	ldw	r2,-12(fp)
 30477f4:	1004927a 	slli	r2,r2,9
 30477f8:	e0bffb15 	stw	r2,-20(fp)
    if (!SD_CMD24(addr, SD_STATE_TRAN)){ 
 30477fc:	e13ffb17 	ldw	r4,-20(fp)
 3047800:	01400104 	movi	r5,4
 3047804:	3048ca00 	call	3048ca0 <SD_CMD24>
 3047808:	1004c03a 	cmpne	r2,r2,zero
 304780c:	1000021e 	bne	r2,zero,3047818 <SDLIB_WriteBlock512+0x60>
        SDCARD_DEBUG(("CMD24 NG\r\n"));
        return FALSE;
 3047810:	e03fff15 	stw	zero,-4(fp)
 3047814:	00000606 	br	3047830 <SDLIB_WriteBlock512+0x78>
    }
    //

    bSuccess = SD_WriteData(szDataWrite, 512);  // Write 512 bytes
 3047818:	e13ffe17 	ldw	r4,-8(fp)
 304781c:	01408004 	movi	r5,512
 3047820:	3048e840 	call	3048e84 <SD_WriteData>
 3047824:	e0bffc15 	stw	r2,-16(fp)
    
    //
    return bSuccess;
 3047828:	e0bffc17 	ldw	r2,-16(fp)
 304782c:	e0bfff15 	stw	r2,-4(fp)
 3047830:	e0bfff17 	ldw	r2,-4(fp)
}
 3047834:	e037883a 	mov	sp,fp
 3047838:	dfc00117 	ldw	ra,4(sp)
 304783c:	df000017 	ldw	fp,0(sp)
 3047840:	dec00204 	addi	sp,sp,8
 3047844:	f800283a 	ret

03047848 <SD_Init>:
alt_u32 ArrayToU32(alt_u8 szData[]);

//============================================================

void SD_Init(void){
 3047848:	defffe04 	addi	sp,sp,-8
 304784c:	dfc00115 	stw	ra,4(sp)
 3047850:	df000015 	stw	fp,0(sp)
 3047854:	d839883a 	mov	fp,sp
    SDHAL_Init();
 3047858:	3046c000 	call	3046c00 <SDHAL_Init>
}
 304785c:	e037883a 	mov	sp,fp
 3047860:	dfc00117 	ldw	ra,4(sp)
 3047864:	df000017 	ldw	fp,0(sp)
 3047868:	dec00204 	addi	sp,sp,8
 304786c:	f800283a 	ret

03047870 <SD_IsSupport4Bits>:

bool SD_IsSupport4Bits(void){
 3047870:	defffe04 	addi	sp,sp,-8
 3047874:	dfc00115 	stw	ra,4(sp)
 3047878:	df000015 	stw	fp,0(sp)
 304787c:	d839883a 	mov	fp,sp
    return SDHAL_IsSupport4Bits();
 3047880:	3046bd40 	call	3046bd4 <SDHAL_IsSupport4Bits>
}
 3047884:	e037883a 	mov	sp,fp
 3047888:	dfc00117 	ldw	ra,4(sp)
 304788c:	df000017 	ldw	fp,0(sp)
 3047890:	dec00204 	addi	sp,sp,8
 3047894:	f800283a 	ret

03047898 <SD_CMD0>:



void SD_CMD0(void){
 3047898:	defffc04 	addi	sp,sp,-16
 304789c:	dfc00315 	stw	ra,12(sp)
 30478a0:	df000215 	stw	fp,8(sp)
 30478a4:	df000204 	addi	fp,sp,8
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 30478a8:	00801004 	movi	r2,64
 30478ac:	e0bffe45 	stb	r2,-7(fp)
 30478b0:	e03ffe85 	stb	zero,-6(fp)
 30478b4:	e03ffec5 	stb	zero,-5(fp)
 30478b8:	e03fff05 	stb	zero,-4(fp)
 30478bc:	e03fff45 	stb	zero,-3(fp)
 30478c0:	e03fff85 	stb	zero,-2(fp)

    SDCARD_TRACE(("CMD0\r\n"));
    // build packet    
    szCmd[0] |= 0X00;
 30478c4:	e0bffe43 	ldbu	r2,-7(fp)
 30478c8:	e0bffe45 	stb	r2,-7(fp)
    crc = crc7(0, szCmd, 5);
 30478cc:	e17ffe44 	addi	r5,fp,-7
 30478d0:	0009883a 	mov	r4,zero
 30478d4:	01800144 	movi	r6,5
 30478d8:	3046b600 	call	3046b60 <crc7>
 30478dc:	e0bffe05 	stb	r2,-8(fp)
    szCmd[5] = (crc << 1) | 0x01;
 30478e0:	e0bffe03 	ldbu	r2,-8(fp)
 30478e4:	1085883a 	add	r2,r2,r2
 30478e8:	10800054 	ori	r2,r2,1
 30478ec:	e0bfff85 	stb	r2,-2(fp)
    
    // Tx 100 clock for power on sequence 
   // SDHAL_DummyClock(100);
    //
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 30478f0:	e13ffe44 	addi	r4,fp,-7
 30478f4:	01400184 	movi	r5,6
 30478f8:	3046c640 	call	3046c64 <SDHAL_SendCmd>
    
    // A command with no response. 8 clocks after the host command end bit.
    // !!!!!!!!!! Note. Remember to add dummy clock here
    SDHAL_DummyClock(8);
 30478fc:	01000204 	movi	r4,8
 3047900:	304732c0 	call	304732c <SDHAL_DummyClock>
    
}
 3047904:	e037883a 	mov	sp,fp
 3047908:	dfc00117 	ldw	ra,4(sp)
 304790c:	df000017 	ldw	fp,0(sp)
 3047910:	dec00204 	addi	sp,sp,8
 3047914:	f800283a 	ret

03047918 <SD_CMD8>:


bool SD_CMD8(alt_u8 VolId, alt_u8 TestPattern){
 3047918:	defff704 	addi	sp,sp,-36
 304791c:	dfc00815 	stw	ra,32(sp)
 3047920:	df000715 	stw	fp,28(sp)
 3047924:	df000704 	addi	fp,sp,28
 3047928:	e13ffe05 	stb	r4,-8(fp)
 304792c:	e17fff05 	stb	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 8;
 3047930:	00800204 	movi	r2,8
 3047934:	e0bff985 	stb	r2,-26(fp)
   // int x;
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3047938:	00801004 	movi	r2,64
 304793c:	e0bffc85 	stb	r2,-14(fp)
 3047940:	e03ffcc5 	stb	zero,-13(fp)
 3047944:	e03ffd05 	stb	zero,-12(fp)
 3047948:	e03ffd45 	stb	zero,-11(fp)
 304794c:	e03ffd85 	stb	zero,-10(fp)
 3047950:	e03ffdc5 	stb	zero,-9(fp)

    SDCARD_TRACE(("CMD8\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
 3047954:	e0fffc83 	ldbu	r3,-14(fp)
 3047958:	e0bff983 	ldbu	r2,-26(fp)
 304795c:	1884b03a 	or	r2,r3,r2
 3047960:	e0bffc85 	stb	r2,-14(fp)
    szCmd[3] |= (VolId & 0x0F);
 3047964:	e0bffd43 	ldbu	r2,-11(fp)
 3047968:	1007883a 	mov	r3,r2
 304796c:	e0bffe03 	ldbu	r2,-8(fp)
 3047970:	108003cc 	andi	r2,r2,15
 3047974:	1884b03a 	or	r2,r3,r2
 3047978:	e0bffd45 	stb	r2,-11(fp)
    szCmd[4] = TestPattern;
 304797c:	e0bfff03 	ldbu	r2,-4(fp)
 3047980:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
 3047984:	e17ffc84 	addi	r5,fp,-14
 3047988:	0009883a 	mov	r4,zero
 304798c:	01800144 	movi	r6,5
 3047990:	3046b600 	call	3046b60 <crc7>
 3047994:	e0bff945 	stb	r2,-27(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3047998:	e0bff943 	ldbu	r2,-27(fp)
 304799c:	1085883a 	add	r2,r2,r2
 30479a0:	10800054 	ori	r2,r2,1
 30479a4:	e0bffdc5 	stb	r2,-9(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 30479a8:	e13ffc84 	addi	r4,fp,-14
 30479ac:	01400184 	movi	r5,6
 30479b0:	3046c640 	call	3046c64 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 30479b4:	e13ffb04 	addi	r4,fp,-20
 30479b8:	01400184 	movi	r5,6
 30479bc:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 30479c0:	e0bffa15 	stw	r2,-24(fp)
    
    // check response content
    if (bSuccess){
 30479c4:	e0bffa17 	ldw	r2,-24(fp)
 30479c8:	1005003a 	cmpeq	r2,r2,zero
 30479cc:	1000301e 	bne	r2,zero,3047a90 <SD_CMD8+0x178>
        // check command
        if (bSuccess && szResponse[0] != Cmd){
 30479d0:	e0bffa17 	ldw	r2,-24(fp)
 30479d4:	1005003a 	cmpeq	r2,r2,zero
 30479d8:	1000051e 	bne	r2,zero,30479f0 <SD_CMD8+0xd8>
 30479dc:	e0bffb03 	ldbu	r2,-20(fp)
 30479e0:	10c03fcc 	andi	r3,r2,255
 30479e4:	e0bff983 	ldbu	r2,-26(fp)
 30479e8:	18800126 	beq	r3,r2,30479f0 <SD_CMD8+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
 30479ec:	e03ffa15 	stw	zero,-24(fp)
        }
        
        // check voltage supplied        
        if (bSuccess && szResponse[3] != VolId){
 30479f0:	e0bffa17 	ldw	r2,-24(fp)
 30479f4:	1005003a 	cmpeq	r2,r2,zero
 30479f8:	1000051e 	bne	r2,zero,3047a10 <SD_CMD8+0xf8>
 30479fc:	e0bffbc3 	ldbu	r2,-17(fp)
 3047a00:	10c03fcc 	andi	r3,r2,255
 3047a04:	e0bffe03 	ldbu	r2,-8(fp)
 3047a08:	18800126 	beq	r3,r2,3047a10 <SD_CMD8+0xf8>
            SDCARD_DEBUG(("CMD%d Response: Invalid Void Id\r\n", Cmd));
            bSuccess = FALSE;
 3047a0c:	e03ffa15 	stw	zero,-24(fp)
        }        

        // check test pattern        
        if (bSuccess && szResponse[4] != TestPattern){
 3047a10:	e0bffa17 	ldw	r2,-24(fp)
 3047a14:	1005003a 	cmpeq	r2,r2,zero
 3047a18:	1000051e 	bne	r2,zero,3047a30 <SD_CMD8+0x118>
 3047a1c:	e0bffc03 	ldbu	r2,-16(fp)
 3047a20:	10c03fcc 	andi	r3,r2,255
 3047a24:	e0bfff03 	ldbu	r2,-4(fp)
 3047a28:	18800126 	beq	r3,r2,3047a30 <SD_CMD8+0x118>
            SDCARD_DEBUG(("CMD%d Response: Invalid Test pattern\r\n", Cmd));
            bSuccess = FALSE;
 3047a2c:	e03ffa15 	stw	zero,-24(fp)
        }
        
        // check crc
        if (bSuccess){
 3047a30:	e0bffa17 	ldw	r2,-24(fp)
 3047a34:	1005003a 	cmpeq	r2,r2,zero
 3047a38:	10000c1e 	bne	r2,zero,3047a6c <SD_CMD8+0x154>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3047a3c:	e17ffb04 	addi	r5,fp,-20
 3047a40:	0009883a 	mov	r4,zero
 3047a44:	01800144 	movi	r6,5
 3047a48:	3046b600 	call	3046b60 <crc7>
 3047a4c:	e0bff905 	stb	r2,-28(fp)
            if (crc != (szResponse[5] >> 1)){
 3047a50:	e0bffc43 	ldbu	r2,-15(fp)
 3047a54:	10803fcc 	andi	r2,r2,255
 3047a58:	1004d07a 	srli	r2,r2,1
 3047a5c:	10c03fcc 	andi	r3,r2,255
 3047a60:	e0bff903 	ldbu	r2,-28(fp)
 3047a64:	18800126 	beq	r3,r2,3047a6c <SD_CMD8+0x154>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3047a68:	e03ffa15 	stw	zero,-24(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 3047a6c:	e0bffa17 	ldw	r2,-24(fp)
 3047a70:	1005003a 	cmpeq	r2,r2,zero
 3047a74:	1000061e 	bne	r2,zero,3047a90 <SD_CMD8+0x178>
 3047a78:	e0bffc43 	ldbu	r2,-15(fp)
 3047a7c:	10803fcc 	andi	r2,r2,255
 3047a80:	1080004c 	andi	r2,r2,1
 3047a84:	1004c03a 	cmpne	r2,r2,zero
 3047a88:	1000011e 	bne	r2,zero,3047a90 <SD_CMD8+0x178>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3047a8c:	e03ffa15 	stw	zero,-24(fp)
        }
        
         
    }
    
    return bSuccess;
 3047a90:	e0bffa17 	ldw	r2,-24(fp)
    
}
 3047a94:	e037883a 	mov	sp,fp
 3047a98:	dfc00117 	ldw	ra,4(sp)
 3047a9c:	df000017 	ldw	fp,0(sp)
 3047aa0:	dec00204 	addi	sp,sp,8
 3047aa4:	f800283a 	ret

03047aa8 <SD_CMD55>:

bool SD_CMD55(alt_u16 RCA16, alt_u8 ExpectedState){
 3047aa8:	defff404 	addi	sp,sp,-48
 3047aac:	dfc00b15 	stw	ra,44(sp)
 3047ab0:	df000a15 	stw	fp,40(sp)
 3047ab4:	df000a04 	addi	fp,sp,40
 3047ab8:	e13ffe0d 	sth	r4,-8(fp)
 3047abc:	e17fff05 	stb	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 55;
 3047ac0:	00800dc4 	movi	r2,55
 3047ac4:	e0bff945 	stb	r2,-27(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3047ac8:	00801004 	movi	r2,64
 3047acc:	e0bffc85 	stb	r2,-14(fp)
 3047ad0:	e03ffcc5 	stb	zero,-13(fp)
 3047ad4:	e03ffd05 	stb	zero,-12(fp)
 3047ad8:	e03ffd45 	stb	zero,-11(fp)
 3047adc:	e03ffd85 	stb	zero,-10(fp)
 3047ae0:	e03ffdc5 	stb	zero,-9(fp)

    SDCARD_TRACE(("CMD55\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 3047ae4:	e0fffc83 	ldbu	r3,-14(fp)
 3047ae8:	e0bff943 	ldbu	r2,-27(fp)
 3047aec:	1884b03a 	or	r2,r3,r2
 3047af0:	e0bffc85 	stb	r2,-14(fp)
    szCmd[1] = RCA16 >> 8;
 3047af4:	e0bffe0b 	ldhu	r2,-8(fp)
 3047af8:	1004d23a 	srli	r2,r2,8
 3047afc:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[2] = RCA16 & 0xFF;
 3047b00:	e0bffe0b 	ldhu	r2,-8(fp)
 3047b04:	1007883a 	mov	r3,r2
 3047b08:	00bfffc4 	movi	r2,-1
 3047b0c:	1884703a 	and	r2,r3,r2
 3047b10:	e0bffd05 	stb	r2,-12(fp)
    crc = crc7(0, szCmd, 5);
 3047b14:	e17ffc84 	addi	r5,fp,-14
 3047b18:	0009883a 	mov	r4,zero
 3047b1c:	01800144 	movi	r6,5
 3047b20:	3046b600 	call	3046b60 <crc7>
 3047b24:	e0bff905 	stb	r2,-28(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3047b28:	e0bff903 	ldbu	r2,-28(fp)
 3047b2c:	1085883a 	add	r2,r2,r2
 3047b30:	10800054 	ori	r2,r2,1
 3047b34:	e0bffdc5 	stb	r2,-9(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3047b38:	e13ffc84 	addi	r4,fp,-14
 3047b3c:	01400184 	movi	r5,6
 3047b40:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3047b44:	e13ffb04 	addi	r4,fp,-20
 3047b48:	01400184 	movi	r5,6
 3047b4c:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3047b50:	e0bffa15 	stw	r2,-24(fp)
    
    // check response content
    if (bSuccess){
 3047b54:	e0bffa17 	ldw	r2,-24(fp)
 3047b58:	1005003a 	cmpeq	r2,r2,zero
 3047b5c:	10002d1e 	bne	r2,zero,3047c14 <SD_CMD55+0x16c>
        alt_u32 CardStatus, ExpectedStatus;  // define in 4.10
        // check command
        if (bSuccess && szResponse[0] != Cmd){
 3047b60:	e0bffa17 	ldw	r2,-24(fp)
 3047b64:	1005003a 	cmpeq	r2,r2,zero
 3047b68:	1000051e 	bne	r2,zero,3047b80 <SD_CMD55+0xd8>
 3047b6c:	e0bffb03 	ldbu	r2,-20(fp)
 3047b70:	10c03fcc 	andi	r3,r2,255
 3047b74:	e0bff943 	ldbu	r2,-27(fp)
 3047b78:	18800126 	beq	r3,r2,3047b80 <SD_CMD55+0xd8>
            SDCARD_DEBUG(("CMD%d Response: Invalid command index\r\n", Cmd));
            bSuccess = FALSE;
 3047b7c:	e03ffa15 	stw	zero,-24(fp)
        }
        
        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
 3047b80:	e0bffb04 	addi	r2,fp,-20
 3047b84:	11000044 	addi	r4,r2,1
 3047b88:	3048ec40 	call	3048ec4 <ArrayToU32>
 3047b8c:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
 3047b90:	e0bfff03 	ldbu	r2,-4(fp)
 3047b94:	108003cc 	andi	r2,r2,15
 3047b98:	1004927a 	slli	r2,r2,9
 3047b9c:	10804814 	ori	r2,r2,288
 3047ba0:	e0bff715 	stw	r2,-36(fp)
        if (CardStatus != ExpectedStatus){
 3047ba4:	e0fff817 	ldw	r3,-32(fp)
 3047ba8:	e0bff717 	ldw	r2,-36(fp)
 3047bac:	18800126 	beq	r3,r2,3047bb4 <SD_CMD55+0x10c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 3047bb0:	e03ffa15 	stw	zero,-24(fp)
        }
        
        // check crc
        if (bSuccess){
 3047bb4:	e0bffa17 	ldw	r2,-24(fp)
 3047bb8:	1005003a 	cmpeq	r2,r2,zero
 3047bbc:	10000c1e 	bne	r2,zero,3047bf0 <SD_CMD55+0x148>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3047bc0:	e17ffb04 	addi	r5,fp,-20
 3047bc4:	0009883a 	mov	r4,zero
 3047bc8:	01800144 	movi	r6,5
 3047bcc:	3046b600 	call	3046b60 <crc7>
 3047bd0:	e0bff605 	stb	r2,-40(fp)
            if (crc != (szResponse[5] >> 1)){
 3047bd4:	e0bffc43 	ldbu	r2,-15(fp)
 3047bd8:	10803fcc 	andi	r2,r2,255
 3047bdc:	1004d07a 	srli	r2,r2,1
 3047be0:	10c03fcc 	andi	r3,r2,255
 3047be4:	e0bff603 	ldbu	r2,-40(fp)
 3047be8:	18800126 	beq	r3,r2,3047bf0 <SD_CMD55+0x148>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3047bec:	e03ffa15 	stw	zero,-24(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 3047bf0:	e0bffa17 	ldw	r2,-24(fp)
 3047bf4:	1005003a 	cmpeq	r2,r2,zero
 3047bf8:	1000061e 	bne	r2,zero,3047c14 <SD_CMD55+0x16c>
 3047bfc:	e0bffc43 	ldbu	r2,-15(fp)
 3047c00:	10803fcc 	andi	r2,r2,255
 3047c04:	1080004c 	andi	r2,r2,1
 3047c08:	1004c03a 	cmpne	r2,r2,zero
 3047c0c:	1000011e 	bne	r2,zero,3047c14 <SD_CMD55+0x16c>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3047c10:	e03ffa15 	stw	zero,-24(fp)
        }
          
    }
    
    return bSuccess;
 3047c14:	e0bffa17 	ldw	r2,-24(fp)
    
}
 3047c18:	e037883a 	mov	sp,fp
 3047c1c:	dfc00117 	ldw	ra,4(sp)
 3047c20:	df000017 	ldw	fp,0(sp)
 3047c24:	dec00204 	addi	sp,sp,8
 3047c28:	f800283a 	ret

03047c2c <SD_ACMD41>:

// Response: R3
bool SD_ACMD41(alt_u32 HostOCR32, alt_u32 *pOCR32){
 3047c2c:	defff504 	addi	sp,sp,-44
 3047c30:	dfc00a15 	stw	ra,40(sp)
 3047c34:	df000915 	stw	fp,36(sp)
 3047c38:	df000904 	addi	fp,sp,36
 3047c3c:	e13ffe15 	stw	r4,-8(fp)
 3047c40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 OCR;
    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 41;
 3047c44:	00800a44 	movi	r2,41
 3047c48:	e0bff845 	stb	r2,-31(fp)
    //alt_u8 szCmd[6]  = {0x40,0x0f,0xf0,0x00,0x00, 0x00}, crc;
    //alt_u8 szCmd[6]  = {0x40,0x00,0xff,0x80,0x00, 0x00}, crc;  // 2.7~3.6V
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;  
 3047c4c:	00801004 	movi	r2,64
 3047c50:	e0bffc85 	stb	r2,-14(fp)
 3047c54:	e03ffcc5 	stb	zero,-13(fp)
 3047c58:	e03ffd05 	stb	zero,-12(fp)
 3047c5c:	e03ffd45 	stb	zero,-11(fp)
 3047c60:	e03ffd85 	stb	zero,-10(fp)
 3047c64:	e03ffdc5 	stb	zero,-9(fp)
    
    SDCARD_TRACE(("ACMD41\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
 3047c68:	e0fffc83 	ldbu	r3,-14(fp)
 3047c6c:	e0bff843 	ldbu	r2,-31(fp)
 3047c70:	1884b03a 	or	r2,r3,r2
 3047c74:	e0bffc85 	stb	r2,-14(fp)
    szCmd[1] |= (HostOCR32>> 24) & 0x40;
 3047c78:	e0fffcc3 	ldbu	r3,-13(fp)
 3047c7c:	e0bffe17 	ldw	r2,-8(fp)
 3047c80:	1004d63a 	srli	r2,r2,24
 3047c84:	1080100c 	andi	r2,r2,64
 3047c88:	1884b03a 	or	r2,r3,r2
 3047c8c:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[2] = (HostOCR32 >> 16) & 0xFF;
 3047c90:	e0bffe17 	ldw	r2,-8(fp)
 3047c94:	1004d43a 	srli	r2,r2,16
 3047c98:	e0bffd05 	stb	r2,-12(fp)
    szCmd[3] = (HostOCR32 >> 8) & 0xFF;
 3047c9c:	e0bffe17 	ldw	r2,-8(fp)
 3047ca0:	1004d23a 	srli	r2,r2,8
 3047ca4:	e0bffd45 	stb	r2,-11(fp)
    szCmd[4] = HostOCR32 & 0xFF;
 3047ca8:	e0bffe17 	ldw	r2,-8(fp)
 3047cac:	e0bffd85 	stb	r2,-10(fp)
    /*szCmd[0] = 0x69;
    szCmd[1] = 0x40;
    szCmd[2] = 0xFF;
    szCmd[3] = 0x80;
    szCmd[4] = 0x00;*/
    crc = crc7(0, szCmd, 5);
 3047cb0:	e17ffc84 	addi	r5,fp,-14
 3047cb4:	0009883a 	mov	r4,zero
 3047cb8:	01800144 	movi	r6,5
 3047cbc:	3046b600 	call	3046b60 <crc7>
 3047cc0:	e0bff805 	stb	r2,-32(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3047cc4:	e0bff803 	ldbu	r2,-32(fp)
 3047cc8:	1085883a 	add	r2,r2,r2
 3047ccc:	10800054 	ori	r2,r2,1
 3047cd0:	e0bffdc5 	stb	r2,-9(fp)
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3047cd4:	e13ffc84 	addi	r4,fp,-14
 3047cd8:	01400184 	movi	r5,6
 3047cdc:	3046c640 	call	3046c64 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3047ce0:	e13ffb04 	addi	r4,fp,-20
 3047ce4:	01400184 	movi	r5,6
 3047ce8:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3047cec:	e0bff915 	stw	r2,-28(fp)
    
    if (bSuccess){
 3047cf0:	e0bff917 	ldw	r2,-28(fp)
 3047cf4:	1005003a 	cmpeq	r2,r2,zero
 3047cf8:	1000291e 	bne	r2,zero,3047da0 <SD_ACMD41+0x174>
        int i;
        // check command
        if (bSuccess && szResponse[0] != 0x3F){
 3047cfc:	e0bff917 	ldw	r2,-28(fp)
 3047d00:	1005003a 	cmpeq	r2,r2,zero
 3047d04:	1000051e 	bne	r2,zero,3047d1c <SD_ACMD41+0xf0>
 3047d08:	e0bffb03 	ldbu	r2,-20(fp)
 3047d0c:	10803fcc 	andi	r2,r2,255
 3047d10:	10800fe0 	cmpeqi	r2,r2,63
 3047d14:	1000011e 	bne	r2,zero,3047d1c <SD_ACMD41+0xf0>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
 3047d18:	e03ff915 	stw	zero,-28(fp)
        }
        
        // [1]~[4]: 32-bits OCR (exampe: 0xFF8000)
        OCR = 0;
 3047d1c:	e03ffa15 	stw	zero,-24(fp)
        for(i=0;i<4;i++){
 3047d20:	e03ff715 	stw	zero,-36(fp)
 3047d24:	00000f06 	br	3047d64 <SD_ACMD41+0x138>
            OCR <<= 8;
 3047d28:	e0bffa17 	ldw	r2,-24(fp)
 3047d2c:	1004923a 	slli	r2,r2,8
 3047d30:	e0bffa15 	stw	r2,-24(fp)
            OCR |= szResponse[i+1];
 3047d34:	e0bff717 	ldw	r2,-36(fp)
 3047d38:	10c00044 	addi	r3,r2,1
 3047d3c:	e0bffb04 	addi	r2,fp,-20
 3047d40:	10c5883a 	add	r2,r2,r3
 3047d44:	10800003 	ldbu	r2,0(r2)
 3047d48:	10c03fcc 	andi	r3,r2,255
 3047d4c:	e0bffa17 	ldw	r2,-24(fp)
 3047d50:	10c4b03a 	or	r2,r2,r3
 3047d54:	e0bffa15 	stw	r2,-24(fp)
 3047d58:	e0bff717 	ldw	r2,-36(fp)
 3047d5c:	10800044 	addi	r2,r2,1
 3047d60:	e0bff715 	stw	r2,-36(fp)
 3047d64:	e0bff717 	ldw	r2,-36(fp)
 3047d68:	10800110 	cmplti	r2,r2,4
 3047d6c:	103fee1e 	bne	r2,zero,3047d28 <SD_ACMD41+0xfc>
        }           
        
        //!!!!!!!!!! note. bit31(Card power up status bit) is LOW when the card is busy.
        if ((OCR & 0x80000000) != 0x80000000){
 3047d70:	e0bffa17 	ldw	r2,-24(fp)
 3047d74:	1004803a 	cmplt	r2,r2,zero
 3047d78:	1000011e 	bne	r2,zero,3047d80 <SD_ACMD41+0x154>
            // busy
            SDCARD_DEBUG(("ACMD%d Response: card is busy\r\n", Cmd));
            bSuccess = FALSE;
 3047d7c:	e03ff915 	stw	zero,-28(fp)
        } 
        
        // check reserved bits and end-bits
        if (bSuccess && (szResponse[5] != 0xFF)){
 3047d80:	e0bff917 	ldw	r2,-28(fp)
 3047d84:	1005003a 	cmpeq	r2,r2,zero
 3047d88:	1000051e 	bne	r2,zero,3047da0 <SD_ACMD41+0x174>
 3047d8c:	e0bffc43 	ldbu	r2,-15(fp)
 3047d90:	10803fcc 	andi	r2,r2,255
 3047d94:	10803fe0 	cmpeqi	r2,r2,255
 3047d98:	1000011e 	bne	r2,zero,3047da0 <SD_ACMD41+0x174>
            SDCARD_DEBUG(("ACMD%d Response: Invalid reserved & end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3047d9c:	e03ff915 	stw	zero,-28(fp)
        }
          
    }      
    
   if (bSuccess)
 3047da0:	e0bff917 	ldw	r2,-28(fp)
 3047da4:	1005003a 	cmpeq	r2,r2,zero
 3047da8:	1000031e 	bne	r2,zero,3047db8 <SD_ACMD41+0x18c>
      *pOCR32 = OCR;  
 3047dac:	e0ffff17 	ldw	r3,-4(fp)
 3047db0:	e0bffa17 	ldw	r2,-24(fp)
 3047db4:	18800015 	stw	r2,0(r3)

    return bSuccess;
 3047db8:	e0bff917 	ldw	r2,-28(fp)
}
 3047dbc:	e037883a 	mov	sp,fp
 3047dc0:	dfc00117 	ldw	ra,4(sp)
 3047dc4:	df000017 	ldw	fp,0(sp)
 3047dc8:	dec00204 	addi	sp,sp,8
 3047dcc:	f800283a 	ret

03047dd0 <SD_CMD2>:

// function: Asks any card to send the CID numbers on the CMD line (4.7.4)
// response: 4.9.3 R2 (CMD2 & CMD10)
// CID(Card IDentification): 128 bits = 128/8 = 16 bytes
bool SD_CMD2(alt_u8 szCID[], int nBufLen){
 3047dd0:	defff204 	addi	sp,sp,-56
 3047dd4:	dfc00d15 	stw	ra,52(sp)
 3047dd8:	df000c15 	stw	fp,48(sp)
 3047ddc:	df000c04 	addi	fp,sp,48
 3047de0:	e13ffe15 	stw	r4,-8(fp)
 3047de4:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[17];  // 136/8 = 17
    const alt_u8 Cmd = 2;
 3047de8:	00800084 	movi	r2,2
 3047dec:	e0bff685 	stb	r2,-38(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3047df0:	00801004 	movi	r2,64
 3047df4:	e0bffc45 	stb	r2,-15(fp)
 3047df8:	e03ffc85 	stb	zero,-14(fp)
 3047dfc:	e03ffcc5 	stb	zero,-13(fp)
 3047e00:	e03ffd05 	stb	zero,-12(fp)
 3047e04:	e03ffd45 	stb	zero,-11(fp)
 3047e08:	e03ffd85 	stb	zero,-10(fp)

    SDCARD_TRACE(("CMD2\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
 3047e0c:	e0fffc43 	ldbu	r3,-15(fp)
 3047e10:	e0bff683 	ldbu	r2,-38(fp)
 3047e14:	1884b03a 	or	r2,r3,r2
 3047e18:	e0bffc45 	stb	r2,-15(fp)
    crc = crc7(0, szCmd, 5);
 3047e1c:	e17ffc44 	addi	r5,fp,-15
 3047e20:	0009883a 	mov	r4,zero
 3047e24:	01800144 	movi	r6,5
 3047e28:	3046b600 	call	3046b60 <crc7>
 3047e2c:	e0bff645 	stb	r2,-39(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3047e30:	e0bff643 	ldbu	r2,-39(fp)
 3047e34:	1085883a 	add	r2,r2,r2
 3047e38:	10800054 	ori	r2,r2,1
 3047e3c:	e0bffd85 	stb	r2,-10(fp)
    
    //
 //   sd_Ncc();
    //for(x=0;x<40;x++)
    //    sd_Ncr();
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3047e40:	e13ffc44 	addi	r4,fp,-15
 3047e44:	01400184 	movi	r5,6
 3047e48:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  //  sd_Ncr();
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3047e4c:	e13ff804 	addi	r4,fp,-32
 3047e50:	01400444 	movi	r5,17
 3047e54:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3047e58:	e0bff715 	stw	r2,-36(fp)
    
    // check response content
    if (bSuccess){
 3047e5c:	e0bff717 	ldw	r2,-36(fp)
 3047e60:	1005003a 	cmpeq	r2,r2,zero
 3047e64:	1000211e 	bne	r2,zero,3047eec <SD_CMD2+0x11c>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
 3047e68:	e0bff717 	ldw	r2,-36(fp)
 3047e6c:	1005003a 	cmpeq	r2,r2,zero
 3047e70:	1000051e 	bne	r2,zero,3047e88 <SD_CMD2+0xb8>
 3047e74:	e0bff803 	ldbu	r2,-32(fp)
 3047e78:	10803fcc 	andi	r2,r2,255
 3047e7c:	10800fe0 	cmpeqi	r2,r2,63
 3047e80:	1000011e 	bne	r2,zero,3047e88 <SD_CMD2+0xb8>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 3047e84:	e03ff715 	stw	zero,-36(fp)
        }
        
        
        // check crc
        if (bSuccess){
 3047e88:	e0bff717 	ldw	r2,-36(fp)
 3047e8c:	1005003a 	cmpeq	r2,r2,zero
 3047e90:	10000d1e 	bne	r2,zero,3047ec8 <SD_CMD2+0xf8>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
 3047e94:	e0bff804 	addi	r2,fp,-32
 3047e98:	11400044 	addi	r5,r2,1
 3047e9c:	0009883a 	mov	r4,zero
 3047ea0:	018003c4 	movi	r6,15
 3047ea4:	3046b600 	call	3046b60 <crc7>
 3047ea8:	e0bff605 	stb	r2,-40(fp)
            if (crc != (szResponse[16] >> 1)){
 3047eac:	e0bffc03 	ldbu	r2,-16(fp)
 3047eb0:	10803fcc 	andi	r2,r2,255
 3047eb4:	1004d07a 	srli	r2,r2,1
 3047eb8:	10c03fcc 	andi	r3,r2,255
 3047ebc:	e0bff603 	ldbu	r2,-40(fp)
 3047ec0:	18800126 	beq	r3,r2,3047ec8 <SD_CMD2+0xf8>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3047ec4:	e03ff715 	stw	zero,-36(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
 3047ec8:	e0bff717 	ldw	r2,-36(fp)
 3047ecc:	1005003a 	cmpeq	r2,r2,zero
 3047ed0:	1000061e 	bne	r2,zero,3047eec <SD_CMD2+0x11c>
 3047ed4:	e0bffc03 	ldbu	r2,-16(fp)
 3047ed8:	10803fcc 	andi	r2,r2,255
 3047edc:	1080004c 	andi	r2,r2,1
 3047ee0:	1004c03a 	cmpne	r2,r2,zero
 3047ee4:	1000011e 	bne	r2,zero,3047eec <SD_CMD2+0x11c>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3047ee8:	e03ff715 	stw	zero,-36(fp)
        }
          
    }
    
    if (bSuccess){
 3047eec:	e0bff717 	ldw	r2,-36(fp)
 3047ef0:	1005003a 	cmpeq	r2,r2,zero
 3047ef4:	1000191e 	bne	r2,zero,3047f5c <SD_CMD2+0x18c>
        int nCopyLen, x;
        // [1]~[16]: CIS or CSD register
        nCopyLen = nBufLen;
 3047ef8:	e0bfff17 	ldw	r2,-4(fp)
 3047efc:	e0bff515 	stw	r2,-44(fp)
        if (nCopyLen > 16)
 3047f00:	e0bff517 	ldw	r2,-44(fp)
 3047f04:	10800450 	cmplti	r2,r2,17
 3047f08:	1000021e 	bne	r2,zero,3047f14 <SD_CMD2+0x144>
            nCopyLen = 16;
 3047f0c:	00800404 	movi	r2,16
 3047f10:	e0bff515 	stw	r2,-44(fp)
        for(x=0;x<nCopyLen;x++)
 3047f14:	e03ff415 	stw	zero,-48(fp)
 3047f18:	00000d06 	br	3047f50 <SD_CMD2+0x180>
            szCID[x] = szResponse[x+1];
 3047f1c:	e0bff417 	ldw	r2,-48(fp)
 3047f20:	1007883a 	mov	r3,r2
 3047f24:	e0bffe17 	ldw	r2,-8(fp)
 3047f28:	1889883a 	add	r4,r3,r2
 3047f2c:	e0bff417 	ldw	r2,-48(fp)
 3047f30:	10c00044 	addi	r3,r2,1
 3047f34:	e0bff804 	addi	r2,fp,-32
 3047f38:	10c5883a 	add	r2,r2,r3
 3047f3c:	10800003 	ldbu	r2,0(r2)
 3047f40:	20800005 	stb	r2,0(r4)
 3047f44:	e0bff417 	ldw	r2,-48(fp)
 3047f48:	10800044 	addi	r2,r2,1
 3047f4c:	e0bff415 	stw	r2,-48(fp)
 3047f50:	e0fff417 	ldw	r3,-48(fp)
 3047f54:	e0bff517 	ldw	r2,-44(fp)
 3047f58:	18bff016 	blt	r3,r2,3047f1c <SD_CMD2+0x14c>
        
    }
    
    return bSuccess;
 3047f5c:	e0bff717 	ldw	r2,-36(fp)
    
}
 3047f60:	e037883a 	mov	sp,fp
 3047f64:	dfc00117 	ldw	ra,4(sp)
 3047f68:	df000017 	ldw	fp,0(sp)
 3047f6c:	dec00204 	addi	sp,sp,8
 3047f70:	f800283a 	ret

03047f74 <SD_CMD3>:

//
bool SD_CMD3(alt_u16 *pRCA16){
 3047f74:	defff704 	addi	sp,sp,-36
 3047f78:	dfc00815 	stw	ra,32(sp)
 3047f7c:	df000715 	stw	fp,28(sp)
 3047f80:	df000704 	addi	fp,sp,28
 3047f84:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 RCA16;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 3;
 3047f88:	008000c4 	movi	r2,3
 3047f8c:	e0bffa45 	stb	r2,-23(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3047f90:	00801004 	movi	r2,64
 3047f94:	e0bffd85 	stb	r2,-10(fp)
 3047f98:	e03ffdc5 	stb	zero,-9(fp)
 3047f9c:	e03ffe05 	stb	zero,-8(fp)
 3047fa0:	e03ffe45 	stb	zero,-7(fp)
 3047fa4:	e03ffe85 	stb	zero,-6(fp)
 3047fa8:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD3\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
 3047fac:	e0fffd83 	ldbu	r3,-10(fp)
 3047fb0:	e0bffa43 	ldbu	r2,-23(fp)
 3047fb4:	1884b03a 	or	r2,r3,r2
 3047fb8:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
 3047fbc:	e17ffd84 	addi	r5,fp,-10
 3047fc0:	0009883a 	mov	r4,zero
 3047fc4:	01800144 	movi	r6,5
 3047fc8:	3046b600 	call	3046b60 <crc7>
 3047fcc:	e0bffa05 	stb	r2,-24(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3047fd0:	e0bffa03 	ldbu	r2,-24(fp)
 3047fd4:	1085883a 	add	r2,r2,r2
 3047fd8:	10800054 	ori	r2,r2,1
 3047fdc:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3047fe0:	e13ffd84 	addi	r4,fp,-10
 3047fe4:	01400184 	movi	r5,6
 3047fe8:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3047fec:	e13ffc04 	addi	r4,fp,-16
 3047ff0:	01400184 	movi	r5,6
 3047ff4:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3047ff8:	e0bffb15 	stw	r2,-20(fp)
    
    // check response content
    if (bSuccess){
 3047ffc:	e0bffb17 	ldw	r2,-20(fp)
 3048000:	1005003a 	cmpeq	r2,r2,zero
 3048004:	1000381e 	bne	r2,zero,30480e8 <SD_CMD3+0x174>
        alt_u16 Status16;
        alt_u8  State8;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
 3048008:	e0bffb17 	ldw	r2,-20(fp)
 304800c:	1005003a 	cmpeq	r2,r2,zero
 3048010:	1000051e 	bne	r2,zero,3048028 <SD_CMD3+0xb4>
 3048014:	e0bffc03 	ldbu	r2,-16(fp)
 3048018:	10c03fcc 	andi	r3,r2,255
 304801c:	e0bffa43 	ldbu	r2,-23(fp)
 3048020:	18800126 	beq	r3,r2,3048028 <SD_CMD3+0xb4>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 3048024:	e03ffb15 	stw	zero,-20(fp)
        }
        
        // New published RCA[31:16] of the card
        RCA16 = (szResponse[1] << 8) | szResponse[2];
 3048028:	e0bffc43 	ldbu	r2,-15(fp)
 304802c:	10803fcc 	andi	r2,r2,255
 3048030:	1004923a 	slli	r2,r2,8
 3048034:	1007883a 	mov	r3,r2
 3048038:	e0bffc83 	ldbu	r2,-14(fp)
 304803c:	10803fcc 	andi	r2,r2,255
 3048040:	1884b03a 	or	r2,r3,r2
 3048044:	e0bffa8d 	sth	r2,-22(fp)
        
        // [15:0] card status bits (16 bits: 23, 22, 19, 12~0) 0x500   
        Status16 = (szResponse[3] << 8) | szResponse[4];
 3048048:	e0bffcc3 	ldbu	r2,-13(fp)
 304804c:	10803fcc 	andi	r2,r2,255
 3048050:	1004923a 	slli	r2,r2,8
 3048054:	1007883a 	mov	r3,r2
 3048058:	e0bffd03 	ldbu	r2,-12(fp)
 304805c:	10803fcc 	andi	r2,r2,255
 3048060:	1884b03a 	or	r2,r3,r2
 3048064:	e0bff98d 	sth	r2,-26(fp)
        State8 = SD_CURRENT_STATE_DECODE(Status16);
 3048068:	e0bff98b 	ldhu	r2,-26(fp)
 304806c:	1004d27a 	srli	r2,r2,9
 3048070:	108003cc 	andi	r2,r2,15
 3048074:	e0bff945 	stb	r2,-27(fp)
        if (State8 != SD_STATE_IDENT){
 3048078:	e0bff943 	ldbu	r2,-27(fp)
 304807c:	108000a0 	cmpeqi	r2,r2,2
 3048080:	1000011e 	bne	r2,zero,3048088 <SD_CMD3+0x114>
           SDCARD_DEBUG(("CMD%d Response: Unexpected CURRENT_STATE\r\n", Cmd));
           bSuccess = FALSE;
 3048084:	e03ffb15 	stw	zero,-20(fp)
        }
        
        // check crc
        if (bSuccess){
 3048088:	e0bffb17 	ldw	r2,-20(fp)
 304808c:	1005003a 	cmpeq	r2,r2,zero
 3048090:	10000c1e 	bne	r2,zero,30480c4 <SD_CMD3+0x150>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3048094:	e17ffc04 	addi	r5,fp,-16
 3048098:	0009883a 	mov	r4,zero
 304809c:	01800144 	movi	r6,5
 30480a0:	3046b600 	call	3046b60 <crc7>
 30480a4:	e0bff905 	stb	r2,-28(fp)
            if (crc != (szResponse[5] >> 1)){
 30480a8:	e0bffd43 	ldbu	r2,-11(fp)
 30480ac:	10803fcc 	andi	r2,r2,255
 30480b0:	1004d07a 	srli	r2,r2,1
 30480b4:	10c03fcc 	andi	r3,r2,255
 30480b8:	e0bff903 	ldbu	r2,-28(fp)
 30480bc:	18800126 	beq	r3,r2,30480c4 <SD_CMD3+0x150>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 30480c0:	e03ffb15 	stw	zero,-20(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 30480c4:	e0bffb17 	ldw	r2,-20(fp)
 30480c8:	1005003a 	cmpeq	r2,r2,zero
 30480cc:	1000061e 	bne	r2,zero,30480e8 <SD_CMD3+0x174>
 30480d0:	e0bffd43 	ldbu	r2,-11(fp)
 30480d4:	10803fcc 	andi	r2,r2,255
 30480d8:	1080004c 	andi	r2,r2,1
 30480dc:	1004c03a 	cmpne	r2,r2,zero
 30480e0:	1000011e 	bne	r2,zero,30480e8 <SD_CMD3+0x174>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 30480e4:	e03ffb15 	stw	zero,-20(fp)
        }
          
    }
    
    if (bSuccess)
 30480e8:	e0bffb17 	ldw	r2,-20(fp)
 30480ec:	1005003a 	cmpeq	r2,r2,zero
 30480f0:	1000031e 	bne	r2,zero,3048100 <SD_CMD3+0x18c>
        *pRCA16 = RCA16;
 30480f4:	e0ffff17 	ldw	r3,-4(fp)
 30480f8:	e0bffa8b 	ldhu	r2,-22(fp)
 30480fc:	1880000d 	sth	r2,0(r3)
    
    return bSuccess;
 3048100:	e0bffb17 	ldw	r2,-20(fp)
    
}
 3048104:	e037883a 	mov	sp,fp
 3048108:	dfc00117 	ldw	ra,4(sp)
 304810c:	df000017 	ldw	fp,0(sp)
 3048110:	dec00204 	addi	sp,sp,8
 3048114:	f800283a 	ret

03048118 <SD_CMD9>:

bool SD_CMD9(alt_u16 RCA16, alt_u8 szCSD[], int nBufLen){
 3048118:	defff104 	addi	sp,sp,-60
 304811c:	dfc00e15 	stw	ra,56(sp)
 3048120:	df000d15 	stw	fp,52(sp)
 3048124:	df000d04 	addi	fp,sp,52
 3048128:	e17ffe15 	stw	r5,-8(fp)
 304812c:	e1bfff15 	stw	r6,-4(fp)
 3048130:	e13ffd0d 	sth	r4,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 9;
 3048134:	00800244 	movi	r2,9
 3048138:	e0bff585 	stb	r2,-42(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 304813c:	00801004 	movi	r2,64
 3048140:	e0bffb45 	stb	r2,-19(fp)
 3048144:	e03ffb85 	stb	zero,-18(fp)
 3048148:	e03ffbc5 	stb	zero,-17(fp)
 304814c:	e03ffc05 	stb	zero,-16(fp)
 3048150:	e03ffc45 	stb	zero,-15(fp)
 3048154:	e03ffc85 	stb	zero,-14(fp)

    SDCARD_TRACE(("CMD9\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 3048158:	e0fffb43 	ldbu	r3,-19(fp)
 304815c:	e0bff583 	ldbu	r2,-42(fp)
 3048160:	1884b03a 	or	r2,r3,r2
 3048164:	e0bffb45 	stb	r2,-19(fp)
    szCmd[1] |= RCA16 >> 8;
 3048168:	e0fffb83 	ldbu	r3,-18(fp)
 304816c:	e0bffd0b 	ldhu	r2,-12(fp)
 3048170:	1004d23a 	srli	r2,r2,8
 3048174:	1884b03a 	or	r2,r3,r2
 3048178:	e0bffb85 	stb	r2,-18(fp)
    szCmd[2] |= RCA16 & 0xFF;
 304817c:	e0bffbc3 	ldbu	r2,-17(fp)
 3048180:	1009883a 	mov	r4,r2
 3048184:	e0bffd0b 	ldhu	r2,-12(fp)
 3048188:	1007883a 	mov	r3,r2
 304818c:	00bfffc4 	movi	r2,-1
 3048190:	1884703a 	and	r2,r3,r2
 3048194:	2084b03a 	or	r2,r4,r2
 3048198:	e0bffbc5 	stb	r2,-17(fp)
    crc = crc7(0, szCmd, 5);
 304819c:	e17ffb44 	addi	r5,fp,-19
 30481a0:	0009883a 	mov	r4,zero
 30481a4:	01800144 	movi	r6,5
 30481a8:	3046b600 	call	3046b60 <crc7>
 30481ac:	e0bff545 	stb	r2,-43(fp)
    szCmd[5] = (crc << 1) | 0x01;
 30481b0:	e0bff543 	ldbu	r2,-43(fp)
 30481b4:	1085883a 	add	r2,r2,r2
 30481b8:	10800054 	ori	r2,r2,1
 30481bc:	e0bffc85 	stb	r2,-14(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 30481c0:	e13ffb44 	addi	r4,fp,-19
 30481c4:	01400184 	movi	r5,6
 30481c8:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 30481cc:	e13ff704 	addi	r4,fp,-36
 30481d0:	01400444 	movi	r5,17
 30481d4:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 30481d8:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
 30481dc:	e0bff617 	ldw	r2,-40(fp)
 30481e0:	1005003a 	cmpeq	r2,r2,zero
 30481e4:	1000211e 	bne	r2,zero,304826c <SD_CMD9+0x154>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
 30481e8:	e0bff617 	ldw	r2,-40(fp)
 30481ec:	1005003a 	cmpeq	r2,r2,zero
 30481f0:	1000051e 	bne	r2,zero,3048208 <SD_CMD9+0xf0>
 30481f4:	e0bff703 	ldbu	r2,-36(fp)
 30481f8:	10803fcc 	andi	r2,r2,255
 30481fc:	10800fe0 	cmpeqi	r2,r2,63
 3048200:	1000011e 	bne	r2,zero,3048208 <SD_CMD9+0xf0>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 3048204:	e03ff615 	stw	zero,-40(fp)
        }
        
        // check crc
        if (bSuccess){
 3048208:	e0bff617 	ldw	r2,-40(fp)
 304820c:	1005003a 	cmpeq	r2,r2,zero
 3048210:	10000d1e 	bne	r2,zero,3048248 <SD_CMD9+0x130>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
 3048214:	e0bff704 	addi	r2,fp,-36
 3048218:	11400044 	addi	r5,r2,1
 304821c:	0009883a 	mov	r4,zero
 3048220:	018003c4 	movi	r6,15
 3048224:	3046b600 	call	3046b60 <crc7>
 3048228:	e0bff505 	stb	r2,-44(fp)
            if (crc != (szResponse[16] >> 1)){
 304822c:	e0bffb03 	ldbu	r2,-20(fp)
 3048230:	10803fcc 	andi	r2,r2,255
 3048234:	1004d07a 	srli	r2,r2,1
 3048238:	10c03fcc 	andi	r3,r2,255
 304823c:	e0bff503 	ldbu	r2,-44(fp)
 3048240:	18800126 	beq	r3,r2,3048248 <SD_CMD9+0x130>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048244:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
 3048248:	e0bff617 	ldw	r2,-40(fp)
 304824c:	1005003a 	cmpeq	r2,r2,zero
 3048250:	1000061e 	bne	r2,zero,304826c <SD_CMD9+0x154>
 3048254:	e0bffb03 	ldbu	r2,-20(fp)
 3048258:	10803fcc 	andi	r2,r2,255
 304825c:	1080004c 	andi	r2,r2,1
 3048260:	1004c03a 	cmpne	r2,r2,zero
 3048264:	1000011e 	bne	r2,zero,304826c <SD_CMD9+0x154>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3048268:	e03ff615 	stw	zero,-40(fp)
        }
          
    }
    
    if (bSuccess){
 304826c:	e0bff617 	ldw	r2,-40(fp)
 3048270:	1005003a 	cmpeq	r2,r2,zero
 3048274:	1000171e 	bne	r2,zero,30482d4 <SD_CMD9+0x1bc>
        int nCopyLen, x;
        if (nCopyLen > 16)
 3048278:	e0bff417 	ldw	r2,-48(fp)
 304827c:	10800450 	cmplti	r2,r2,17
 3048280:	1000021e 	bne	r2,zero,304828c <SD_CMD9+0x174>
            nCopyLen = 16;
 3048284:	00800404 	movi	r2,16
 3048288:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
 304828c:	e03ff315 	stw	zero,-52(fp)
 3048290:	00000d06 	br	30482c8 <SD_CMD9+0x1b0>
            szCSD[x] = szResponse[x+1];           
 3048294:	e0bff317 	ldw	r2,-52(fp)
 3048298:	1007883a 	mov	r3,r2
 304829c:	e0bffe17 	ldw	r2,-8(fp)
 30482a0:	1889883a 	add	r4,r3,r2
 30482a4:	e0bff317 	ldw	r2,-52(fp)
 30482a8:	10c00044 	addi	r3,r2,1
 30482ac:	e0bff704 	addi	r2,fp,-36
 30482b0:	10c5883a 	add	r2,r2,r3
 30482b4:	10800003 	ldbu	r2,0(r2)
 30482b8:	20800005 	stb	r2,0(r4)
 30482bc:	e0bff317 	ldw	r2,-52(fp)
 30482c0:	10800044 	addi	r2,r2,1
 30482c4:	e0bff315 	stw	r2,-52(fp)
 30482c8:	e0fff317 	ldw	r3,-52(fp)
 30482cc:	e0bff417 	ldw	r2,-48(fp)
 30482d0:	18bff016 	blt	r3,r2,3048294 <SD_CMD9+0x17c>
    }        
    
    return bSuccess;
 30482d4:	e0bff617 	ldw	r2,-40(fp)
}
 30482d8:	e037883a 	mov	sp,fp
 30482dc:	dfc00117 	ldw	ra,4(sp)
 30482e0:	df000017 	ldw	fp,0(sp)
 30482e4:	dec00204 	addi	sp,sp,8
 30482e8:	f800283a 	ret

030482ec <SD_CMD10>:

bool SD_CMD10(alt_u16 RCA16, alt_u8 szCID[], int nBufLen){
 30482ec:	defff104 	addi	sp,sp,-60
 30482f0:	dfc00e15 	stw	ra,56(sp)
 30482f4:	df000d15 	stw	fp,52(sp)
 30482f8:	df000d04 	addi	fp,sp,52
 30482fc:	e17ffe15 	stw	r5,-8(fp)
 3048300:	e1bfff15 	stw	r6,-4(fp)
 3048304:	e13ffd0d 	sth	r4,-12(fp)
    bool bSuccess;
    alt_u8 szResponse[17];
    const alt_u8 Cmd = 10;
 3048308:	00800284 	movi	r2,10
 304830c:	e0bff585 	stb	r2,-42(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3048310:	00801004 	movi	r2,64
 3048314:	e0bffb45 	stb	r2,-19(fp)
 3048318:	e03ffb85 	stb	zero,-18(fp)
 304831c:	e03ffbc5 	stb	zero,-17(fp)
 3048320:	e03ffc05 	stb	zero,-16(fp)
 3048324:	e03ffc45 	stb	zero,-15(fp)
 3048328:	e03ffc85 	stb	zero,-14(fp)

    SDCARD_TRACE(("CMD10\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 304832c:	e0fffb43 	ldbu	r3,-19(fp)
 3048330:	e0bff583 	ldbu	r2,-42(fp)
 3048334:	1884b03a 	or	r2,r3,r2
 3048338:	e0bffb45 	stb	r2,-19(fp)
    szCmd[1] |= RCA16 >> 8;
 304833c:	e0fffb83 	ldbu	r3,-18(fp)
 3048340:	e0bffd0b 	ldhu	r2,-12(fp)
 3048344:	1004d23a 	srli	r2,r2,8
 3048348:	1884b03a 	or	r2,r3,r2
 304834c:	e0bffb85 	stb	r2,-18(fp)
    szCmd[2] |= RCA16 & 0xFF;
 3048350:	e0bffbc3 	ldbu	r2,-17(fp)
 3048354:	1009883a 	mov	r4,r2
 3048358:	e0bffd0b 	ldhu	r2,-12(fp)
 304835c:	1007883a 	mov	r3,r2
 3048360:	00bfffc4 	movi	r2,-1
 3048364:	1884703a 	and	r2,r3,r2
 3048368:	2084b03a 	or	r2,r4,r2
 304836c:	e0bffbc5 	stb	r2,-17(fp)
    crc = crc7(0, szCmd, 5);
 3048370:	e17ffb44 	addi	r5,fp,-19
 3048374:	0009883a 	mov	r4,zero
 3048378:	01800144 	movi	r6,5
 304837c:	3046b600 	call	3046b60 <crc7>
 3048380:	e0bff545 	stb	r2,-43(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3048384:	e0bff543 	ldbu	r2,-43(fp)
 3048388:	1085883a 	add	r2,r2,r2
 304838c:	10800054 	ori	r2,r2,1
 3048390:	e0bffc85 	stb	r2,-14(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3048394:	e13ffb44 	addi	r4,fp,-19
 3048398:	01400184 	movi	r5,6
 304839c:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 30483a0:	e13ff704 	addi	r4,fp,-36
 30483a4:	01400444 	movi	r5,17
 30483a8:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 30483ac:	e0bff615 	stw	r2,-40(fp)
    
    // check response content
    if (bSuccess){
 30483b0:	e0bff617 	ldw	r2,-40(fp)
 30483b4:	1005003a 	cmpeq	r2,r2,zero
 30483b8:	1000211e 	bne	r2,zero,3048440 <SD_CMD10+0x154>
        // check command
        if (bSuccess && szResponse[0] != 0x3F){ 
 30483bc:	e0bff617 	ldw	r2,-40(fp)
 30483c0:	1005003a 	cmpeq	r2,r2,zero
 30483c4:	1000051e 	bne	r2,zero,30483dc <SD_CMD10+0xf0>
 30483c8:	e0bff703 	ldbu	r2,-36(fp)
 30483cc:	10803fcc 	andi	r2,r2,255
 30483d0:	10800fe0 	cmpeqi	r2,r2,63
 30483d4:	1000011e 	bne	r2,zero,30483dc <SD_CMD10+0xf0>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 30483d8:	e03ff615 	stw	zero,-40(fp)
        }
        
        // check crc
        if (bSuccess){
 30483dc:	e0bff617 	ldw	r2,-40(fp)
 30483e0:	1005003a 	cmpeq	r2,r2,zero
 30483e4:	10000d1e 	bne	r2,zero,304841c <SD_CMD10+0x130>
            alt_u8 crc;
            crc = crc7(0, &szResponse[1], 15);
 30483e8:	e0bff704 	addi	r2,fp,-36
 30483ec:	11400044 	addi	r5,r2,1
 30483f0:	0009883a 	mov	r4,zero
 30483f4:	018003c4 	movi	r6,15
 30483f8:	3046b600 	call	3046b60 <crc7>
 30483fc:	e0bff505 	stb	r2,-44(fp)
            if (crc != (szResponse[16] >> 1)){
 3048400:	e0bffb03 	ldbu	r2,-20(fp)
 3048404:	10803fcc 	andi	r2,r2,255
 3048408:	1004d07a 	srli	r2,r2,1
 304840c:	10c03fcc 	andi	r3,r2,255
 3048410:	e0bff503 	ldbu	r2,-44(fp)
 3048414:	18800126 	beq	r3,r2,304841c <SD_CMD10+0x130>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048418:	e03ff615 	stw	zero,-40(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[16] & 0x01) != 0x01)){
 304841c:	e0bff617 	ldw	r2,-40(fp)
 3048420:	1005003a 	cmpeq	r2,r2,zero
 3048424:	1000061e 	bne	r2,zero,3048440 <SD_CMD10+0x154>
 3048428:	e0bffb03 	ldbu	r2,-20(fp)
 304842c:	10803fcc 	andi	r2,r2,255
 3048430:	1080004c 	andi	r2,r2,1
 3048434:	1004c03a 	cmpne	r2,r2,zero
 3048438:	1000011e 	bne	r2,zero,3048440 <SD_CMD10+0x154>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 304843c:	e03ff615 	stw	zero,-40(fp)
        }
          
    }
    
    if (bSuccess){
 3048440:	e0bff617 	ldw	r2,-40(fp)
 3048444:	1005003a 	cmpeq	r2,r2,zero
 3048448:	1000171e 	bne	r2,zero,30484a8 <SD_CMD10+0x1bc>
        int nCopyLen, x;
        if (nCopyLen > 16)
 304844c:	e0bff417 	ldw	r2,-48(fp)
 3048450:	10800450 	cmplti	r2,r2,17
 3048454:	1000021e 	bne	r2,zero,3048460 <SD_CMD10+0x174>
            nCopyLen = 16;
 3048458:	00800404 	movi	r2,16
 304845c:	e0bff415 	stw	r2,-48(fp)
        for(x=0;x<nCopyLen;x++)
 3048460:	e03ff315 	stw	zero,-52(fp)
 3048464:	00000d06 	br	304849c <SD_CMD10+0x1b0>
            szCID[x] = szResponse[x+1];           
 3048468:	e0bff317 	ldw	r2,-52(fp)
 304846c:	1007883a 	mov	r3,r2
 3048470:	e0bffe17 	ldw	r2,-8(fp)
 3048474:	1889883a 	add	r4,r3,r2
 3048478:	e0bff317 	ldw	r2,-52(fp)
 304847c:	10c00044 	addi	r3,r2,1
 3048480:	e0bff704 	addi	r2,fp,-36
 3048484:	10c5883a 	add	r2,r2,r3
 3048488:	10800003 	ldbu	r2,0(r2)
 304848c:	20800005 	stb	r2,0(r4)
 3048490:	e0bff317 	ldw	r2,-52(fp)
 3048494:	10800044 	addi	r2,r2,1
 3048498:	e0bff315 	stw	r2,-52(fp)
 304849c:	e0fff317 	ldw	r3,-52(fp)
 30484a0:	e0bff417 	ldw	r2,-48(fp)
 30484a4:	18bff016 	blt	r3,r2,3048468 <SD_CMD10+0x17c>
    }        
    
    return bSuccess;
 30484a8:	e0bff617 	ldw	r2,-40(fp)
}
 30484ac:	e037883a 	mov	sp,fp
 30484b0:	dfc00117 	ldw	ra,4(sp)
 30484b4:	df000017 	ldw	fp,0(sp)
 30484b8:	dec00204 	addi	sp,sp,8
 30484bc:	f800283a 	ret

030484c0 <SD_CMD7>:


bool SD_CMD7(alt_u16 RCA16){
 30484c0:	defff504 	addi	sp,sp,-44
 30484c4:	dfc00a15 	stw	ra,40(sp)
 30484c8:	df000915 	stw	fp,36(sp)
 30484cc:	df000904 	addi	fp,sp,36
 30484d0:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 7;
 30484d4:	008001c4 	movi	r2,7
 30484d8:	e0bffa45 	stb	r2,-23(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 30484dc:	00801004 	movi	r2,64
 30484e0:	e0bffd85 	stb	r2,-10(fp)
 30484e4:	e03ffdc5 	stb	zero,-9(fp)
 30484e8:	e03ffe05 	stb	zero,-8(fp)
 30484ec:	e03ffe45 	stb	zero,-7(fp)
 30484f0:	e03ffe85 	stb	zero,-6(fp)
 30484f4:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD7\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 30484f8:	e0fffd83 	ldbu	r3,-10(fp)
 30484fc:	e0bffa43 	ldbu	r2,-23(fp)
 3048500:	1884b03a 	or	r2,r3,r2
 3048504:	e0bffd85 	stb	r2,-10(fp)
    szCmd[1] |= RCA16 >> 8;
 3048508:	e0fffdc3 	ldbu	r3,-9(fp)
 304850c:	e0bfff0b 	ldhu	r2,-4(fp)
 3048510:	1004d23a 	srli	r2,r2,8
 3048514:	1884b03a 	or	r2,r3,r2
 3048518:	e0bffdc5 	stb	r2,-9(fp)
    szCmd[2] |= RCA16 & 0xFF;
 304851c:	e0bffe03 	ldbu	r2,-8(fp)
 3048520:	1009883a 	mov	r4,r2
 3048524:	e0bfff0b 	ldhu	r2,-4(fp)
 3048528:	1007883a 	mov	r3,r2
 304852c:	00bfffc4 	movi	r2,-1
 3048530:	1884703a 	and	r2,r3,r2
 3048534:	2084b03a 	or	r2,r4,r2
 3048538:	e0bffe05 	stb	r2,-8(fp)
    crc = crc7(0, szCmd, 5);
 304853c:	e17ffd84 	addi	r5,fp,-10
 3048540:	0009883a 	mov	r4,zero
 3048544:	01800144 	movi	r6,5
 3048548:	3046b600 	call	3046b60 <crc7>
 304854c:	e0bffa05 	stb	r2,-24(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3048550:	e0bffa03 	ldbu	r2,-24(fp)
 3048554:	1085883a 	add	r2,r2,r2
 3048558:	10800054 	ori	r2,r2,1
 304855c:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3048560:	e13ffd84 	addi	r4,fp,-10
 3048564:	01400184 	movi	r5,6
 3048568:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 304856c:	e13ffc04 	addi	r4,fp,-16
 3048570:	01400184 	movi	r5,6
 3048574:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3048578:	e0bffb15 	stw	r2,-20(fp)
    
    // check response content
    if (bSuccess){
 304857c:	e0bffb17 	ldw	r2,-20(fp)
 3048580:	1005003a 	cmpeq	r2,r2,zero
 3048584:	10002a1e 	bne	r2,zero,3048630 <SD_CMD7+0x170>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
 3048588:	e0bffb17 	ldw	r2,-20(fp)
 304858c:	1005003a 	cmpeq	r2,r2,zero
 3048590:	1000051e 	bne	r2,zero,30485a8 <SD_CMD7+0xe8>
 3048594:	e0bffc03 	ldbu	r2,-16(fp)
 3048598:	10c03fcc 	andi	r3,r2,255
 304859c:	e0bffa43 	ldbu	r2,-23(fp)
 30485a0:	18800126 	beq	r3,r2,30485a8 <SD_CMD7+0xe8>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 30485a4:	e03ffb15 	stw	zero,-20(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
 30485a8:	e0bffc04 	addi	r2,fp,-16
 30485ac:	11000044 	addi	r4,r2,1
 30485b0:	3048ec40 	call	3048ec4 <ArrayToU32>
 30485b4:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_STBY);
 30485b8:	0081c004 	movi	r2,1792
 30485bc:	e0bff815 	stw	r2,-32(fp)
        if (CardStatus != ExpectedStatus){
 30485c0:	e0fff917 	ldw	r3,-28(fp)
 30485c4:	e0bff817 	ldw	r2,-32(fp)
 30485c8:	18800126 	beq	r3,r2,30485d0 <SD_CMD7+0x110>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 30485cc:	e03ffb15 	stw	zero,-20(fp)
        }        
        
        // check crc
        if (bSuccess){
 30485d0:	e0bffb17 	ldw	r2,-20(fp)
 30485d4:	1005003a 	cmpeq	r2,r2,zero
 30485d8:	10000c1e 	bne	r2,zero,304860c <SD_CMD7+0x14c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 30485dc:	e17ffc04 	addi	r5,fp,-16
 30485e0:	0009883a 	mov	r4,zero
 30485e4:	01800144 	movi	r6,5
 30485e8:	3046b600 	call	3046b60 <crc7>
 30485ec:	e0bff705 	stb	r2,-36(fp)
            if (crc != (szResponse[5] >> 1)){
 30485f0:	e0bffd43 	ldbu	r2,-11(fp)
 30485f4:	10803fcc 	andi	r2,r2,255
 30485f8:	1004d07a 	srli	r2,r2,1
 30485fc:	10c03fcc 	andi	r3,r2,255
 3048600:	e0bff703 	ldbu	r2,-36(fp)
 3048604:	18800126 	beq	r3,r2,304860c <SD_CMD7+0x14c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048608:	e03ffb15 	stw	zero,-20(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 304860c:	e0bffb17 	ldw	r2,-20(fp)
 3048610:	1005003a 	cmpeq	r2,r2,zero
 3048614:	1000061e 	bne	r2,zero,3048630 <SD_CMD7+0x170>
 3048618:	e0bffd43 	ldbu	r2,-11(fp)
 304861c:	10803fcc 	andi	r2,r2,255
 3048620:	1080004c 	andi	r2,r2,1
 3048624:	1004c03a 	cmpne	r2,r2,zero
 3048628:	1000011e 	bne	r2,zero,3048630 <SD_CMD7+0x170>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 304862c:	e03ffb15 	stw	zero,-20(fp)
        }
          
    }
    
     
    
    return bSuccess;
 3048630:	e0bffb17 	ldw	r2,-20(fp)
}
 3048634:	e037883a 	mov	sp,fp
 3048638:	dfc00117 	ldw	ra,4(sp)
 304863c:	df000017 	ldw	fp,0(sp)
 3048640:	dec00204 	addi	sp,sp,8
 3048644:	f800283a 	ret

03048648 <SD_CMD16>:

bool SD_CMD16(alt_u32 BlockSize){
 3048648:	defff504 	addi	sp,sp,-44
 304864c:	dfc00a15 	stw	ra,40(sp)
 3048650:	df000915 	stw	fp,36(sp)
 3048654:	df000904 	addi	fp,sp,36
 3048658:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 16;
 304865c:	00800404 	movi	r2,16
 3048660:	e0bffa45 	stb	r2,-23(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3048664:	00801004 	movi	r2,64
 3048668:	e0bffd85 	stb	r2,-10(fp)
 304866c:	e03ffdc5 	stb	zero,-9(fp)
 3048670:	e03ffe05 	stb	zero,-8(fp)
 3048674:	e03ffe45 	stb	zero,-7(fp)
 3048678:	e03ffe85 	stb	zero,-6(fp)
 304867c:	e03ffec5 	stb	zero,-5(fp)

    SDCARD_TRACE(("CMD16\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 3048680:	e0fffd83 	ldbu	r3,-10(fp)
 3048684:	e0bffa43 	ldbu	r2,-23(fp)
 3048688:	1884b03a 	or	r2,r3,r2
 304868c:	e0bffd85 	stb	r2,-10(fp)
    szCmd[1] |= BlockSize >> 24;
 3048690:	e0fffdc3 	ldbu	r3,-9(fp)
 3048694:	e0bfff17 	ldw	r2,-4(fp)
 3048698:	1004d63a 	srli	r2,r2,24
 304869c:	1884b03a 	or	r2,r3,r2
 30486a0:	e0bffdc5 	stb	r2,-9(fp)
    szCmd[2] |= BlockSize >> 16;
 30486a4:	e0fffe03 	ldbu	r3,-8(fp)
 30486a8:	e0bfff17 	ldw	r2,-4(fp)
 30486ac:	1004d43a 	srli	r2,r2,16
 30486b0:	1884b03a 	or	r2,r3,r2
 30486b4:	e0bffe05 	stb	r2,-8(fp)
    szCmd[3] |= BlockSize >> 8;
 30486b8:	e0fffe43 	ldbu	r3,-7(fp)
 30486bc:	e0bfff17 	ldw	r2,-4(fp)
 30486c0:	1004d23a 	srli	r2,r2,8
 30486c4:	1884b03a 	or	r2,r3,r2
 30486c8:	e0bffe45 	stb	r2,-7(fp)
    szCmd[4] |= BlockSize & 0xFF;
 30486cc:	e0fffe83 	ldbu	r3,-6(fp)
 30486d0:	e0bfff17 	ldw	r2,-4(fp)
 30486d4:	1884b03a 	or	r2,r3,r2
 30486d8:	e0bffe85 	stb	r2,-6(fp)
    crc = crc7(0, szCmd, 5);
 30486dc:	e17ffd84 	addi	r5,fp,-10
 30486e0:	0009883a 	mov	r4,zero
 30486e4:	01800144 	movi	r6,5
 30486e8:	3046b600 	call	3046b60 <crc7>
 30486ec:	e0bffa05 	stb	r2,-24(fp)
    szCmd[5] = (crc << 1) | 0x01;
 30486f0:	e0bffa03 	ldbu	r2,-24(fp)
 30486f4:	1085883a 	add	r2,r2,r2
 30486f8:	10800054 	ori	r2,r2,1
 30486fc:	e0bffec5 	stb	r2,-5(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3048700:	e13ffd84 	addi	r4,fp,-10
 3048704:	01400184 	movi	r5,6
 3048708:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  
    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 304870c:	e13ffc04 	addi	r4,fp,-16
 3048710:	01400184 	movi	r5,6
 3048714:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3048718:	e0bffb15 	stw	r2,-20(fp)
    
    // check response content
    if (bSuccess){
 304871c:	e0bffb17 	ldw	r2,-20(fp)
 3048720:	1005003a 	cmpeq	r2,r2,zero
 3048724:	10002a1e 	bne	r2,zero,30487d0 <SD_CMD16+0x188>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
 3048728:	e0bffb17 	ldw	r2,-20(fp)
 304872c:	1005003a 	cmpeq	r2,r2,zero
 3048730:	1000051e 	bne	r2,zero,3048748 <SD_CMD16+0x100>
 3048734:	e0bffc03 	ldbu	r2,-16(fp)
 3048738:	10c03fcc 	andi	r3,r2,255
 304873c:	e0bffa43 	ldbu	r2,-23(fp)
 3048740:	18800126 	beq	r3,r2,3048748 <SD_CMD16+0x100>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 3048744:	e03ffb15 	stw	zero,-20(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
 3048748:	e0bffc04 	addi	r2,fp,-16
 304874c:	11000044 	addi	r4,r2,1
 3048750:	3048ec40 	call	3048ec4 <ArrayToU32>
 3048754:	e0bff915 	stw	r2,-28(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
 3048758:	00824004 	movi	r2,2304
 304875c:	e0bff815 	stw	r2,-32(fp)
        if (CardStatus != ExpectedStatus){
 3048760:	e0fff917 	ldw	r3,-28(fp)
 3048764:	e0bff817 	ldw	r2,-32(fp)
 3048768:	18800126 	beq	r3,r2,3048770 <SD_CMD16+0x128>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 304876c:	e03ffb15 	stw	zero,-20(fp)
        }        
        
        // check crc
        if (bSuccess){
 3048770:	e0bffb17 	ldw	r2,-20(fp)
 3048774:	1005003a 	cmpeq	r2,r2,zero
 3048778:	10000c1e 	bne	r2,zero,30487ac <SD_CMD16+0x164>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 304877c:	e17ffc04 	addi	r5,fp,-16
 3048780:	0009883a 	mov	r4,zero
 3048784:	01800144 	movi	r6,5
 3048788:	3046b600 	call	3046b60 <crc7>
 304878c:	e0bff705 	stb	r2,-36(fp)
            if (crc != (szResponse[5] >> 1)){
 3048790:	e0bffd43 	ldbu	r2,-11(fp)
 3048794:	10803fcc 	andi	r2,r2,255
 3048798:	1004d07a 	srli	r2,r2,1
 304879c:	10c03fcc 	andi	r3,r2,255
 30487a0:	e0bff703 	ldbu	r2,-36(fp)
 30487a4:	18800126 	beq	r3,r2,30487ac <SD_CMD16+0x164>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 30487a8:	e03ffb15 	stw	zero,-20(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 30487ac:	e0bffb17 	ldw	r2,-20(fp)
 30487b0:	1005003a 	cmpeq	r2,r2,zero
 30487b4:	1000061e 	bne	r2,zero,30487d0 <SD_CMD16+0x188>
 30487b8:	e0bffd43 	ldbu	r2,-11(fp)
 30487bc:	10803fcc 	andi	r2,r2,255
 30487c0:	1080004c 	andi	r2,r2,1
 30487c4:	1004c03a 	cmpne	r2,r2,zero
 30487c8:	1000011e 	bne	r2,zero,30487d0 <SD_CMD16+0x188>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 30487cc:	e03ffb15 	stw	zero,-20(fp)
        }
          
    }
    
     
    
    return bSuccess;
 30487d0:	e0bffb17 	ldw	r2,-20(fp)
}
 30487d4:	e037883a 	mov	sp,fp
 30487d8:	dfc00117 	ldw	ra,4(sp)
 30487dc:	df000017 	ldw	fp,0(sp)
 30487e0:	dec00204 	addi	sp,sp,8
 30487e4:	f800283a 	ret

030487e8 <SD_ACMD6>:

// SET_BUS_WIDTH
// Response: R1
bool SD_ACMD6(bool b4BitsBus, alt_u8 ExpectedState){
 30487e8:	defff204 	addi	sp,sp,-56
 30487ec:	dfc00d15 	stw	ra,52(sp)
 30487f0:	df000c15 	stw	fp,48(sp)
 30487f4:	df000c04 	addi	fp,sp,48
 30487f8:	e13ffc15 	stw	r4,-16(fp)
 30487fc:	e17ffd05 	stb	r5,-12(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 6;
 3048800:	00800184 	movi	r2,6
 3048804:	e0bff745 	stb	r2,-35(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
 3048808:	00801004 	movi	r2,64
 304880c:	e0bffa85 	stb	r2,-22(fp)
 3048810:	e03ffac5 	stb	zero,-21(fp)
 3048814:	e03ffb05 	stb	zero,-20(fp)
 3048818:	e03ffb45 	stb	zero,-19(fp)
 304881c:	e03ffb85 	stb	zero,-18(fp)
 3048820:	e03ffbc5 	stb	zero,-17(fp)

    SDCARD_TRACE(("ACMD6\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 3048824:	e0fffa83 	ldbu	r3,-22(fp)
 3048828:	e0bff743 	ldbu	r2,-35(fp)
 304882c:	1884b03a 	or	r2,r3,r2
 3048830:	e0bffa85 	stb	r2,-22(fp)
    szCmd[4] |= b4BitsBus?2:0;
 3048834:	e0bffb83 	ldbu	r2,-18(fp)
 3048838:	e0bfff05 	stb	r2,-4(fp)
 304883c:	e0bffc17 	ldw	r2,-16(fp)
 3048840:	1005003a 	cmpeq	r2,r2,zero
 3048844:	1000031e 	bne	r2,zero,3048854 <SD_ACMD6+0x6c>
 3048848:	00800084 	movi	r2,2
 304884c:	e0bffe05 	stb	r2,-8(fp)
 3048850:	00000106 	br	3048858 <SD_ACMD6+0x70>
 3048854:	e03ffe05 	stb	zero,-8(fp)
 3048858:	e0ffff03 	ldbu	r3,-4(fp)
 304885c:	e13ffe03 	ldbu	r4,-8(fp)
 3048860:	1904b03a 	or	r2,r3,r4
 3048864:	e0bffb85 	stb	r2,-18(fp)
    crc = crc7(0, szCmd, 5);
 3048868:	e17ffa84 	addi	r5,fp,-22
 304886c:	0009883a 	mov	r4,zero
 3048870:	01800144 	movi	r6,5
 3048874:	3046b600 	call	3046b60 <crc7>
 3048878:	e0bff705 	stb	r2,-36(fp)
    szCmd[5] = (crc << 1) | 0x01;
 304887c:	e0bff703 	ldbu	r2,-36(fp)
 3048880:	1085883a 	add	r2,r2,r2
 3048884:	10800054 	ori	r2,r2,1
 3048888:	e0bffbc5 	stb	r2,-17(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 304888c:	e13ffa84 	addi	r4,fp,-22
 3048890:	01400184 	movi	r5,6
 3048894:	3046c640 	call	3046c64 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3048898:	e13ff904 	addi	r4,fp,-28
 304889c:	01400184 	movi	r5,6
 30488a0:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 30488a4:	e0bff815 	stw	r2,-32(fp)
    
    if (bSuccess){
 30488a8:	e0bff817 	ldw	r2,-32(fp)
 30488ac:	1005003a 	cmpeq	r2,r2,zero
 30488b0:	10002d1e 	bne	r2,zero,3048968 <SD_ACMD6+0x180>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
 30488b4:	e0bff817 	ldw	r2,-32(fp)
 30488b8:	1005003a 	cmpeq	r2,r2,zero
 30488bc:	1000051e 	bne	r2,zero,30488d4 <SD_ACMD6+0xec>
 30488c0:	e0bff903 	ldbu	r2,-28(fp)
 30488c4:	10c03fcc 	andi	r3,r2,255
 30488c8:	e0bff743 	ldbu	r2,-35(fp)
 30488cc:	18800126 	beq	r3,r2,30488d4 <SD_ACMD6+0xec>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
 30488d0:	e03ff815 	stw	zero,-32(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
 30488d4:	e0bff904 	addi	r2,fp,-28
 30488d8:	11000044 	addi	r4,r2,1
 30488dc:	3048ec40 	call	3048ec4 <ArrayToU32>
 30488e0:	e0bff615 	stw	r2,-40(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
 30488e4:	e0bffd03 	ldbu	r2,-12(fp)
 30488e8:	108003cc 	andi	r2,r2,15
 30488ec:	1004927a 	slli	r2,r2,9
 30488f0:	10804814 	ori	r2,r2,288
 30488f4:	e0bff515 	stw	r2,-44(fp)
        if (CardStatus != ExpectedStatus){
 30488f8:	e0fff617 	ldw	r3,-40(fp)
 30488fc:	e0bff517 	ldw	r2,-44(fp)
 3048900:	18800126 	beq	r3,r2,3048908 <SD_ACMD6+0x120>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 3048904:	e03ff815 	stw	zero,-32(fp)
        }
                
        // check crc
        if (bSuccess){
 3048908:	e0bff817 	ldw	r2,-32(fp)
 304890c:	1005003a 	cmpeq	r2,r2,zero
 3048910:	10000c1e 	bne	r2,zero,3048944 <SD_ACMD6+0x15c>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3048914:	e17ff904 	addi	r5,fp,-28
 3048918:	0009883a 	mov	r4,zero
 304891c:	01800144 	movi	r6,5
 3048920:	3046b600 	call	3046b60 <crc7>
 3048924:	e0bff405 	stb	r2,-48(fp)
            if (crc != (szResponse[5] >> 1)){
 3048928:	e0bffa43 	ldbu	r2,-23(fp)
 304892c:	10803fcc 	andi	r2,r2,255
 3048930:	1004d07a 	srli	r2,r2,1
 3048934:	10c03fcc 	andi	r3,r2,255
 3048938:	e0bff403 	ldbu	r2,-48(fp)
 304893c:	18800126 	beq	r3,r2,3048944 <SD_ACMD6+0x15c>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048940:	e03ff815 	stw	zero,-32(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 3048944:	e0bff817 	ldw	r2,-32(fp)
 3048948:	1005003a 	cmpeq	r2,r2,zero
 304894c:	1000061e 	bne	r2,zero,3048968 <SD_ACMD6+0x180>
 3048950:	e0bffa43 	ldbu	r2,-23(fp)
 3048954:	10803fcc 	andi	r2,r2,255
 3048958:	1080004c 	andi	r2,r2,1
 304895c:	1004c03a 	cmpne	r2,r2,zero
 3048960:	1000011e 	bne	r2,zero,3048968 <SD_ACMD6+0x180>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3048964:	e03ff815 	stw	zero,-32(fp)
        }
          
    }      
    

    return bSuccess;
 3048968:	e0bff817 	ldw	r2,-32(fp)
}
 304896c:	e037883a 	mov	sp,fp
 3048970:	dfc00117 	ldw	ra,4(sp)
 3048974:	df000017 	ldw	fp,0(sp)
 3048978:	dec00204 	addi	sp,sp,8
 304897c:	f800283a 	ret

03048980 <SD_ACMD42>:

// SET_CLR_CARD_DETECT
// Response: R1
bool SD_ACMD42(bool b4BitsBus, alt_u8 ExpectedState){
 3048980:	defff404 	addi	sp,sp,-48
 3048984:	dfc00b15 	stw	ra,44(sp)
 3048988:	df000a15 	stw	fp,40(sp)
 304898c:	df000a04 	addi	fp,sp,40
 3048990:	e13ffe15 	stw	r4,-8(fp)
 3048994:	e17fff05 	stb	r5,-4(fp)

    bool bSuccess;
    
    alt_u8 szResponse[6];  // Response: R1, see section 4.9.4 (OCR Register)
    const alt_u8 Cmd = 42;
 3048998:	00800a84 	movi	r2,42
 304899c:	e0bff945 	stb	r2,-27(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc; 
 30489a0:	00801004 	movi	r2,64
 30489a4:	e0bffc85 	stb	r2,-14(fp)
 30489a8:	e03ffcc5 	stb	zero,-13(fp)
 30489ac:	e03ffd05 	stb	zero,-12(fp)
 30489b0:	e03ffd45 	stb	zero,-11(fp)
 30489b4:	e03ffd85 	stb	zero,-10(fp)
 30489b8:	e03ffdc5 	stb	zero,-9(fp)

    SDCARD_TRACE(("ACMD42\r\n"));

    // build packet    
    szCmd[0] |= Cmd;
 30489bc:	e0fffc83 	ldbu	r3,-14(fp)
 30489c0:	e0bff943 	ldbu	r2,-27(fp)
 30489c4:	1884b03a 	or	r2,r3,r2
 30489c8:	e0bffc85 	stb	r2,-14(fp)
    szCmd[4] |= b4BitsBus?1:0;
 30489cc:	e0bffd83 	ldbu	r2,-10(fp)
 30489d0:	1007883a 	mov	r3,r2
 30489d4:	e0bffe17 	ldw	r2,-8(fp)
 30489d8:	1004c03a 	cmpne	r2,r2,zero
 30489dc:	1884b03a 	or	r2,r3,r2
 30489e0:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
 30489e4:	e17ffc84 	addi	r5,fp,-14
 30489e8:	0009883a 	mov	r4,zero
 30489ec:	01800144 	movi	r6,5
 30489f0:	3046b600 	call	3046b60 <crc7>
 30489f4:	e0bff905 	stb	r2,-28(fp)
    szCmd[5] = (crc << 1) | 0x01;
 30489f8:	e0bff903 	ldbu	r2,-28(fp)
 30489fc:	1085883a 	add	r2,r2,r2
 3048a00:	10800054 	ori	r2,r2,1
 3048a04:	e0bffdc5 	stb	r2,-9(fp)
    
    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3048a08:	e13ffc84 	addi	r4,fp,-14
 3048a0c:	01400184 	movi	r5,6
 3048a10:	3046c640 	call	3046c64 <SDHAL_SendCmd>
    
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3048a14:	e13ffb04 	addi	r4,fp,-20
 3048a18:	01400184 	movi	r5,6
 3048a1c:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3048a20:	e0bffa15 	stw	r2,-24(fp)
    
    if (bSuccess){
 3048a24:	e0bffa17 	ldw	r2,-24(fp)
 3048a28:	1005003a 	cmpeq	r2,r2,zero
 3048a2c:	10002d1e 	bne	r2,zero,3048ae4 <SD_ACMD42+0x164>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){
 3048a30:	e0bffa17 	ldw	r2,-24(fp)
 3048a34:	1005003a 	cmpeq	r2,r2,zero
 3048a38:	1000051e 	bne	r2,zero,3048a50 <SD_ACMD42+0xd0>
 3048a3c:	e0bffb03 	ldbu	r2,-20(fp)
 3048a40:	10c03fcc 	andi	r3,r2,255
 3048a44:	e0bff943 	ldbu	r2,-27(fp)
 3048a48:	18800126 	beq	r3,r2,3048a50 <SD_ACMD42+0xd0>
            SDCARD_DEBUG(("CMD%d Response: Invalid reserved bits\r\n", Cmd));
            bSuccess = FALSE;
 3048a4c:	e03ffa15 	stw	zero,-24(fp)
        }
        
        // [1]~[4]: CardStatus
        CardStatus = ArrayToU32(&szResponse[1]);
 3048a50:	e0bffb04 	addi	r2,fp,-20
 3048a54:	11000044 	addi	r4,r2,1
 3048a58:	3048ec40 	call	3048ec4 <ArrayToU32>
 3048a5c:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_APP_CMD | SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(ExpectedState);
 3048a60:	e0bfff03 	ldbu	r2,-4(fp)
 3048a64:	108003cc 	andi	r2,r2,15
 3048a68:	1004927a 	slli	r2,r2,9
 3048a6c:	10804814 	ori	r2,r2,288
 3048a70:	e0bff715 	stw	r2,-36(fp)
        if (CardStatus != ExpectedStatus){
 3048a74:	e0fff817 	ldw	r3,-32(fp)
 3048a78:	e0bff717 	ldw	r2,-36(fp)
 3048a7c:	18800126 	beq	r3,r2,3048a84 <SD_ACMD42+0x104>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 3048a80:	e03ffa15 	stw	zero,-24(fp)
        }
                
        // check crc
        if (bSuccess){
 3048a84:	e0bffa17 	ldw	r2,-24(fp)
 3048a88:	1005003a 	cmpeq	r2,r2,zero
 3048a8c:	10000c1e 	bne	r2,zero,3048ac0 <SD_ACMD42+0x140>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3048a90:	e17ffb04 	addi	r5,fp,-20
 3048a94:	0009883a 	mov	r4,zero
 3048a98:	01800144 	movi	r6,5
 3048a9c:	3046b600 	call	3046b60 <crc7>
 3048aa0:	e0bff605 	stb	r2,-40(fp)
            if (crc != (szResponse[5] >> 1)){
 3048aa4:	e0bffc43 	ldbu	r2,-15(fp)
 3048aa8:	10803fcc 	andi	r2,r2,255
 3048aac:	1004d07a 	srli	r2,r2,1
 3048ab0:	10c03fcc 	andi	r3,r2,255
 3048ab4:	e0bff603 	ldbu	r2,-40(fp)
 3048ab8:	18800126 	beq	r3,r2,3048ac0 <SD_ACMD42+0x140>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048abc:	e03ffa15 	stw	zero,-24(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 3048ac0:	e0bffa17 	ldw	r2,-24(fp)
 3048ac4:	1005003a 	cmpeq	r2,r2,zero
 3048ac8:	1000061e 	bne	r2,zero,3048ae4 <SD_ACMD42+0x164>
 3048acc:	e0bffc43 	ldbu	r2,-15(fp)
 3048ad0:	10803fcc 	andi	r2,r2,255
 3048ad4:	1080004c 	andi	r2,r2,1
 3048ad8:	1004c03a 	cmpne	r2,r2,zero
 3048adc:	1000011e 	bne	r2,zero,3048ae4 <SD_ACMD42+0x164>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3048ae0:	e03ffa15 	stw	zero,-24(fp)
        }
          
    }      
    

    return bSuccess;
 3048ae4:	e0bffa17 	ldw	r2,-24(fp)
}
 3048ae8:	e037883a 	mov	sp,fp
 3048aec:	dfc00117 	ldw	ra,4(sp)
 3048af0:	df000017 	ldw	fp,0(sp)
 3048af4:	dec00204 	addi	sp,sp,8
 3048af8:	f800283a 	ret

03048afc <SD_CMD17>:


// READ_SINGLE_BLOCK
// Response R1
bool SD_CMD17(alt_u32 Addr, alt_u8 ExpectedStatus){
 3048afc:	defff404 	addi	sp,sp,-48
 3048b00:	dfc00b15 	stw	ra,44(sp)
 3048b04:	df000a15 	stw	fp,40(sp)
 3048b08:	df000a04 	addi	fp,sp,40
 3048b0c:	e13ffe15 	stw	r4,-8(fp)
 3048b10:	e17fff05 	stb	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 17;
 3048b14:	00800444 	movi	r2,17
 3048b18:	e0bff945 	stb	r2,-27(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3048b1c:	00801004 	movi	r2,64
 3048b20:	e0bffc85 	stb	r2,-14(fp)
 3048b24:	e03ffcc5 	stb	zero,-13(fp)
 3048b28:	e03ffd05 	stb	zero,-12(fp)
 3048b2c:	e03ffd45 	stb	zero,-11(fp)
 3048b30:	e03ffd85 	stb	zero,-10(fp)
 3048b34:	e03ffdc5 	stb	zero,-9(fp)

    SDCARD_TRACE(("CMD17\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
 3048b38:	e0fffc83 	ldbu	r3,-14(fp)
 3048b3c:	e0bff943 	ldbu	r2,-27(fp)
 3048b40:	1884b03a 	or	r2,r3,r2
 3048b44:	e0bffc85 	stb	r2,-14(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
 3048b48:	e0fffcc3 	ldbu	r3,-13(fp)
 3048b4c:	e0bffe17 	ldw	r2,-8(fp)
 3048b50:	1004d63a 	srli	r2,r2,24
 3048b54:	1884b03a 	or	r2,r3,r2
 3048b58:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
 3048b5c:	e0fffd03 	ldbu	r3,-12(fp)
 3048b60:	e0bffe17 	ldw	r2,-8(fp)
 3048b64:	1004d43a 	srli	r2,r2,16
 3048b68:	1884b03a 	or	r2,r3,r2
 3048b6c:	e0bffd05 	stb	r2,-12(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
 3048b70:	e0fffd43 	ldbu	r3,-11(fp)
 3048b74:	e0bffe17 	ldw	r2,-8(fp)
 3048b78:	1004d23a 	srli	r2,r2,8
 3048b7c:	1884b03a 	or	r2,r3,r2
 3048b80:	e0bffd45 	stb	r2,-11(fp)
    szCmd[4] |= Addr & 0xFF;
 3048b84:	e0fffd83 	ldbu	r3,-10(fp)
 3048b88:	e0bffe17 	ldw	r2,-8(fp)
 3048b8c:	1884b03a 	or	r2,r3,r2
 3048b90:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
 3048b94:	e17ffc84 	addi	r5,fp,-14
 3048b98:	0009883a 	mov	r4,zero
 3048b9c:	01800144 	movi	r6,5
 3048ba0:	3046b600 	call	3046b60 <crc7>
 3048ba4:	e0bff905 	stb	r2,-28(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3048ba8:	e0bff903 	ldbu	r2,-28(fp)
 3048bac:	1085883a 	add	r2,r2,r2
 3048bb0:	10800054 	ori	r2,r2,1
 3048bb4:	e0bffdc5 	stb	r2,-9(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3048bb8:	e13ffc84 	addi	r4,fp,-14
 3048bbc:	01400184 	movi	r5,6
 3048bc0:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3048bc4:	e13ffb04 	addi	r4,fp,-20
 3048bc8:	01400184 	movi	r5,6
 3048bcc:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3048bd0:	e0bffa15 	stw	r2,-24(fp)
    
    // check response content
    if (bSuccess){
 3048bd4:	e0bffa17 	ldw	r2,-24(fp)
 3048bd8:	1005003a 	cmpeq	r2,r2,zero
 3048bdc:	10002a1e 	bne	r2,zero,3048c88 <SD_CMD17+0x18c>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
 3048be0:	e0bffa17 	ldw	r2,-24(fp)
 3048be4:	1005003a 	cmpeq	r2,r2,zero
 3048be8:	1000051e 	bne	r2,zero,3048c00 <SD_CMD17+0x104>
 3048bec:	e0bffb03 	ldbu	r2,-20(fp)
 3048bf0:	10c03fcc 	andi	r3,r2,255
 3048bf4:	e0bff943 	ldbu	r2,-27(fp)
 3048bf8:	18800126 	beq	r3,r2,3048c00 <SD_CMD17+0x104>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 3048bfc:	e03ffa15 	stw	zero,-24(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
 3048c00:	e0bffb04 	addi	r2,fp,-20
 3048c04:	11000044 	addi	r4,r2,1
 3048c08:	3048ec40 	call	3048ec4 <ArrayToU32>
 3048c0c:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
 3048c10:	00824004 	movi	r2,2304
 3048c14:	e0bff715 	stw	r2,-36(fp)
        if (CardStatus != ExpectedStatus){
 3048c18:	e0fff817 	ldw	r3,-32(fp)
 3048c1c:	e0bff717 	ldw	r2,-36(fp)
 3048c20:	18800126 	beq	r3,r2,3048c28 <SD_CMD17+0x12c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 3048c24:	e03ffa15 	stw	zero,-24(fp)
        }        
        
        // check crc
        if (bSuccess){
 3048c28:	e0bffa17 	ldw	r2,-24(fp)
 3048c2c:	1005003a 	cmpeq	r2,r2,zero
 3048c30:	10000c1e 	bne	r2,zero,3048c64 <SD_CMD17+0x168>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3048c34:	e17ffb04 	addi	r5,fp,-20
 3048c38:	0009883a 	mov	r4,zero
 3048c3c:	01800144 	movi	r6,5
 3048c40:	3046b600 	call	3046b60 <crc7>
 3048c44:	e0bff605 	stb	r2,-40(fp)
            if (crc != (szResponse[5] >> 1)){
 3048c48:	e0bffc43 	ldbu	r2,-15(fp)
 3048c4c:	10803fcc 	andi	r2,r2,255
 3048c50:	1004d07a 	srli	r2,r2,1
 3048c54:	10c03fcc 	andi	r3,r2,255
 3048c58:	e0bff603 	ldbu	r2,-40(fp)
 3048c5c:	18800126 	beq	r3,r2,3048c64 <SD_CMD17+0x168>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048c60:	e03ffa15 	stw	zero,-24(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 3048c64:	e0bffa17 	ldw	r2,-24(fp)
 3048c68:	1005003a 	cmpeq	r2,r2,zero
 3048c6c:	1000061e 	bne	r2,zero,3048c88 <SD_CMD17+0x18c>
 3048c70:	e0bffc43 	ldbu	r2,-15(fp)
 3048c74:	10803fcc 	andi	r2,r2,255
 3048c78:	1080004c 	andi	r2,r2,1
 3048c7c:	1004c03a 	cmpne	r2,r2,zero
 3048c80:	1000011e 	bne	r2,zero,3048c88 <SD_CMD17+0x18c>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3048c84:	e03ffa15 	stw	zero,-24(fp)
        }
          
    }
    
     
    
    return bSuccess;
 3048c88:	e0bffa17 	ldw	r2,-24(fp)
}
 3048c8c:	e037883a 	mov	sp,fp
 3048c90:	dfc00117 	ldw	ra,4(sp)
 3048c94:	df000017 	ldw	fp,0(sp)
 3048c98:	dec00204 	addi	sp,sp,8
 3048c9c:	f800283a 	ret

03048ca0 <SD_CMD24>:

// WRITE_BLOCK (Single)
// Response R1
bool SD_CMD24(alt_u32 Addr, alt_u8 ExpectedStatus){
 3048ca0:	defff404 	addi	sp,sp,-48
 3048ca4:	dfc00b15 	stw	ra,44(sp)
 3048ca8:	df000a15 	stw	fp,40(sp)
 3048cac:	df000a04 	addi	fp,sp,40
 3048cb0:	e13ffe15 	stw	r4,-8(fp)
 3048cb4:	e17fff05 	stb	r5,-4(fp)
    bool bSuccess;
    alt_u8 szResponse[6];
    const alt_u8 Cmd = 24;
 3048cb8:	00800604 	movi	r2,24
 3048cbc:	e0bff945 	stb	r2,-27(fp)
    alt_u8 szCmd[6]  = {0x40,0x00,0x00,0x00,0x00, 0x00}, crc;
 3048cc0:	00801004 	movi	r2,64
 3048cc4:	e0bffc85 	stb	r2,-14(fp)
 3048cc8:	e03ffcc5 	stb	zero,-13(fp)
 3048ccc:	e03ffd05 	stb	zero,-12(fp)
 3048cd0:	e03ffd45 	stb	zero,-11(fp)
 3048cd4:	e03ffd85 	stb	zero,-10(fp)
 3048cd8:	e03ffdc5 	stb	zero,-9(fp)

    SDCARD_TRACE(("CMD24\r\n"));
    // build packet    
    szCmd[0] |= Cmd;
 3048cdc:	e0fffc83 	ldbu	r3,-14(fp)
 3048ce0:	e0bff943 	ldbu	r2,-27(fp)
 3048ce4:	1884b03a 	or	r2,r3,r2
 3048ce8:	e0bffc85 	stb	r2,-14(fp)
    szCmd[1] |= (Addr >> 24) & 0xFF;
 3048cec:	e0fffcc3 	ldbu	r3,-13(fp)
 3048cf0:	e0bffe17 	ldw	r2,-8(fp)
 3048cf4:	1004d63a 	srli	r2,r2,24
 3048cf8:	1884b03a 	or	r2,r3,r2
 3048cfc:	e0bffcc5 	stb	r2,-13(fp)
    szCmd[2] |= (Addr >> 16) & 0xFF;
 3048d00:	e0fffd03 	ldbu	r3,-12(fp)
 3048d04:	e0bffe17 	ldw	r2,-8(fp)
 3048d08:	1004d43a 	srli	r2,r2,16
 3048d0c:	1884b03a 	or	r2,r3,r2
 3048d10:	e0bffd05 	stb	r2,-12(fp)
    szCmd[3] |= (Addr >> 8) & 0xFF;
 3048d14:	e0fffd43 	ldbu	r3,-11(fp)
 3048d18:	e0bffe17 	ldw	r2,-8(fp)
 3048d1c:	1004d23a 	srli	r2,r2,8
 3048d20:	1884b03a 	or	r2,r3,r2
 3048d24:	e0bffd45 	stb	r2,-11(fp)
    szCmd[4] |= Addr & 0xFF;
 3048d28:	e0fffd83 	ldbu	r3,-10(fp)
 3048d2c:	e0bffe17 	ldw	r2,-8(fp)
 3048d30:	1884b03a 	or	r2,r3,r2
 3048d34:	e0bffd85 	stb	r2,-10(fp)
    crc = crc7(0, szCmd, 5);
 3048d38:	e17ffc84 	addi	r5,fp,-14
 3048d3c:	0009883a 	mov	r4,zero
 3048d40:	01800144 	movi	r6,5
 3048d44:	3046b600 	call	3046b60 <crc7>
 3048d48:	e0bff905 	stb	r2,-28(fp)
    szCmd[5] = (crc << 1) | 0x01;
 3048d4c:	e0bff903 	ldbu	r2,-28(fp)
 3048d50:	1085883a 	add	r2,r2,r2
 3048d54:	10800054 	ori	r2,r2,1
 3048d58:	e0bffdc5 	stb	r2,-9(fp)

    // send package    
    SDHAL_SendCmd(szCmd, sizeof(szCmd));
 3048d5c:	e13ffc84 	addi	r4,fp,-14
 3048d60:	01400184 	movi	r5,6
 3048d64:	3046c640 	call	3046c64 <SDHAL_SendCmd>
  

    // get response  
    bSuccess = SDHAL_GetResponse(szResponse, sizeof(szResponse));
 3048d68:	e13ffb04 	addi	r4,fp,-20
 3048d6c:	01400184 	movi	r5,6
 3048d70:	3046d580 	call	3046d58 <SDHAL_GetResponse>
 3048d74:	e0bffa15 	stw	r2,-24(fp)
    
    // check response content
    if (bSuccess){
 3048d78:	e0bffa17 	ldw	r2,-24(fp)
 3048d7c:	1005003a 	cmpeq	r2,r2,zero
 3048d80:	10002a1e 	bne	r2,zero,3048e2c <SD_CMD24+0x18c>
        alt_u32 CardStatus, ExpectedStatus;
        // check command
        if (bSuccess && szResponse[0] != Cmd){ 
 3048d84:	e0bffa17 	ldw	r2,-24(fp)
 3048d88:	1005003a 	cmpeq	r2,r2,zero
 3048d8c:	1000051e 	bne	r2,zero,3048da4 <SD_CMD24+0x104>
 3048d90:	e0bffb03 	ldbu	r2,-20(fp)
 3048d94:	10c03fcc 	andi	r3,r2,255
 3048d98:	e0bff943 	ldbu	r2,-27(fp)
 3048d9c:	18800126 	beq	r3,r2,3048da4 <SD_CMD24+0x104>
            SDCARD_DEBUG(("CMD%d Response: Invalid strat+tx+reserved bit\r\n", Cmd));
            bSuccess = FALSE;
 3048da0:	e03ffa15 	stw	zero,-24(fp)
        }

        // [1]~[4]: 32-bits card status
        CardStatus = ArrayToU32(&szResponse[1]);
 3048da4:	e0bffb04 	addi	r2,fp,-20
 3048da8:	11000044 	addi	r4,r2,1
 3048dac:	3048ec40 	call	3048ec4 <ArrayToU32>
 3048db0:	e0bff815 	stw	r2,-32(fp)
        ExpectedStatus = SD_BIT_READY_FOR_DATA | SD_CURRENT_STATE_ENCODE(SD_STATE_TRAN);
 3048db4:	00824004 	movi	r2,2304
 3048db8:	e0bff715 	stw	r2,-36(fp)
        if (CardStatus != ExpectedStatus){
 3048dbc:	e0fff817 	ldw	r3,-32(fp)
 3048dc0:	e0bff717 	ldw	r2,-36(fp)
 3048dc4:	18800126 	beq	r3,r2,3048dcc <SD_CMD24+0x12c>
            SDCARD_DEBUG(("CMD%d Response: unexpected stauts\r\n", Cmd));
            bSuccess = FALSE;
 3048dc8:	e03ffa15 	stw	zero,-24(fp)
        }        
        
        // check crc
        if (bSuccess){
 3048dcc:	e0bffa17 	ldw	r2,-24(fp)
 3048dd0:	1005003a 	cmpeq	r2,r2,zero
 3048dd4:	10000c1e 	bne	r2,zero,3048e08 <SD_CMD24+0x168>
            alt_u8 crc;
            crc = crc7(0, szResponse, 5);
 3048dd8:	e17ffb04 	addi	r5,fp,-20
 3048ddc:	0009883a 	mov	r4,zero
 3048de0:	01800144 	movi	r6,5
 3048de4:	3046b600 	call	3046b60 <crc7>
 3048de8:	e0bff605 	stb	r2,-40(fp)
            if (crc != (szResponse[5] >> 1)){
 3048dec:	e0bffc43 	ldbu	r2,-15(fp)
 3048df0:	10803fcc 	andi	r2,r2,255
 3048df4:	1004d07a 	srli	r2,r2,1
 3048df8:	10c03fcc 	andi	r3,r2,255
 3048dfc:	e0bff603 	ldbu	r2,-40(fp)
 3048e00:	18800126 	beq	r3,r2,3048e08 <SD_CMD24+0x168>
                SDCARD_DEBUG(("CMD%d Response: Invalid crc7\r\n", Cmd));
                bSuccess = FALSE;
 3048e04:	e03ffa15 	stw	zero,-24(fp)
            }
        }            
        
        // check end-bits
        if (bSuccess && ((szResponse[5] & 0x01) != 0x01)){
 3048e08:	e0bffa17 	ldw	r2,-24(fp)
 3048e0c:	1005003a 	cmpeq	r2,r2,zero
 3048e10:	1000061e 	bne	r2,zero,3048e2c <SD_CMD24+0x18c>
 3048e14:	e0bffc43 	ldbu	r2,-15(fp)
 3048e18:	10803fcc 	andi	r2,r2,255
 3048e1c:	1080004c 	andi	r2,r2,1
 3048e20:	1004c03a 	cmpne	r2,r2,zero
 3048e24:	1000011e 	bne	r2,zero,3048e2c <SD_CMD24+0x18c>
            SDCARD_DEBUG(("CMD%d Response: Invalid end-bits\r\n", Cmd));
            bSuccess = FALSE;
 3048e28:	e03ffa15 	stw	zero,-24(fp)
        }
          
    }
    
     
    
    return bSuccess;
 3048e2c:	e0bffa17 	ldw	r2,-24(fp)
}
 3048e30:	e037883a 	mov	sp,fp
 3048e34:	dfc00117 	ldw	ra,4(sp)
 3048e38:	df000017 	ldw	fp,0(sp)
 3048e3c:	dec00204 	addi	sp,sp,8
 3048e40:	f800283a 	ret

03048e44 <SD_ReadData>:


bool SD_ReadData(alt_u8 szBuf[], int nBufLen){
 3048e44:	defffb04 	addi	sp,sp,-20
 3048e48:	dfc00415 	stw	ra,16(sp)
 3048e4c:	df000315 	stw	fp,12(sp)
 3048e50:	df000304 	addi	fp,sp,12
 3048e54:	e13ffe15 	stw	r4,-8(fp)
 3048e58:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_ReadData(szBuf, nBufLen);
 3048e5c:	e13ffe17 	ldw	r4,-8(fp)
 3048e60:	e17fff17 	ldw	r5,-4(fp)
 3048e64:	3046ff80 	call	3046ff8 <SDHAL_ReadData>
 3048e68:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
 3048e6c:	e0bffd17 	ldw	r2,-12(fp)
}
 3048e70:	e037883a 	mov	sp,fp
 3048e74:	dfc00117 	ldw	ra,4(sp)
 3048e78:	df000017 	ldw	fp,0(sp)
 3048e7c:	dec00204 	addi	sp,sp,8
 3048e80:	f800283a 	ret

03048e84 <SD_WriteData>:

bool SD_WriteData(alt_u8 szDataWrite[], int nDataLen){
 3048e84:	defffb04 	addi	sp,sp,-20
 3048e88:	dfc00415 	stw	ra,16(sp)
 3048e8c:	df000315 	stw	fp,12(sp)
 3048e90:	df000304 	addi	fp,sp,12
 3048e94:	e13ffe15 	stw	r4,-8(fp)
 3048e98:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess;
    bSuccess = SDHAL_WriteData(szDataWrite, nDataLen);
 3048e9c:	e13ffe17 	ldw	r4,-8(fp)
 3048ea0:	e17fff17 	ldw	r5,-4(fp)
 3048ea4:	30471500 	call	3047150 <SDHAL_WriteData>
 3048ea8:	e0bffd15 	stw	r2,-12(fp)
    return bSuccess;
 3048eac:	e0bffd17 	ldw	r2,-12(fp)
}
 3048eb0:	e037883a 	mov	sp,fp
 3048eb4:	dfc00117 	ldw	ra,4(sp)
 3048eb8:	df000017 	ldw	fp,0(sp)
 3048ebc:	dec00204 	addi	sp,sp,8
 3048ec0:	f800283a 	ret

03048ec4 <ArrayToU32>:


alt_u32 ArrayToU32(alt_u8 szData[]){
 3048ec4:	defffc04 	addi	sp,sp,-16
 3048ec8:	df000315 	stw	fp,12(sp)
 3048ecc:	df000304 	addi	fp,sp,12
 3048ed0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Value32 = 0;
 3048ed4:	e03ffe15 	stw	zero,-8(fp)
    int i;
    
    for(i=0;i<4;i++){
 3048ed8:	e03ffd15 	stw	zero,-12(fp)
 3048edc:	00000f06 	br	3048f1c <ArrayToU32+0x58>
        Value32 <<= 8;
 3048ee0:	e0bffe17 	ldw	r2,-8(fp)
 3048ee4:	1004923a 	slli	r2,r2,8
 3048ee8:	e0bffe15 	stw	r2,-8(fp)
        Value32 |= szData[i];
 3048eec:	e0bffd17 	ldw	r2,-12(fp)
 3048ef0:	1007883a 	mov	r3,r2
 3048ef4:	e0bfff17 	ldw	r2,-4(fp)
 3048ef8:	1885883a 	add	r2,r3,r2
 3048efc:	10800003 	ldbu	r2,0(r2)
 3048f00:	10c03fcc 	andi	r3,r2,255
 3048f04:	e0bffe17 	ldw	r2,-8(fp)
 3048f08:	10c4b03a 	or	r2,r2,r3
 3048f0c:	e0bffe15 	stw	r2,-8(fp)
 3048f10:	e0bffd17 	ldw	r2,-12(fp)
 3048f14:	10800044 	addi	r2,r2,1
 3048f18:	e0bffd15 	stw	r2,-12(fp)
 3048f1c:	e0bffd17 	ldw	r2,-12(fp)
 3048f20:	10800110 	cmplti	r2,r2,4
 3048f24:	103fee1e 	bne	r2,zero,3048ee0 <ArrayToU32+0x1c>
    }
    return Value32;
 3048f28:	e0bffe17 	ldw	r2,-8(fp)
}
 3048f2c:	e037883a 	mov	sp,fp
 3048f30:	df000017 	ldw	fp,0(sp)
 3048f34:	dec00104 	addi	sp,sp,4
 3048f38:	f800283a 	ret

03048f3c <__mulsf3>:
 3048f3c:	deffef04 	addi	sp,sp,-68
 3048f40:	dc400f15 	stw	r17,60(sp)
 3048f44:	dc400204 	addi	r17,sp,8
 3048f48:	dc000e15 	stw	r16,56(sp)
 3048f4c:	d9000015 	stw	r4,0(sp)
 3048f50:	d9400115 	stw	r5,4(sp)
 3048f54:	d809883a 	mov	r4,sp
 3048f58:	880b883a 	mov	r5,r17
 3048f5c:	dc000604 	addi	r16,sp,24
 3048f60:	dfc01015 	stw	ra,64(sp)
 3048f64:	3049a780 	call	3049a78 <__unpack_f>
 3048f68:	d9000104 	addi	r4,sp,4
 3048f6c:	800b883a 	mov	r5,r16
 3048f70:	3049a780 	call	3049a78 <__unpack_f>
 3048f74:	d9000217 	ldw	r4,8(sp)
 3048f78:	00800044 	movi	r2,1
 3048f7c:	01400104 	movi	r5,4
 3048f80:	1100142e 	bgeu	r2,r4,3048fd4 <__mulsf3+0x98>
 3048f84:	d8c00617 	ldw	r3,24(sp)
 3048f88:	10c0052e 	bgeu	r2,r3,3048fa0 <__mulsf3+0x64>
 3048f8c:	21400f26 	beq	r4,r5,3048fcc <__mulsf3+0x90>
 3048f90:	19405d26 	beq	r3,r5,3049108 <__mulsf3+0x1cc>
 3048f94:	00800084 	movi	r2,2
 3048f98:	20800e26 	beq	r4,r2,3048fd4 <__mulsf3+0x98>
 3048f9c:	1880181e 	bne	r3,r2,3049000 <__mulsf3+0xc4>
 3048fa0:	d8c00717 	ldw	r3,28(sp)
 3048fa4:	d8800317 	ldw	r2,12(sp)
 3048fa8:	8009883a 	mov	r4,r16
 3048fac:	10c4c03a 	cmpne	r2,r2,r3
 3048fb0:	d8800715 	stw	r2,28(sp)
 3048fb4:	30499180 	call	3049918 <__pack_f>
 3048fb8:	dfc01017 	ldw	ra,64(sp)
 3048fbc:	dc400f17 	ldw	r17,60(sp)
 3048fc0:	dc000e17 	ldw	r16,56(sp)
 3048fc4:	dec01104 	addi	sp,sp,68
 3048fc8:	f800283a 	ret
 3048fcc:	00800084 	movi	r2,2
 3048fd0:	18804f26 	beq	r3,r2,3049110 <__mulsf3+0x1d4>
 3048fd4:	d8800317 	ldw	r2,12(sp)
 3048fd8:	d8c00717 	ldw	r3,28(sp)
 3048fdc:	8809883a 	mov	r4,r17
 3048fe0:	10c4c03a 	cmpne	r2,r2,r3
 3048fe4:	d8800315 	stw	r2,12(sp)
 3048fe8:	30499180 	call	3049918 <__pack_f>
 3048fec:	dfc01017 	ldw	ra,64(sp)
 3048ff0:	dc400f17 	ldw	r17,60(sp)
 3048ff4:	dc000e17 	ldw	r16,56(sp)
 3048ff8:	dec01104 	addi	sp,sp,68
 3048ffc:	f800283a 	ret
 3049000:	d8800517 	ldw	r2,20(sp)
 3049004:	da000917 	ldw	r8,36(sp)
 3049008:	0013883a 	mov	r9,zero
 304900c:	0007883a 	mov	r3,zero
 3049010:	480f883a 	mov	r7,r9
 3049014:	180b883a 	mov	r5,r3
 3049018:	400d883a 	mov	r6,r8
 304901c:	1009883a 	mov	r4,r2
 3049020:	30497fc0 	call	30497fc <__muldi3>
 3049024:	da800417 	ldw	r10,16(sp)
 3049028:	d9800817 	ldw	r6,32(sp)
 304902c:	da400317 	ldw	r9,12(sp)
 3049030:	52800084 	addi	r10,r10,2
 3049034:	3295883a 	add	r10,r6,r10
 3049038:	d9800717 	ldw	r6,28(sp)
 304903c:	180b883a 	mov	r5,r3
 3049040:	180f883a 	mov	r7,r3
 3049044:	4992c03a 	cmpne	r9,r9,r6
 3049048:	da400b15 	stw	r9,44(sp)
 304904c:	1007883a 	mov	r3,r2
 3049050:	da800c15 	stw	r10,48(sp)
 3049054:	2800070e 	bge	r5,zero,3049074 <__mulsf3+0x138>
 3049058:	2880004c 	andi	r2,r5,1
 304905c:	1005003a 	cmpeq	r2,r2,zero
 3049060:	500d883a 	mov	r6,r10
 3049064:	10001e26 	beq	r2,zero,30490e0 <__mulsf3+0x1a4>
 3049068:	380ed07a 	srli	r7,r7,1
 304906c:	31800044 	addi	r6,r6,1
 3049070:	d9800c15 	stw	r6,48(sp)
 3049074:	01100034 	movhi	r4,16384
 3049078:	213fffc4 	addi	r4,r4,-1
 304907c:	21c00b36 	bltu	r4,r7,30490ac <__mulsf3+0x170>
 3049080:	d8800c17 	ldw	r2,48(sp)
 3049084:	00000206 	br	3049090 <__mulsf3+0x154>
 3049088:	18c7883a 	add	r3,r3,r3
 304908c:	21c00636 	bltu	r4,r7,30490a8 <__mulsf3+0x16c>
 3049090:	10bfffc4 	addi	r2,r2,-1
 3049094:	39cf883a 	add	r7,r7,r7
 3049098:	183ffb0e 	bge	r3,zero,3049088 <__mulsf3+0x14c>
 304909c:	39c00054 	ori	r7,r7,1
 30490a0:	18c7883a 	add	r3,r3,r3
 30490a4:	21fffa2e 	bgeu	r4,r7,3049090 <__mulsf3+0x154>
 30490a8:	d8800c15 	stw	r2,48(sp)
 30490ac:	39001fcc 	andi	r4,r7,127
 30490b0:	00801004 	movi	r2,64
 30490b4:	20800d26 	beq	r4,r2,30490ec <__mulsf3+0x1b0>
 30490b8:	008000c4 	movi	r2,3
 30490bc:	d9000a04 	addi	r4,sp,40
 30490c0:	d9c00d15 	stw	r7,52(sp)
 30490c4:	d8800a15 	stw	r2,40(sp)
 30490c8:	30499180 	call	3049918 <__pack_f>
 30490cc:	dfc01017 	ldw	ra,64(sp)
 30490d0:	dc400f17 	ldw	r17,60(sp)
 30490d4:	dc000e17 	ldw	r16,56(sp)
 30490d8:	dec01104 	addi	sp,sp,68
 30490dc:	f800283a 	ret
 30490e0:	1804d07a 	srli	r2,r3,1
 30490e4:	10e00034 	orhi	r3,r2,32768
 30490e8:	003fdf06 	br	3049068 <__mulsf3+0x12c>
 30490ec:	3880200c 	andi	r2,r7,128
 30490f0:	103ff11e 	bne	r2,zero,30490b8 <__mulsf3+0x17c>
 30490f4:	183ff026 	beq	r3,zero,30490b8 <__mulsf3+0x17c>
 30490f8:	3907883a 	add	r3,r7,r4
 30490fc:	00bfe004 	movi	r2,-128
 3049100:	188e703a 	and	r7,r3,r2
 3049104:	003fec06 	br	30490b8 <__mulsf3+0x17c>
 3049108:	00800084 	movi	r2,2
 304910c:	20bfa41e 	bne	r4,r2,3048fa0 <__mulsf3+0x64>
 3049110:	0100c1b4 	movhi	r4,774
 3049114:	2129cb04 	addi	r4,r4,-22740
 3049118:	003fb306 	br	3048fe8 <__mulsf3+0xac>

0304911c <__divsf3>:
 304911c:	defff304 	addi	sp,sp,-52
 3049120:	dc400b15 	stw	r17,44(sp)
 3049124:	dc400204 	addi	r17,sp,8
 3049128:	dc000a15 	stw	r16,40(sp)
 304912c:	d9000015 	stw	r4,0(sp)
 3049130:	d9400115 	stw	r5,4(sp)
 3049134:	d809883a 	mov	r4,sp
 3049138:	880b883a 	mov	r5,r17
 304913c:	dc000604 	addi	r16,sp,24
 3049140:	dfc00c15 	stw	ra,48(sp)
 3049144:	3049a780 	call	3049a78 <__unpack_f>
 3049148:	d9000104 	addi	r4,sp,4
 304914c:	800b883a 	mov	r5,r16
 3049150:	3049a780 	call	3049a78 <__unpack_f>
 3049154:	d9000217 	ldw	r4,8(sp)
 3049158:	00800044 	movi	r2,1
 304915c:	01800104 	movi	r6,4
 3049160:	11000a2e 	bgeu	r2,r4,304918c <__divsf3+0x70>
 3049164:	d9400617 	ldw	r5,24(sp)
 3049168:	1140442e 	bgeu	r2,r5,304927c <__divsf3+0x160>
 304916c:	d8800317 	ldw	r2,12(sp)
 3049170:	d8c00717 	ldw	r3,28(sp)
 3049174:	10c4f03a 	xor	r2,r2,r3
 3049178:	d8800315 	stw	r2,12(sp)
 304917c:	21800226 	beq	r4,r6,3049188 <__divsf3+0x6c>
 3049180:	00800084 	movi	r2,2
 3049184:	2080101e 	bne	r4,r2,30491c8 <__divsf3+0xac>
 3049188:	29000726 	beq	r5,r4,30491a8 <__divsf3+0x8c>
 304918c:	8809883a 	mov	r4,r17
 3049190:	30499180 	call	3049918 <__pack_f>
 3049194:	dfc00c17 	ldw	ra,48(sp)
 3049198:	dc400b17 	ldw	r17,44(sp)
 304919c:	dc000a17 	ldw	r16,40(sp)
 30491a0:	dec00d04 	addi	sp,sp,52
 30491a4:	f800283a 	ret
 30491a8:	0100c1b4 	movhi	r4,774
 30491ac:	2129cb04 	addi	r4,r4,-22740
 30491b0:	30499180 	call	3049918 <__pack_f>
 30491b4:	dfc00c17 	ldw	ra,48(sp)
 30491b8:	dc400b17 	ldw	r17,44(sp)
 30491bc:	dc000a17 	ldw	r16,40(sp)
 30491c0:	dec00d04 	addi	sp,sp,52
 30491c4:	f800283a 	ret
 30491c8:	29802e26 	beq	r5,r6,3049284 <__divsf3+0x168>
 30491cc:	28801b26 	beq	r5,r2,304923c <__divsf3+0x120>
 30491d0:	d8c00417 	ldw	r3,16(sp)
 30491d4:	d8800817 	ldw	r2,32(sp)
 30491d8:	d9000517 	ldw	r4,20(sp)
 30491dc:	d9800917 	ldw	r6,36(sp)
 30491e0:	1885c83a 	sub	r2,r3,r2
 30491e4:	d8800415 	stw	r2,16(sp)
 30491e8:	2180032e 	bgeu	r4,r6,30491f8 <__divsf3+0xdc>
 30491ec:	10bfffc4 	addi	r2,r2,-1
 30491f0:	d8800415 	stw	r2,16(sp)
 30491f4:	2109883a 	add	r4,r4,r4
 30491f8:	01500034 	movhi	r5,16384
 30491fc:	29400004 	addi	r5,r5,0
 3049200:	0007883a 	mov	r3,zero
 3049204:	0005883a 	mov	r2,zero
 3049208:	01c007c4 	movi	r7,31
 304920c:	10800044 	addi	r2,r2,1
 3049210:	21800236 	bltu	r4,r6,304921c <__divsf3+0x100>
 3049214:	1946b03a 	or	r3,r3,r5
 3049218:	2189c83a 	sub	r4,r4,r6
 304921c:	280ad07a 	srli	r5,r5,1
 3049220:	2109883a 	add	r4,r4,r4
 3049224:	11fff91e 	bne	r2,r7,304920c <__divsf3+0xf0>
 3049228:	19401fcc 	andi	r5,r3,127
 304922c:	00801004 	movi	r2,64
 3049230:	28800a26 	beq	r5,r2,304925c <__divsf3+0x140>
 3049234:	d8c00515 	stw	r3,20(sp)
 3049238:	003fd406 	br	304918c <__divsf3+0x70>
 304923c:	8809883a 	mov	r4,r17
 3049240:	d9800215 	stw	r6,8(sp)
 3049244:	30499180 	call	3049918 <__pack_f>
 3049248:	dfc00c17 	ldw	ra,48(sp)
 304924c:	dc400b17 	ldw	r17,44(sp)
 3049250:	dc000a17 	ldw	r16,40(sp)
 3049254:	dec00d04 	addi	sp,sp,52
 3049258:	f800283a 	ret
 304925c:	1880200c 	andi	r2,r3,128
 3049260:	103ff41e 	bne	r2,zero,3049234 <__divsf3+0x118>
 3049264:	203ff326 	beq	r4,zero,3049234 <__divsf3+0x118>
 3049268:	1947883a 	add	r3,r3,r5
 304926c:	00bfe004 	movi	r2,-128
 3049270:	1886703a 	and	r3,r3,r2
 3049274:	d8c00515 	stw	r3,20(sp)
 3049278:	003fc406 	br	304918c <__divsf3+0x70>
 304927c:	8009883a 	mov	r4,r16
 3049280:	003fc306 	br	3049190 <__divsf3+0x74>
 3049284:	8809883a 	mov	r4,r17
 3049288:	d8000515 	stw	zero,20(sp)
 304928c:	d8000415 	stw	zero,16(sp)
 3049290:	003fbf06 	br	3049190 <__divsf3+0x74>

03049294 <__extendsfdf2>:
 3049294:	defff904 	addi	sp,sp,-28
 3049298:	d9000115 	stw	r4,4(sp)
 304929c:	d9400204 	addi	r5,sp,8
 30492a0:	d9000104 	addi	r4,sp,4
 30492a4:	dfc00615 	stw	ra,24(sp)
 30492a8:	3049a780 	call	3049a78 <__unpack_f>
 30492ac:	d9c00517 	ldw	r7,20(sp)
 30492b0:	0011883a 	mov	r8,zero
 30492b4:	400697ba 	slli	r3,r8,30
 30492b8:	3812d0ba 	srli	r9,r7,2
 30492bc:	380497ba 	slli	r2,r7,30
 30492c0:	d9000217 	ldw	r4,8(sp)
 30492c4:	d9400317 	ldw	r5,12(sp)
 30492c8:	d9800417 	ldw	r6,16(sp)
 30492cc:	48c6b03a 	or	r3,r9,r3
 30492d0:	100f883a 	mov	r7,r2
 30492d4:	d8c00015 	stw	r3,0(sp)
 30492d8:	30496040 	call	3049604 <__make_dp>
 30492dc:	dfc00617 	ldw	ra,24(sp)
 30492e0:	dec00704 	addi	sp,sp,28
 30492e4:	f800283a 	ret

030492e8 <__floatunsisf>:
 30492e8:	defff904 	addi	sp,sp,-28
 30492ec:	dc400515 	stw	r17,20(sp)
 30492f0:	dc000415 	stw	r16,16(sp)
 30492f4:	dfc00615 	stw	ra,24(sp)
 30492f8:	04400784 	movi	r17,30
 30492fc:	2021883a 	mov	r16,r4
 3049300:	d8000115 	stw	zero,4(sp)
 3049304:	2000091e 	bne	r4,zero,304932c <__floatunsisf+0x44>
 3049308:	00800084 	movi	r2,2
 304930c:	d8800015 	stw	r2,0(sp)
 3049310:	d809883a 	mov	r4,sp
 3049314:	30499180 	call	3049918 <__pack_f>
 3049318:	dfc00617 	ldw	ra,24(sp)
 304931c:	dc400517 	ldw	r17,20(sp)
 3049320:	dc000417 	ldw	r16,16(sp)
 3049324:	dec00704 	addi	sp,sp,28
 3049328:	f800283a 	ret
 304932c:	008000c4 	movi	r2,3
 3049330:	d9000315 	stw	r4,12(sp)
 3049334:	d8800015 	stw	r2,0(sp)
 3049338:	dc400215 	stw	r17,8(sp)
 304933c:	30498980 	call	3049898 <__clzsi2>
 3049340:	117fffc4 	addi	r5,r2,-1
 3049344:	0147c83a 	sub	r3,zero,r5
 3049348:	00800044 	movi	r2,1
 304934c:	10c4983a 	sll	r2,r2,r3
 3049350:	80c6d83a 	srl	r3,r16,r3
 3049354:	8949c83a 	sub	r4,r17,r5
 3049358:	10bfffc4 	addi	r2,r2,-1
 304935c:	8084703a 	and	r2,r16,r2
 3049360:	1004c03a 	cmpne	r2,r2,zero
 3049364:	1886b03a 	or	r3,r3,r2
 3049368:	28000c16 	blt	r5,zero,304939c <__floatunsisf+0xb4>
 304936c:	8144983a 	sll	r2,r16,r5
 3049370:	8947c83a 	sub	r3,r17,r5
 3049374:	283fe626 	beq	r5,zero,3049310 <__floatunsisf+0x28>
 3049378:	d809883a 	mov	r4,sp
 304937c:	d8800315 	stw	r2,12(sp)
 3049380:	d8c00215 	stw	r3,8(sp)
 3049384:	30499180 	call	3049918 <__pack_f>
 3049388:	dfc00617 	ldw	ra,24(sp)
 304938c:	dc400517 	ldw	r17,20(sp)
 3049390:	dc000417 	ldw	r16,16(sp)
 3049394:	dec00704 	addi	sp,sp,28
 3049398:	f800283a 	ret
 304939c:	d8c00315 	stw	r3,12(sp)
 30493a0:	d9000215 	stw	r4,8(sp)
 30493a4:	003fda06 	br	3049310 <__floatunsisf+0x28>

030493a8 <__divdf3>:
 30493a8:	deffed04 	addi	sp,sp,-76
 30493ac:	dcc01115 	stw	r19,68(sp)
 30493b0:	dcc00404 	addi	r19,sp,16
 30493b4:	2011883a 	mov	r8,r4
 30493b8:	2813883a 	mov	r9,r5
 30493bc:	dc000e15 	stw	r16,56(sp)
 30493c0:	d809883a 	mov	r4,sp
 30493c4:	980b883a 	mov	r5,r19
 30493c8:	dc000904 	addi	r16,sp,36
 30493cc:	dfc01215 	stw	ra,72(sp)
 30493d0:	da400115 	stw	r9,4(sp)
 30493d4:	d9c00315 	stw	r7,12(sp)
 30493d8:	da000015 	stw	r8,0(sp)
 30493dc:	d9800215 	stw	r6,8(sp)
 30493e0:	dc801015 	stw	r18,64(sp)
 30493e4:	dc400f15 	stw	r17,60(sp)
 30493e8:	3049e840 	call	3049e84 <__unpack_d>
 30493ec:	d9000204 	addi	r4,sp,8
 30493f0:	800b883a 	mov	r5,r16
 30493f4:	3049e840 	call	3049e84 <__unpack_d>
 30493f8:	d9000417 	ldw	r4,16(sp)
 30493fc:	00800044 	movi	r2,1
 3049400:	11000b2e 	bgeu	r2,r4,3049430 <__divdf3+0x88>
 3049404:	d9400917 	ldw	r5,36(sp)
 3049408:	1140772e 	bgeu	r2,r5,30495e8 <__divdf3+0x240>
 304940c:	d8800517 	ldw	r2,20(sp)
 3049410:	d8c00a17 	ldw	r3,40(sp)
 3049414:	01800104 	movi	r6,4
 3049418:	10c4f03a 	xor	r2,r2,r3
 304941c:	d8800515 	stw	r2,20(sp)
 3049420:	21800226 	beq	r4,r6,304942c <__divdf3+0x84>
 3049424:	00800084 	movi	r2,2
 3049428:	2080141e 	bne	r4,r2,304947c <__divdf3+0xd4>
 304942c:	29000926 	beq	r5,r4,3049454 <__divdf3+0xac>
 3049430:	9809883a 	mov	r4,r19
 3049434:	3049b6c0 	call	3049b6c <__pack_d>
 3049438:	dfc01217 	ldw	ra,72(sp)
 304943c:	dcc01117 	ldw	r19,68(sp)
 3049440:	dc801017 	ldw	r18,64(sp)
 3049444:	dc400f17 	ldw	r17,60(sp)
 3049448:	dc000e17 	ldw	r16,56(sp)
 304944c:	dec01304 	addi	sp,sp,76
 3049450:	f800283a 	ret
 3049454:	0100c1b4 	movhi	r4,774
 3049458:	2129cf04 	addi	r4,r4,-22724
 304945c:	3049b6c0 	call	3049b6c <__pack_d>
 3049460:	dfc01217 	ldw	ra,72(sp)
 3049464:	dcc01117 	ldw	r19,68(sp)
 3049468:	dc801017 	ldw	r18,64(sp)
 304946c:	dc400f17 	ldw	r17,60(sp)
 3049470:	dc000e17 	ldw	r16,56(sp)
 3049474:	dec01304 	addi	sp,sp,76
 3049478:	f800283a 	ret
 304947c:	29805c26 	beq	r5,r6,30495f0 <__divdf3+0x248>
 3049480:	28802e26 	beq	r5,r2,304953c <__divdf3+0x194>
 3049484:	d8c00617 	ldw	r3,24(sp)
 3049488:	d8800b17 	ldw	r2,44(sp)
 304948c:	d9c00817 	ldw	r7,32(sp)
 3049490:	dc400d17 	ldw	r17,52(sp)
 3049494:	188bc83a 	sub	r5,r3,r2
 3049498:	d9800717 	ldw	r6,28(sp)
 304949c:	dc000c17 	ldw	r16,48(sp)
 30494a0:	d9400615 	stw	r5,24(sp)
 30494a4:	3c403936 	bltu	r7,r17,304958c <__divdf3+0x1e4>
 30494a8:	89c03726 	beq	r17,r7,3049588 <__divdf3+0x1e0>
 30494ac:	0015883a 	mov	r10,zero
 30494b0:	001d883a 	mov	r14,zero
 30494b4:	02c40034 	movhi	r11,4096
 30494b8:	5ac00004 	addi	r11,r11,0
 30494bc:	001f883a 	mov	r15,zero
 30494c0:	003f883a 	mov	ra,zero
 30494c4:	04800f44 	movi	r18,61
 30494c8:	00000f06 	br	3049508 <__divdf3+0x160>
 30494cc:	601d883a 	mov	r14,r12
 30494d0:	681f883a 	mov	r15,r13
 30494d4:	400d883a 	mov	r6,r8
 30494d8:	100f883a 	mov	r7,r2
 30494dc:	3191883a 	add	r8,r6,r6
 30494e0:	5808d07a 	srli	r4,r11,1
 30494e4:	4185803a 	cmpltu	r2,r8,r6
 30494e8:	39d3883a 	add	r9,r7,r7
 30494ec:	28c6b03a 	or	r3,r5,r3
 30494f0:	1245883a 	add	r2,r2,r9
 30494f4:	1815883a 	mov	r10,r3
 30494f8:	2017883a 	mov	r11,r4
 30494fc:	400d883a 	mov	r6,r8
 3049500:	100f883a 	mov	r7,r2
 3049504:	fc801726 	beq	ra,r18,3049564 <__divdf3+0x1bc>
 3049508:	580a97fa 	slli	r5,r11,31
 304950c:	5006d07a 	srli	r3,r10,1
 3049510:	ffc00044 	addi	ra,ra,1
 3049514:	3c7ff136 	bltu	r7,r17,30494dc <__divdf3+0x134>
 3049518:	3411c83a 	sub	r8,r6,r16
 304951c:	3205803a 	cmpltu	r2,r6,r8
 3049520:	3c53c83a 	sub	r9,r7,r17
 3049524:	7298b03a 	or	r12,r14,r10
 3049528:	7adab03a 	or	r13,r15,r11
 304952c:	4885c83a 	sub	r2,r9,r2
 3049530:	89ffe61e 	bne	r17,r7,30494cc <__divdf3+0x124>
 3049534:	343fe936 	bltu	r6,r16,30494dc <__divdf3+0x134>
 3049538:	003fe406 	br	30494cc <__divdf3+0x124>
 304953c:	9809883a 	mov	r4,r19
 3049540:	d9800415 	stw	r6,16(sp)
 3049544:	3049b6c0 	call	3049b6c <__pack_d>
 3049548:	dfc01217 	ldw	ra,72(sp)
 304954c:	dcc01117 	ldw	r19,68(sp)
 3049550:	dc801017 	ldw	r18,64(sp)
 3049554:	dc400f17 	ldw	r17,60(sp)
 3049558:	dc000e17 	ldw	r16,56(sp)
 304955c:	dec01304 	addi	sp,sp,76
 3049560:	f800283a 	ret
 3049564:	00803fc4 	movi	r2,255
 3049568:	7090703a 	and	r8,r14,r2
 304956c:	00802004 	movi	r2,128
 3049570:	0007883a 	mov	r3,zero
 3049574:	0013883a 	mov	r9,zero
 3049578:	40800d26 	beq	r8,r2,30495b0 <__divdf3+0x208>
 304957c:	dbc00815 	stw	r15,32(sp)
 3049580:	db800715 	stw	r14,28(sp)
 3049584:	003faa06 	br	3049430 <__divdf3+0x88>
 3049588:	343fc82e 	bgeu	r6,r16,30494ac <__divdf3+0x104>
 304958c:	3185883a 	add	r2,r6,r6
 3049590:	1189803a 	cmpltu	r4,r2,r6
 3049594:	39c7883a 	add	r3,r7,r7
 3049598:	20c9883a 	add	r4,r4,r3
 304959c:	297fffc4 	addi	r5,r5,-1
 30495a0:	100d883a 	mov	r6,r2
 30495a4:	200f883a 	mov	r7,r4
 30495a8:	d9400615 	stw	r5,24(sp)
 30495ac:	003fbf06 	br	30494ac <__divdf3+0x104>
 30495b0:	483ff21e 	bne	r9,zero,304957c <__divdf3+0x1d4>
 30495b4:	01004004 	movi	r4,256
 30495b8:	7104703a 	and	r2,r14,r4
 30495bc:	10c4b03a 	or	r2,r2,r3
 30495c0:	103fee1e 	bne	r2,zero,304957c <__divdf3+0x1d4>
 30495c4:	31c4b03a 	or	r2,r6,r7
 30495c8:	103fec26 	beq	r2,zero,304957c <__divdf3+0x1d4>
 30495cc:	7205883a 	add	r2,r14,r8
 30495d0:	1391803a 	cmpltu	r8,r2,r14
 30495d4:	43d1883a 	add	r8,r8,r15
 30495d8:	013fc004 	movi	r4,-256
 30495dc:	111c703a 	and	r14,r2,r4
 30495e0:	401f883a 	mov	r15,r8
 30495e4:	003fe506 	br	304957c <__divdf3+0x1d4>
 30495e8:	8009883a 	mov	r4,r16
 30495ec:	003f9106 	br	3049434 <__divdf3+0x8c>
 30495f0:	9809883a 	mov	r4,r19
 30495f4:	d8000715 	stw	zero,28(sp)
 30495f8:	d8000815 	stw	zero,32(sp)
 30495fc:	d8000615 	stw	zero,24(sp)
 3049600:	003f8c06 	br	3049434 <__divdf3+0x8c>

03049604 <__make_dp>:
 3049604:	defff904 	addi	sp,sp,-28
 3049608:	d8c00717 	ldw	r3,28(sp)
 304960c:	d9000015 	stw	r4,0(sp)
 3049610:	d809883a 	mov	r4,sp
 3049614:	dfc00515 	stw	ra,20(sp)
 3049618:	d9c00615 	stw	r7,24(sp)
 304961c:	d9400115 	stw	r5,4(sp)
 3049620:	d9800215 	stw	r6,8(sp)
 3049624:	d8c00415 	stw	r3,16(sp)
 3049628:	d9c00315 	stw	r7,12(sp)
 304962c:	3049b6c0 	call	3049b6c <__pack_d>
 3049630:	dfc00517 	ldw	ra,20(sp)
 3049634:	dec00704 	addi	sp,sp,28
 3049638:	f800283a 	ret

0304963c <__truncdfsf2>:
 304963c:	defff804 	addi	sp,sp,-32
 3049640:	2005883a 	mov	r2,r4
 3049644:	2807883a 	mov	r3,r5
 3049648:	d809883a 	mov	r4,sp
 304964c:	d9400204 	addi	r5,sp,8
 3049650:	d8c00115 	stw	r3,4(sp)
 3049654:	d8800015 	stw	r2,0(sp)
 3049658:	dfc00715 	stw	ra,28(sp)
 304965c:	3049e840 	call	3049e84 <__unpack_d>
 3049660:	d9c00517 	ldw	r7,20(sp)
 3049664:	da000617 	ldw	r8,24(sp)
 3049668:	02d00034 	movhi	r11,16384
 304966c:	5affffc4 	addi	r11,r11,-1
 3049670:	3812d7ba 	srli	r9,r7,30
 3049674:	401a90ba 	slli	r13,r8,2
 3049678:	3ac4703a 	and	r2,r7,r11
 304967c:	0007883a 	mov	r3,zero
 3049680:	6a52b03a 	or	r9,r13,r9
 3049684:	10c4b03a 	or	r2,r2,r3
 3049688:	d9000217 	ldw	r4,8(sp)
 304968c:	d9400317 	ldw	r5,12(sp)
 3049690:	d9800417 	ldw	r6,16(sp)
 3049694:	480f883a 	mov	r7,r9
 3049698:	10000126 	beq	r2,zero,30496a0 <__truncdfsf2+0x64>
 304969c:	49c00054 	ori	r7,r9,1
 30496a0:	3049b400 	call	3049b40 <__make_fp>
 30496a4:	dfc00717 	ldw	ra,28(sp)
 30496a8:	dec00804 	addi	sp,sp,32
 30496ac:	f800283a 	ret

030496b0 <udivmodsi4>:
 30496b0:	29001b2e 	bgeu	r5,r4,3049720 <udivmodsi4+0x70>
 30496b4:	28001a16 	blt	r5,zero,3049720 <udivmodsi4+0x70>
 30496b8:	00800044 	movi	r2,1
 30496bc:	0007883a 	mov	r3,zero
 30496c0:	01c007c4 	movi	r7,31
 30496c4:	00000306 	br	30496d4 <udivmodsi4+0x24>
 30496c8:	19c01326 	beq	r3,r7,3049718 <udivmodsi4+0x68>
 30496cc:	18c00044 	addi	r3,r3,1
 30496d0:	28000416 	blt	r5,zero,30496e4 <udivmodsi4+0x34>
 30496d4:	294b883a 	add	r5,r5,r5
 30496d8:	1085883a 	add	r2,r2,r2
 30496dc:	293ffa36 	bltu	r5,r4,30496c8 <udivmodsi4+0x18>
 30496e0:	10000d26 	beq	r2,zero,3049718 <udivmodsi4+0x68>
 30496e4:	0007883a 	mov	r3,zero
 30496e8:	21400236 	bltu	r4,r5,30496f4 <udivmodsi4+0x44>
 30496ec:	2149c83a 	sub	r4,r4,r5
 30496f0:	1886b03a 	or	r3,r3,r2
 30496f4:	1004d07a 	srli	r2,r2,1
 30496f8:	280ad07a 	srli	r5,r5,1
 30496fc:	103ffa1e 	bne	r2,zero,30496e8 <udivmodsi4+0x38>
 3049700:	30000226 	beq	r6,zero,304970c <udivmodsi4+0x5c>
 3049704:	2005883a 	mov	r2,r4
 3049708:	f800283a 	ret
 304970c:	1809883a 	mov	r4,r3
 3049710:	2005883a 	mov	r2,r4
 3049714:	f800283a 	ret
 3049718:	0007883a 	mov	r3,zero
 304971c:	003ff806 	br	3049700 <udivmodsi4+0x50>
 3049720:	00800044 	movi	r2,1
 3049724:	0007883a 	mov	r3,zero
 3049728:	003fef06 	br	30496e8 <udivmodsi4+0x38>

0304972c <__divsi3>:
 304972c:	defffe04 	addi	sp,sp,-8
 3049730:	dc000015 	stw	r16,0(sp)
 3049734:	dfc00115 	stw	ra,4(sp)
 3049738:	0021883a 	mov	r16,zero
 304973c:	20000c16 	blt	r4,zero,3049770 <__divsi3+0x44>
 3049740:	000d883a 	mov	r6,zero
 3049744:	28000e16 	blt	r5,zero,3049780 <__divsi3+0x54>
 3049748:	30496b00 	call	30496b0 <udivmodsi4>
 304974c:	1007883a 	mov	r3,r2
 3049750:	8005003a 	cmpeq	r2,r16,zero
 3049754:	1000011e 	bne	r2,zero,304975c <__divsi3+0x30>
 3049758:	00c7c83a 	sub	r3,zero,r3
 304975c:	1805883a 	mov	r2,r3
 3049760:	dfc00117 	ldw	ra,4(sp)
 3049764:	dc000017 	ldw	r16,0(sp)
 3049768:	dec00204 	addi	sp,sp,8
 304976c:	f800283a 	ret
 3049770:	0109c83a 	sub	r4,zero,r4
 3049774:	04000044 	movi	r16,1
 3049778:	000d883a 	mov	r6,zero
 304977c:	283ff20e 	bge	r5,zero,3049748 <__divsi3+0x1c>
 3049780:	014bc83a 	sub	r5,zero,r5
 3049784:	8021003a 	cmpeq	r16,r16,zero
 3049788:	003fef06 	br	3049748 <__divsi3+0x1c>

0304978c <__modsi3>:
 304978c:	deffff04 	addi	sp,sp,-4
 3049790:	dfc00015 	stw	ra,0(sp)
 3049794:	01800044 	movi	r6,1
 3049798:	2807883a 	mov	r3,r5
 304979c:	20000416 	blt	r4,zero,30497b0 <__modsi3+0x24>
 30497a0:	28000c16 	blt	r5,zero,30497d4 <__modsi3+0x48>
 30497a4:	dfc00017 	ldw	ra,0(sp)
 30497a8:	dec00104 	addi	sp,sp,4
 30497ac:	30496b01 	jmpi	30496b0 <udivmodsi4>
 30497b0:	0109c83a 	sub	r4,zero,r4
 30497b4:	28000b16 	blt	r5,zero,30497e4 <__modsi3+0x58>
 30497b8:	180b883a 	mov	r5,r3
 30497bc:	01800044 	movi	r6,1
 30497c0:	30496b00 	call	30496b0 <udivmodsi4>
 30497c4:	0085c83a 	sub	r2,zero,r2
 30497c8:	dfc00017 	ldw	ra,0(sp)
 30497cc:	dec00104 	addi	sp,sp,4
 30497d0:	f800283a 	ret
 30497d4:	014bc83a 	sub	r5,zero,r5
 30497d8:	dfc00017 	ldw	ra,0(sp)
 30497dc:	dec00104 	addi	sp,sp,4
 30497e0:	30496b01 	jmpi	30496b0 <udivmodsi4>
 30497e4:	0147c83a 	sub	r3,zero,r5
 30497e8:	003ff306 	br	30497b8 <__modsi3+0x2c>

030497ec <__udivsi3>:
 30497ec:	000d883a 	mov	r6,zero
 30497f0:	30496b01 	jmpi	30496b0 <udivmodsi4>

030497f4 <__umodsi3>:
 30497f4:	01800044 	movi	r6,1
 30497f8:	30496b01 	jmpi	30496b0 <udivmodsi4>

030497fc <__muldi3>:
 30497fc:	2011883a 	mov	r8,r4
 3049800:	427fffcc 	andi	r9,r8,65535
 3049804:	4018d43a 	srli	r12,r8,16
 3049808:	32bfffcc 	andi	r10,r6,65535
 304980c:	3016d43a 	srli	r11,r6,16
 3049810:	4a85383a 	mul	r2,r9,r10
 3049814:	6295383a 	mul	r10,r12,r10
 3049818:	4ad3383a 	mul	r9,r9,r11
 304981c:	113fffcc 	andi	r4,r2,65535
 3049820:	1004d43a 	srli	r2,r2,16
 3049824:	4a93883a 	add	r9,r9,r10
 3049828:	3807883a 	mov	r3,r7
 304982c:	1245883a 	add	r2,r2,r9
 3049830:	280f883a 	mov	r7,r5
 3049834:	180b883a 	mov	r5,r3
 3049838:	1006943a 	slli	r3,r2,16
 304983c:	defffd04 	addi	sp,sp,-12
 3049840:	dc800215 	stw	r18,8(sp)
 3049844:	1907883a 	add	r3,r3,r4
 3049848:	dc400115 	stw	r17,4(sp)
 304984c:	dc000015 	stw	r16,0(sp)
 3049850:	4165383a 	mul	r18,r8,r5
 3049854:	31e3383a 	mul	r17,r6,r7
 3049858:	1012d43a 	srli	r9,r2,16
 304985c:	62d9383a 	mul	r12,r12,r11
 3049860:	181f883a 	mov	r15,r3
 3049864:	1280032e 	bgeu	r2,r10,3049874 <__muldi3+0x78>
 3049868:	00800074 	movhi	r2,1
 304986c:	10800004 	addi	r2,r2,0
 3049870:	6099883a 	add	r12,r12,r2
 3049874:	624d883a 	add	r6,r12,r9
 3049878:	9187883a 	add	r3,r18,r6
 304987c:	88c7883a 	add	r3,r17,r3
 3049880:	7805883a 	mov	r2,r15
 3049884:	dc800217 	ldw	r18,8(sp)
 3049888:	dc400117 	ldw	r17,4(sp)
 304988c:	dc000017 	ldw	r16,0(sp)
 3049890:	dec00304 	addi	sp,sp,12
 3049894:	f800283a 	ret

03049898 <__clzsi2>:
 3049898:	00bfffd4 	movui	r2,65535
 304989c:	11000e36 	bltu	r2,r4,30498d8 <__clzsi2+0x40>
 30498a0:	00803fc4 	movi	r2,255
 30498a4:	01400204 	movi	r5,8
 30498a8:	0007883a 	mov	r3,zero
 30498ac:	11001036 	bltu	r2,r4,30498f0 <__clzsi2+0x58>
 30498b0:	000b883a 	mov	r5,zero
 30498b4:	20c6d83a 	srl	r3,r4,r3
 30498b8:	0080c1b4 	movhi	r2,774
 30498bc:	10a9d404 	addi	r2,r2,-22704
 30498c0:	1887883a 	add	r3,r3,r2
 30498c4:	18800003 	ldbu	r2,0(r3)
 30498c8:	00c00804 	movi	r3,32
 30498cc:	2885883a 	add	r2,r5,r2
 30498d0:	1885c83a 	sub	r2,r3,r2
 30498d4:	f800283a 	ret
 30498d8:	01400404 	movi	r5,16
 30498dc:	00804034 	movhi	r2,256
 30498e0:	10bfffc4 	addi	r2,r2,-1
 30498e4:	2807883a 	mov	r3,r5
 30498e8:	113ff22e 	bgeu	r2,r4,30498b4 <__clzsi2+0x1c>
 30498ec:	01400604 	movi	r5,24
 30498f0:	2807883a 	mov	r3,r5
 30498f4:	20c6d83a 	srl	r3,r4,r3
 30498f8:	0080c1b4 	movhi	r2,774
 30498fc:	10a9d404 	addi	r2,r2,-22704
 3049900:	1887883a 	add	r3,r3,r2
 3049904:	18800003 	ldbu	r2,0(r3)
 3049908:	00c00804 	movi	r3,32
 304990c:	2885883a 	add	r2,r5,r2
 3049910:	1885c83a 	sub	r2,r3,r2
 3049914:	f800283a 	ret

03049918 <__pack_f>:
 3049918:	20c00017 	ldw	r3,0(r4)
 304991c:	01c00044 	movi	r7,1
 3049920:	21800317 	ldw	r6,12(r4)
 3049924:	21400117 	ldw	r5,4(r4)
 3049928:	38c02d2e 	bgeu	r7,r3,30499e0 <__pack_f+0xc8>
 304992c:	00800104 	movi	r2,4
 3049930:	18802826 	beq	r3,r2,30499d4 <__pack_f+0xbc>
 3049934:	00800084 	movi	r2,2
 3049938:	18800126 	beq	r3,r2,3049940 <__pack_f+0x28>
 304993c:	3000101e 	bne	r6,zero,3049980 <__pack_f+0x68>
 3049940:	000d883a 	mov	r6,zero
 3049944:	0007883a 	mov	r3,zero
 3049948:	19003fcc 	andi	r4,r3,255
 304994c:	200895fa 	slli	r4,r4,23
 3049950:	00c02034 	movhi	r3,128
 3049954:	18ffffc4 	addi	r3,r3,-1
 3049958:	30c6703a 	and	r3,r6,r3
 304995c:	10a0002c 	andhi	r2,r2,32768
 3049960:	10c4b03a 	or	r2,r2,r3
 3049964:	280a97fa 	slli	r5,r5,31
 3049968:	1104b03a 	or	r2,r2,r4
 304996c:	00e00034 	movhi	r3,32768
 3049970:	18ffffc4 	addi	r3,r3,-1
 3049974:	10c4703a 	and	r2,r2,r3
 3049978:	1144b03a 	or	r2,r2,r5
 304997c:	f800283a 	ret
 3049980:	21000217 	ldw	r4,8(r4)
 3049984:	00bfe084 	movi	r2,-126
 3049988:	20801b16 	blt	r4,r2,30499f8 <__pack_f+0xe0>
 304998c:	00801fc4 	movi	r2,127
 3049990:	11001016 	blt	r2,r4,30499d4 <__pack_f+0xbc>
 3049994:	308e703a 	and	r7,r6,r2
 3049998:	2087883a 	add	r3,r4,r2
 304999c:	00801004 	movi	r2,64
 30499a0:	38800526 	beq	r7,r2,30499b8 <__pack_f+0xa0>
 30499a4:	31800fc4 	addi	r6,r6,63
 30499a8:	30000716 	blt	r6,zero,30499c8 <__pack_f+0xb0>
 30499ac:	300490ba 	slli	r2,r6,2
 30499b0:	100cd27a 	srli	r6,r2,9
 30499b4:	003fe406 	br	3049948 <__pack_f+0x30>
 30499b8:	3080200c 	andi	r2,r6,128
 30499bc:	103ffa26 	beq	r2,zero,30499a8 <__pack_f+0x90>
 30499c0:	31cd883a 	add	r6,r6,r7
 30499c4:	003ff806 	br	30499a8 <__pack_f+0x90>
 30499c8:	300cd07a 	srli	r6,r6,1
 30499cc:	18c00044 	addi	r3,r3,1
 30499d0:	003ff606 	br	30499ac <__pack_f+0x94>
 30499d4:	000d883a 	mov	r6,zero
 30499d8:	00ffffc4 	movi	r3,-1
 30499dc:	003fda06 	br	3049948 <__pack_f+0x30>
 30499e0:	31800434 	orhi	r6,r6,16
 30499e4:	00802034 	movhi	r2,128
 30499e8:	10bfffc4 	addi	r2,r2,-1
 30499ec:	308c703a 	and	r6,r6,r2
 30499f0:	00ffffc4 	movi	r3,-1
 30499f4:	003fd406 	br	3049948 <__pack_f+0x30>
 30499f8:	1109c83a 	sub	r4,r2,r4
 30499fc:	00800644 	movi	r2,25
 3049a00:	11001216 	blt	r2,r4,3049a4c <__pack_f+0x134>
 3049a04:	3904983a 	sll	r2,r7,r4
 3049a08:	3106d83a 	srl	r3,r6,r4
 3049a0c:	10bfffc4 	addi	r2,r2,-1
 3049a10:	3084703a 	and	r2,r6,r2
 3049a14:	1004c03a 	cmpne	r2,r2,zero
 3049a18:	1886b03a 	or	r3,r3,r2
 3049a1c:	19001fcc 	andi	r4,r3,127
 3049a20:	00801004 	movi	r2,64
 3049a24:	20800c26 	beq	r4,r2,3049a58 <__pack_f+0x140>
 3049a28:	18c00fc4 	addi	r3,r3,63
 3049a2c:	00900034 	movhi	r2,16384
 3049a30:	10bfffc4 	addi	r2,r2,-1
 3049a34:	180cd1fa 	srli	r6,r3,7
 3049a38:	10c7803a 	cmpltu	r3,r2,r3
 3049a3c:	00802034 	movhi	r2,128
 3049a40:	10bfffc4 	addi	r2,r2,-1
 3049a44:	308c703a 	and	r6,r6,r2
 3049a48:	003fbf06 	br	3049948 <__pack_f+0x30>
 3049a4c:	0007883a 	mov	r3,zero
 3049a50:	000d883a 	mov	r6,zero
 3049a54:	003ff906 	br	3049a3c <__pack_f+0x124>
 3049a58:	1880200c 	andi	r2,r3,128
 3049a5c:	10000126 	beq	r2,zero,3049a64 <__pack_f+0x14c>
 3049a60:	1907883a 	add	r3,r3,r4
 3049a64:	180cd1fa 	srli	r6,r3,7
 3049a68:	00900034 	movhi	r2,16384
 3049a6c:	10bfffc4 	addi	r2,r2,-1
 3049a70:	10c7803a 	cmpltu	r3,r2,r3
 3049a74:	003ff106 	br	3049a3c <__pack_f+0x124>

03049a78 <__unpack_f>:
 3049a78:	21800017 	ldw	r6,0(r4)
 3049a7c:	00c02034 	movhi	r3,128
 3049a80:	18ffffc4 	addi	r3,r3,-1
 3049a84:	3004d5fa 	srli	r2,r6,23
 3049a88:	3008d7fa 	srli	r4,r6,31
 3049a8c:	30ce703a 	and	r7,r6,r3
 3049a90:	10c03fcc 	andi	r3,r2,255
 3049a94:	29000115 	stw	r4,4(r5)
 3049a98:	1800131e 	bne	r3,zero,3049ae8 <__unpack_f+0x70>
 3049a9c:	38000f26 	beq	r7,zero,3049adc <__unpack_f+0x64>
 3049aa0:	380691fa 	slli	r3,r7,7
 3049aa4:	01bfe084 	movi	r6,-126
 3049aa8:	008000c4 	movi	r2,3
 3049aac:	01100034 	movhi	r4,16384
 3049ab0:	213fffc4 	addi	r4,r4,-1
 3049ab4:	28800015 	stw	r2,0(r5)
 3049ab8:	29800215 	stw	r6,8(r5)
 3049abc:	20c00536 	bltu	r4,r3,3049ad4 <__unpack_f+0x5c>
 3049ac0:	3005883a 	mov	r2,r6
 3049ac4:	18c7883a 	add	r3,r3,r3
 3049ac8:	10bfffc4 	addi	r2,r2,-1
 3049acc:	20fffd2e 	bgeu	r4,r3,3049ac4 <__unpack_f+0x4c>
 3049ad0:	28800215 	stw	r2,8(r5)
 3049ad4:	28c00315 	stw	r3,12(r5)
 3049ad8:	f800283a 	ret
 3049adc:	00800084 	movi	r2,2
 3049ae0:	28800015 	stw	r2,0(r5)
 3049ae4:	f800283a 	ret
 3049ae8:	00803fc4 	movi	r2,255
 3049aec:	18800826 	beq	r3,r2,3049b10 <__unpack_f+0x98>
 3049af0:	380491fa 	slli	r2,r7,7
 3049af4:	18ffe044 	addi	r3,r3,-127
 3049af8:	28c00215 	stw	r3,8(r5)
 3049afc:	10900034 	orhi	r2,r2,16384
 3049b00:	28800315 	stw	r2,12(r5)
 3049b04:	008000c4 	movi	r2,3
 3049b08:	28800015 	stw	r2,0(r5)
 3049b0c:	f800283a 	ret
 3049b10:	3800031e 	bne	r7,zero,3049b20 <__unpack_f+0xa8>
 3049b14:	00800104 	movi	r2,4
 3049b18:	28800015 	stw	r2,0(r5)
 3049b1c:	f800283a 	ret
 3049b20:	3080042c 	andhi	r2,r6,16
 3049b24:	10000426 	beq	r2,zero,3049b38 <__unpack_f+0xc0>
 3049b28:	00800044 	movi	r2,1
 3049b2c:	28800015 	stw	r2,0(r5)
 3049b30:	29c00315 	stw	r7,12(r5)
 3049b34:	f800283a 	ret
 3049b38:	28000015 	stw	zero,0(r5)
 3049b3c:	003ffc06 	br	3049b30 <__unpack_f+0xb8>

03049b40 <__make_fp>:
 3049b40:	defffb04 	addi	sp,sp,-20
 3049b44:	d9000015 	stw	r4,0(sp)
 3049b48:	d809883a 	mov	r4,sp
 3049b4c:	dfc00415 	stw	ra,16(sp)
 3049b50:	d9400115 	stw	r5,4(sp)
 3049b54:	d9800215 	stw	r6,8(sp)
 3049b58:	d9c00315 	stw	r7,12(sp)
 3049b5c:	30499180 	call	3049918 <__pack_f>
 3049b60:	dfc00417 	ldw	ra,16(sp)
 3049b64:	dec00504 	addi	sp,sp,20
 3049b68:	f800283a 	ret

03049b6c <__pack_d>:
 3049b6c:	20c00017 	ldw	r3,0(r4)
 3049b70:	defffd04 	addi	sp,sp,-12
 3049b74:	dc000015 	stw	r16,0(sp)
 3049b78:	dc800215 	stw	r18,8(sp)
 3049b7c:	dc400115 	stw	r17,4(sp)
 3049b80:	00800044 	movi	r2,1
 3049b84:	22000317 	ldw	r8,12(r4)
 3049b88:	001f883a 	mov	r15,zero
 3049b8c:	22400417 	ldw	r9,16(r4)
 3049b90:	24000117 	ldw	r16,4(r4)
 3049b94:	10c0552e 	bgeu	r2,r3,3049cec <__pack_d+0x180>
 3049b98:	00800104 	movi	r2,4
 3049b9c:	18804f26 	beq	r3,r2,3049cdc <__pack_d+0x170>
 3049ba0:	00800084 	movi	r2,2
 3049ba4:	18800226 	beq	r3,r2,3049bb0 <__pack_d+0x44>
 3049ba8:	4244b03a 	or	r2,r8,r9
 3049bac:	10001a1e 	bne	r2,zero,3049c18 <__pack_d+0xac>
 3049bb0:	000d883a 	mov	r6,zero
 3049bb4:	000f883a 	mov	r7,zero
 3049bb8:	0011883a 	mov	r8,zero
 3049bbc:	00800434 	movhi	r2,16
 3049bc0:	10bfffc4 	addi	r2,r2,-1
 3049bc4:	301d883a 	mov	r14,r6
 3049bc8:	3884703a 	and	r2,r7,r2
 3049bcc:	400a953a 	slli	r5,r8,20
 3049bd0:	79bffc2c 	andhi	r6,r15,65520
 3049bd4:	308cb03a 	or	r6,r6,r2
 3049bd8:	00e00434 	movhi	r3,32784
 3049bdc:	18ffffc4 	addi	r3,r3,-1
 3049be0:	800497fa 	slli	r2,r16,31
 3049be4:	30c6703a 	and	r3,r6,r3
 3049be8:	1946b03a 	or	r3,r3,r5
 3049bec:	01600034 	movhi	r5,32768
 3049bf0:	297fffc4 	addi	r5,r5,-1
 3049bf4:	194a703a 	and	r5,r3,r5
 3049bf8:	288ab03a 	or	r5,r5,r2
 3049bfc:	2807883a 	mov	r3,r5
 3049c00:	7005883a 	mov	r2,r14
 3049c04:	dc800217 	ldw	r18,8(sp)
 3049c08:	dc400117 	ldw	r17,4(sp)
 3049c0c:	dc000017 	ldw	r16,0(sp)
 3049c10:	dec00304 	addi	sp,sp,12
 3049c14:	f800283a 	ret
 3049c18:	21000217 	ldw	r4,8(r4)
 3049c1c:	00bf0084 	movi	r2,-1022
 3049c20:	20804016 	blt	r4,r2,3049d24 <__pack_d+0x1b8>
 3049c24:	0080ffc4 	movi	r2,1023
 3049c28:	11002c16 	blt	r2,r4,3049cdc <__pack_d+0x170>
 3049c2c:	00803fc4 	movi	r2,255
 3049c30:	408c703a 	and	r6,r8,r2
 3049c34:	00802004 	movi	r2,128
 3049c38:	0007883a 	mov	r3,zero
 3049c3c:	000f883a 	mov	r7,zero
 3049c40:	2280ffc4 	addi	r10,r4,1023
 3049c44:	30801e26 	beq	r6,r2,3049cc0 <__pack_d+0x154>
 3049c48:	00801fc4 	movi	r2,127
 3049c4c:	4089883a 	add	r4,r8,r2
 3049c50:	220d803a 	cmpltu	r6,r4,r8
 3049c54:	324d883a 	add	r6,r6,r9
 3049c58:	2011883a 	mov	r8,r4
 3049c5c:	3013883a 	mov	r9,r6
 3049c60:	00880034 	movhi	r2,8192
 3049c64:	10bfffc4 	addi	r2,r2,-1
 3049c68:	12400d36 	bltu	r2,r9,3049ca0 <__pack_d+0x134>
 3049c6c:	4804963a 	slli	r2,r9,24
 3049c70:	400cd23a 	srli	r6,r8,8
 3049c74:	480ed23a 	srli	r7,r9,8
 3049c78:	013fffc4 	movi	r4,-1
 3049c7c:	118cb03a 	or	r6,r2,r6
 3049c80:	01400434 	movhi	r5,16
 3049c84:	297fffc4 	addi	r5,r5,-1
 3049c88:	3104703a 	and	r2,r6,r4
 3049c8c:	3946703a 	and	r3,r7,r5
 3049c90:	5201ffcc 	andi	r8,r10,2047
 3049c94:	100d883a 	mov	r6,r2
 3049c98:	180f883a 	mov	r7,r3
 3049c9c:	003fc706 	br	3049bbc <__pack_d+0x50>
 3049ca0:	480897fa 	slli	r4,r9,31
 3049ca4:	4004d07a 	srli	r2,r8,1
 3049ca8:	4806d07a 	srli	r3,r9,1
 3049cac:	52800044 	addi	r10,r10,1
 3049cb0:	2084b03a 	or	r2,r4,r2
 3049cb4:	1011883a 	mov	r8,r2
 3049cb8:	1813883a 	mov	r9,r3
 3049cbc:	003feb06 	br	3049c6c <__pack_d+0x100>
 3049cc0:	383fe11e 	bne	r7,zero,3049c48 <__pack_d+0xdc>
 3049cc4:	01004004 	movi	r4,256
 3049cc8:	4104703a 	and	r2,r8,r4
 3049ccc:	10c4b03a 	or	r2,r2,r3
 3049cd0:	103fe326 	beq	r2,zero,3049c60 <__pack_d+0xf4>
 3049cd4:	3005883a 	mov	r2,r6
 3049cd8:	003fdc06 	br	3049c4c <__pack_d+0xe0>
 3049cdc:	000d883a 	mov	r6,zero
 3049ce0:	000f883a 	mov	r7,zero
 3049ce4:	0201ffc4 	movi	r8,2047
 3049ce8:	003fb406 	br	3049bbc <__pack_d+0x50>
 3049cec:	0005883a 	mov	r2,zero
 3049cf0:	00c00234 	movhi	r3,8
 3049cf4:	18c00004 	addi	r3,r3,0
 3049cf8:	408cb03a 	or	r6,r8,r2
 3049cfc:	48ceb03a 	or	r7,r9,r3
 3049d00:	013fffc4 	movi	r4,-1
 3049d04:	01400434 	movhi	r5,16
 3049d08:	297fffc4 	addi	r5,r5,-1
 3049d0c:	3104703a 	and	r2,r6,r4
 3049d10:	3946703a 	and	r3,r7,r5
 3049d14:	100d883a 	mov	r6,r2
 3049d18:	180f883a 	mov	r7,r3
 3049d1c:	0201ffc4 	movi	r8,2047
 3049d20:	003fa606 	br	3049bbc <__pack_d+0x50>
 3049d24:	1109c83a 	sub	r4,r2,r4
 3049d28:	00800e04 	movi	r2,56
 3049d2c:	11004316 	blt	r2,r4,3049e3c <__pack_d+0x2d0>
 3049d30:	21fff804 	addi	r7,r4,-32
 3049d34:	38004516 	blt	r7,zero,3049e4c <__pack_d+0x2e0>
 3049d38:	49d8d83a 	srl	r12,r9,r7
 3049d3c:	001b883a 	mov	r13,zero
 3049d40:	0023883a 	mov	r17,zero
 3049d44:	01400044 	movi	r5,1
 3049d48:	0025883a 	mov	r18,zero
 3049d4c:	38004716 	blt	r7,zero,3049e6c <__pack_d+0x300>
 3049d50:	29d6983a 	sll	r11,r5,r7
 3049d54:	0015883a 	mov	r10,zero
 3049d58:	00bfffc4 	movi	r2,-1
 3049d5c:	5089883a 	add	r4,r10,r2
 3049d60:	588b883a 	add	r5,r11,r2
 3049d64:	228d803a 	cmpltu	r6,r4,r10
 3049d68:	314b883a 	add	r5,r6,r5
 3049d6c:	4104703a 	and	r2,r8,r4
 3049d70:	4946703a 	and	r3,r9,r5
 3049d74:	10c4b03a 	or	r2,r2,r3
 3049d78:	10000226 	beq	r2,zero,3049d84 <__pack_d+0x218>
 3049d7c:	04400044 	movi	r17,1
 3049d80:	0025883a 	mov	r18,zero
 3049d84:	00803fc4 	movi	r2,255
 3049d88:	644eb03a 	or	r7,r12,r17
 3049d8c:	3892703a 	and	r9,r7,r2
 3049d90:	00802004 	movi	r2,128
 3049d94:	6c90b03a 	or	r8,r13,r18
 3049d98:	0015883a 	mov	r10,zero
 3049d9c:	48801626 	beq	r9,r2,3049df8 <__pack_d+0x28c>
 3049da0:	01001fc4 	movi	r4,127
 3049da4:	3905883a 	add	r2,r7,r4
 3049da8:	11cd803a 	cmpltu	r6,r2,r7
 3049dac:	320d883a 	add	r6,r6,r8
 3049db0:	100f883a 	mov	r7,r2
 3049db4:	00840034 	movhi	r2,4096
 3049db8:	10bfffc4 	addi	r2,r2,-1
 3049dbc:	3011883a 	mov	r8,r6
 3049dc0:	0007883a 	mov	r3,zero
 3049dc4:	11801b36 	bltu	r2,r6,3049e34 <__pack_d+0x2c8>
 3049dc8:	4004963a 	slli	r2,r8,24
 3049dcc:	3808d23a 	srli	r4,r7,8
 3049dd0:	400ad23a 	srli	r5,r8,8
 3049dd4:	1813883a 	mov	r9,r3
 3049dd8:	1108b03a 	or	r4,r2,r4
 3049ddc:	00bfffc4 	movi	r2,-1
 3049de0:	00c00434 	movhi	r3,16
 3049de4:	18ffffc4 	addi	r3,r3,-1
 3049de8:	208c703a 	and	r6,r4,r2
 3049dec:	28ce703a 	and	r7,r5,r3
 3049df0:	4a01ffcc 	andi	r8,r9,2047
 3049df4:	003f7106 	br	3049bbc <__pack_d+0x50>
 3049df8:	503fe91e 	bne	r10,zero,3049da0 <__pack_d+0x234>
 3049dfc:	01004004 	movi	r4,256
 3049e00:	3904703a 	and	r2,r7,r4
 3049e04:	0007883a 	mov	r3,zero
 3049e08:	10c4b03a 	or	r2,r2,r3
 3049e0c:	10000626 	beq	r2,zero,3049e28 <__pack_d+0x2bc>
 3049e10:	3a45883a 	add	r2,r7,r9
 3049e14:	11cd803a 	cmpltu	r6,r2,r7
 3049e18:	320d883a 	add	r6,r6,r8
 3049e1c:	100f883a 	mov	r7,r2
 3049e20:	3011883a 	mov	r8,r6
 3049e24:	0007883a 	mov	r3,zero
 3049e28:	00840034 	movhi	r2,4096
 3049e2c:	10bfffc4 	addi	r2,r2,-1
 3049e30:	123fe52e 	bgeu	r2,r8,3049dc8 <__pack_d+0x25c>
 3049e34:	00c00044 	movi	r3,1
 3049e38:	003fe306 	br	3049dc8 <__pack_d+0x25c>
 3049e3c:	0009883a 	mov	r4,zero
 3049e40:	0013883a 	mov	r9,zero
 3049e44:	000b883a 	mov	r5,zero
 3049e48:	003fe406 	br	3049ddc <__pack_d+0x270>
 3049e4c:	4a47883a 	add	r3,r9,r9
 3049e50:	008007c4 	movi	r2,31
 3049e54:	1105c83a 	sub	r2,r2,r4
 3049e58:	1886983a 	sll	r3,r3,r2
 3049e5c:	4118d83a 	srl	r12,r8,r4
 3049e60:	491ad83a 	srl	r13,r9,r4
 3049e64:	1b18b03a 	or	r12,r3,r12
 3049e68:	003fb506 	br	3049d40 <__pack_d+0x1d4>
 3049e6c:	2806d07a 	srli	r3,r5,1
 3049e70:	008007c4 	movi	r2,31
 3049e74:	1105c83a 	sub	r2,r2,r4
 3049e78:	1896d83a 	srl	r11,r3,r2
 3049e7c:	2914983a 	sll	r10,r5,r4
 3049e80:	003fb506 	br	3049d58 <__pack_d+0x1ec>

03049e84 <__unpack_d>:
 3049e84:	20c00117 	ldw	r3,4(r4)
 3049e88:	22400017 	ldw	r9,0(r4)
 3049e8c:	00800434 	movhi	r2,16
 3049e90:	10bfffc4 	addi	r2,r2,-1
 3049e94:	1808d53a 	srli	r4,r3,20
 3049e98:	180cd7fa 	srli	r6,r3,31
 3049e9c:	1894703a 	and	r10,r3,r2
 3049ea0:	2201ffcc 	andi	r8,r4,2047
 3049ea4:	281b883a 	mov	r13,r5
 3049ea8:	4817883a 	mov	r11,r9
 3049eac:	29800115 	stw	r6,4(r5)
 3049eb0:	5019883a 	mov	r12,r10
 3049eb4:	40001e1e 	bne	r8,zero,3049f30 <__unpack_d+0xac>
 3049eb8:	4a84b03a 	or	r2,r9,r10
 3049ebc:	10001926 	beq	r2,zero,3049f24 <__unpack_d+0xa0>
 3049ec0:	4804d63a 	srli	r2,r9,24
 3049ec4:	500c923a 	slli	r6,r10,8
 3049ec8:	013f0084 	movi	r4,-1022
 3049ecc:	00c40034 	movhi	r3,4096
 3049ed0:	18ffffc4 	addi	r3,r3,-1
 3049ed4:	118cb03a 	or	r6,r2,r6
 3049ed8:	008000c4 	movi	r2,3
 3049edc:	480a923a 	slli	r5,r9,8
 3049ee0:	68800015 	stw	r2,0(r13)
 3049ee4:	69000215 	stw	r4,8(r13)
 3049ee8:	19800b36 	bltu	r3,r6,3049f18 <__unpack_d+0x94>
 3049eec:	200f883a 	mov	r7,r4
 3049ef0:	1811883a 	mov	r8,r3
 3049ef4:	2945883a 	add	r2,r5,r5
 3049ef8:	1149803a 	cmpltu	r4,r2,r5
 3049efc:	3187883a 	add	r3,r6,r6
 3049f00:	20c9883a 	add	r4,r4,r3
 3049f04:	100b883a 	mov	r5,r2
 3049f08:	200d883a 	mov	r6,r4
 3049f0c:	39ffffc4 	addi	r7,r7,-1
 3049f10:	413ff82e 	bgeu	r8,r4,3049ef4 <__unpack_d+0x70>
 3049f14:	69c00215 	stw	r7,8(r13)
 3049f18:	69800415 	stw	r6,16(r13)
 3049f1c:	69400315 	stw	r5,12(r13)
 3049f20:	f800283a 	ret
 3049f24:	00800084 	movi	r2,2
 3049f28:	28800015 	stw	r2,0(r5)
 3049f2c:	f800283a 	ret
 3049f30:	0081ffc4 	movi	r2,2047
 3049f34:	40801026 	beq	r8,r2,3049f78 <__unpack_d+0xf4>
 3049f38:	480cd63a 	srli	r6,r9,24
 3049f3c:	5006923a 	slli	r3,r10,8
 3049f40:	4804923a 	slli	r2,r9,8
 3049f44:	0009883a 	mov	r4,zero
 3049f48:	30c6b03a 	or	r3,r6,r3
 3049f4c:	01440034 	movhi	r5,4096
 3049f50:	29400004 	addi	r5,r5,0
 3049f54:	110cb03a 	or	r6,r2,r4
 3049f58:	423f0044 	addi	r8,r8,-1023
 3049f5c:	194eb03a 	or	r7,r3,r5
 3049f60:	008000c4 	movi	r2,3
 3049f64:	69c00415 	stw	r7,16(r13)
 3049f68:	6a000215 	stw	r8,8(r13)
 3049f6c:	68800015 	stw	r2,0(r13)
 3049f70:	69800315 	stw	r6,12(r13)
 3049f74:	f800283a 	ret
 3049f78:	4a84b03a 	or	r2,r9,r10
 3049f7c:	1000031e 	bne	r2,zero,3049f8c <__unpack_d+0x108>
 3049f80:	00800104 	movi	r2,4
 3049f84:	28800015 	stw	r2,0(r5)
 3049f88:	f800283a 	ret
 3049f8c:	0009883a 	mov	r4,zero
 3049f90:	01400234 	movhi	r5,8
 3049f94:	29400004 	addi	r5,r5,0
 3049f98:	4904703a 	and	r2,r9,r4
 3049f9c:	5146703a 	and	r3,r10,r5
 3049fa0:	10c4b03a 	or	r2,r2,r3
 3049fa4:	10000526 	beq	r2,zero,3049fbc <__unpack_d+0x138>
 3049fa8:	00800044 	movi	r2,1
 3049fac:	68800015 	stw	r2,0(r13)
 3049fb0:	6b000415 	stw	r12,16(r13)
 3049fb4:	6ac00315 	stw	r11,12(r13)
 3049fb8:	f800283a 	ret
 3049fbc:	68000015 	stw	zero,0(r13)
 3049fc0:	003ffb06 	br	3049fb0 <__unpack_d+0x12c>

03049fc4 <_fclose_r>:
 3049fc4:	defffc04 	addi	sp,sp,-16
 3049fc8:	dc400115 	stw	r17,4(sp)
 3049fcc:	dc000015 	stw	r16,0(sp)
 3049fd0:	dfc00315 	stw	ra,12(sp)
 3049fd4:	dc800215 	stw	r18,8(sp)
 3049fd8:	2821883a 	mov	r16,r5
 3049fdc:	2023883a 	mov	r17,r4
 3049fe0:	28002926 	beq	r5,zero,304a088 <_fclose_r+0xc4>
 3049fe4:	304a3700 	call	304a370 <__sfp_lock_acquire>
 3049fe8:	88000226 	beq	r17,zero,3049ff4 <_fclose_r+0x30>
 3049fec:	88800e17 	ldw	r2,56(r17)
 3049ff0:	10002d26 	beq	r2,zero,304a0a8 <_fclose_r+0xe4>
 3049ff4:	8080030f 	ldh	r2,12(r16)
 3049ff8:	10002226 	beq	r2,zero,304a084 <_fclose_r+0xc0>
 3049ffc:	8809883a 	mov	r4,r17
 304a000:	800b883a 	mov	r5,r16
 304a004:	304a0e80 	call	304a0e8 <_fflush_r>
 304a008:	1025883a 	mov	r18,r2
 304a00c:	80800b17 	ldw	r2,44(r16)
 304a010:	10000426 	beq	r2,zero,304a024 <_fclose_r+0x60>
 304a014:	81400717 	ldw	r5,28(r16)
 304a018:	8809883a 	mov	r4,r17
 304a01c:	103ee83a 	callr	r2
 304a020:	10002a16 	blt	r2,zero,304a0cc <_fclose_r+0x108>
 304a024:	8080030b 	ldhu	r2,12(r16)
 304a028:	1080200c 	andi	r2,r2,128
 304a02c:	1000231e 	bne	r2,zero,304a0bc <_fclose_r+0xf8>
 304a030:	81400c17 	ldw	r5,48(r16)
 304a034:	28000526 	beq	r5,zero,304a04c <_fclose_r+0x88>
 304a038:	80801004 	addi	r2,r16,64
 304a03c:	28800226 	beq	r5,r2,304a048 <_fclose_r+0x84>
 304a040:	8809883a 	mov	r4,r17
 304a044:	304a8140 	call	304a814 <_free_r>
 304a048:	80000c15 	stw	zero,48(r16)
 304a04c:	81401117 	ldw	r5,68(r16)
 304a050:	28000326 	beq	r5,zero,304a060 <_fclose_r+0x9c>
 304a054:	8809883a 	mov	r4,r17
 304a058:	304a8140 	call	304a814 <_free_r>
 304a05c:	80001115 	stw	zero,68(r16)
 304a060:	8000030d 	sth	zero,12(r16)
 304a064:	304a3740 	call	304a374 <__sfp_lock_release>
 304a068:	9005883a 	mov	r2,r18
 304a06c:	dfc00317 	ldw	ra,12(sp)
 304a070:	dc800217 	ldw	r18,8(sp)
 304a074:	dc400117 	ldw	r17,4(sp)
 304a078:	dc000017 	ldw	r16,0(sp)
 304a07c:	dec00404 	addi	sp,sp,16
 304a080:	f800283a 	ret
 304a084:	304a3740 	call	304a374 <__sfp_lock_release>
 304a088:	0025883a 	mov	r18,zero
 304a08c:	9005883a 	mov	r2,r18
 304a090:	dfc00317 	ldw	ra,12(sp)
 304a094:	dc800217 	ldw	r18,8(sp)
 304a098:	dc400117 	ldw	r17,4(sp)
 304a09c:	dc000017 	ldw	r16,0(sp)
 304a0a0:	dec00404 	addi	sp,sp,16
 304a0a4:	f800283a 	ret
 304a0a8:	8809883a 	mov	r4,r17
 304a0ac:	304a3800 	call	304a380 <__sinit>
 304a0b0:	8080030f 	ldh	r2,12(r16)
 304a0b4:	103fd11e 	bne	r2,zero,3049ffc <_fclose_r+0x38>
 304a0b8:	003ff206 	br	304a084 <_fclose_r+0xc0>
 304a0bc:	81400417 	ldw	r5,16(r16)
 304a0c0:	8809883a 	mov	r4,r17
 304a0c4:	304a8140 	call	304a814 <_free_r>
 304a0c8:	003fd906 	br	304a030 <_fclose_r+0x6c>
 304a0cc:	04bfffc4 	movi	r18,-1
 304a0d0:	003fd406 	br	304a024 <_fclose_r+0x60>

0304a0d4 <fclose>:
 304a0d4:	0080c1b4 	movhi	r2,774
 304a0d8:	10b28804 	addi	r2,r2,-13792
 304a0dc:	200b883a 	mov	r5,r4
 304a0e0:	11000017 	ldw	r4,0(r2)
 304a0e4:	3049fc41 	jmpi	3049fc4 <_fclose_r>

0304a0e8 <_fflush_r>:
 304a0e8:	defffb04 	addi	sp,sp,-20
 304a0ec:	dcc00315 	stw	r19,12(sp)
 304a0f0:	dc800215 	stw	r18,8(sp)
 304a0f4:	dfc00415 	stw	ra,16(sp)
 304a0f8:	dc400115 	stw	r17,4(sp)
 304a0fc:	dc000015 	stw	r16,0(sp)
 304a100:	2027883a 	mov	r19,r4
 304a104:	2825883a 	mov	r18,r5
 304a108:	20000226 	beq	r4,zero,304a114 <_fflush_r+0x2c>
 304a10c:	20800e17 	ldw	r2,56(r4)
 304a110:	10005626 	beq	r2,zero,304a26c <_fflush_r+0x184>
 304a114:	9100030b 	ldhu	r4,12(r18)
 304a118:	20ffffcc 	andi	r3,r4,65535
 304a11c:	18e0001c 	xori	r3,r3,32768
 304a120:	18e00004 	addi	r3,r3,-32768
 304a124:	1880020c 	andi	r2,r3,8
 304a128:	1000261e 	bne	r2,zero,304a1c4 <_fflush_r+0xdc>
 304a12c:	90c00117 	ldw	r3,4(r18)
 304a130:	20820014 	ori	r2,r4,2048
 304a134:	9080030d 	sth	r2,12(r18)
 304a138:	1009883a 	mov	r4,r2
 304a13c:	00c0400e 	bge	zero,r3,304a240 <_fflush_r+0x158>
 304a140:	92000a17 	ldw	r8,40(r18)
 304a144:	40004026 	beq	r8,zero,304a248 <_fflush_r+0x160>
 304a148:	2084000c 	andi	r2,r4,4096
 304a14c:	10005326 	beq	r2,zero,304a29c <_fflush_r+0x1b4>
 304a150:	94001417 	ldw	r16,80(r18)
 304a154:	9080030b 	ldhu	r2,12(r18)
 304a158:	1080010c 	andi	r2,r2,4
 304a15c:	1000481e 	bne	r2,zero,304a280 <_fflush_r+0x198>
 304a160:	91400717 	ldw	r5,28(r18)
 304a164:	9809883a 	mov	r4,r19
 304a168:	800d883a 	mov	r6,r16
 304a16c:	000f883a 	mov	r7,zero
 304a170:	403ee83a 	callr	r8
 304a174:	8080261e 	bne	r16,r2,304a210 <_fflush_r+0x128>
 304a178:	9080030b 	ldhu	r2,12(r18)
 304a17c:	91000417 	ldw	r4,16(r18)
 304a180:	90000115 	stw	zero,4(r18)
 304a184:	10bdffcc 	andi	r2,r2,63487
 304a188:	10ffffcc 	andi	r3,r2,65535
 304a18c:	18c4000c 	andi	r3,r3,4096
 304a190:	9080030d 	sth	r2,12(r18)
 304a194:	91000015 	stw	r4,0(r18)
 304a198:	18002b26 	beq	r3,zero,304a248 <_fflush_r+0x160>
 304a19c:	0007883a 	mov	r3,zero
 304a1a0:	1805883a 	mov	r2,r3
 304a1a4:	94001415 	stw	r16,80(r18)
 304a1a8:	dfc00417 	ldw	ra,16(sp)
 304a1ac:	dcc00317 	ldw	r19,12(sp)
 304a1b0:	dc800217 	ldw	r18,8(sp)
 304a1b4:	dc400117 	ldw	r17,4(sp)
 304a1b8:	dc000017 	ldw	r16,0(sp)
 304a1bc:	dec00504 	addi	sp,sp,20
 304a1c0:	f800283a 	ret
 304a1c4:	94400417 	ldw	r17,16(r18)
 304a1c8:	88001f26 	beq	r17,zero,304a248 <_fflush_r+0x160>
 304a1cc:	90800017 	ldw	r2,0(r18)
 304a1d0:	18c000cc 	andi	r3,r3,3
 304a1d4:	94400015 	stw	r17,0(r18)
 304a1d8:	1461c83a 	sub	r16,r2,r17
 304a1dc:	18002526 	beq	r3,zero,304a274 <_fflush_r+0x18c>
 304a1e0:	0005883a 	mov	r2,zero
 304a1e4:	90800215 	stw	r2,8(r18)
 304a1e8:	0400170e 	bge	zero,r16,304a248 <_fflush_r+0x160>
 304a1ec:	90c00917 	ldw	r3,36(r18)
 304a1f0:	91400717 	ldw	r5,28(r18)
 304a1f4:	880d883a 	mov	r6,r17
 304a1f8:	800f883a 	mov	r7,r16
 304a1fc:	9809883a 	mov	r4,r19
 304a200:	183ee83a 	callr	r3
 304a204:	88a3883a 	add	r17,r17,r2
 304a208:	80a1c83a 	sub	r16,r16,r2
 304a20c:	00bff616 	blt	zero,r2,304a1e8 <_fflush_r+0x100>
 304a210:	9080030b 	ldhu	r2,12(r18)
 304a214:	00ffffc4 	movi	r3,-1
 304a218:	10801014 	ori	r2,r2,64
 304a21c:	9080030d 	sth	r2,12(r18)
 304a220:	1805883a 	mov	r2,r3
 304a224:	dfc00417 	ldw	ra,16(sp)
 304a228:	dcc00317 	ldw	r19,12(sp)
 304a22c:	dc800217 	ldw	r18,8(sp)
 304a230:	dc400117 	ldw	r17,4(sp)
 304a234:	dc000017 	ldw	r16,0(sp)
 304a238:	dec00504 	addi	sp,sp,20
 304a23c:	f800283a 	ret
 304a240:	90800f17 	ldw	r2,60(r18)
 304a244:	00bfbe16 	blt	zero,r2,304a140 <_fflush_r+0x58>
 304a248:	0007883a 	mov	r3,zero
 304a24c:	1805883a 	mov	r2,r3
 304a250:	dfc00417 	ldw	ra,16(sp)
 304a254:	dcc00317 	ldw	r19,12(sp)
 304a258:	dc800217 	ldw	r18,8(sp)
 304a25c:	dc400117 	ldw	r17,4(sp)
 304a260:	dc000017 	ldw	r16,0(sp)
 304a264:	dec00504 	addi	sp,sp,20
 304a268:	f800283a 	ret
 304a26c:	304a3800 	call	304a380 <__sinit>
 304a270:	003fa806 	br	304a114 <_fflush_r+0x2c>
 304a274:	90800517 	ldw	r2,20(r18)
 304a278:	90800215 	stw	r2,8(r18)
 304a27c:	003fda06 	br	304a1e8 <_fflush_r+0x100>
 304a280:	90800117 	ldw	r2,4(r18)
 304a284:	90c00c17 	ldw	r3,48(r18)
 304a288:	80a1c83a 	sub	r16,r16,r2
 304a28c:	183fb426 	beq	r3,zero,304a160 <_fflush_r+0x78>
 304a290:	90800f17 	ldw	r2,60(r18)
 304a294:	80a1c83a 	sub	r16,r16,r2
 304a298:	003fb106 	br	304a160 <_fflush_r+0x78>
 304a29c:	91400717 	ldw	r5,28(r18)
 304a2a0:	9809883a 	mov	r4,r19
 304a2a4:	000d883a 	mov	r6,zero
 304a2a8:	01c00044 	movi	r7,1
 304a2ac:	403ee83a 	callr	r8
 304a2b0:	1021883a 	mov	r16,r2
 304a2b4:	00bfffc4 	movi	r2,-1
 304a2b8:	80800226 	beq	r16,r2,304a2c4 <_fflush_r+0x1dc>
 304a2bc:	92000a17 	ldw	r8,40(r18)
 304a2c0:	003fa406 	br	304a154 <_fflush_r+0x6c>
 304a2c4:	98c00017 	ldw	r3,0(r19)
 304a2c8:	00800744 	movi	r2,29
 304a2cc:	18bfde26 	beq	r3,r2,304a248 <_fflush_r+0x160>
 304a2d0:	9080030b 	ldhu	r2,12(r18)
 304a2d4:	8007883a 	mov	r3,r16
 304a2d8:	10801014 	ori	r2,r2,64
 304a2dc:	9080030d 	sth	r2,12(r18)
 304a2e0:	003fcf06 	br	304a220 <_fflush_r+0x138>

0304a2e4 <fflush>:
 304a2e4:	0140c174 	movhi	r5,773
 304a2e8:	29683a04 	addi	r5,r5,-24344
 304a2ec:	2007883a 	mov	r3,r4
 304a2f0:	20000526 	beq	r4,zero,304a308 <fflush+0x24>
 304a2f4:	0080c1b4 	movhi	r2,774
 304a2f8:	10b28804 	addi	r2,r2,-13792
 304a2fc:	11000017 	ldw	r4,0(r2)
 304a300:	180b883a 	mov	r5,r3
 304a304:	304a0e81 	jmpi	304a0e8 <_fflush_r>
 304a308:	0080c1b4 	movhi	r2,774
 304a30c:	10b28904 	addi	r2,r2,-13788
 304a310:	11000017 	ldw	r4,0(r2)
 304a314:	304affc1 	jmpi	304affc <_fwalk_reent>

0304a318 <std>:
 304a318:	0080c174 	movhi	r2,773
 304a31c:	10b06004 	addi	r2,r2,-16000
 304a320:	20800b15 	stw	r2,44(r4)
 304a324:	0080c174 	movhi	r2,773
 304a328:	10b09b04 	addi	r2,r2,-15764
 304a32c:	20800815 	stw	r2,32(r4)
 304a330:	00c0c174 	movhi	r3,773
 304a334:	18f07c04 	addi	r3,r3,-15888
 304a338:	0080c174 	movhi	r2,773
 304a33c:	10b06204 	addi	r2,r2,-15992
 304a340:	2140030d 	sth	r5,12(r4)
 304a344:	2180038d 	sth	r6,14(r4)
 304a348:	20c00915 	stw	r3,36(r4)
 304a34c:	20800a15 	stw	r2,40(r4)
 304a350:	20000015 	stw	zero,0(r4)
 304a354:	20000115 	stw	zero,4(r4)
 304a358:	20000215 	stw	zero,8(r4)
 304a35c:	20000415 	stw	zero,16(r4)
 304a360:	20000515 	stw	zero,20(r4)
 304a364:	20000615 	stw	zero,24(r4)
 304a368:	21000715 	stw	r4,28(r4)
 304a36c:	f800283a 	ret

0304a370 <__sfp_lock_acquire>:
 304a370:	f800283a 	ret

0304a374 <__sfp_lock_release>:
 304a374:	f800283a 	ret

0304a378 <__sinit_lock_acquire>:
 304a378:	f800283a 	ret

0304a37c <__sinit_lock_release>:
 304a37c:	f800283a 	ret

0304a380 <__sinit>:
 304a380:	20800e17 	ldw	r2,56(r4)
 304a384:	defffd04 	addi	sp,sp,-12
 304a388:	dc400115 	stw	r17,4(sp)
 304a38c:	dc000015 	stw	r16,0(sp)
 304a390:	dfc00215 	stw	ra,8(sp)
 304a394:	04400044 	movi	r17,1
 304a398:	01400104 	movi	r5,4
 304a39c:	000d883a 	mov	r6,zero
 304a3a0:	2021883a 	mov	r16,r4
 304a3a4:	2200bb04 	addi	r8,r4,748
 304a3a8:	200f883a 	mov	r7,r4
 304a3ac:	10000526 	beq	r2,zero,304a3c4 <__sinit+0x44>
 304a3b0:	dfc00217 	ldw	ra,8(sp)
 304a3b4:	dc400117 	ldw	r17,4(sp)
 304a3b8:	dc000017 	ldw	r16,0(sp)
 304a3bc:	dec00304 	addi	sp,sp,12
 304a3c0:	f800283a 	ret
 304a3c4:	21000117 	ldw	r4,4(r4)
 304a3c8:	0080c174 	movhi	r2,773
 304a3cc:	10a91904 	addi	r2,r2,-23452
 304a3d0:	00c000c4 	movi	r3,3
 304a3d4:	80800f15 	stw	r2,60(r16)
 304a3d8:	80c0b915 	stw	r3,740(r16)
 304a3dc:	8200ba15 	stw	r8,744(r16)
 304a3e0:	84400e15 	stw	r17,56(r16)
 304a3e4:	8000b815 	stw	zero,736(r16)
 304a3e8:	304a3180 	call	304a318 <std>
 304a3ec:	81000217 	ldw	r4,8(r16)
 304a3f0:	880d883a 	mov	r6,r17
 304a3f4:	800f883a 	mov	r7,r16
 304a3f8:	01400284 	movi	r5,10
 304a3fc:	304a3180 	call	304a318 <std>
 304a400:	81000317 	ldw	r4,12(r16)
 304a404:	800f883a 	mov	r7,r16
 304a408:	01400484 	movi	r5,18
 304a40c:	01800084 	movi	r6,2
 304a410:	dfc00217 	ldw	ra,8(sp)
 304a414:	dc400117 	ldw	r17,4(sp)
 304a418:	dc000017 	ldw	r16,0(sp)
 304a41c:	dec00304 	addi	sp,sp,12
 304a420:	304a3181 	jmpi	304a318 <std>

0304a424 <__fp_lock>:
 304a424:	0005883a 	mov	r2,zero
 304a428:	f800283a 	ret

0304a42c <__fp_unlock>:
 304a42c:	0005883a 	mov	r2,zero
 304a430:	f800283a 	ret

0304a434 <__fp_unlock_all>:
 304a434:	0080c1b4 	movhi	r2,774
 304a438:	10b28804 	addi	r2,r2,-13792
 304a43c:	11000017 	ldw	r4,0(r2)
 304a440:	0140c174 	movhi	r5,773
 304a444:	29690b04 	addi	r5,r5,-23508
 304a448:	304b0c81 	jmpi	304b0c8 <_fwalk>

0304a44c <__fp_lock_all>:
 304a44c:	0080c1b4 	movhi	r2,774
 304a450:	10b28804 	addi	r2,r2,-13792
 304a454:	11000017 	ldw	r4,0(r2)
 304a458:	0140c174 	movhi	r5,773
 304a45c:	29690904 	addi	r5,r5,-23516
 304a460:	304b0c81 	jmpi	304b0c8 <_fwalk>

0304a464 <_cleanup_r>:
 304a464:	0140c174 	movhi	r5,773
 304a468:	29683504 	addi	r5,r5,-24364
 304a46c:	304b0c81 	jmpi	304b0c8 <_fwalk>

0304a470 <_cleanup>:
 304a470:	0080c1b4 	movhi	r2,774
 304a474:	10b28904 	addi	r2,r2,-13788
 304a478:	11000017 	ldw	r4,0(r2)
 304a47c:	304a4641 	jmpi	304a464 <_cleanup_r>

0304a480 <__sfmoreglue>:
 304a480:	defffc04 	addi	sp,sp,-16
 304a484:	dc400115 	stw	r17,4(sp)
 304a488:	2c401724 	muli	r17,r5,92
 304a48c:	dc800215 	stw	r18,8(sp)
 304a490:	2825883a 	mov	r18,r5
 304a494:	89400304 	addi	r5,r17,12
 304a498:	dc000015 	stw	r16,0(sp)
 304a49c:	dfc00315 	stw	ra,12(sp)
 304a4a0:	304b41c0 	call	304b41c <_malloc_r>
 304a4a4:	0021883a 	mov	r16,zero
 304a4a8:	880d883a 	mov	r6,r17
 304a4ac:	000b883a 	mov	r5,zero
 304a4b0:	10000626 	beq	r2,zero,304a4cc <__sfmoreglue+0x4c>
 304a4b4:	11000304 	addi	r4,r2,12
 304a4b8:	14800115 	stw	r18,4(r2)
 304a4bc:	10000015 	stw	zero,0(r2)
 304a4c0:	11000215 	stw	r4,8(r2)
 304a4c4:	1021883a 	mov	r16,r2
 304a4c8:	304bbfc0 	call	304bbfc <memset>
 304a4cc:	8005883a 	mov	r2,r16
 304a4d0:	dfc00317 	ldw	ra,12(sp)
 304a4d4:	dc800217 	ldw	r18,8(sp)
 304a4d8:	dc400117 	ldw	r17,4(sp)
 304a4dc:	dc000017 	ldw	r16,0(sp)
 304a4e0:	dec00404 	addi	sp,sp,16
 304a4e4:	f800283a 	ret

0304a4e8 <__sfp>:
 304a4e8:	defffd04 	addi	sp,sp,-12
 304a4ec:	0080c1b4 	movhi	r2,774
 304a4f0:	10b28904 	addi	r2,r2,-13788
 304a4f4:	dc000015 	stw	r16,0(sp)
 304a4f8:	14000017 	ldw	r16,0(r2)
 304a4fc:	dc400115 	stw	r17,4(sp)
 304a500:	dfc00215 	stw	ra,8(sp)
 304a504:	80800e17 	ldw	r2,56(r16)
 304a508:	2023883a 	mov	r17,r4
 304a50c:	10002626 	beq	r2,zero,304a5a8 <__sfp+0xc0>
 304a510:	8400b804 	addi	r16,r16,736
 304a514:	80800117 	ldw	r2,4(r16)
 304a518:	81000217 	ldw	r4,8(r16)
 304a51c:	10ffffc4 	addi	r3,r2,-1
 304a520:	18000916 	blt	r3,zero,304a548 <__sfp+0x60>
 304a524:	2080030f 	ldh	r2,12(r4)
 304a528:	10000b26 	beq	r2,zero,304a558 <__sfp+0x70>
 304a52c:	017fffc4 	movi	r5,-1
 304a530:	00000206 	br	304a53c <__sfp+0x54>
 304a534:	2080030f 	ldh	r2,12(r4)
 304a538:	10000726 	beq	r2,zero,304a558 <__sfp+0x70>
 304a53c:	18ffffc4 	addi	r3,r3,-1
 304a540:	21001704 	addi	r4,r4,92
 304a544:	197ffb1e 	bne	r3,r5,304a534 <__sfp+0x4c>
 304a548:	80800017 	ldw	r2,0(r16)
 304a54c:	10001926 	beq	r2,zero,304a5b4 <__sfp+0xcc>
 304a550:	1021883a 	mov	r16,r2
 304a554:	003fef06 	br	304a514 <__sfp+0x2c>
 304a558:	00bfffc4 	movi	r2,-1
 304a55c:	00c00044 	movi	r3,1
 304a560:	2080038d 	sth	r2,14(r4)
 304a564:	20c0030d 	sth	r3,12(r4)
 304a568:	20000015 	stw	zero,0(r4)
 304a56c:	20000215 	stw	zero,8(r4)
 304a570:	20000115 	stw	zero,4(r4)
 304a574:	20000415 	stw	zero,16(r4)
 304a578:	20000515 	stw	zero,20(r4)
 304a57c:	20000615 	stw	zero,24(r4)
 304a580:	20000c15 	stw	zero,48(r4)
 304a584:	20000d15 	stw	zero,52(r4)
 304a588:	20001115 	stw	zero,68(r4)
 304a58c:	20001215 	stw	zero,72(r4)
 304a590:	2005883a 	mov	r2,r4
 304a594:	dfc00217 	ldw	ra,8(sp)
 304a598:	dc400117 	ldw	r17,4(sp)
 304a59c:	dc000017 	ldw	r16,0(sp)
 304a5a0:	dec00304 	addi	sp,sp,12
 304a5a4:	f800283a 	ret
 304a5a8:	8009883a 	mov	r4,r16
 304a5ac:	304a3800 	call	304a380 <__sinit>
 304a5b0:	003fd706 	br	304a510 <__sfp+0x28>
 304a5b4:	8809883a 	mov	r4,r17
 304a5b8:	01400104 	movi	r5,4
 304a5bc:	304a4800 	call	304a480 <__sfmoreglue>
 304a5c0:	80800015 	stw	r2,0(r16)
 304a5c4:	103fe21e 	bne	r2,zero,304a550 <__sfp+0x68>
 304a5c8:	00800304 	movi	r2,12
 304a5cc:	0009883a 	mov	r4,zero
 304a5d0:	88800015 	stw	r2,0(r17)
 304a5d4:	003fee06 	br	304a590 <__sfp+0xa8>

0304a5d8 <_fopen_r>:
 304a5d8:	defffa04 	addi	sp,sp,-24
 304a5dc:	dcc00415 	stw	r19,16(sp)
 304a5e0:	2827883a 	mov	r19,r5
 304a5e4:	300b883a 	mov	r5,r6
 304a5e8:	d80d883a 	mov	r6,sp
 304a5ec:	dc800315 	stw	r18,12(sp)
 304a5f0:	dc400215 	stw	r17,8(sp)
 304a5f4:	dc000115 	stw	r16,4(sp)
 304a5f8:	dfc00515 	stw	ra,20(sp)
 304a5fc:	2021883a 	mov	r16,r4
 304a600:	304fe240 	call	304fe24 <__sflags>
 304a604:	1025883a 	mov	r18,r2
 304a608:	8009883a 	mov	r4,r16
 304a60c:	0023883a 	mov	r17,zero
 304a610:	1000081e 	bne	r2,zero,304a634 <_fopen_r+0x5c>
 304a614:	8805883a 	mov	r2,r17
 304a618:	dfc00517 	ldw	ra,20(sp)
 304a61c:	dcc00417 	ldw	r19,16(sp)
 304a620:	dc800317 	ldw	r18,12(sp)
 304a624:	dc400217 	ldw	r17,8(sp)
 304a628:	dc000117 	ldw	r16,4(sp)
 304a62c:	dec00604 	addi	sp,sp,24
 304a630:	f800283a 	ret
 304a634:	304a4e80 	call	304a4e8 <__sfp>
 304a638:	1023883a 	mov	r17,r2
 304a63c:	980b883a 	mov	r5,r19
 304a640:	8009883a 	mov	r4,r16
 304a644:	01c06d84 	movi	r7,438
 304a648:	103ff226 	beq	r2,zero,304a614 <_fopen_r+0x3c>
 304a64c:	d9800017 	ldw	r6,0(sp)
 304a650:	304bc940 	call	304bc94 <_open_r>
 304a654:	10001816 	blt	r2,zero,304a6b8 <_fopen_r+0xe0>
 304a658:	00c0c174 	movhi	r3,773
 304a65c:	18f07c04 	addi	r3,r3,-15888
 304a660:	923fffcc 	andi	r8,r18,65535
 304a664:	8880038d 	sth	r2,14(r17)
 304a668:	0080c174 	movhi	r2,773
 304a66c:	10b09b04 	addi	r2,r2,-15764
 304a670:	88800815 	stw	r2,32(r17)
 304a674:	88c00915 	stw	r3,36(r17)
 304a678:	0080c174 	movhi	r2,773
 304a67c:	10b06204 	addi	r2,r2,-15992
 304a680:	00c0c174 	movhi	r3,773
 304a684:	18f06004 	addi	r3,r3,-16000
 304a688:	4200400c 	andi	r8,r8,256
 304a68c:	8c80030d 	sth	r18,12(r17)
 304a690:	8009883a 	mov	r4,r16
 304a694:	880b883a 	mov	r5,r17
 304a698:	000d883a 	mov	r6,zero
 304a69c:	01c00084 	movi	r7,2
 304a6a0:	88800a15 	stw	r2,40(r17)
 304a6a4:	88c00b15 	stw	r3,44(r17)
 304a6a8:	8c400715 	stw	r17,28(r17)
 304a6ac:	403fd926 	beq	r8,zero,304a614 <_fopen_r+0x3c>
 304a6b0:	304ab280 	call	304ab28 <_fseek_r>
 304a6b4:	003fd706 	br	304a614 <_fopen_r+0x3c>
 304a6b8:	304a3700 	call	304a370 <__sfp_lock_acquire>
 304a6bc:	8800030d 	sth	zero,12(r17)
 304a6c0:	304a3740 	call	304a374 <__sfp_lock_release>
 304a6c4:	0023883a 	mov	r17,zero
 304a6c8:	003fd206 	br	304a614 <_fopen_r+0x3c>

0304a6cc <fopen>:
 304a6cc:	0180c1b4 	movhi	r6,774
 304a6d0:	31b28804 	addi	r6,r6,-13792
 304a6d4:	2007883a 	mov	r3,r4
 304a6d8:	31000017 	ldw	r4,0(r6)
 304a6dc:	280d883a 	mov	r6,r5
 304a6e0:	180b883a 	mov	r5,r3
 304a6e4:	304a5d81 	jmpi	304a5d8 <_fopen_r>

0304a6e8 <_malloc_trim_r>:
 304a6e8:	defffb04 	addi	sp,sp,-20
 304a6ec:	dcc00315 	stw	r19,12(sp)
 304a6f0:	04c0c1b4 	movhi	r19,774
 304a6f4:	9cec4f04 	addi	r19,r19,-20164
 304a6f8:	dc800215 	stw	r18,8(sp)
 304a6fc:	dc400115 	stw	r17,4(sp)
 304a700:	dc000015 	stw	r16,0(sp)
 304a704:	2823883a 	mov	r17,r5
 304a708:	2025883a 	mov	r18,r4
 304a70c:	dfc00415 	stw	ra,16(sp)
 304a710:	30539600 	call	3053960 <__malloc_lock>
 304a714:	98800217 	ldw	r2,8(r19)
 304a718:	9009883a 	mov	r4,r18
 304a71c:	000b883a 	mov	r5,zero
 304a720:	10c00117 	ldw	r3,4(r2)
 304a724:	00bfff04 	movi	r2,-4
 304a728:	18a0703a 	and	r16,r3,r2
 304a72c:	8463c83a 	sub	r17,r16,r17
 304a730:	8c43fbc4 	addi	r17,r17,4079
 304a734:	8822d33a 	srli	r17,r17,12
 304a738:	0083ffc4 	movi	r2,4095
 304a73c:	8c7fffc4 	addi	r17,r17,-1
 304a740:	8822933a 	slli	r17,r17,12
 304a744:	1440060e 	bge	r2,r17,304a760 <_malloc_trim_r+0x78>
 304a748:	304c03c0 	call	304c03c <_sbrk_r>
 304a74c:	98c00217 	ldw	r3,8(r19)
 304a750:	9009883a 	mov	r4,r18
 304a754:	044bc83a 	sub	r5,zero,r17
 304a758:	80c7883a 	add	r3,r16,r3
 304a75c:	10c00926 	beq	r2,r3,304a784 <_malloc_trim_r+0x9c>
 304a760:	305397c0 	call	305397c <__malloc_unlock>
 304a764:	0005883a 	mov	r2,zero
 304a768:	dfc00417 	ldw	ra,16(sp)
 304a76c:	dcc00317 	ldw	r19,12(sp)
 304a770:	dc800217 	ldw	r18,8(sp)
 304a774:	dc400117 	ldw	r17,4(sp)
 304a778:	dc000017 	ldw	r16,0(sp)
 304a77c:	dec00504 	addi	sp,sp,20
 304a780:	f800283a 	ret
 304a784:	9009883a 	mov	r4,r18
 304a788:	304c03c0 	call	304c03c <_sbrk_r>
 304a78c:	844dc83a 	sub	r6,r16,r17
 304a790:	00ffffc4 	movi	r3,-1
 304a794:	9009883a 	mov	r4,r18
 304a798:	000b883a 	mov	r5,zero
 304a79c:	01c0c1b4 	movhi	r7,774
 304a7a0:	39feae04 	addi	r7,r7,-1352
 304a7a4:	31800054 	ori	r6,r6,1
 304a7a8:	10c00926 	beq	r2,r3,304a7d0 <_malloc_trim_r+0xe8>
 304a7ac:	38800017 	ldw	r2,0(r7)
 304a7b0:	98c00217 	ldw	r3,8(r19)
 304a7b4:	9009883a 	mov	r4,r18
 304a7b8:	1445c83a 	sub	r2,r2,r17
 304a7bc:	38800015 	stw	r2,0(r7)
 304a7c0:	19800115 	stw	r6,4(r3)
 304a7c4:	305397c0 	call	305397c <__malloc_unlock>
 304a7c8:	00800044 	movi	r2,1
 304a7cc:	003fe606 	br	304a768 <_malloc_trim_r+0x80>
 304a7d0:	304c03c0 	call	304c03c <_sbrk_r>
 304a7d4:	99800217 	ldw	r6,8(r19)
 304a7d8:	100f883a 	mov	r7,r2
 304a7dc:	9009883a 	mov	r4,r18
 304a7e0:	1187c83a 	sub	r3,r2,r6
 304a7e4:	008003c4 	movi	r2,15
 304a7e8:	19400054 	ori	r5,r3,1
 304a7ec:	10ffdc0e 	bge	r2,r3,304a760 <_malloc_trim_r+0x78>
 304a7f0:	0080c1b4 	movhi	r2,774
 304a7f4:	10b28b04 	addi	r2,r2,-13780
 304a7f8:	10c00017 	ldw	r3,0(r2)
 304a7fc:	0080c1b4 	movhi	r2,774
 304a800:	10beae04 	addi	r2,r2,-1352
 304a804:	31400115 	stw	r5,4(r6)
 304a808:	38c7c83a 	sub	r3,r7,r3
 304a80c:	10c00015 	stw	r3,0(r2)
 304a810:	003fd306 	br	304a760 <_malloc_trim_r+0x78>

0304a814 <_free_r>:
 304a814:	defffd04 	addi	sp,sp,-12
 304a818:	dc400115 	stw	r17,4(sp)
 304a81c:	dc000015 	stw	r16,0(sp)
 304a820:	dfc00215 	stw	ra,8(sp)
 304a824:	2821883a 	mov	r16,r5
 304a828:	2023883a 	mov	r17,r4
 304a82c:	28005a26 	beq	r5,zero,304a998 <_free_r+0x184>
 304a830:	30539600 	call	3053960 <__malloc_lock>
 304a834:	823ffe04 	addi	r8,r16,-8
 304a838:	41400117 	ldw	r5,4(r8)
 304a83c:	00bfff84 	movi	r2,-2
 304a840:	0280c1b4 	movhi	r10,774
 304a844:	52ac4f04 	addi	r10,r10,-20164
 304a848:	288e703a 	and	r7,r5,r2
 304a84c:	41cd883a 	add	r6,r8,r7
 304a850:	30c00117 	ldw	r3,4(r6)
 304a854:	51000217 	ldw	r4,8(r10)
 304a858:	00bfff04 	movi	r2,-4
 304a85c:	1892703a 	and	r9,r3,r2
 304a860:	5017883a 	mov	r11,r10
 304a864:	31006726 	beq	r6,r4,304aa04 <_free_r+0x1f0>
 304a868:	2880004c 	andi	r2,r5,1
 304a86c:	1005003a 	cmpeq	r2,r2,zero
 304a870:	32400115 	stw	r9,4(r6)
 304a874:	10001a1e 	bne	r2,zero,304a8e0 <_free_r+0xcc>
 304a878:	000b883a 	mov	r5,zero
 304a87c:	3247883a 	add	r3,r6,r9
 304a880:	18800117 	ldw	r2,4(r3)
 304a884:	1080004c 	andi	r2,r2,1
 304a888:	1000231e 	bne	r2,zero,304a918 <_free_r+0x104>
 304a88c:	280ac03a 	cmpne	r5,r5,zero
 304a890:	3a4f883a 	add	r7,r7,r9
 304a894:	2800451e 	bne	r5,zero,304a9ac <_free_r+0x198>
 304a898:	31000217 	ldw	r4,8(r6)
 304a89c:	0080c1b4 	movhi	r2,774
 304a8a0:	10ac5104 	addi	r2,r2,-20156
 304a8a4:	20807b26 	beq	r4,r2,304aa94 <_free_r+0x280>
 304a8a8:	30800317 	ldw	r2,12(r6)
 304a8ac:	3a07883a 	add	r3,r7,r8
 304a8b0:	19c00015 	stw	r7,0(r3)
 304a8b4:	11000215 	stw	r4,8(r2)
 304a8b8:	20800315 	stw	r2,12(r4)
 304a8bc:	38800054 	ori	r2,r7,1
 304a8c0:	40800115 	stw	r2,4(r8)
 304a8c4:	28001a26 	beq	r5,zero,304a930 <_free_r+0x11c>
 304a8c8:	8809883a 	mov	r4,r17
 304a8cc:	dfc00217 	ldw	ra,8(sp)
 304a8d0:	dc400117 	ldw	r17,4(sp)
 304a8d4:	dc000017 	ldw	r16,0(sp)
 304a8d8:	dec00304 	addi	sp,sp,12
 304a8dc:	305397c1 	jmpi	305397c <__malloc_unlock>
 304a8e0:	40800017 	ldw	r2,0(r8)
 304a8e4:	50c00204 	addi	r3,r10,8
 304a8e8:	4091c83a 	sub	r8,r8,r2
 304a8ec:	41000217 	ldw	r4,8(r8)
 304a8f0:	388f883a 	add	r7,r7,r2
 304a8f4:	20c06126 	beq	r4,r3,304aa7c <_free_r+0x268>
 304a8f8:	40800317 	ldw	r2,12(r8)
 304a8fc:	3247883a 	add	r3,r6,r9
 304a900:	000b883a 	mov	r5,zero
 304a904:	11000215 	stw	r4,8(r2)
 304a908:	20800315 	stw	r2,12(r4)
 304a90c:	18800117 	ldw	r2,4(r3)
 304a910:	1080004c 	andi	r2,r2,1
 304a914:	103fdd26 	beq	r2,zero,304a88c <_free_r+0x78>
 304a918:	38800054 	ori	r2,r7,1
 304a91c:	3a07883a 	add	r3,r7,r8
 304a920:	280ac03a 	cmpne	r5,r5,zero
 304a924:	40800115 	stw	r2,4(r8)
 304a928:	19c00015 	stw	r7,0(r3)
 304a92c:	283fe61e 	bne	r5,zero,304a8c8 <_free_r+0xb4>
 304a930:	00807fc4 	movi	r2,511
 304a934:	11c01f2e 	bgeu	r2,r7,304a9b4 <_free_r+0x1a0>
 304a938:	3806d27a 	srli	r3,r7,9
 304a93c:	1800481e 	bne	r3,zero,304aa60 <_free_r+0x24c>
 304a940:	3804d0fa 	srli	r2,r7,3
 304a944:	100690fa 	slli	r3,r2,3
 304a948:	1acd883a 	add	r6,r3,r11
 304a94c:	31400217 	ldw	r5,8(r6)
 304a950:	31405926 	beq	r6,r5,304aab8 <_free_r+0x2a4>
 304a954:	28800117 	ldw	r2,4(r5)
 304a958:	00ffff04 	movi	r3,-4
 304a95c:	10c4703a 	and	r2,r2,r3
 304a960:	3880022e 	bgeu	r7,r2,304a96c <_free_r+0x158>
 304a964:	29400217 	ldw	r5,8(r5)
 304a968:	317ffa1e 	bne	r6,r5,304a954 <_free_r+0x140>
 304a96c:	29800317 	ldw	r6,12(r5)
 304a970:	41800315 	stw	r6,12(r8)
 304a974:	41400215 	stw	r5,8(r8)
 304a978:	8809883a 	mov	r4,r17
 304a97c:	2a000315 	stw	r8,12(r5)
 304a980:	32000215 	stw	r8,8(r6)
 304a984:	dfc00217 	ldw	ra,8(sp)
 304a988:	dc400117 	ldw	r17,4(sp)
 304a98c:	dc000017 	ldw	r16,0(sp)
 304a990:	dec00304 	addi	sp,sp,12
 304a994:	305397c1 	jmpi	305397c <__malloc_unlock>
 304a998:	dfc00217 	ldw	ra,8(sp)
 304a99c:	dc400117 	ldw	r17,4(sp)
 304a9a0:	dc000017 	ldw	r16,0(sp)
 304a9a4:	dec00304 	addi	sp,sp,12
 304a9a8:	f800283a 	ret
 304a9ac:	31000217 	ldw	r4,8(r6)
 304a9b0:	003fbd06 	br	304a8a8 <_free_r+0x94>
 304a9b4:	3806d0fa 	srli	r3,r7,3
 304a9b8:	00800044 	movi	r2,1
 304a9bc:	51400117 	ldw	r5,4(r10)
 304a9c0:	180890fa 	slli	r4,r3,3
 304a9c4:	1807d0ba 	srai	r3,r3,2
 304a9c8:	22c9883a 	add	r4,r4,r11
 304a9cc:	21800217 	ldw	r6,8(r4)
 304a9d0:	10c4983a 	sll	r2,r2,r3
 304a9d4:	41000315 	stw	r4,12(r8)
 304a9d8:	41800215 	stw	r6,8(r8)
 304a9dc:	288ab03a 	or	r5,r5,r2
 304a9e0:	22000215 	stw	r8,8(r4)
 304a9e4:	8809883a 	mov	r4,r17
 304a9e8:	51400115 	stw	r5,4(r10)
 304a9ec:	32000315 	stw	r8,12(r6)
 304a9f0:	dfc00217 	ldw	ra,8(sp)
 304a9f4:	dc400117 	ldw	r17,4(sp)
 304a9f8:	dc000017 	ldw	r16,0(sp)
 304a9fc:	dec00304 	addi	sp,sp,12
 304aa00:	305397c1 	jmpi	305397c <__malloc_unlock>
 304aa04:	2880004c 	andi	r2,r5,1
 304aa08:	3a4b883a 	add	r5,r7,r9
 304aa0c:	1000071e 	bne	r2,zero,304aa2c <_free_r+0x218>
 304aa10:	40800017 	ldw	r2,0(r8)
 304aa14:	4091c83a 	sub	r8,r8,r2
 304aa18:	41000317 	ldw	r4,12(r8)
 304aa1c:	40c00217 	ldw	r3,8(r8)
 304aa20:	288b883a 	add	r5,r5,r2
 304aa24:	20c00215 	stw	r3,8(r4)
 304aa28:	19000315 	stw	r4,12(r3)
 304aa2c:	0080c1b4 	movhi	r2,774
 304aa30:	10b28a04 	addi	r2,r2,-13784
 304aa34:	11000017 	ldw	r4,0(r2)
 304aa38:	28c00054 	ori	r3,r5,1
 304aa3c:	52000215 	stw	r8,8(r10)
 304aa40:	40c00115 	stw	r3,4(r8)
 304aa44:	293fa036 	bltu	r5,r4,304a8c8 <_free_r+0xb4>
 304aa48:	0080c1b4 	movhi	r2,774
 304aa4c:	10ba0004 	addi	r2,r2,-6144
 304aa50:	11400017 	ldw	r5,0(r2)
 304aa54:	8809883a 	mov	r4,r17
 304aa58:	304a6e80 	call	304a6e8 <_malloc_trim_r>
 304aa5c:	003f9a06 	br	304a8c8 <_free_r+0xb4>
 304aa60:	00800104 	movi	r2,4
 304aa64:	10c0072e 	bgeu	r2,r3,304aa84 <_free_r+0x270>
 304aa68:	00800504 	movi	r2,20
 304aa6c:	10c01936 	bltu	r2,r3,304aad4 <_free_r+0x2c0>
 304aa70:	188016c4 	addi	r2,r3,91
 304aa74:	100690fa 	slli	r3,r2,3
 304aa78:	003fb306 	br	304a948 <_free_r+0x134>
 304aa7c:	01400044 	movi	r5,1
 304aa80:	003f7e06 	br	304a87c <_free_r+0x68>
 304aa84:	3804d1ba 	srli	r2,r7,6
 304aa88:	10800e04 	addi	r2,r2,56
 304aa8c:	100690fa 	slli	r3,r2,3
 304aa90:	003fad06 	br	304a948 <_free_r+0x134>
 304aa94:	22000315 	stw	r8,12(r4)
 304aa98:	22000215 	stw	r8,8(r4)
 304aa9c:	3a05883a 	add	r2,r7,r8
 304aaa0:	38c00054 	ori	r3,r7,1
 304aaa4:	11c00015 	stw	r7,0(r2)
 304aaa8:	41000215 	stw	r4,8(r8)
 304aaac:	40c00115 	stw	r3,4(r8)
 304aab0:	41000315 	stw	r4,12(r8)
 304aab4:	003f8406 	br	304a8c8 <_free_r+0xb4>
 304aab8:	1005d0ba 	srai	r2,r2,2
 304aabc:	00c00044 	movi	r3,1
 304aac0:	51000117 	ldw	r4,4(r10)
 304aac4:	1886983a 	sll	r3,r3,r2
 304aac8:	20c8b03a 	or	r4,r4,r3
 304aacc:	51000115 	stw	r4,4(r10)
 304aad0:	003fa706 	br	304a970 <_free_r+0x15c>
 304aad4:	00801504 	movi	r2,84
 304aad8:	10c00436 	bltu	r2,r3,304aaec <_free_r+0x2d8>
 304aadc:	3804d33a 	srli	r2,r7,12
 304aae0:	10801b84 	addi	r2,r2,110
 304aae4:	100690fa 	slli	r3,r2,3
 304aae8:	003f9706 	br	304a948 <_free_r+0x134>
 304aaec:	00805504 	movi	r2,340
 304aaf0:	10c00436 	bltu	r2,r3,304ab04 <_free_r+0x2f0>
 304aaf4:	3804d3fa 	srli	r2,r7,15
 304aaf8:	10801dc4 	addi	r2,r2,119
 304aafc:	100690fa 	slli	r3,r2,3
 304ab00:	003f9106 	br	304a948 <_free_r+0x134>
 304ab04:	00815504 	movi	r2,1364
 304ab08:	10c0032e 	bgeu	r2,r3,304ab18 <_free_r+0x304>
 304ab0c:	00801f84 	movi	r2,126
 304ab10:	00c0fc04 	movi	r3,1008
 304ab14:	003f8c06 	br	304a948 <_free_r+0x134>
 304ab18:	3804d4ba 	srli	r2,r7,18
 304ab1c:	10801f04 	addi	r2,r2,124
 304ab20:	100690fa 	slli	r3,r2,3
 304ab24:	003f8806 	br	304a948 <_free_r+0x134>

0304ab28 <_fseek_r>:
 304ab28:	deffe804 	addi	sp,sp,-96
 304ab2c:	dd801515 	stw	r22,84(sp)
 304ab30:	dcc01215 	stw	r19,72(sp)
 304ab34:	dc801115 	stw	r18,68(sp)
 304ab38:	dc000f15 	stw	r16,60(sp)
 304ab3c:	dfc01715 	stw	ra,92(sp)
 304ab40:	ddc01615 	stw	r23,88(sp)
 304ab44:	dd401415 	stw	r21,80(sp)
 304ab48:	dd001315 	stw	r20,76(sp)
 304ab4c:	dc401015 	stw	r17,64(sp)
 304ab50:	2025883a 	mov	r18,r4
 304ab54:	2821883a 	mov	r16,r5
 304ab58:	302d883a 	mov	r22,r6
 304ab5c:	3827883a 	mov	r19,r7
 304ab60:	20000226 	beq	r4,zero,304ab6c <_fseek_r+0x44>
 304ab64:	20800e17 	ldw	r2,56(r4)
 304ab68:	10007826 	beq	r2,zero,304ad4c <_fseek_r+0x224>
 304ab6c:	8080030b 	ldhu	r2,12(r16)
 304ab70:	00c04204 	movi	r3,264
 304ab74:	1080420c 	andi	r2,r2,264
 304ab78:	10c07926 	beq	r2,r3,304ad60 <_fseek_r+0x238>
 304ab7c:	85400a17 	ldw	r21,40(r16)
 304ab80:	a800ea26 	beq	r21,zero,304af2c <_fseek_r+0x404>
 304ab84:	00800044 	movi	r2,1
 304ab88:	98805f26 	beq	r19,r2,304ad08 <_fseek_r+0x1e0>
 304ab8c:	00800084 	movi	r2,2
 304ab90:	98801026 	beq	r19,r2,304abd4 <_fseek_r+0xac>
 304ab94:	98000f26 	beq	r19,zero,304abd4 <_fseek_r+0xac>
 304ab98:	00800584 	movi	r2,22
 304ab9c:	013fffc4 	movi	r4,-1
 304aba0:	90800015 	stw	r2,0(r18)
 304aba4:	2005883a 	mov	r2,r4
 304aba8:	dfc01717 	ldw	ra,92(sp)
 304abac:	ddc01617 	ldw	r23,88(sp)
 304abb0:	dd801517 	ldw	r22,84(sp)
 304abb4:	dd401417 	ldw	r21,80(sp)
 304abb8:	dd001317 	ldw	r20,76(sp)
 304abbc:	dcc01217 	ldw	r19,72(sp)
 304abc0:	dc801117 	ldw	r18,68(sp)
 304abc4:	dc401017 	ldw	r17,64(sp)
 304abc8:	dc000f17 	ldw	r16,60(sp)
 304abcc:	dec01804 	addi	sp,sp,96
 304abd0:	f800283a 	ret
 304abd4:	81800417 	ldw	r6,16(r16)
 304abd8:	0023883a 	mov	r17,zero
 304abdc:	002f883a 	mov	r23,zero
 304abe0:	3000a626 	beq	r6,zero,304ae7c <_fseek_r+0x354>
 304abe4:	8100030b 	ldhu	r4,12(r16)
 304abe8:	2082068c 	andi	r2,r4,2074
 304abec:	1000081e 	bne	r2,zero,304ac10 <_fseek_r+0xe8>
 304abf0:	2081000c 	andi	r2,r4,1024
 304abf4:	10001b1e 	bne	r2,zero,304ac64 <_fseek_r+0x13c>
 304abf8:	0080c174 	movhi	r2,773
 304abfc:	10b06204 	addi	r2,r2,-15992
 304ac00:	a8800926 	beq	r21,r2,304ac28 <_fseek_r+0x100>
 304ac04:	8080030b 	ldhu	r2,12(r16)
 304ac08:	10820014 	ori	r2,r2,2048
 304ac0c:	8080030d 	sth	r2,12(r16)
 304ac10:	9009883a 	mov	r4,r18
 304ac14:	800b883a 	mov	r5,r16
 304ac18:	304a0e80 	call	304a0e8 <_fflush_r>
 304ac1c:	1000a326 	beq	r2,zero,304aeac <_fseek_r+0x384>
 304ac20:	013fffc4 	movi	r4,-1
 304ac24:	003fdf06 	br	304aba4 <_fseek_r+0x7c>
 304ac28:	8140038f 	ldh	r5,14(r16)
 304ac2c:	283ff516 	blt	r5,zero,304ac04 <_fseek_r+0xdc>
 304ac30:	9009883a 	mov	r4,r18
 304ac34:	d80d883a 	mov	r6,sp
 304ac38:	304af880 	call	304af88 <_fstat_r>
 304ac3c:	103ff11e 	bne	r2,zero,304ac04 <_fseek_r+0xdc>
 304ac40:	d8800117 	ldw	r2,4(sp)
 304ac44:	00e00014 	movui	r3,32768
 304ac48:	10bc000c 	andi	r2,r2,61440
 304ac4c:	10ffed1e 	bne	r2,r3,304ac04 <_fseek_r+0xdc>
 304ac50:	80c0030b 	ldhu	r3,12(r16)
 304ac54:	00810004 	movi	r2,1024
 304ac58:	80801315 	stw	r2,76(r16)
 304ac5c:	1886b03a 	or	r3,r3,r2
 304ac60:	80c0030d 	sth	r3,12(r16)
 304ac64:	9800701e 	bne	r19,zero,304ae28 <_fseek_r+0x300>
 304ac68:	b029883a 	mov	r20,r22
 304ac6c:	b804c03a 	cmpne	r2,r23,zero
 304ac70:	10003f1e 	bne	r2,zero,304ad70 <_fseek_r+0x248>
 304ac74:	8100030b 	ldhu	r4,12(r16)
 304ac78:	2084000c 	andi	r2,r4,4096
 304ac7c:	1000a126 	beq	r2,zero,304af04 <_fseek_r+0x3dc>
 304ac80:	81801417 	ldw	r6,80(r16)
 304ac84:	80c00117 	ldw	r3,4(r16)
 304ac88:	81400c17 	ldw	r5,48(r16)
 304ac8c:	30e3c83a 	sub	r17,r6,r3
 304ac90:	28008026 	beq	r5,zero,304ae94 <_fseek_r+0x36c>
 304ac94:	81c00f17 	ldw	r7,60(r16)
 304ac98:	89e3c83a 	sub	r17,r17,r7
 304ac9c:	80800e17 	ldw	r2,56(r16)
 304aca0:	81800417 	ldw	r6,16(r16)
 304aca4:	88c7883a 	add	r3,r17,r3
 304aca8:	1185c83a 	sub	r2,r2,r6
 304acac:	11cf883a 	add	r7,r2,r7
 304acb0:	1887c83a 	sub	r3,r3,r2
 304acb4:	2088000c 	andi	r2,r4,8192
 304acb8:	10003e1e 	bne	r2,zero,304adb4 <_fseek_r+0x28c>
 304acbc:	a0c03d16 	blt	r20,r3,304adb4 <_fseek_r+0x28c>
 304acc0:	38c5883a 	add	r2,r7,r3
 304acc4:	a0803b2e 	bgeu	r20,r2,304adb4 <_fseek_r+0x28c>
 304acc8:	a0c5c83a 	sub	r2,r20,r3
 304accc:	3887c83a 	sub	r3,r7,r2
 304acd0:	3085883a 	add	r2,r6,r2
 304acd4:	80800015 	stw	r2,0(r16)
 304acd8:	80c00115 	stw	r3,4(r16)
 304acdc:	28000526 	beq	r5,zero,304acf4 <_fseek_r+0x1cc>
 304ace0:	80801004 	addi	r2,r16,64
 304ace4:	28800226 	beq	r5,r2,304acf0 <_fseek_r+0x1c8>
 304ace8:	9009883a 	mov	r4,r18
 304acec:	304a8140 	call	304a814 <_free_r>
 304acf0:	80000c15 	stw	zero,48(r16)
 304acf4:	8080030b 	ldhu	r2,12(r16)
 304acf8:	0009883a 	mov	r4,zero
 304acfc:	10bff7cc 	andi	r2,r2,65503
 304ad00:	8080030d 	sth	r2,12(r16)
 304ad04:	003fa706 	br	304aba4 <_fseek_r+0x7c>
 304ad08:	9009883a 	mov	r4,r18
 304ad0c:	800b883a 	mov	r5,r16
 304ad10:	304a0e80 	call	304a0e8 <_fflush_r>
 304ad14:	8100030b 	ldhu	r4,12(r16)
 304ad18:	2084000c 	andi	r2,r4,4096
 304ad1c:	10008726 	beq	r2,zero,304af3c <_fseek_r+0x414>
 304ad20:	84401417 	ldw	r17,80(r16)
 304ad24:	2080010c 	andi	r2,r4,4
 304ad28:	1000171e 	bne	r2,zero,304ad88 <_fseek_r+0x260>
 304ad2c:	2080020c 	andi	r2,r4,8
 304ad30:	10003b26 	beq	r2,zero,304ae20 <_fseek_r+0x2f8>
 304ad34:	80800017 	ldw	r2,0(r16)
 304ad38:	10003926 	beq	r2,zero,304ae20 <_fseek_r+0x2f8>
 304ad3c:	81800417 	ldw	r6,16(r16)
 304ad40:	1185c83a 	sub	r2,r2,r6
 304ad44:	88a3883a 	add	r17,r17,r2
 304ad48:	00001606 	br	304ada4 <_fseek_r+0x27c>
 304ad4c:	304a3800 	call	304a380 <__sinit>
 304ad50:	8080030b 	ldhu	r2,12(r16)
 304ad54:	00c04204 	movi	r3,264
 304ad58:	1080420c 	andi	r2,r2,264
 304ad5c:	10ff871e 	bne	r2,r3,304ab7c <_fseek_r+0x54>
 304ad60:	9009883a 	mov	r4,r18
 304ad64:	800b883a 	mov	r5,r16
 304ad68:	304a0e80 	call	304a0e8 <_fflush_r>
 304ad6c:	003f8306 	br	304ab7c <_fseek_r+0x54>
 304ad70:	81400c17 	ldw	r5,48(r16)
 304ad74:	28004526 	beq	r5,zero,304ae8c <_fseek_r+0x364>
 304ad78:	8100030b 	ldhu	r4,12(r16)
 304ad7c:	80c00117 	ldw	r3,4(r16)
 304ad80:	81c00f17 	ldw	r7,60(r16)
 304ad84:	003fc506 	br	304ac9c <_fseek_r+0x174>
 304ad88:	80c00117 	ldw	r3,4(r16)
 304ad8c:	80800c17 	ldw	r2,48(r16)
 304ad90:	88e3c83a 	sub	r17,r17,r3
 304ad94:	10002226 	beq	r2,zero,304ae20 <_fseek_r+0x2f8>
 304ad98:	81c00f17 	ldw	r7,60(r16)
 304ad9c:	81800417 	ldw	r6,16(r16)
 304ada0:	89e3c83a 	sub	r17,r17,r7
 304ada4:	b46d883a 	add	r22,r22,r17
 304ada8:	0027883a 	mov	r19,zero
 304adac:	05c00044 	movi	r23,1
 304adb0:	003f8b06 	br	304abe0 <_fseek_r+0xb8>
 304adb4:	80801317 	ldw	r2,76(r16)
 304adb8:	81400717 	ldw	r5,28(r16)
 304adbc:	9009883a 	mov	r4,r18
 304adc0:	0085c83a 	sub	r2,zero,r2
 304adc4:	a0a2703a 	and	r17,r20,r2
 304adc8:	880d883a 	mov	r6,r17
 304adcc:	000f883a 	mov	r7,zero
 304add0:	a83ee83a 	callr	r21
 304add4:	00ffffc4 	movi	r3,-1
 304add8:	10ff8d26 	beq	r2,r3,304ac10 <_fseek_r+0xe8>
 304addc:	80800417 	ldw	r2,16(r16)
 304ade0:	81400c17 	ldw	r5,48(r16)
 304ade4:	80000115 	stw	zero,4(r16)
 304ade8:	80800015 	stw	r2,0(r16)
 304adec:	28000526 	beq	r5,zero,304ae04 <_fseek_r+0x2dc>
 304adf0:	80801004 	addi	r2,r16,64
 304adf4:	28800226 	beq	r5,r2,304ae00 <_fseek_r+0x2d8>
 304adf8:	9009883a 	mov	r4,r18
 304adfc:	304a8140 	call	304a814 <_free_r>
 304ae00:	80000c15 	stw	zero,48(r16)
 304ae04:	8080030b 	ldhu	r2,12(r16)
 304ae08:	a463c83a 	sub	r17,r20,r17
 304ae0c:	10bff7cc 	andi	r2,r2,65503
 304ae10:	8080030d 	sth	r2,12(r16)
 304ae14:	88000c1e 	bne	r17,zero,304ae48 <_fseek_r+0x320>
 304ae18:	0009883a 	mov	r4,zero
 304ae1c:	003f6106 	br	304aba4 <_fseek_r+0x7c>
 304ae20:	81800417 	ldw	r6,16(r16)
 304ae24:	003fdf06 	br	304ada4 <_fseek_r+0x27c>
 304ae28:	8140038f 	ldh	r5,14(r16)
 304ae2c:	9009883a 	mov	r4,r18
 304ae30:	d80d883a 	mov	r6,sp
 304ae34:	304af880 	call	304af88 <_fstat_r>
 304ae38:	103f751e 	bne	r2,zero,304ac10 <_fseek_r+0xe8>
 304ae3c:	d8800417 	ldw	r2,16(sp)
 304ae40:	b0a9883a 	add	r20,r22,r2
 304ae44:	003f8906 	br	304ac6c <_fseek_r+0x144>
 304ae48:	9009883a 	mov	r4,r18
 304ae4c:	800b883a 	mov	r5,r16
 304ae50:	304be5c0 	call	304be5c <__srefill_r>
 304ae54:	103f6e1e 	bne	r2,zero,304ac10 <_fseek_r+0xe8>
 304ae58:	80c00117 	ldw	r3,4(r16)
 304ae5c:	1c7f6c36 	bltu	r3,r17,304ac10 <_fseek_r+0xe8>
 304ae60:	80800017 	ldw	r2,0(r16)
 304ae64:	1c47c83a 	sub	r3,r3,r17
 304ae68:	0009883a 	mov	r4,zero
 304ae6c:	1445883a 	add	r2,r2,r17
 304ae70:	80c00115 	stw	r3,4(r16)
 304ae74:	80800015 	stw	r2,0(r16)
 304ae78:	003f4a06 	br	304aba4 <_fseek_r+0x7c>
 304ae7c:	9009883a 	mov	r4,r18
 304ae80:	800b883a 	mov	r5,r16
 304ae84:	304b2600 	call	304b260 <__smakebuf_r>
 304ae88:	003f5606 	br	304abe4 <_fseek_r+0xbc>
 304ae8c:	8100030b 	ldhu	r4,12(r16)
 304ae90:	80c00117 	ldw	r3,4(r16)
 304ae94:	80800017 	ldw	r2,0(r16)
 304ae98:	81800417 	ldw	r6,16(r16)
 304ae9c:	1185c83a 	sub	r2,r2,r6
 304aea0:	10cf883a 	add	r7,r2,r3
 304aea4:	8887c83a 	sub	r3,r17,r2
 304aea8:	003f8206 	br	304acb4 <_fseek_r+0x18c>
 304aeac:	81400717 	ldw	r5,28(r16)
 304aeb0:	b00d883a 	mov	r6,r22
 304aeb4:	980f883a 	mov	r7,r19
 304aeb8:	9009883a 	mov	r4,r18
 304aebc:	a83ee83a 	callr	r21
 304aec0:	00ffffc4 	movi	r3,-1
 304aec4:	10ff5626 	beq	r2,r3,304ac20 <_fseek_r+0xf8>
 304aec8:	81400c17 	ldw	r5,48(r16)
 304aecc:	28000526 	beq	r5,zero,304aee4 <_fseek_r+0x3bc>
 304aed0:	80801004 	addi	r2,r16,64
 304aed4:	28800226 	beq	r5,r2,304aee0 <_fseek_r+0x3b8>
 304aed8:	9009883a 	mov	r4,r18
 304aedc:	304a8140 	call	304a814 <_free_r>
 304aee0:	80000c15 	stw	zero,48(r16)
 304aee4:	8080030b 	ldhu	r2,12(r16)
 304aee8:	80c00417 	ldw	r3,16(r16)
 304aeec:	0009883a 	mov	r4,zero
 304aef0:	10bdf7cc 	andi	r2,r2,63455
 304aef4:	8080030d 	sth	r2,12(r16)
 304aef8:	80c00015 	stw	r3,0(r16)
 304aefc:	80000115 	stw	zero,4(r16)
 304af00:	003f2806 	br	304aba4 <_fseek_r+0x7c>
 304af04:	81400717 	ldw	r5,28(r16)
 304af08:	000d883a 	mov	r6,zero
 304af0c:	9009883a 	mov	r4,r18
 304af10:	01c00044 	movi	r7,1
 304af14:	a83ee83a 	callr	r21
 304af18:	100d883a 	mov	r6,r2
 304af1c:	00bfffc4 	movi	r2,-1
 304af20:	30bf3b26 	beq	r6,r2,304ac10 <_fseek_r+0xe8>
 304af24:	8100030b 	ldhu	r4,12(r16)
 304af28:	003f5606 	br	304ac84 <_fseek_r+0x15c>
 304af2c:	00800744 	movi	r2,29
 304af30:	013fffc4 	movi	r4,-1
 304af34:	90800015 	stw	r2,0(r18)
 304af38:	003f1a06 	br	304aba4 <_fseek_r+0x7c>
 304af3c:	81400717 	ldw	r5,28(r16)
 304af40:	980f883a 	mov	r7,r19
 304af44:	9009883a 	mov	r4,r18
 304af48:	000d883a 	mov	r6,zero
 304af4c:	a83ee83a 	callr	r21
 304af50:	1023883a 	mov	r17,r2
 304af54:	00bfffc4 	movi	r2,-1
 304af58:	88bf3126 	beq	r17,r2,304ac20 <_fseek_r+0xf8>
 304af5c:	8100030b 	ldhu	r4,12(r16)
 304af60:	003f7006 	br	304ad24 <_fseek_r+0x1fc>

0304af64 <fseek>:
 304af64:	0080c1b4 	movhi	r2,774
 304af68:	10b28804 	addi	r2,r2,-13792
 304af6c:	2013883a 	mov	r9,r4
 304af70:	11000017 	ldw	r4,0(r2)
 304af74:	2805883a 	mov	r2,r5
 304af78:	300f883a 	mov	r7,r6
 304af7c:	480b883a 	mov	r5,r9
 304af80:	100d883a 	mov	r6,r2
 304af84:	304ab281 	jmpi	304ab28 <_fseek_r>

0304af88 <_fstat_r>:
 304af88:	defffd04 	addi	sp,sp,-12
 304af8c:	dc000015 	stw	r16,0(sp)
 304af90:	0400c1b4 	movhi	r16,774
 304af94:	8439ff04 	addi	r16,r16,-6148
 304af98:	dc400115 	stw	r17,4(sp)
 304af9c:	80000015 	stw	zero,0(r16)
 304afa0:	2023883a 	mov	r17,r4
 304afa4:	2809883a 	mov	r4,r5
 304afa8:	300b883a 	mov	r5,r6
 304afac:	dfc00215 	stw	ra,8(sp)
 304afb0:	305330c0 	call	305330c <fstat>
 304afb4:	1007883a 	mov	r3,r2
 304afb8:	00bfffc4 	movi	r2,-1
 304afbc:	18800626 	beq	r3,r2,304afd8 <_fstat_r+0x50>
 304afc0:	1805883a 	mov	r2,r3
 304afc4:	dfc00217 	ldw	ra,8(sp)
 304afc8:	dc400117 	ldw	r17,4(sp)
 304afcc:	dc000017 	ldw	r16,0(sp)
 304afd0:	dec00304 	addi	sp,sp,12
 304afd4:	f800283a 	ret
 304afd8:	80800017 	ldw	r2,0(r16)
 304afdc:	103ff826 	beq	r2,zero,304afc0 <_fstat_r+0x38>
 304afe0:	88800015 	stw	r2,0(r17)
 304afe4:	1805883a 	mov	r2,r3
 304afe8:	dfc00217 	ldw	ra,8(sp)
 304afec:	dc400117 	ldw	r17,4(sp)
 304aff0:	dc000017 	ldw	r16,0(sp)
 304aff4:	dec00304 	addi	sp,sp,12
 304aff8:	f800283a 	ret

0304affc <_fwalk_reent>:
 304affc:	defff704 	addi	sp,sp,-36
 304b000:	dcc00315 	stw	r19,12(sp)
 304b004:	24c0b804 	addi	r19,r4,736
 304b008:	dd800615 	stw	r22,24(sp)
 304b00c:	dd400515 	stw	r21,20(sp)
 304b010:	dfc00815 	stw	ra,32(sp)
 304b014:	ddc00715 	stw	r23,28(sp)
 304b018:	dd000415 	stw	r20,16(sp)
 304b01c:	dc800215 	stw	r18,8(sp)
 304b020:	dc400115 	stw	r17,4(sp)
 304b024:	dc000015 	stw	r16,0(sp)
 304b028:	202b883a 	mov	r21,r4
 304b02c:	282d883a 	mov	r22,r5
 304b030:	304a3700 	call	304a370 <__sfp_lock_acquire>
 304b034:	98002226 	beq	r19,zero,304b0c0 <_fwalk_reent+0xc4>
 304b038:	002f883a 	mov	r23,zero
 304b03c:	9c800117 	ldw	r18,4(r19)
 304b040:	98c00217 	ldw	r3,8(r19)
 304b044:	90bfffc4 	addi	r2,r18,-1
 304b048:	10000e16 	blt	r2,zero,304b084 <_fwalk_reent+0x88>
 304b04c:	1c000304 	addi	r16,r3,12
 304b050:	0023883a 	mov	r17,zero
 304b054:	053fffc4 	movi	r20,-1
 304b058:	8080000f 	ldh	r2,0(r16)
 304b05c:	8c400044 	addi	r17,r17,1
 304b060:	817ffd04 	addi	r5,r16,-12
 304b064:	10000526 	beq	r2,zero,304b07c <_fwalk_reent+0x80>
 304b068:	8080008f 	ldh	r2,2(r16)
 304b06c:	a809883a 	mov	r4,r21
 304b070:	15000226 	beq	r2,r20,304b07c <_fwalk_reent+0x80>
 304b074:	b03ee83a 	callr	r22
 304b078:	b8aeb03a 	or	r23,r23,r2
 304b07c:	84001704 	addi	r16,r16,92
 304b080:	947ff51e 	bne	r18,r17,304b058 <_fwalk_reent+0x5c>
 304b084:	9cc00017 	ldw	r19,0(r19)
 304b088:	983fec1e 	bne	r19,zero,304b03c <_fwalk_reent+0x40>
 304b08c:	304a3740 	call	304a374 <__sfp_lock_release>
 304b090:	b805883a 	mov	r2,r23
 304b094:	dfc00817 	ldw	ra,32(sp)
 304b098:	ddc00717 	ldw	r23,28(sp)
 304b09c:	dd800617 	ldw	r22,24(sp)
 304b0a0:	dd400517 	ldw	r21,20(sp)
 304b0a4:	dd000417 	ldw	r20,16(sp)
 304b0a8:	dcc00317 	ldw	r19,12(sp)
 304b0ac:	dc800217 	ldw	r18,8(sp)
 304b0b0:	dc400117 	ldw	r17,4(sp)
 304b0b4:	dc000017 	ldw	r16,0(sp)
 304b0b8:	dec00904 	addi	sp,sp,36
 304b0bc:	f800283a 	ret
 304b0c0:	002f883a 	mov	r23,zero
 304b0c4:	003ff106 	br	304b08c <_fwalk_reent+0x90>

0304b0c8 <_fwalk>:
 304b0c8:	defff804 	addi	sp,sp,-32
 304b0cc:	dcc00315 	stw	r19,12(sp)
 304b0d0:	24c0b804 	addi	r19,r4,736
 304b0d4:	dd400515 	stw	r21,20(sp)
 304b0d8:	dfc00715 	stw	ra,28(sp)
 304b0dc:	dd800615 	stw	r22,24(sp)
 304b0e0:	dd000415 	stw	r20,16(sp)
 304b0e4:	dc800215 	stw	r18,8(sp)
 304b0e8:	dc400115 	stw	r17,4(sp)
 304b0ec:	dc000015 	stw	r16,0(sp)
 304b0f0:	282b883a 	mov	r21,r5
 304b0f4:	304a3700 	call	304a370 <__sfp_lock_acquire>
 304b0f8:	98002026 	beq	r19,zero,304b17c <_fwalk+0xb4>
 304b0fc:	002d883a 	mov	r22,zero
 304b100:	9c800117 	ldw	r18,4(r19)
 304b104:	98c00217 	ldw	r3,8(r19)
 304b108:	90bfffc4 	addi	r2,r18,-1
 304b10c:	10000d16 	blt	r2,zero,304b144 <_fwalk+0x7c>
 304b110:	1c000304 	addi	r16,r3,12
 304b114:	0023883a 	mov	r17,zero
 304b118:	053fffc4 	movi	r20,-1
 304b11c:	8080000f 	ldh	r2,0(r16)
 304b120:	8c400044 	addi	r17,r17,1
 304b124:	813ffd04 	addi	r4,r16,-12
 304b128:	10000426 	beq	r2,zero,304b13c <_fwalk+0x74>
 304b12c:	8080008f 	ldh	r2,2(r16)
 304b130:	15000226 	beq	r2,r20,304b13c <_fwalk+0x74>
 304b134:	a83ee83a 	callr	r21
 304b138:	b0acb03a 	or	r22,r22,r2
 304b13c:	84001704 	addi	r16,r16,92
 304b140:	947ff61e 	bne	r18,r17,304b11c <_fwalk+0x54>
 304b144:	9cc00017 	ldw	r19,0(r19)
 304b148:	983fed1e 	bne	r19,zero,304b100 <_fwalk+0x38>
 304b14c:	304a3740 	call	304a374 <__sfp_lock_release>
 304b150:	b005883a 	mov	r2,r22
 304b154:	dfc00717 	ldw	ra,28(sp)
 304b158:	dd800617 	ldw	r22,24(sp)
 304b15c:	dd400517 	ldw	r21,20(sp)
 304b160:	dd000417 	ldw	r20,16(sp)
 304b164:	dcc00317 	ldw	r19,12(sp)
 304b168:	dc800217 	ldw	r18,8(sp)
 304b16c:	dc400117 	ldw	r17,4(sp)
 304b170:	dc000017 	ldw	r16,0(sp)
 304b174:	dec00804 	addi	sp,sp,32
 304b178:	f800283a 	ret
 304b17c:	002d883a 	mov	r22,zero
 304b180:	003ff206 	br	304b14c <_fwalk+0x84>

0304b184 <_fwrite_r>:
 304b184:	defff604 	addi	sp,sp,-40
 304b188:	dc400615 	stw	r17,24(sp)
 304b18c:	39a3383a 	mul	r17,r7,r6
 304b190:	00800044 	movi	r2,1
 304b194:	dcc00815 	stw	r19,32(sp)
 304b198:	dc800715 	stw	r18,28(sp)
 304b19c:	dc000515 	stw	r16,20(sp)
 304b1a0:	dfc00915 	stw	ra,36(sp)
 304b1a4:	3825883a 	mov	r18,r7
 304b1a8:	3027883a 	mov	r19,r6
 304b1ac:	2021883a 	mov	r16,r4
 304b1b0:	d9400015 	stw	r5,0(sp)
 304b1b4:	d8800315 	stw	r2,12(sp)
 304b1b8:	dc400115 	stw	r17,4(sp)
 304b1bc:	dc400415 	stw	r17,16(sp)
 304b1c0:	dec00215 	stw	sp,8(sp)
 304b1c4:	20000226 	beq	r4,zero,304b1d0 <_fwrite_r+0x4c>
 304b1c8:	20800e17 	ldw	r2,56(r4)
 304b1cc:	10001226 	beq	r2,zero,304b218 <_fwrite_r+0x94>
 304b1d0:	d9400a17 	ldw	r5,40(sp)
 304b1d4:	8009883a 	mov	r4,r16
 304b1d8:	d9800204 	addi	r6,sp,8
 304b1dc:	304fec40 	call	304fec4 <__sfvwrite_r>
 304b1e0:	980b883a 	mov	r5,r19
 304b1e4:	10000426 	beq	r2,zero,304b1f8 <_fwrite_r+0x74>
 304b1e8:	d9000417 	ldw	r4,16(sp)
 304b1ec:	8909c83a 	sub	r4,r17,r4
 304b1f0:	30497ec0 	call	30497ec <__udivsi3>
 304b1f4:	1025883a 	mov	r18,r2
 304b1f8:	9005883a 	mov	r2,r18
 304b1fc:	dfc00917 	ldw	ra,36(sp)
 304b200:	dcc00817 	ldw	r19,32(sp)
 304b204:	dc800717 	ldw	r18,28(sp)
 304b208:	dc400617 	ldw	r17,24(sp)
 304b20c:	dc000517 	ldw	r16,20(sp)
 304b210:	dec00a04 	addi	sp,sp,40
 304b214:	f800283a 	ret
 304b218:	304a3800 	call	304a380 <__sinit>
 304b21c:	003fec06 	br	304b1d0 <_fwrite_r+0x4c>

0304b220 <fwrite>:
 304b220:	0080c1b4 	movhi	r2,774
 304b224:	10b28804 	addi	r2,r2,-13792
 304b228:	2017883a 	mov	r11,r4
 304b22c:	11000017 	ldw	r4,0(r2)
 304b230:	defffe04 	addi	sp,sp,-8
 304b234:	3013883a 	mov	r9,r6
 304b238:	2805883a 	mov	r2,r5
 304b23c:	d9c00015 	stw	r7,0(sp)
 304b240:	580b883a 	mov	r5,r11
 304b244:	100d883a 	mov	r6,r2
 304b248:	480f883a 	mov	r7,r9
 304b24c:	dfc00115 	stw	ra,4(sp)
 304b250:	304b1840 	call	304b184 <_fwrite_r>
 304b254:	dfc00117 	ldw	ra,4(sp)
 304b258:	dec00204 	addi	sp,sp,8
 304b25c:	f800283a 	ret

0304b260 <__smakebuf_r>:
 304b260:	2880030b 	ldhu	r2,12(r5)
 304b264:	deffed04 	addi	sp,sp,-76
 304b268:	dc401015 	stw	r17,64(sp)
 304b26c:	1080008c 	andi	r2,r2,2
 304b270:	dc000f15 	stw	r16,60(sp)
 304b274:	dfc01215 	stw	ra,72(sp)
 304b278:	dc801115 	stw	r18,68(sp)
 304b27c:	2821883a 	mov	r16,r5
 304b280:	2023883a 	mov	r17,r4
 304b284:	10000b26 	beq	r2,zero,304b2b4 <__smakebuf_r+0x54>
 304b288:	28c010c4 	addi	r3,r5,67
 304b28c:	00800044 	movi	r2,1
 304b290:	28800515 	stw	r2,20(r5)
 304b294:	28c00415 	stw	r3,16(r5)
 304b298:	28c00015 	stw	r3,0(r5)
 304b29c:	dfc01217 	ldw	ra,72(sp)
 304b2a0:	dc801117 	ldw	r18,68(sp)
 304b2a4:	dc401017 	ldw	r17,64(sp)
 304b2a8:	dc000f17 	ldw	r16,60(sp)
 304b2ac:	dec01304 	addi	sp,sp,76
 304b2b0:	f800283a 	ret
 304b2b4:	2940038f 	ldh	r5,14(r5)
 304b2b8:	28002116 	blt	r5,zero,304b340 <__smakebuf_r+0xe0>
 304b2bc:	d80d883a 	mov	r6,sp
 304b2c0:	304af880 	call	304af88 <_fstat_r>
 304b2c4:	10001e16 	blt	r2,zero,304b340 <__smakebuf_r+0xe0>
 304b2c8:	d8800117 	ldw	r2,4(sp)
 304b2cc:	00e00014 	movui	r3,32768
 304b2d0:	113c000c 	andi	r4,r2,61440
 304b2d4:	20c03126 	beq	r4,r3,304b39c <__smakebuf_r+0x13c>
 304b2d8:	8080030b 	ldhu	r2,12(r16)
 304b2dc:	00c80004 	movi	r3,8192
 304b2e0:	10820014 	ori	r2,r2,2048
 304b2e4:	8080030d 	sth	r2,12(r16)
 304b2e8:	20c01e26 	beq	r4,r3,304b364 <__smakebuf_r+0x104>
 304b2ec:	04810004 	movi	r18,1024
 304b2f0:	8809883a 	mov	r4,r17
 304b2f4:	900b883a 	mov	r5,r18
 304b2f8:	304b41c0 	call	304b41c <_malloc_r>
 304b2fc:	1009883a 	mov	r4,r2
 304b300:	10003126 	beq	r2,zero,304b3c8 <__smakebuf_r+0x168>
 304b304:	80c0030b 	ldhu	r3,12(r16)
 304b308:	0080c174 	movhi	r2,773
 304b30c:	10a91904 	addi	r2,r2,-23452
 304b310:	88800f15 	stw	r2,60(r17)
 304b314:	18c02014 	ori	r3,r3,128
 304b318:	84800515 	stw	r18,20(r16)
 304b31c:	80c0030d 	sth	r3,12(r16)
 304b320:	81000415 	stw	r4,16(r16)
 304b324:	81000015 	stw	r4,0(r16)
 304b328:	dfc01217 	ldw	ra,72(sp)
 304b32c:	dc801117 	ldw	r18,68(sp)
 304b330:	dc401017 	ldw	r17,64(sp)
 304b334:	dc000f17 	ldw	r16,60(sp)
 304b338:	dec01304 	addi	sp,sp,76
 304b33c:	f800283a 	ret
 304b340:	80c0030b 	ldhu	r3,12(r16)
 304b344:	1880200c 	andi	r2,r3,128
 304b348:	10000426 	beq	r2,zero,304b35c <__smakebuf_r+0xfc>
 304b34c:	04801004 	movi	r18,64
 304b350:	18820014 	ori	r2,r3,2048
 304b354:	8080030d 	sth	r2,12(r16)
 304b358:	003fe506 	br	304b2f0 <__smakebuf_r+0x90>
 304b35c:	04810004 	movi	r18,1024
 304b360:	003ffb06 	br	304b350 <__smakebuf_r+0xf0>
 304b364:	8140038f 	ldh	r5,14(r16)
 304b368:	8809883a 	mov	r4,r17
 304b36c:	30503600 	call	3050360 <_isatty_r>
 304b370:	103fde26 	beq	r2,zero,304b2ec <__smakebuf_r+0x8c>
 304b374:	8080030b 	ldhu	r2,12(r16)
 304b378:	80c010c4 	addi	r3,r16,67
 304b37c:	04810004 	movi	r18,1024
 304b380:	10800054 	ori	r2,r2,1
 304b384:	8080030d 	sth	r2,12(r16)
 304b388:	00800044 	movi	r2,1
 304b38c:	80c00415 	stw	r3,16(r16)
 304b390:	80800515 	stw	r2,20(r16)
 304b394:	80c00015 	stw	r3,0(r16)
 304b398:	003fd506 	br	304b2f0 <__smakebuf_r+0x90>
 304b39c:	80c00a17 	ldw	r3,40(r16)
 304b3a0:	0080c174 	movhi	r2,773
 304b3a4:	10b06204 	addi	r2,r2,-15992
 304b3a8:	18bfcb1e 	bne	r3,r2,304b2d8 <__smakebuf_r+0x78>
 304b3ac:	8080030b 	ldhu	r2,12(r16)
 304b3b0:	00c10004 	movi	r3,1024
 304b3b4:	1825883a 	mov	r18,r3
 304b3b8:	10c4b03a 	or	r2,r2,r3
 304b3bc:	8080030d 	sth	r2,12(r16)
 304b3c0:	80c01315 	stw	r3,76(r16)
 304b3c4:	003fca06 	br	304b2f0 <__smakebuf_r+0x90>
 304b3c8:	8100030b 	ldhu	r4,12(r16)
 304b3cc:	2080800c 	andi	r2,r4,512
 304b3d0:	103fb21e 	bne	r2,zero,304b29c <__smakebuf_r+0x3c>
 304b3d4:	80c010c4 	addi	r3,r16,67
 304b3d8:	21000094 	ori	r4,r4,2
 304b3dc:	00800044 	movi	r2,1
 304b3e0:	80800515 	stw	r2,20(r16)
 304b3e4:	8100030d 	sth	r4,12(r16)
 304b3e8:	80c00415 	stw	r3,16(r16)
 304b3ec:	80c00015 	stw	r3,0(r16)
 304b3f0:	003faa06 	br	304b29c <__smakebuf_r+0x3c>

0304b3f4 <free>:
 304b3f4:	0080c1b4 	movhi	r2,774
 304b3f8:	10b28804 	addi	r2,r2,-13792
 304b3fc:	200b883a 	mov	r5,r4
 304b400:	11000017 	ldw	r4,0(r2)
 304b404:	304a8141 	jmpi	304a814 <_free_r>

0304b408 <malloc>:
 304b408:	0080c1b4 	movhi	r2,774
 304b40c:	10b28804 	addi	r2,r2,-13792
 304b410:	200b883a 	mov	r5,r4
 304b414:	11000017 	ldw	r4,0(r2)
 304b418:	304b41c1 	jmpi	304b41c <_malloc_r>

0304b41c <_malloc_r>:
 304b41c:	defff604 	addi	sp,sp,-40
 304b420:	28c002c4 	addi	r3,r5,11
 304b424:	00800584 	movi	r2,22
 304b428:	dc800215 	stw	r18,8(sp)
 304b42c:	dfc00915 	stw	ra,36(sp)
 304b430:	df000815 	stw	fp,32(sp)
 304b434:	ddc00715 	stw	r23,28(sp)
 304b438:	dd800615 	stw	r22,24(sp)
 304b43c:	dd400515 	stw	r21,20(sp)
 304b440:	dd000415 	stw	r20,16(sp)
 304b444:	dcc00315 	stw	r19,12(sp)
 304b448:	dc400115 	stw	r17,4(sp)
 304b44c:	dc000015 	stw	r16,0(sp)
 304b450:	2025883a 	mov	r18,r4
 304b454:	10c01236 	bltu	r2,r3,304b4a0 <_malloc_r+0x84>
 304b458:	04400404 	movi	r17,16
 304b45c:	8940142e 	bgeu	r17,r5,304b4b0 <_malloc_r+0x94>
 304b460:	00800304 	movi	r2,12
 304b464:	0007883a 	mov	r3,zero
 304b468:	90800015 	stw	r2,0(r18)
 304b46c:	1805883a 	mov	r2,r3
 304b470:	dfc00917 	ldw	ra,36(sp)
 304b474:	df000817 	ldw	fp,32(sp)
 304b478:	ddc00717 	ldw	r23,28(sp)
 304b47c:	dd800617 	ldw	r22,24(sp)
 304b480:	dd400517 	ldw	r21,20(sp)
 304b484:	dd000417 	ldw	r20,16(sp)
 304b488:	dcc00317 	ldw	r19,12(sp)
 304b48c:	dc800217 	ldw	r18,8(sp)
 304b490:	dc400117 	ldw	r17,4(sp)
 304b494:	dc000017 	ldw	r16,0(sp)
 304b498:	dec00a04 	addi	sp,sp,40
 304b49c:	f800283a 	ret
 304b4a0:	00bffe04 	movi	r2,-8
 304b4a4:	18a2703a 	and	r17,r3,r2
 304b4a8:	883fed16 	blt	r17,zero,304b460 <_malloc_r+0x44>
 304b4ac:	897fec36 	bltu	r17,r5,304b460 <_malloc_r+0x44>
 304b4b0:	9009883a 	mov	r4,r18
 304b4b4:	30539600 	call	3053960 <__malloc_lock>
 304b4b8:	00807dc4 	movi	r2,503
 304b4bc:	14402b2e 	bgeu	r2,r17,304b56c <_malloc_r+0x150>
 304b4c0:	8806d27a 	srli	r3,r17,9
 304b4c4:	18003f1e 	bne	r3,zero,304b5c4 <_malloc_r+0x1a8>
 304b4c8:	880cd0fa 	srli	r6,r17,3
 304b4cc:	300490fa 	slli	r2,r6,3
 304b4d0:	02c0c1b4 	movhi	r11,774
 304b4d4:	5aec4f04 	addi	r11,r11,-20164
 304b4d8:	12cb883a 	add	r5,r2,r11
 304b4dc:	2c000317 	ldw	r16,12(r5)
 304b4e0:	580f883a 	mov	r7,r11
 304b4e4:	2c00041e 	bne	r5,r16,304b4f8 <_malloc_r+0xdc>
 304b4e8:	00000a06 	br	304b514 <_malloc_r+0xf8>
 304b4ec:	1800860e 	bge	r3,zero,304b708 <_malloc_r+0x2ec>
 304b4f0:	84000317 	ldw	r16,12(r16)
 304b4f4:	2c000726 	beq	r5,r16,304b514 <_malloc_r+0xf8>
 304b4f8:	80800117 	ldw	r2,4(r16)
 304b4fc:	00ffff04 	movi	r3,-4
 304b500:	10c8703a 	and	r4,r2,r3
 304b504:	2447c83a 	sub	r3,r4,r17
 304b508:	008003c4 	movi	r2,15
 304b50c:	10fff70e 	bge	r2,r3,304b4ec <_malloc_r+0xd0>
 304b510:	31bfffc4 	addi	r6,r6,-1
 304b514:	32400044 	addi	r9,r6,1
 304b518:	0280c1b4 	movhi	r10,774
 304b51c:	52ac5104 	addi	r10,r10,-20156
 304b520:	54000217 	ldw	r16,8(r10)
 304b524:	8280a026 	beq	r16,r10,304b7a8 <_malloc_r+0x38c>
 304b528:	80800117 	ldw	r2,4(r16)
 304b52c:	00ffff04 	movi	r3,-4
 304b530:	10ca703a 	and	r5,r2,r3
 304b534:	2c4dc83a 	sub	r6,r5,r17
 304b538:	008003c4 	movi	r2,15
 304b53c:	11808316 	blt	r2,r6,304b74c <_malloc_r+0x330>
 304b540:	52800315 	stw	r10,12(r10)
 304b544:	52800215 	stw	r10,8(r10)
 304b548:	30002916 	blt	r6,zero,304b5f0 <_malloc_r+0x1d4>
 304b54c:	8147883a 	add	r3,r16,r5
 304b550:	18800117 	ldw	r2,4(r3)
 304b554:	9009883a 	mov	r4,r18
 304b558:	10800054 	ori	r2,r2,1
 304b55c:	18800115 	stw	r2,4(r3)
 304b560:	305397c0 	call	305397c <__malloc_unlock>
 304b564:	80c00204 	addi	r3,r16,8
 304b568:	003fc006 	br	304b46c <_malloc_r+0x50>
 304b56c:	02c0c1b4 	movhi	r11,774
 304b570:	5aec4f04 	addi	r11,r11,-20164
 304b574:	8ac5883a 	add	r2,r17,r11
 304b578:	14000317 	ldw	r16,12(r2)
 304b57c:	580f883a 	mov	r7,r11
 304b580:	8806d0fa 	srli	r3,r17,3
 304b584:	14006c26 	beq	r2,r16,304b738 <_malloc_r+0x31c>
 304b588:	80c00117 	ldw	r3,4(r16)
 304b58c:	00bfff04 	movi	r2,-4
 304b590:	81800317 	ldw	r6,12(r16)
 304b594:	1886703a 	and	r3,r3,r2
 304b598:	80c7883a 	add	r3,r16,r3
 304b59c:	18800117 	ldw	r2,4(r3)
 304b5a0:	81400217 	ldw	r5,8(r16)
 304b5a4:	9009883a 	mov	r4,r18
 304b5a8:	10800054 	ori	r2,r2,1
 304b5ac:	18800115 	stw	r2,4(r3)
 304b5b0:	31400215 	stw	r5,8(r6)
 304b5b4:	29800315 	stw	r6,12(r5)
 304b5b8:	305397c0 	call	305397c <__malloc_unlock>
 304b5bc:	80c00204 	addi	r3,r16,8
 304b5c0:	003faa06 	br	304b46c <_malloc_r+0x50>
 304b5c4:	00800104 	movi	r2,4
 304b5c8:	10c0052e 	bgeu	r2,r3,304b5e0 <_malloc_r+0x1c4>
 304b5cc:	00800504 	movi	r2,20
 304b5d0:	10c07836 	bltu	r2,r3,304b7b4 <_malloc_r+0x398>
 304b5d4:	198016c4 	addi	r6,r3,91
 304b5d8:	300490fa 	slli	r2,r6,3
 304b5dc:	003fbc06 	br	304b4d0 <_malloc_r+0xb4>
 304b5e0:	8804d1ba 	srli	r2,r17,6
 304b5e4:	11800e04 	addi	r6,r2,56
 304b5e8:	300490fa 	slli	r2,r6,3
 304b5ec:	003fb806 	br	304b4d0 <_malloc_r+0xb4>
 304b5f0:	00807fc4 	movi	r2,511
 304b5f4:	1140bb36 	bltu	r2,r5,304b8e4 <_malloc_r+0x4c8>
 304b5f8:	2806d0fa 	srli	r3,r5,3
 304b5fc:	573ffe04 	addi	fp,r10,-8
 304b600:	00800044 	movi	r2,1
 304b604:	180890fa 	slli	r4,r3,3
 304b608:	1807d0ba 	srai	r3,r3,2
 304b60c:	e1c00117 	ldw	r7,4(fp)
 304b610:	5909883a 	add	r4,r11,r4
 304b614:	21400217 	ldw	r5,8(r4)
 304b618:	10c4983a 	sll	r2,r2,r3
 304b61c:	81000315 	stw	r4,12(r16)
 304b620:	81400215 	stw	r5,8(r16)
 304b624:	388eb03a 	or	r7,r7,r2
 304b628:	2c000315 	stw	r16,12(r5)
 304b62c:	24000215 	stw	r16,8(r4)
 304b630:	e1c00115 	stw	r7,4(fp)
 304b634:	4807883a 	mov	r3,r9
 304b638:	4800cd16 	blt	r9,zero,304b970 <_malloc_r+0x554>
 304b63c:	1807d0ba 	srai	r3,r3,2
 304b640:	00800044 	movi	r2,1
 304b644:	10c8983a 	sll	r4,r2,r3
 304b648:	39004436 	bltu	r7,r4,304b75c <_malloc_r+0x340>
 304b64c:	21c4703a 	and	r2,r4,r7
 304b650:	10000a1e 	bne	r2,zero,304b67c <_malloc_r+0x260>
 304b654:	2109883a 	add	r4,r4,r4
 304b658:	00bfff04 	movi	r2,-4
 304b65c:	4884703a 	and	r2,r9,r2
 304b660:	3906703a 	and	r3,r7,r4
 304b664:	12400104 	addi	r9,r2,4
 304b668:	1800041e 	bne	r3,zero,304b67c <_malloc_r+0x260>
 304b66c:	2109883a 	add	r4,r4,r4
 304b670:	3904703a 	and	r2,r7,r4
 304b674:	4a400104 	addi	r9,r9,4
 304b678:	103ffc26 	beq	r2,zero,304b66c <_malloc_r+0x250>
 304b67c:	480490fa 	slli	r2,r9,3
 304b680:	4819883a 	mov	r12,r9
 304b684:	023fff04 	movi	r8,-4
 304b688:	589b883a 	add	r13,r11,r2
 304b68c:	6807883a 	mov	r3,r13
 304b690:	014003c4 	movi	r5,15
 304b694:	1c000317 	ldw	r16,12(r3)
 304b698:	1c00041e 	bne	r3,r16,304b6ac <_malloc_r+0x290>
 304b69c:	0000a706 	br	304b93c <_malloc_r+0x520>
 304b6a0:	3000ab0e 	bge	r6,zero,304b950 <_malloc_r+0x534>
 304b6a4:	84000317 	ldw	r16,12(r16)
 304b6a8:	1c00a426 	beq	r3,r16,304b93c <_malloc_r+0x520>
 304b6ac:	80800117 	ldw	r2,4(r16)
 304b6b0:	1204703a 	and	r2,r2,r8
 304b6b4:	144dc83a 	sub	r6,r2,r17
 304b6b8:	29bff90e 	bge	r5,r6,304b6a0 <_malloc_r+0x284>
 304b6bc:	81000317 	ldw	r4,12(r16)
 304b6c0:	80c00217 	ldw	r3,8(r16)
 304b6c4:	89400054 	ori	r5,r17,1
 304b6c8:	8445883a 	add	r2,r16,r17
 304b6cc:	20c00215 	stw	r3,8(r4)
 304b6d0:	19000315 	stw	r4,12(r3)
 304b6d4:	81400115 	stw	r5,4(r16)
 304b6d8:	1187883a 	add	r3,r2,r6
 304b6dc:	31000054 	ori	r4,r6,1
 304b6e0:	50800315 	stw	r2,12(r10)
 304b6e4:	50800215 	stw	r2,8(r10)
 304b6e8:	19800015 	stw	r6,0(r3)
 304b6ec:	11000115 	stw	r4,4(r2)
 304b6f0:	12800215 	stw	r10,8(r2)
 304b6f4:	12800315 	stw	r10,12(r2)
 304b6f8:	9009883a 	mov	r4,r18
 304b6fc:	305397c0 	call	305397c <__malloc_unlock>
 304b700:	80c00204 	addi	r3,r16,8
 304b704:	003f5906 	br	304b46c <_malloc_r+0x50>
 304b708:	8109883a 	add	r4,r16,r4
 304b70c:	20800117 	ldw	r2,4(r4)
 304b710:	80c00217 	ldw	r3,8(r16)
 304b714:	81400317 	ldw	r5,12(r16)
 304b718:	10800054 	ori	r2,r2,1
 304b71c:	20800115 	stw	r2,4(r4)
 304b720:	28c00215 	stw	r3,8(r5)
 304b724:	19400315 	stw	r5,12(r3)
 304b728:	9009883a 	mov	r4,r18
 304b72c:	305397c0 	call	305397c <__malloc_unlock>
 304b730:	80c00204 	addi	r3,r16,8
 304b734:	003f4d06 	br	304b46c <_malloc_r+0x50>
 304b738:	80800204 	addi	r2,r16,8
 304b73c:	14000317 	ldw	r16,12(r2)
 304b740:	143f911e 	bne	r2,r16,304b588 <_malloc_r+0x16c>
 304b744:	1a400084 	addi	r9,r3,2
 304b748:	003f7306 	br	304b518 <_malloc_r+0xfc>
 304b74c:	88c00054 	ori	r3,r17,1
 304b750:	8445883a 	add	r2,r16,r17
 304b754:	80c00115 	stw	r3,4(r16)
 304b758:	003fdf06 	br	304b6d8 <_malloc_r+0x2bc>
 304b75c:	e4000217 	ldw	r16,8(fp)
 304b760:	00bfff04 	movi	r2,-4
 304b764:	80c00117 	ldw	r3,4(r16)
 304b768:	802d883a 	mov	r22,r16
 304b76c:	18aa703a 	and	r21,r3,r2
 304b770:	ac401636 	bltu	r21,r17,304b7cc <_malloc_r+0x3b0>
 304b774:	ac49c83a 	sub	r4,r21,r17
 304b778:	008003c4 	movi	r2,15
 304b77c:	1100130e 	bge	r2,r4,304b7cc <_malloc_r+0x3b0>
 304b780:	88800054 	ori	r2,r17,1
 304b784:	8447883a 	add	r3,r16,r17
 304b788:	80800115 	stw	r2,4(r16)
 304b78c:	20800054 	ori	r2,r4,1
 304b790:	18800115 	stw	r2,4(r3)
 304b794:	e0c00215 	stw	r3,8(fp)
 304b798:	9009883a 	mov	r4,r18
 304b79c:	305397c0 	call	305397c <__malloc_unlock>
 304b7a0:	80c00204 	addi	r3,r16,8
 304b7a4:	003f3106 	br	304b46c <_malloc_r+0x50>
 304b7a8:	39c00117 	ldw	r7,4(r7)
 304b7ac:	573ffe04 	addi	fp,r10,-8
 304b7b0:	003fa006 	br	304b634 <_malloc_r+0x218>
 304b7b4:	00801504 	movi	r2,84
 304b7b8:	10c06736 	bltu	r2,r3,304b958 <_malloc_r+0x53c>
 304b7bc:	8804d33a 	srli	r2,r17,12
 304b7c0:	11801b84 	addi	r6,r2,110
 304b7c4:	300490fa 	slli	r2,r6,3
 304b7c8:	003f4106 	br	304b4d0 <_malloc_r+0xb4>
 304b7cc:	d0a77b17 	ldw	r2,-25108(gp)
 304b7d0:	d0e00617 	ldw	r3,-32744(gp)
 304b7d4:	053fffc4 	movi	r20,-1
 304b7d8:	10800404 	addi	r2,r2,16
 304b7dc:	88a7883a 	add	r19,r17,r2
 304b7e0:	1d000326 	beq	r3,r20,304b7f0 <_malloc_r+0x3d4>
 304b7e4:	98c3ffc4 	addi	r3,r19,4095
 304b7e8:	00bc0004 	movi	r2,-4096
 304b7ec:	18a6703a 	and	r19,r3,r2
 304b7f0:	9009883a 	mov	r4,r18
 304b7f4:	980b883a 	mov	r5,r19
 304b7f8:	304c03c0 	call	304c03c <_sbrk_r>
 304b7fc:	1009883a 	mov	r4,r2
 304b800:	15000426 	beq	r2,r20,304b814 <_malloc_r+0x3f8>
 304b804:	854b883a 	add	r5,r16,r21
 304b808:	1029883a 	mov	r20,r2
 304b80c:	11405a2e 	bgeu	r2,r5,304b978 <_malloc_r+0x55c>
 304b810:	87000c26 	beq	r16,fp,304b844 <_malloc_r+0x428>
 304b814:	e4000217 	ldw	r16,8(fp)
 304b818:	80c00117 	ldw	r3,4(r16)
 304b81c:	00bfff04 	movi	r2,-4
 304b820:	1884703a 	and	r2,r3,r2
 304b824:	14400336 	bltu	r2,r17,304b834 <_malloc_r+0x418>
 304b828:	1449c83a 	sub	r4,r2,r17
 304b82c:	008003c4 	movi	r2,15
 304b830:	113fd316 	blt	r2,r4,304b780 <_malloc_r+0x364>
 304b834:	9009883a 	mov	r4,r18
 304b838:	305397c0 	call	305397c <__malloc_unlock>
 304b83c:	0007883a 	mov	r3,zero
 304b840:	003f0a06 	br	304b46c <_malloc_r+0x50>
 304b844:	05c0c1b4 	movhi	r23,774
 304b848:	bdfeae04 	addi	r23,r23,-1352
 304b84c:	b8800017 	ldw	r2,0(r23)
 304b850:	988d883a 	add	r6,r19,r2
 304b854:	b9800015 	stw	r6,0(r23)
 304b858:	d0e00617 	ldw	r3,-32744(gp)
 304b85c:	00bfffc4 	movi	r2,-1
 304b860:	18808e26 	beq	r3,r2,304ba9c <_malloc_r+0x680>
 304b864:	2145c83a 	sub	r2,r4,r5
 304b868:	3085883a 	add	r2,r6,r2
 304b86c:	b8800015 	stw	r2,0(r23)
 304b870:	20c001cc 	andi	r3,r4,7
 304b874:	18005f1e 	bne	r3,zero,304b9f4 <_malloc_r+0x5d8>
 304b878:	000b883a 	mov	r5,zero
 304b87c:	a4c5883a 	add	r2,r20,r19
 304b880:	1083ffcc 	andi	r2,r2,4095
 304b884:	00c40004 	movi	r3,4096
 304b888:	1887c83a 	sub	r3,r3,r2
 304b88c:	28e7883a 	add	r19,r5,r3
 304b890:	9009883a 	mov	r4,r18
 304b894:	980b883a 	mov	r5,r19
 304b898:	304c03c0 	call	304c03c <_sbrk_r>
 304b89c:	1007883a 	mov	r3,r2
 304b8a0:	00bfffc4 	movi	r2,-1
 304b8a4:	18807a26 	beq	r3,r2,304ba90 <_malloc_r+0x674>
 304b8a8:	1d05c83a 	sub	r2,r3,r20
 304b8ac:	9885883a 	add	r2,r19,r2
 304b8b0:	10c00054 	ori	r3,r2,1
 304b8b4:	b8800017 	ldw	r2,0(r23)
 304b8b8:	a021883a 	mov	r16,r20
 304b8bc:	a0c00115 	stw	r3,4(r20)
 304b8c0:	9885883a 	add	r2,r19,r2
 304b8c4:	b8800015 	stw	r2,0(r23)
 304b8c8:	e5000215 	stw	r20,8(fp)
 304b8cc:	b7003626 	beq	r22,fp,304b9a8 <_malloc_r+0x58c>
 304b8d0:	018003c4 	movi	r6,15
 304b8d4:	35404b36 	bltu	r6,r21,304ba04 <_malloc_r+0x5e8>
 304b8d8:	00800044 	movi	r2,1
 304b8dc:	a0800115 	stw	r2,4(r20)
 304b8e0:	003fcd06 	br	304b818 <_malloc_r+0x3fc>
 304b8e4:	2808d27a 	srli	r4,r5,9
 304b8e8:	2000371e 	bne	r4,zero,304b9c8 <_malloc_r+0x5ac>
 304b8ec:	2808d0fa 	srli	r4,r5,3
 304b8f0:	200690fa 	slli	r3,r4,3
 304b8f4:	1ad1883a 	add	r8,r3,r11
 304b8f8:	41800217 	ldw	r6,8(r8)
 304b8fc:	41805b26 	beq	r8,r6,304ba6c <_malloc_r+0x650>
 304b900:	30800117 	ldw	r2,4(r6)
 304b904:	00ffff04 	movi	r3,-4
 304b908:	10c4703a 	and	r2,r2,r3
 304b90c:	2880022e 	bgeu	r5,r2,304b918 <_malloc_r+0x4fc>
 304b910:	31800217 	ldw	r6,8(r6)
 304b914:	41bffa1e 	bne	r8,r6,304b900 <_malloc_r+0x4e4>
 304b918:	32000317 	ldw	r8,12(r6)
 304b91c:	39c00117 	ldw	r7,4(r7)
 304b920:	82000315 	stw	r8,12(r16)
 304b924:	81800215 	stw	r6,8(r16)
 304b928:	0700c1b4 	movhi	fp,774
 304b92c:	e72c4f04 	addi	fp,fp,-20164
 304b930:	34000315 	stw	r16,12(r6)
 304b934:	44000215 	stw	r16,8(r8)
 304b938:	003f3e06 	br	304b634 <_malloc_r+0x218>
 304b93c:	63000044 	addi	r12,r12,1
 304b940:	608000cc 	andi	r2,r12,3
 304b944:	10005d26 	beq	r2,zero,304babc <_malloc_r+0x6a0>
 304b948:	18c00204 	addi	r3,r3,8
 304b94c:	003f5106 	br	304b694 <_malloc_r+0x278>
 304b950:	8089883a 	add	r4,r16,r2
 304b954:	003f6d06 	br	304b70c <_malloc_r+0x2f0>
 304b958:	00805504 	movi	r2,340
 304b95c:	10c02036 	bltu	r2,r3,304b9e0 <_malloc_r+0x5c4>
 304b960:	8804d3fa 	srli	r2,r17,15
 304b964:	11801dc4 	addi	r6,r2,119
 304b968:	300490fa 	slli	r2,r6,3
 304b96c:	003ed806 	br	304b4d0 <_malloc_r+0xb4>
 304b970:	48c000c4 	addi	r3,r9,3
 304b974:	003f3106 	br	304b63c <_malloc_r+0x220>
 304b978:	05c0c1b4 	movhi	r23,774
 304b97c:	bdfeae04 	addi	r23,r23,-1352
 304b980:	b8800017 	ldw	r2,0(r23)
 304b984:	988d883a 	add	r6,r19,r2
 304b988:	b9800015 	stw	r6,0(r23)
 304b98c:	293fb21e 	bne	r5,r4,304b858 <_malloc_r+0x43c>
 304b990:	2083ffcc 	andi	r2,r4,4095
 304b994:	103fb01e 	bne	r2,zero,304b858 <_malloc_r+0x43c>
 304b998:	e4000217 	ldw	r16,8(fp)
 304b99c:	9d45883a 	add	r2,r19,r21
 304b9a0:	10800054 	ori	r2,r2,1
 304b9a4:	80800115 	stw	r2,4(r16)
 304b9a8:	b8c00017 	ldw	r3,0(r23)
 304b9ac:	d0a77c17 	ldw	r2,-25104(gp)
 304b9b0:	10c0012e 	bgeu	r2,r3,304b9b8 <_malloc_r+0x59c>
 304b9b4:	d0e77c15 	stw	r3,-25104(gp)
 304b9b8:	d0a77d17 	ldw	r2,-25100(gp)
 304b9bc:	10ff962e 	bgeu	r2,r3,304b818 <_malloc_r+0x3fc>
 304b9c0:	d0e77d15 	stw	r3,-25100(gp)
 304b9c4:	003f9406 	br	304b818 <_malloc_r+0x3fc>
 304b9c8:	00800104 	movi	r2,4
 304b9cc:	11001e36 	bltu	r2,r4,304ba48 <_malloc_r+0x62c>
 304b9d0:	2804d1ba 	srli	r2,r5,6
 304b9d4:	11000e04 	addi	r4,r2,56
 304b9d8:	200690fa 	slli	r3,r4,3
 304b9dc:	003fc506 	br	304b8f4 <_malloc_r+0x4d8>
 304b9e0:	00815504 	movi	r2,1364
 304b9e4:	10c01d2e 	bgeu	r2,r3,304ba5c <_malloc_r+0x640>
 304b9e8:	01801f84 	movi	r6,126
 304b9ec:	0080fc04 	movi	r2,1008
 304b9f0:	003eb706 	br	304b4d0 <_malloc_r+0xb4>
 304b9f4:	00800204 	movi	r2,8
 304b9f8:	10cbc83a 	sub	r5,r2,r3
 304b9fc:	2169883a 	add	r20,r4,r5
 304ba00:	003f9e06 	br	304b87c <_malloc_r+0x460>
 304ba04:	00bffe04 	movi	r2,-8
 304ba08:	a93ffd04 	addi	r4,r21,-12
 304ba0c:	2088703a 	and	r4,r4,r2
 304ba10:	b10b883a 	add	r5,r22,r4
 304ba14:	00c00144 	movi	r3,5
 304ba18:	28c00215 	stw	r3,8(r5)
 304ba1c:	28c00115 	stw	r3,4(r5)
 304ba20:	b0800117 	ldw	r2,4(r22)
 304ba24:	1080004c 	andi	r2,r2,1
 304ba28:	2084b03a 	or	r2,r4,r2
 304ba2c:	b0800115 	stw	r2,4(r22)
 304ba30:	313fdd2e 	bgeu	r6,r4,304b9a8 <_malloc_r+0x58c>
 304ba34:	b1400204 	addi	r5,r22,8
 304ba38:	9009883a 	mov	r4,r18
 304ba3c:	304a8140 	call	304a814 <_free_r>
 304ba40:	e4000217 	ldw	r16,8(fp)
 304ba44:	003fd806 	br	304b9a8 <_malloc_r+0x58c>
 304ba48:	00800504 	movi	r2,20
 304ba4c:	11001536 	bltu	r2,r4,304baa4 <_malloc_r+0x688>
 304ba50:	210016c4 	addi	r4,r4,91
 304ba54:	200690fa 	slli	r3,r4,3
 304ba58:	003fa606 	br	304b8f4 <_malloc_r+0x4d8>
 304ba5c:	8804d4ba 	srli	r2,r17,18
 304ba60:	11801f04 	addi	r6,r2,124
 304ba64:	300490fa 	slli	r2,r6,3
 304ba68:	003e9906 	br	304b4d0 <_malloc_r+0xb4>
 304ba6c:	2009d0ba 	srai	r4,r4,2
 304ba70:	0140c1b4 	movhi	r5,774
 304ba74:	296c4f04 	addi	r5,r5,-20164
 304ba78:	00c00044 	movi	r3,1
 304ba7c:	28800117 	ldw	r2,4(r5)
 304ba80:	1906983a 	sll	r3,r3,r4
 304ba84:	10c4b03a 	or	r2,r2,r3
 304ba88:	28800115 	stw	r2,4(r5)
 304ba8c:	003fa306 	br	304b91c <_malloc_r+0x500>
 304ba90:	0027883a 	mov	r19,zero
 304ba94:	00c00044 	movi	r3,1
 304ba98:	003f8606 	br	304b8b4 <_malloc_r+0x498>
 304ba9c:	d1200615 	stw	r4,-32744(gp)
 304baa0:	003f7306 	br	304b870 <_malloc_r+0x454>
 304baa4:	00801504 	movi	r2,84
 304baa8:	11001936 	bltu	r2,r4,304bb10 <_malloc_r+0x6f4>
 304baac:	2804d33a 	srli	r2,r5,12
 304bab0:	11001b84 	addi	r4,r2,110
 304bab4:	200690fa 	slli	r3,r4,3
 304bab8:	003f8e06 	br	304b8f4 <_malloc_r+0x4d8>
 304babc:	480b883a 	mov	r5,r9
 304bac0:	6807883a 	mov	r3,r13
 304bac4:	288000cc 	andi	r2,r5,3
 304bac8:	18fffe04 	addi	r3,r3,-8
 304bacc:	297fffc4 	addi	r5,r5,-1
 304bad0:	10001526 	beq	r2,zero,304bb28 <_malloc_r+0x70c>
 304bad4:	18800217 	ldw	r2,8(r3)
 304bad8:	10fffa26 	beq	r2,r3,304bac4 <_malloc_r+0x6a8>
 304badc:	2109883a 	add	r4,r4,r4
 304bae0:	393f1e36 	bltu	r7,r4,304b75c <_malloc_r+0x340>
 304bae4:	203f1d26 	beq	r4,zero,304b75c <_malloc_r+0x340>
 304bae8:	21c4703a 	and	r2,r4,r7
 304baec:	10000226 	beq	r2,zero,304baf8 <_malloc_r+0x6dc>
 304baf0:	6013883a 	mov	r9,r12
 304baf4:	003ee106 	br	304b67c <_malloc_r+0x260>
 304baf8:	2109883a 	add	r4,r4,r4
 304bafc:	3904703a 	and	r2,r7,r4
 304bb00:	63000104 	addi	r12,r12,4
 304bb04:	103ffc26 	beq	r2,zero,304baf8 <_malloc_r+0x6dc>
 304bb08:	6013883a 	mov	r9,r12
 304bb0c:	003edb06 	br	304b67c <_malloc_r+0x260>
 304bb10:	00805504 	movi	r2,340
 304bb14:	11000836 	bltu	r2,r4,304bb38 <_malloc_r+0x71c>
 304bb18:	2804d3fa 	srli	r2,r5,15
 304bb1c:	11001dc4 	addi	r4,r2,119
 304bb20:	200690fa 	slli	r3,r4,3
 304bb24:	003f7306 	br	304b8f4 <_malloc_r+0x4d8>
 304bb28:	0104303a 	nor	r2,zero,r4
 304bb2c:	388e703a 	and	r7,r7,r2
 304bb30:	e1c00115 	stw	r7,4(fp)
 304bb34:	003fe906 	br	304badc <_malloc_r+0x6c0>
 304bb38:	00815504 	movi	r2,1364
 304bb3c:	1100032e 	bgeu	r2,r4,304bb4c <_malloc_r+0x730>
 304bb40:	01001f84 	movi	r4,126
 304bb44:	00c0fc04 	movi	r3,1008
 304bb48:	003f6a06 	br	304b8f4 <_malloc_r+0x4d8>
 304bb4c:	2804d4ba 	srli	r2,r5,18
 304bb50:	11001f04 	addi	r4,r2,124
 304bb54:	200690fa 	slli	r3,r4,3
 304bb58:	003f6606 	br	304b8f4 <_malloc_r+0x4d8>

0304bb5c <memcpy>:
 304bb5c:	01c003c4 	movi	r7,15
 304bb60:	2007883a 	mov	r3,r4
 304bb64:	3980032e 	bgeu	r7,r6,304bb74 <memcpy+0x18>
 304bb68:	2904b03a 	or	r2,r5,r4
 304bb6c:	108000cc 	andi	r2,r2,3
 304bb70:	10000926 	beq	r2,zero,304bb98 <memcpy+0x3c>
 304bb74:	30000626 	beq	r6,zero,304bb90 <memcpy+0x34>
 304bb78:	30cd883a 	add	r6,r6,r3
 304bb7c:	28800003 	ldbu	r2,0(r5)
 304bb80:	29400044 	addi	r5,r5,1
 304bb84:	18800005 	stb	r2,0(r3)
 304bb88:	18c00044 	addi	r3,r3,1
 304bb8c:	30fffb1e 	bne	r6,r3,304bb7c <memcpy+0x20>
 304bb90:	2005883a 	mov	r2,r4
 304bb94:	f800283a 	ret
 304bb98:	3811883a 	mov	r8,r7
 304bb9c:	200f883a 	mov	r7,r4
 304bba0:	28c00017 	ldw	r3,0(r5)
 304bba4:	31bffc04 	addi	r6,r6,-16
 304bba8:	38c00015 	stw	r3,0(r7)
 304bbac:	28800117 	ldw	r2,4(r5)
 304bbb0:	38800115 	stw	r2,4(r7)
 304bbb4:	28c00217 	ldw	r3,8(r5)
 304bbb8:	38c00215 	stw	r3,8(r7)
 304bbbc:	28800317 	ldw	r2,12(r5)
 304bbc0:	29400404 	addi	r5,r5,16
 304bbc4:	38800315 	stw	r2,12(r7)
 304bbc8:	39c00404 	addi	r7,r7,16
 304bbcc:	41bff436 	bltu	r8,r6,304bba0 <memcpy+0x44>
 304bbd0:	008000c4 	movi	r2,3
 304bbd4:	1180072e 	bgeu	r2,r6,304bbf4 <memcpy+0x98>
 304bbd8:	1007883a 	mov	r3,r2
 304bbdc:	28800017 	ldw	r2,0(r5)
 304bbe0:	31bfff04 	addi	r6,r6,-4
 304bbe4:	29400104 	addi	r5,r5,4
 304bbe8:	38800015 	stw	r2,0(r7)
 304bbec:	39c00104 	addi	r7,r7,4
 304bbf0:	19bffa36 	bltu	r3,r6,304bbdc <memcpy+0x80>
 304bbf4:	3807883a 	mov	r3,r7
 304bbf8:	003fde06 	br	304bb74 <memcpy+0x18>

0304bbfc <memset>:
 304bbfc:	008000c4 	movi	r2,3
 304bc00:	29403fcc 	andi	r5,r5,255
 304bc04:	2007883a 	mov	r3,r4
 304bc08:	1180022e 	bgeu	r2,r6,304bc14 <memset+0x18>
 304bc0c:	2084703a 	and	r2,r4,r2
 304bc10:	10000826 	beq	r2,zero,304bc34 <memset+0x38>
 304bc14:	30000526 	beq	r6,zero,304bc2c <memset+0x30>
 304bc18:	2805883a 	mov	r2,r5
 304bc1c:	30cd883a 	add	r6,r6,r3
 304bc20:	18800005 	stb	r2,0(r3)
 304bc24:	18c00044 	addi	r3,r3,1
 304bc28:	19bffd1e 	bne	r3,r6,304bc20 <memset+0x24>
 304bc2c:	2005883a 	mov	r2,r4
 304bc30:	f800283a 	ret
 304bc34:	2804923a 	slli	r2,r5,8
 304bc38:	020003c4 	movi	r8,15
 304bc3c:	200f883a 	mov	r7,r4
 304bc40:	2884b03a 	or	r2,r5,r2
 304bc44:	1006943a 	slli	r3,r2,16
 304bc48:	10c6b03a 	or	r3,r2,r3
 304bc4c:	41800a2e 	bgeu	r8,r6,304bc78 <memset+0x7c>
 304bc50:	4005883a 	mov	r2,r8
 304bc54:	31bffc04 	addi	r6,r6,-16
 304bc58:	38c00015 	stw	r3,0(r7)
 304bc5c:	38c00115 	stw	r3,4(r7)
 304bc60:	38c00215 	stw	r3,8(r7)
 304bc64:	38c00315 	stw	r3,12(r7)
 304bc68:	39c00404 	addi	r7,r7,16
 304bc6c:	11bff936 	bltu	r2,r6,304bc54 <memset+0x58>
 304bc70:	008000c4 	movi	r2,3
 304bc74:	1180052e 	bgeu	r2,r6,304bc8c <memset+0x90>
 304bc78:	31bfff04 	addi	r6,r6,-4
 304bc7c:	008000c4 	movi	r2,3
 304bc80:	38c00015 	stw	r3,0(r7)
 304bc84:	39c00104 	addi	r7,r7,4
 304bc88:	11bffb36 	bltu	r2,r6,304bc78 <memset+0x7c>
 304bc8c:	3807883a 	mov	r3,r7
 304bc90:	003fe006 	br	304bc14 <memset+0x18>

0304bc94 <_open_r>:
 304bc94:	defffd04 	addi	sp,sp,-12
 304bc98:	dc000015 	stw	r16,0(sp)
 304bc9c:	0400c1b4 	movhi	r16,774
 304bca0:	8439ff04 	addi	r16,r16,-6148
 304bca4:	dc400115 	stw	r17,4(sp)
 304bca8:	80000015 	stw	zero,0(r16)
 304bcac:	2023883a 	mov	r17,r4
 304bcb0:	2809883a 	mov	r4,r5
 304bcb4:	300b883a 	mov	r5,r6
 304bcb8:	380d883a 	mov	r6,r7
 304bcbc:	dfc00215 	stw	ra,8(sp)
 304bcc0:	3053a600 	call	3053a60 <open>
 304bcc4:	1007883a 	mov	r3,r2
 304bcc8:	00bfffc4 	movi	r2,-1
 304bccc:	18800626 	beq	r3,r2,304bce8 <_open_r+0x54>
 304bcd0:	1805883a 	mov	r2,r3
 304bcd4:	dfc00217 	ldw	ra,8(sp)
 304bcd8:	dc400117 	ldw	r17,4(sp)
 304bcdc:	dc000017 	ldw	r16,0(sp)
 304bce0:	dec00304 	addi	sp,sp,12
 304bce4:	f800283a 	ret
 304bce8:	80800017 	ldw	r2,0(r16)
 304bcec:	103ff826 	beq	r2,zero,304bcd0 <_open_r+0x3c>
 304bcf0:	88800015 	stw	r2,0(r17)
 304bcf4:	1805883a 	mov	r2,r3
 304bcf8:	dfc00217 	ldw	ra,8(sp)
 304bcfc:	dc400117 	ldw	r17,4(sp)
 304bd00:	dc000017 	ldw	r16,0(sp)
 304bd04:	dec00304 	addi	sp,sp,12
 304bd08:	f800283a 	ret

0304bd0c <printf>:
 304bd0c:	defffb04 	addi	sp,sp,-20
 304bd10:	dfc00115 	stw	ra,4(sp)
 304bd14:	d9400215 	stw	r5,8(sp)
 304bd18:	d9800315 	stw	r6,12(sp)
 304bd1c:	d9c00415 	stw	r7,16(sp)
 304bd20:	0080c1b4 	movhi	r2,774
 304bd24:	10b28804 	addi	r2,r2,-13792
 304bd28:	10c00017 	ldw	r3,0(r2)
 304bd2c:	200b883a 	mov	r5,r4
 304bd30:	d8800204 	addi	r2,sp,8
 304bd34:	19000217 	ldw	r4,8(r3)
 304bd38:	100d883a 	mov	r6,r2
 304bd3c:	d8800015 	stw	r2,0(sp)
 304bd40:	304e2e00 	call	304e2e0 <__vfprintf_internal>
 304bd44:	dfc00117 	ldw	ra,4(sp)
 304bd48:	dec00504 	addi	sp,sp,20
 304bd4c:	f800283a 	ret

0304bd50 <_printf_r>:
 304bd50:	defffc04 	addi	sp,sp,-16
 304bd54:	dfc00115 	stw	ra,4(sp)
 304bd58:	d9800215 	stw	r6,8(sp)
 304bd5c:	d9c00315 	stw	r7,12(sp)
 304bd60:	280d883a 	mov	r6,r5
 304bd64:	21400217 	ldw	r5,8(r4)
 304bd68:	d8c00204 	addi	r3,sp,8
 304bd6c:	180f883a 	mov	r7,r3
 304bd70:	d8c00015 	stw	r3,0(sp)
 304bd74:	304c5900 	call	304c590 <___vfprintf_internal_r>
 304bd78:	dfc00117 	ldw	ra,4(sp)
 304bd7c:	dec00404 	addi	sp,sp,16
 304bd80:	f800283a 	ret

0304bd84 <putchar>:
 304bd84:	0080c1b4 	movhi	r2,774
 304bd88:	10b28804 	addi	r2,r2,-13792
 304bd8c:	11800017 	ldw	r6,0(r2)
 304bd90:	200b883a 	mov	r5,r4
 304bd94:	3009883a 	mov	r4,r6
 304bd98:	31800217 	ldw	r6,8(r6)
 304bd9c:	30517f01 	jmpi	30517f0 <_putc_r>

0304bda0 <_putchar_r>:
 304bda0:	21800217 	ldw	r6,8(r4)
 304bda4:	30517f01 	jmpi	30517f0 <_putc_r>

0304bda8 <_puts_r>:
 304bda8:	defff604 	addi	sp,sp,-40
 304bdac:	dc400715 	stw	r17,28(sp)
 304bdb0:	2023883a 	mov	r17,r4
 304bdb4:	2809883a 	mov	r4,r5
 304bdb8:	dfc00915 	stw	ra,36(sp)
 304bdbc:	dcc00815 	stw	r19,32(sp)
 304bdc0:	2827883a 	mov	r19,r5
 304bdc4:	304c4c40 	call	304c4c4 <strlen>
 304bdc8:	89400217 	ldw	r5,8(r17)
 304bdcc:	00c0c1b4 	movhi	r3,774
 304bdd0:	18ea1504 	addi	r3,r3,-22444
 304bdd4:	01c00044 	movi	r7,1
 304bdd8:	12000044 	addi	r8,r2,1
 304bddc:	d8c00515 	stw	r3,20(sp)
 304bde0:	d9c00615 	stw	r7,24(sp)
 304bde4:	d8c00304 	addi	r3,sp,12
 304bde8:	01c00084 	movi	r7,2
 304bdec:	8809883a 	mov	r4,r17
 304bdf0:	d80d883a 	mov	r6,sp
 304bdf4:	d8c00015 	stw	r3,0(sp)
 304bdf8:	dcc00315 	stw	r19,12(sp)
 304bdfc:	da000215 	stw	r8,8(sp)
 304be00:	d9c00115 	stw	r7,4(sp)
 304be04:	d8800415 	stw	r2,16(sp)
 304be08:	304fec40 	call	304fec4 <__sfvwrite_r>
 304be0c:	00ffffc4 	movi	r3,-1
 304be10:	10000626 	beq	r2,zero,304be2c <_puts_r+0x84>
 304be14:	1805883a 	mov	r2,r3
 304be18:	dfc00917 	ldw	ra,36(sp)
 304be1c:	dcc00817 	ldw	r19,32(sp)
 304be20:	dc400717 	ldw	r17,28(sp)
 304be24:	dec00a04 	addi	sp,sp,40
 304be28:	f800283a 	ret
 304be2c:	00c00284 	movi	r3,10
 304be30:	1805883a 	mov	r2,r3
 304be34:	dfc00917 	ldw	ra,36(sp)
 304be38:	dcc00817 	ldw	r19,32(sp)
 304be3c:	dc400717 	ldw	r17,28(sp)
 304be40:	dec00a04 	addi	sp,sp,40
 304be44:	f800283a 	ret

0304be48 <puts>:
 304be48:	0080c1b4 	movhi	r2,774
 304be4c:	10b28804 	addi	r2,r2,-13792
 304be50:	200b883a 	mov	r5,r4
 304be54:	11000017 	ldw	r4,0(r2)
 304be58:	304bda81 	jmpi	304bda8 <_puts_r>

0304be5c <__srefill_r>:
 304be5c:	defffd04 	addi	sp,sp,-12
 304be60:	dc400115 	stw	r17,4(sp)
 304be64:	dc000015 	stw	r16,0(sp)
 304be68:	dfc00215 	stw	ra,8(sp)
 304be6c:	2023883a 	mov	r17,r4
 304be70:	2821883a 	mov	r16,r5
 304be74:	20000226 	beq	r4,zero,304be80 <__srefill_r+0x24>
 304be78:	20800e17 	ldw	r2,56(r4)
 304be7c:	10004126 	beq	r2,zero,304bf84 <__srefill_r+0x128>
 304be80:	80c0030b 	ldhu	r3,12(r16)
 304be84:	80000115 	stw	zero,4(r16)
 304be88:	1880080c 	andi	r2,r3,32
 304be8c:	1000361e 	bne	r2,zero,304bf68 <__srefill_r+0x10c>
 304be90:	1880010c 	andi	r2,r3,4
 304be94:	1000211e 	bne	r2,zero,304bf1c <__srefill_r+0xc0>
 304be98:	1880040c 	andi	r2,r3,16
 304be9c:	10005026 	beq	r2,zero,304bfe0 <__srefill_r+0x184>
 304bea0:	1880020c 	andi	r2,r3,8
 304bea4:	1000541e 	bne	r2,zero,304bff8 <__srefill_r+0x19c>
 304bea8:	8080030b 	ldhu	r2,12(r16)
 304beac:	10800114 	ori	r2,r2,4
 304beb0:	8080030d 	sth	r2,12(r16)
 304beb4:	80800417 	ldw	r2,16(r16)
 304beb8:	10004526 	beq	r2,zero,304bfd0 <__srefill_r+0x174>
 304bebc:	8080030b 	ldhu	r2,12(r16)
 304bec0:	108000cc 	andi	r2,r2,3
 304bec4:	1000361e 	bne	r2,zero,304bfa0 <__srefill_r+0x144>
 304bec8:	81800417 	ldw	r6,16(r16)
 304becc:	80c00817 	ldw	r3,32(r16)
 304bed0:	81400717 	ldw	r5,28(r16)
 304bed4:	81c00517 	ldw	r7,20(r16)
 304bed8:	8809883a 	mov	r4,r17
 304bedc:	81800015 	stw	r6,0(r16)
 304bee0:	183ee83a 	callr	r3
 304bee4:	80c0030b 	ldhu	r3,12(r16)
 304bee8:	1009883a 	mov	r4,r2
 304beec:	80800115 	stw	r2,4(r16)
 304bef0:	00b7ffc4 	movi	r2,-8193
 304bef4:	1884703a 	and	r2,r3,r2
 304bef8:	8080030d 	sth	r2,12(r16)
 304befc:	0100230e 	bge	zero,r4,304bf8c <__srefill_r+0x130>
 304bf00:	0009883a 	mov	r4,zero
 304bf04:	2005883a 	mov	r2,r4
 304bf08:	dfc00217 	ldw	ra,8(sp)
 304bf0c:	dc400117 	ldw	r17,4(sp)
 304bf10:	dc000017 	ldw	r16,0(sp)
 304bf14:	dec00304 	addi	sp,sp,12
 304bf18:	f800283a 	ret
 304bf1c:	81400c17 	ldw	r5,48(r16)
 304bf20:	283fe426 	beq	r5,zero,304beb4 <__srefill_r+0x58>
 304bf24:	80801004 	addi	r2,r16,64
 304bf28:	28800226 	beq	r5,r2,304bf34 <__srefill_r+0xd8>
 304bf2c:	8809883a 	mov	r4,r17
 304bf30:	304a8140 	call	304a814 <_free_r>
 304bf34:	80800f17 	ldw	r2,60(r16)
 304bf38:	80000c15 	stw	zero,48(r16)
 304bf3c:	80800115 	stw	r2,4(r16)
 304bf40:	103fdc26 	beq	r2,zero,304beb4 <__srefill_r+0x58>
 304bf44:	80800e17 	ldw	r2,56(r16)
 304bf48:	0009883a 	mov	r4,zero
 304bf4c:	80800015 	stw	r2,0(r16)
 304bf50:	2005883a 	mov	r2,r4
 304bf54:	dfc00217 	ldw	ra,8(sp)
 304bf58:	dc400117 	ldw	r17,4(sp)
 304bf5c:	dc000017 	ldw	r16,0(sp)
 304bf60:	dec00304 	addi	sp,sp,12
 304bf64:	f800283a 	ret
 304bf68:	013fffc4 	movi	r4,-1
 304bf6c:	2005883a 	mov	r2,r4
 304bf70:	dfc00217 	ldw	ra,8(sp)
 304bf74:	dc400117 	ldw	r17,4(sp)
 304bf78:	dc000017 	ldw	r16,0(sp)
 304bf7c:	dec00304 	addi	sp,sp,12
 304bf80:	f800283a 	ret
 304bf84:	304a3800 	call	304a380 <__sinit>
 304bf88:	003fbd06 	br	304be80 <__srefill_r+0x24>
 304bf8c:	20000b1e 	bne	r4,zero,304bfbc <__srefill_r+0x160>
 304bf90:	10800814 	ori	r2,r2,32
 304bf94:	013fffc4 	movi	r4,-1
 304bf98:	8080030d 	sth	r2,12(r16)
 304bf9c:	003fd906 	br	304bf04 <__srefill_r+0xa8>
 304bfa0:	0080c1b4 	movhi	r2,774
 304bfa4:	10b28904 	addi	r2,r2,-13788
 304bfa8:	11000017 	ldw	r4,0(r2)
 304bfac:	0140c174 	movhi	r5,773
 304bfb0:	29700804 	addi	r5,r5,-16352
 304bfb4:	304b0c80 	call	304b0c8 <_fwalk>
 304bfb8:	003fc306 	br	304bec8 <__srefill_r+0x6c>
 304bfbc:	10801014 	ori	r2,r2,64
 304bfc0:	013fffc4 	movi	r4,-1
 304bfc4:	8080030d 	sth	r2,12(r16)
 304bfc8:	80000115 	stw	zero,4(r16)
 304bfcc:	003fcd06 	br	304bf04 <__srefill_r+0xa8>
 304bfd0:	8809883a 	mov	r4,r17
 304bfd4:	800b883a 	mov	r5,r16
 304bfd8:	304b2600 	call	304b260 <__smakebuf_r>
 304bfdc:	003fb706 	br	304bebc <__srefill_r+0x60>
 304bfe0:	18c01014 	ori	r3,r3,64
 304bfe4:	00800244 	movi	r2,9
 304bfe8:	013fffc4 	movi	r4,-1
 304bfec:	88800015 	stw	r2,0(r17)
 304bff0:	80c0030d 	sth	r3,12(r16)
 304bff4:	003fc306 	br	304bf04 <__srefill_r+0xa8>
 304bff8:	8809883a 	mov	r4,r17
 304bffc:	800b883a 	mov	r5,r16
 304c000:	304a0e80 	call	304a0e8 <_fflush_r>
 304c004:	103fd81e 	bne	r2,zero,304bf68 <__srefill_r+0x10c>
 304c008:	8080030b 	ldhu	r2,12(r16)
 304c00c:	80000215 	stw	zero,8(r16)
 304c010:	80000615 	stw	zero,24(r16)
 304c014:	10bffdcc 	andi	r2,r2,65527
 304c018:	8080030d 	sth	r2,12(r16)
 304c01c:	003fa206 	br	304bea8 <__srefill_r+0x4c>

0304c020 <lflush>:
 304c020:	20c0030b 	ldhu	r3,12(r4)
 304c024:	01400244 	movi	r5,9
 304c028:	0005883a 	mov	r2,zero
 304c02c:	18c0024c 	andi	r3,r3,9
 304c030:	19400126 	beq	r3,r5,304c038 <lflush+0x18>
 304c034:	f800283a 	ret
 304c038:	304a2e41 	jmpi	304a2e4 <fflush>

0304c03c <_sbrk_r>:
 304c03c:	defffd04 	addi	sp,sp,-12
 304c040:	dc000015 	stw	r16,0(sp)
 304c044:	0400c1b4 	movhi	r16,774
 304c048:	8439ff04 	addi	r16,r16,-6148
 304c04c:	dc400115 	stw	r17,4(sp)
 304c050:	80000015 	stw	zero,0(r16)
 304c054:	2023883a 	mov	r17,r4
 304c058:	2809883a 	mov	r4,r5
 304c05c:	dfc00215 	stw	ra,8(sp)
 304c060:	3053dec0 	call	3053dec <sbrk>
 304c064:	1007883a 	mov	r3,r2
 304c068:	00bfffc4 	movi	r2,-1
 304c06c:	18800626 	beq	r3,r2,304c088 <_sbrk_r+0x4c>
 304c070:	1805883a 	mov	r2,r3
 304c074:	dfc00217 	ldw	ra,8(sp)
 304c078:	dc400117 	ldw	r17,4(sp)
 304c07c:	dc000017 	ldw	r16,0(sp)
 304c080:	dec00304 	addi	sp,sp,12
 304c084:	f800283a 	ret
 304c088:	80800017 	ldw	r2,0(r16)
 304c08c:	103ff826 	beq	r2,zero,304c070 <_sbrk_r+0x34>
 304c090:	88800015 	stw	r2,0(r17)
 304c094:	1805883a 	mov	r2,r3
 304c098:	dfc00217 	ldw	ra,8(sp)
 304c09c:	dc400117 	ldw	r17,4(sp)
 304c0a0:	dc000017 	ldw	r16,0(sp)
 304c0a4:	dec00304 	addi	sp,sp,12
 304c0a8:	f800283a 	ret

0304c0ac <sprintf>:
 304c0ac:	deffe504 	addi	sp,sp,-108
 304c0b0:	2013883a 	mov	r9,r4
 304c0b4:	dfc01815 	stw	ra,96(sp)
 304c0b8:	d9801915 	stw	r6,100(sp)
 304c0bc:	d9c01a15 	stw	r7,104(sp)
 304c0c0:	d8801904 	addi	r2,sp,100
 304c0c4:	d8800015 	stw	r2,0(sp)
 304c0c8:	0080c1b4 	movhi	r2,774
 304c0cc:	10b28804 	addi	r2,r2,-13792
 304c0d0:	11000017 	ldw	r4,0(r2)
 304c0d4:	d9c00017 	ldw	r7,0(sp)
 304c0d8:	00808204 	movi	r2,520
 304c0dc:	00e00034 	movhi	r3,32768
 304c0e0:	18ffffc4 	addi	r3,r3,-1
 304c0e4:	280d883a 	mov	r6,r5
 304c0e8:	d880040d 	sth	r2,16(sp)
 304c0ec:	d9400104 	addi	r5,sp,4
 304c0f0:	00bfffc4 	movi	r2,-1
 304c0f4:	d8c00615 	stw	r3,24(sp)
 304c0f8:	d8c00315 	stw	r3,12(sp)
 304c0fc:	da400515 	stw	r9,20(sp)
 304c100:	d880048d 	sth	r2,18(sp)
 304c104:	da400115 	stw	r9,4(sp)
 304c108:	304c5900 	call	304c590 <___vfprintf_internal_r>
 304c10c:	d8c00117 	ldw	r3,4(sp)
 304c110:	18000005 	stb	zero,0(r3)
 304c114:	dfc01817 	ldw	ra,96(sp)
 304c118:	dec01b04 	addi	sp,sp,108
 304c11c:	f800283a 	ret

0304c120 <_sprintf_r>:
 304c120:	deffe604 	addi	sp,sp,-104
 304c124:	2813883a 	mov	r9,r5
 304c128:	dfc01815 	stw	ra,96(sp)
 304c12c:	d9c01915 	stw	r7,100(sp)
 304c130:	d8801904 	addi	r2,sp,100
 304c134:	d8800015 	stw	r2,0(sp)
 304c138:	100f883a 	mov	r7,r2
 304c13c:	00808204 	movi	r2,520
 304c140:	00e00034 	movhi	r3,32768
 304c144:	18ffffc4 	addi	r3,r3,-1
 304c148:	d880040d 	sth	r2,16(sp)
 304c14c:	d9400104 	addi	r5,sp,4
 304c150:	00bfffc4 	movi	r2,-1
 304c154:	d8c00615 	stw	r3,24(sp)
 304c158:	d8c00315 	stw	r3,12(sp)
 304c15c:	da400515 	stw	r9,20(sp)
 304c160:	d880048d 	sth	r2,18(sp)
 304c164:	da400115 	stw	r9,4(sp)
 304c168:	304c5900 	call	304c590 <___vfprintf_internal_r>
 304c16c:	d8c00117 	ldw	r3,4(sp)
 304c170:	18000005 	stb	zero,0(r3)
 304c174:	dfc01817 	ldw	ra,96(sp)
 304c178:	dec01a04 	addi	sp,sp,104
 304c17c:	f800283a 	ret

0304c180 <__sclose>:
 304c180:	2940038f 	ldh	r5,14(r5)
 304c184:	304e5ac1 	jmpi	304e5ac <_close_r>

0304c188 <__sseek>:
 304c188:	defffe04 	addi	sp,sp,-8
 304c18c:	dc000015 	stw	r16,0(sp)
 304c190:	2821883a 	mov	r16,r5
 304c194:	2940038f 	ldh	r5,14(r5)
 304c198:	dfc00115 	stw	ra,4(sp)
 304c19c:	30504940 	call	3050494 <_lseek_r>
 304c1a0:	1007883a 	mov	r3,r2
 304c1a4:	00bfffc4 	movi	r2,-1
 304c1a8:	18800926 	beq	r3,r2,304c1d0 <__sseek+0x48>
 304c1ac:	8080030b 	ldhu	r2,12(r16)
 304c1b0:	80c01415 	stw	r3,80(r16)
 304c1b4:	10840014 	ori	r2,r2,4096
 304c1b8:	8080030d 	sth	r2,12(r16)
 304c1bc:	1805883a 	mov	r2,r3
 304c1c0:	dfc00117 	ldw	ra,4(sp)
 304c1c4:	dc000017 	ldw	r16,0(sp)
 304c1c8:	dec00204 	addi	sp,sp,8
 304c1cc:	f800283a 	ret
 304c1d0:	8080030b 	ldhu	r2,12(r16)
 304c1d4:	10bbffcc 	andi	r2,r2,61439
 304c1d8:	8080030d 	sth	r2,12(r16)
 304c1dc:	1805883a 	mov	r2,r3
 304c1e0:	dfc00117 	ldw	ra,4(sp)
 304c1e4:	dc000017 	ldw	r16,0(sp)
 304c1e8:	dec00204 	addi	sp,sp,8
 304c1ec:	f800283a 	ret

0304c1f0 <__swrite>:
 304c1f0:	2880030b 	ldhu	r2,12(r5)
 304c1f4:	defffb04 	addi	sp,sp,-20
 304c1f8:	dcc00315 	stw	r19,12(sp)
 304c1fc:	1080400c 	andi	r2,r2,256
 304c200:	dc800215 	stw	r18,8(sp)
 304c204:	dc400115 	stw	r17,4(sp)
 304c208:	dc000015 	stw	r16,0(sp)
 304c20c:	3027883a 	mov	r19,r6
 304c210:	3825883a 	mov	r18,r7
 304c214:	dfc00415 	stw	ra,16(sp)
 304c218:	2821883a 	mov	r16,r5
 304c21c:	000d883a 	mov	r6,zero
 304c220:	01c00084 	movi	r7,2
 304c224:	2023883a 	mov	r17,r4
 304c228:	10000226 	beq	r2,zero,304c234 <__swrite+0x44>
 304c22c:	2940038f 	ldh	r5,14(r5)
 304c230:	30504940 	call	3050494 <_lseek_r>
 304c234:	8080030b 	ldhu	r2,12(r16)
 304c238:	8140038f 	ldh	r5,14(r16)
 304c23c:	8809883a 	mov	r4,r17
 304c240:	10bbffcc 	andi	r2,r2,61439
 304c244:	980d883a 	mov	r6,r19
 304c248:	900f883a 	mov	r7,r18
 304c24c:	8080030d 	sth	r2,12(r16)
 304c250:	dfc00417 	ldw	ra,16(sp)
 304c254:	dcc00317 	ldw	r19,12(sp)
 304c258:	dc800217 	ldw	r18,8(sp)
 304c25c:	dc400117 	ldw	r17,4(sp)
 304c260:	dc000017 	ldw	r16,0(sp)
 304c264:	dec00504 	addi	sp,sp,20
 304c268:	304e3f81 	jmpi	304e3f8 <_write_r>

0304c26c <__sread>:
 304c26c:	defffe04 	addi	sp,sp,-8
 304c270:	dc000015 	stw	r16,0(sp)
 304c274:	2821883a 	mov	r16,r5
 304c278:	2940038f 	ldh	r5,14(r5)
 304c27c:	dfc00115 	stw	ra,4(sp)
 304c280:	30518d80 	call	30518d8 <_read_r>
 304c284:	1007883a 	mov	r3,r2
 304c288:	10000816 	blt	r2,zero,304c2ac <__sread+0x40>
 304c28c:	80801417 	ldw	r2,80(r16)
 304c290:	10c5883a 	add	r2,r2,r3
 304c294:	80801415 	stw	r2,80(r16)
 304c298:	1805883a 	mov	r2,r3
 304c29c:	dfc00117 	ldw	ra,4(sp)
 304c2a0:	dc000017 	ldw	r16,0(sp)
 304c2a4:	dec00204 	addi	sp,sp,8
 304c2a8:	f800283a 	ret
 304c2ac:	8080030b 	ldhu	r2,12(r16)
 304c2b0:	10bbffcc 	andi	r2,r2,61439
 304c2b4:	8080030d 	sth	r2,12(r16)
 304c2b8:	1805883a 	mov	r2,r3
 304c2bc:	dfc00117 	ldw	ra,4(sp)
 304c2c0:	dc000017 	ldw	r16,0(sp)
 304c2c4:	dec00204 	addi	sp,sp,8
 304c2c8:	f800283a 	ret

0304c2cc <strcasecmp>:
 304c2cc:	20800007 	ldb	r2,0(r4)
 304c2d0:	10002726 	beq	r2,zero,304c370 <strcasecmp+0xa4>
 304c2d4:	0240c1b4 	movhi	r9,774
 304c2d8:	4a728c04 	addi	r9,r9,-13776
 304c2dc:	4a000017 	ldw	r8,0(r9)
 304c2e0:	4087883a 	add	r3,r8,r2
 304c2e4:	100f883a 	mov	r7,r2
 304c2e8:	18800003 	ldbu	r2,0(r3)
 304c2ec:	1080004c 	andi	r2,r2,1
 304c2f0:	1005003a 	cmpeq	r2,r2,zero
 304c2f4:	1000011e 	bne	r2,zero,304c2fc <strcasecmp+0x30>
 304c2f8:	39c00804 	addi	r7,r7,32
 304c2fc:	29800007 	ldb	r6,0(r5)
 304c300:	4187883a 	add	r3,r8,r6
 304c304:	18800003 	ldbu	r2,0(r3)
 304c308:	1080004c 	andi	r2,r2,1
 304c30c:	1005003a 	cmpeq	r2,r2,zero
 304c310:	1000011e 	bne	r2,zero,304c318 <strcasecmp+0x4c>
 304c314:	31800804 	addi	r6,r6,32
 304c318:	3980041e 	bne	r7,r6,304c32c <strcasecmp+0x60>
 304c31c:	21000044 	addi	r4,r4,1
 304c320:	20800007 	ldb	r2,0(r4)
 304c324:	29400044 	addi	r5,r5,1
 304c328:	103fed1e 	bne	r2,zero,304c2e0 <strcasecmp+0x14>
 304c32c:	21000003 	ldbu	r4,0(r4)
 304c330:	49800017 	ldw	r6,0(r9)
 304c334:	3107883a 	add	r3,r6,r4
 304c338:	18800003 	ldbu	r2,0(r3)
 304c33c:	1080004c 	andi	r2,r2,1
 304c340:	1005003a 	cmpeq	r2,r2,zero
 304c344:	1000011e 	bne	r2,zero,304c34c <strcasecmp+0x80>
 304c348:	21000804 	addi	r4,r4,32
 304c34c:	29400003 	ldbu	r5,0(r5)
 304c350:	3147883a 	add	r3,r6,r5
 304c354:	18800003 	ldbu	r2,0(r3)
 304c358:	1080004c 	andi	r2,r2,1
 304c35c:	1005003a 	cmpeq	r2,r2,zero
 304c360:	1000011e 	bne	r2,zero,304c368 <strcasecmp+0x9c>
 304c364:	29400804 	addi	r5,r5,32
 304c368:	2145c83a 	sub	r2,r4,r5
 304c36c:	f800283a 	ret
 304c370:	0240c1b4 	movhi	r9,774
 304c374:	4a728c04 	addi	r9,r9,-13776
 304c378:	003fec06 	br	304c32c <strcasecmp+0x60>

0304c37c <strcmp>:
 304c37c:	2144b03a 	or	r2,r4,r5
 304c380:	108000cc 	andi	r2,r2,3
 304c384:	10001d1e 	bne	r2,zero,304c3fc <strcmp+0x80>
 304c388:	200f883a 	mov	r7,r4
 304c38c:	28800017 	ldw	r2,0(r5)
 304c390:	21000017 	ldw	r4,0(r4)
 304c394:	280d883a 	mov	r6,r5
 304c398:	2080161e 	bne	r4,r2,304c3f4 <strcmp+0x78>
 304c39c:	023fbff4 	movhi	r8,65279
 304c3a0:	423fbfc4 	addi	r8,r8,-257
 304c3a4:	2207883a 	add	r3,r4,r8
 304c3a8:	01602074 	movhi	r5,32897
 304c3ac:	29602004 	addi	r5,r5,-32640
 304c3b0:	1946703a 	and	r3,r3,r5
 304c3b4:	0104303a 	nor	r2,zero,r4
 304c3b8:	10c4703a 	and	r2,r2,r3
 304c3bc:	10001c1e 	bne	r2,zero,304c430 <strcmp+0xb4>
 304c3c0:	4013883a 	mov	r9,r8
 304c3c4:	2811883a 	mov	r8,r5
 304c3c8:	00000106 	br	304c3d0 <strcmp+0x54>
 304c3cc:	1800181e 	bne	r3,zero,304c430 <strcmp+0xb4>
 304c3d0:	39c00104 	addi	r7,r7,4
 304c3d4:	39000017 	ldw	r4,0(r7)
 304c3d8:	31800104 	addi	r6,r6,4
 304c3dc:	31400017 	ldw	r5,0(r6)
 304c3e0:	2245883a 	add	r2,r4,r9
 304c3e4:	1204703a 	and	r2,r2,r8
 304c3e8:	0106303a 	nor	r3,zero,r4
 304c3ec:	1886703a 	and	r3,r3,r2
 304c3f0:	217ff626 	beq	r4,r5,304c3cc <strcmp+0x50>
 304c3f4:	3809883a 	mov	r4,r7
 304c3f8:	300b883a 	mov	r5,r6
 304c3fc:	20c00007 	ldb	r3,0(r4)
 304c400:	1800051e 	bne	r3,zero,304c418 <strcmp+0x9c>
 304c404:	00000606 	br	304c420 <strcmp+0xa4>
 304c408:	21000044 	addi	r4,r4,1
 304c40c:	20c00007 	ldb	r3,0(r4)
 304c410:	29400044 	addi	r5,r5,1
 304c414:	18000226 	beq	r3,zero,304c420 <strcmp+0xa4>
 304c418:	28800007 	ldb	r2,0(r5)
 304c41c:	18bffa26 	beq	r3,r2,304c408 <strcmp+0x8c>
 304c420:	20c00003 	ldbu	r3,0(r4)
 304c424:	28800003 	ldbu	r2,0(r5)
 304c428:	1885c83a 	sub	r2,r3,r2
 304c42c:	f800283a 	ret
 304c430:	0005883a 	mov	r2,zero
 304c434:	f800283a 	ret

0304c438 <strcpy>:
 304c438:	2904b03a 	or	r2,r5,r4
 304c43c:	108000cc 	andi	r2,r2,3
 304c440:	10000826 	beq	r2,zero,304c464 <strcpy+0x2c>
 304c444:	2007883a 	mov	r3,r4
 304c448:	28800003 	ldbu	r2,0(r5)
 304c44c:	29400044 	addi	r5,r5,1
 304c450:	18800005 	stb	r2,0(r3)
 304c454:	18c00044 	addi	r3,r3,1
 304c458:	103ffb1e 	bne	r2,zero,304c448 <strcpy+0x10>
 304c45c:	2005883a 	mov	r2,r4
 304c460:	f800283a 	ret
 304c464:	29800017 	ldw	r6,0(r5)
 304c468:	023fbff4 	movhi	r8,65279
 304c46c:	423fbfc4 	addi	r8,r8,-257
 304c470:	02a02074 	movhi	r10,32897
 304c474:	52a02004 	addi	r10,r10,-32640
 304c478:	3205883a 	add	r2,r6,r8
 304c47c:	0186303a 	nor	r3,zero,r6
 304c480:	10c4703a 	and	r2,r2,r3
 304c484:	1284703a 	and	r2,r2,r10
 304c488:	200f883a 	mov	r7,r4
 304c48c:	10000b1e 	bne	r2,zero,304c4bc <strcpy+0x84>
 304c490:	4013883a 	mov	r9,r8
 304c494:	5011883a 	mov	r8,r10
 304c498:	39800015 	stw	r6,0(r7)
 304c49c:	29400104 	addi	r5,r5,4
 304c4a0:	29800017 	ldw	r6,0(r5)
 304c4a4:	39c00104 	addi	r7,r7,4
 304c4a8:	3245883a 	add	r2,r6,r9
 304c4ac:	0186303a 	nor	r3,zero,r6
 304c4b0:	10c4703a 	and	r2,r2,r3
 304c4b4:	1204703a 	and	r2,r2,r8
 304c4b8:	103ff726 	beq	r2,zero,304c498 <strcpy+0x60>
 304c4bc:	3807883a 	mov	r3,r7
 304c4c0:	003fe106 	br	304c448 <strcpy+0x10>

0304c4c4 <strlen>:
 304c4c4:	208000cc 	andi	r2,r4,3
 304c4c8:	2011883a 	mov	r8,r4
 304c4cc:	1000161e 	bne	r2,zero,304c528 <strlen+0x64>
 304c4d0:	20c00017 	ldw	r3,0(r4)
 304c4d4:	017fbff4 	movhi	r5,65279
 304c4d8:	297fbfc4 	addi	r5,r5,-257
 304c4dc:	01e02074 	movhi	r7,32897
 304c4e0:	39e02004 	addi	r7,r7,-32640
 304c4e4:	1945883a 	add	r2,r3,r5
 304c4e8:	11c4703a 	and	r2,r2,r7
 304c4ec:	00c6303a 	nor	r3,zero,r3
 304c4f0:	1886703a 	and	r3,r3,r2
 304c4f4:	18000c1e 	bne	r3,zero,304c528 <strlen+0x64>
 304c4f8:	280d883a 	mov	r6,r5
 304c4fc:	380b883a 	mov	r5,r7
 304c500:	21000104 	addi	r4,r4,4
 304c504:	20800017 	ldw	r2,0(r4)
 304c508:	1187883a 	add	r3,r2,r6
 304c50c:	1946703a 	and	r3,r3,r5
 304c510:	0084303a 	nor	r2,zero,r2
 304c514:	10c4703a 	and	r2,r2,r3
 304c518:	103ff926 	beq	r2,zero,304c500 <strlen+0x3c>
 304c51c:	20800007 	ldb	r2,0(r4)
 304c520:	10000326 	beq	r2,zero,304c530 <strlen+0x6c>
 304c524:	21000044 	addi	r4,r4,1
 304c528:	20800007 	ldb	r2,0(r4)
 304c52c:	103ffd1e 	bne	r2,zero,304c524 <strlen+0x60>
 304c530:	2205c83a 	sub	r2,r4,r8
 304c534:	f800283a 	ret

0304c538 <__sprint_r>:
 304c538:	30800217 	ldw	r2,8(r6)
 304c53c:	defffe04 	addi	sp,sp,-8
 304c540:	dc000015 	stw	r16,0(sp)
 304c544:	dfc00115 	stw	ra,4(sp)
 304c548:	3021883a 	mov	r16,r6
 304c54c:	0007883a 	mov	r3,zero
 304c550:	1000061e 	bne	r2,zero,304c56c <__sprint_r+0x34>
 304c554:	1805883a 	mov	r2,r3
 304c558:	30000115 	stw	zero,4(r6)
 304c55c:	dfc00117 	ldw	ra,4(sp)
 304c560:	dc000017 	ldw	r16,0(sp)
 304c564:	dec00204 	addi	sp,sp,8
 304c568:	f800283a 	ret
 304c56c:	304fec40 	call	304fec4 <__sfvwrite_r>
 304c570:	1007883a 	mov	r3,r2
 304c574:	1805883a 	mov	r2,r3
 304c578:	80000115 	stw	zero,4(r16)
 304c57c:	80000215 	stw	zero,8(r16)
 304c580:	dfc00117 	ldw	ra,4(sp)
 304c584:	dc000017 	ldw	r16,0(sp)
 304c588:	dec00204 	addi	sp,sp,8
 304c58c:	f800283a 	ret

0304c590 <___vfprintf_internal_r>:
 304c590:	defea404 	addi	sp,sp,-1392
 304c594:	ddc15915 	stw	r23,1380(sp)
 304c598:	dd815815 	stw	r22,1376(sp)
 304c59c:	dc015215 	stw	r16,1352(sp)
 304c5a0:	d9c15115 	stw	r7,1348(sp)
 304c5a4:	dfc15b15 	stw	ra,1388(sp)
 304c5a8:	df015a15 	stw	fp,1384(sp)
 304c5ac:	dd415715 	stw	r21,1372(sp)
 304c5b0:	dd015615 	stw	r20,1368(sp)
 304c5b4:	dcc15515 	stw	r19,1364(sp)
 304c5b8:	dc815415 	stw	r18,1360(sp)
 304c5bc:	dc415315 	stw	r17,1356(sp)
 304c5c0:	282d883a 	mov	r22,r5
 304c5c4:	3021883a 	mov	r16,r6
 304c5c8:	202f883a 	mov	r23,r4
 304c5cc:	30503d80 	call	30503d8 <_localeconv_r>
 304c5d0:	10800017 	ldw	r2,0(r2)
 304c5d4:	d9c15117 	ldw	r7,1348(sp)
 304c5d8:	d8814915 	stw	r2,1316(sp)
 304c5dc:	b8000226 	beq	r23,zero,304c5e8 <___vfprintf_internal_r+0x58>
 304c5e0:	b8800e17 	ldw	r2,56(r23)
 304c5e4:	10021926 	beq	r2,zero,304ce4c <___vfprintf_internal_r+0x8bc>
 304c5e8:	b080030b 	ldhu	r2,12(r22)
 304c5ec:	1080020c 	andi	r2,r2,8
 304c5f0:	10021a26 	beq	r2,zero,304ce5c <___vfprintf_internal_r+0x8cc>
 304c5f4:	b0800417 	ldw	r2,16(r22)
 304c5f8:	10021826 	beq	r2,zero,304ce5c <___vfprintf_internal_r+0x8cc>
 304c5fc:	b200030b 	ldhu	r8,12(r22)
 304c600:	00800284 	movi	r2,10
 304c604:	40c0068c 	andi	r3,r8,26
 304c608:	18802f1e 	bne	r3,r2,304c6c8 <___vfprintf_internal_r+0x138>
 304c60c:	b080038f 	ldh	r2,14(r22)
 304c610:	10002d16 	blt	r2,zero,304c6c8 <___vfprintf_internal_r+0x138>
 304c614:	b240038b 	ldhu	r9,14(r22)
 304c618:	b2800717 	ldw	r10,28(r22)
 304c61c:	b2c00917 	ldw	r11,36(r22)
 304c620:	dc402904 	addi	r17,sp,164
 304c624:	d8804004 	addi	r2,sp,256
 304c628:	00c10004 	movi	r3,1024
 304c62c:	423fff4c 	andi	r8,r8,65533
 304c630:	800d883a 	mov	r6,r16
 304c634:	b809883a 	mov	r4,r23
 304c638:	880b883a 	mov	r5,r17
 304c63c:	da002c0d 	sth	r8,176(sp)
 304c640:	da402c8d 	sth	r9,178(sp)
 304c644:	da803015 	stw	r10,192(sp)
 304c648:	dac03215 	stw	r11,200(sp)
 304c64c:	d8802d15 	stw	r2,180(sp)
 304c650:	d8c02e15 	stw	r3,184(sp)
 304c654:	d8802915 	stw	r2,164(sp)
 304c658:	d8c02b15 	stw	r3,172(sp)
 304c65c:	d8002f15 	stw	zero,188(sp)
 304c660:	304c5900 	call	304c590 <___vfprintf_internal_r>
 304c664:	d8814b15 	stw	r2,1324(sp)
 304c668:	10000416 	blt	r2,zero,304c67c <___vfprintf_internal_r+0xec>
 304c66c:	b809883a 	mov	r4,r23
 304c670:	880b883a 	mov	r5,r17
 304c674:	304a0e80 	call	304a0e8 <_fflush_r>
 304c678:	10023e1e 	bne	r2,zero,304cf74 <___vfprintf_internal_r+0x9e4>
 304c67c:	d8802c0b 	ldhu	r2,176(sp)
 304c680:	1080100c 	andi	r2,r2,64
 304c684:	10000326 	beq	r2,zero,304c694 <___vfprintf_internal_r+0x104>
 304c688:	b080030b 	ldhu	r2,12(r22)
 304c68c:	10801014 	ori	r2,r2,64
 304c690:	b080030d 	sth	r2,12(r22)
 304c694:	d8814b17 	ldw	r2,1324(sp)
 304c698:	dfc15b17 	ldw	ra,1388(sp)
 304c69c:	df015a17 	ldw	fp,1384(sp)
 304c6a0:	ddc15917 	ldw	r23,1380(sp)
 304c6a4:	dd815817 	ldw	r22,1376(sp)
 304c6a8:	dd415717 	ldw	r21,1372(sp)
 304c6ac:	dd015617 	ldw	r20,1368(sp)
 304c6b0:	dcc15517 	ldw	r19,1364(sp)
 304c6b4:	dc815417 	ldw	r18,1360(sp)
 304c6b8:	dc415317 	ldw	r17,1356(sp)
 304c6bc:	dc015217 	ldw	r16,1352(sp)
 304c6c0:	dec15c04 	addi	sp,sp,1392
 304c6c4:	f800283a 	ret
 304c6c8:	0005883a 	mov	r2,zero
 304c6cc:	0007883a 	mov	r3,zero
 304c6d0:	dd001904 	addi	r20,sp,100
 304c6d4:	d8814215 	stw	r2,1288(sp)
 304c6d8:	dc014e15 	stw	r16,1336(sp)
 304c6dc:	d8c14315 	stw	r3,1292(sp)
 304c6e0:	d8014b15 	stw	zero,1324(sp)
 304c6e4:	d8014815 	stw	zero,1312(sp)
 304c6e8:	d8014415 	stw	zero,1296(sp)
 304c6ec:	d8014715 	stw	zero,1308(sp)
 304c6f0:	dd000c15 	stw	r20,48(sp)
 304c6f4:	d8000e15 	stw	zero,56(sp)
 304c6f8:	d8000d15 	stw	zero,52(sp)
 304c6fc:	d9014e17 	ldw	r4,1336(sp)
 304c700:	20800007 	ldb	r2,0(r4)
 304c704:	10001b26 	beq	r2,zero,304c774 <___vfprintf_internal_r+0x1e4>
 304c708:	00c00944 	movi	r3,37
 304c70c:	10c01926 	beq	r2,r3,304c774 <___vfprintf_internal_r+0x1e4>
 304c710:	2021883a 	mov	r16,r4
 304c714:	00000106 	br	304c71c <___vfprintf_internal_r+0x18c>
 304c718:	10c15926 	beq	r2,r3,304cc80 <___vfprintf_internal_r+0x6f0>
 304c71c:	84000044 	addi	r16,r16,1
 304c720:	80800007 	ldb	r2,0(r16)
 304c724:	103ffc1e 	bne	r2,zero,304c718 <___vfprintf_internal_r+0x188>
 304c728:	d8c14e17 	ldw	r3,1336(sp)
 304c72c:	80e7c83a 	sub	r19,r16,r3
 304c730:	98000f26 	beq	r19,zero,304c770 <___vfprintf_internal_r+0x1e0>
 304c734:	dc800e17 	ldw	r18,56(sp)
 304c738:	dc400d17 	ldw	r17,52(sp)
 304c73c:	d8814e17 	ldw	r2,1336(sp)
 304c740:	94e5883a 	add	r18,r18,r19
 304c744:	8c400044 	addi	r17,r17,1
 304c748:	a0800015 	stw	r2,0(r20)
 304c74c:	008001c4 	movi	r2,7
 304c750:	dc800e15 	stw	r18,56(sp)
 304c754:	a4c00115 	stw	r19,4(r20)
 304c758:	dc400d15 	stw	r17,52(sp)
 304c75c:	14428616 	blt	r2,r17,304d178 <___vfprintf_internal_r+0xbe8>
 304c760:	a5000204 	addi	r20,r20,8
 304c764:	d8c14b17 	ldw	r3,1324(sp)
 304c768:	1cc7883a 	add	r3,r3,r19
 304c76c:	d8c14b15 	stw	r3,1324(sp)
 304c770:	dc014e15 	stw	r16,1336(sp)
 304c774:	d9014e17 	ldw	r4,1336(sp)
 304c778:	20800007 	ldb	r2,0(r4)
 304c77c:	10014326 	beq	r2,zero,304cc8c <___vfprintf_internal_r+0x6fc>
 304c780:	21000044 	addi	r4,r4,1
 304c784:	d9014e15 	stw	r4,1336(sp)
 304c788:	d8014c15 	stw	zero,1328(sp)
 304c78c:	d8014a15 	stw	zero,1320(sp)
 304c790:	04ffffc4 	movi	r19,-1
 304c794:	d8000405 	stb	zero,16(sp)
 304c798:	d9414e17 	ldw	r5,1336(sp)
 304c79c:	d8814e17 	ldw	r2,1336(sp)
 304c7a0:	29400007 	ldb	r5,0(r5)
 304c7a4:	10800044 	addi	r2,r2,1
 304c7a8:	d8814e15 	stw	r2,1336(sp)
 304c7ac:	d9414d15 	stw	r5,1332(sp)
 304c7b0:	d9014d17 	ldw	r4,1332(sp)
 304c7b4:	00801604 	movi	r2,88
 304c7b8:	20fff804 	addi	r3,r4,-32
 304c7bc:	10c06036 	bltu	r2,r3,304c940 <___vfprintf_internal_r+0x3b0>
 304c7c0:	18c5883a 	add	r2,r3,r3
 304c7c4:	1085883a 	add	r2,r2,r2
 304c7c8:	00c0c174 	movhi	r3,773
 304c7cc:	18f1f704 	addi	r3,r3,-14372
 304c7d0:	10c5883a 	add	r2,r2,r3
 304c7d4:	11000017 	ldw	r4,0(r2)
 304c7d8:	2000683a 	jmp	r4
 304c7dc:	0304d6c8 	cmpgei	r12,zero,4955
 304c7e0:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c7e4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c7e8:	0304d6b8 	rdprs	r12,zero,4954
 304c7ec:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c7f0:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c7f4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c7f8:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c7fc:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c800:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c804:	0304d4e8 	cmpgeui	r12,zero,4947
 304c808:	0304d6ac 	andhi	r12,zero,4954
 304c80c:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c810:	0304d500 	call	304d50 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb2b0>
 304c814:	0304d77c 	xorhi	r12,zero,4957
 304c818:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c81c:	0304d76c 	andhi	r12,zero,4957
 304c820:	0304d728 	cmpgeui	r12,zero,4956
 304c824:	0304d728 	cmpgeui	r12,zero,4956
 304c828:	0304d728 	cmpgeui	r12,zero,4956
 304c82c:	0304d728 	cmpgeui	r12,zero,4956
 304c830:	0304d728 	cmpgeui	r12,zero,4956
 304c834:	0304d728 	cmpgeui	r12,zero,4956
 304c838:	0304d728 	cmpgeui	r12,zero,4956
 304c83c:	0304d728 	cmpgeui	r12,zero,4956
 304c840:	0304d728 	cmpgeui	r12,zero,4956
 304c844:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c848:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c84c:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c850:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c854:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c858:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c85c:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c860:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c864:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c868:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c86c:	0304cfa8 	cmpgeui	r12,zero,4926
 304c870:	0304d624 	muli	r12,zero,4952
 304c874:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c878:	0304d624 	muli	r12,zero,4952
 304c87c:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c880:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c884:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c888:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c88c:	0304d6dc 	xori	r12,zero,4955
 304c890:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c894:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c898:	0304d044 	movi	r12,4929
 304c89c:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8a0:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8a4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8a8:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8ac:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8b0:	0304d080 	call	304d08 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb2f8>
 304c8b4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8b8:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8bc:	0304d718 	cmpnei	r12,zero,4956
 304c8c0:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8c4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8c8:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8cc:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8d0:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8d4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8d8:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8dc:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8e0:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8e4:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c8e8:	0304d6ec 	andhi	r12,zero,4955
 304c8ec:	0304cfb4 	movhi	r12,4926
 304c8f0:	0304d624 	muli	r12,zero,4952
 304c8f4:	0304d624 	muli	r12,zero,4952
 304c8f8:	0304d624 	muli	r12,zero,4952
 304c8fc:	0304d614 	movui	r12,4952
 304c900:	0304cfb4 	movhi	r12,4926
 304c904:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c908:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c90c:	0304d544 	movi	r12,4949
 304c910:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c914:	0304d510 	cmplti	r12,zero,4948
 304c918:	0304d050 	cmplti	r12,zero,4929
 304c91c:	0304d564 	muli	r12,zero,4949
 304c920:	0304d554 	movui	r12,4949
 304c924:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c928:	0304d7e8 	cmpgeui	r12,zero,4959
 304c92c:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c930:	0304d08c 	andi	r12,zero,4930
 304c934:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c938:	0304c940 	call	304c94 <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb36c>
 304c93c:	0304d5ac 	andhi	r12,zero,4950
 304c940:	d9414d17 	ldw	r5,1332(sp)
 304c944:	2800d126 	beq	r5,zero,304cc8c <___vfprintf_internal_r+0x6fc>
 304c948:	00800044 	movi	r2,1
 304c94c:	d8c00f04 	addi	r3,sp,60
 304c950:	d9c14015 	stw	r7,1280(sp)
 304c954:	d8814515 	stw	r2,1300(sp)
 304c958:	d8c14115 	stw	r3,1284(sp)
 304c95c:	100f883a 	mov	r7,r2
 304c960:	d9400f05 	stb	r5,60(sp)
 304c964:	d8000405 	stb	zero,16(sp)
 304c968:	d8014615 	stw	zero,1304(sp)
 304c96c:	d9414c17 	ldw	r5,1328(sp)
 304c970:	2880008c 	andi	r2,r5,2
 304c974:	1005003a 	cmpeq	r2,r2,zero
 304c978:	d8815015 	stw	r2,1344(sp)
 304c97c:	1000031e 	bne	r2,zero,304c98c <___vfprintf_internal_r+0x3fc>
 304c980:	d8814517 	ldw	r2,1300(sp)
 304c984:	10800084 	addi	r2,r2,2
 304c988:	d8814515 	stw	r2,1300(sp)
 304c98c:	d8c14c17 	ldw	r3,1328(sp)
 304c990:	18c0210c 	andi	r3,r3,132
 304c994:	d8c14f15 	stw	r3,1340(sp)
 304c998:	18002d1e 	bne	r3,zero,304ca50 <___vfprintf_internal_r+0x4c0>
 304c99c:	d9014a17 	ldw	r4,1320(sp)
 304c9a0:	d9414517 	ldw	r5,1300(sp)
 304c9a4:	2161c83a 	sub	r16,r4,r5
 304c9a8:	0400290e 	bge	zero,r16,304ca50 <___vfprintf_internal_r+0x4c0>
 304c9ac:	00800404 	movi	r2,16
 304c9b0:	14042c0e 	bge	r2,r16,304da64 <___vfprintf_internal_r+0x14d4>
 304c9b4:	dc800e17 	ldw	r18,56(sp)
 304c9b8:	dc400d17 	ldw	r17,52(sp)
 304c9bc:	1027883a 	mov	r19,r2
 304c9c0:	0700c1b4 	movhi	fp,774
 304c9c4:	e72a3184 	addi	fp,fp,-22330
 304c9c8:	054001c4 	movi	r21,7
 304c9cc:	00000306 	br	304c9dc <___vfprintf_internal_r+0x44c>
 304c9d0:	843ffc04 	addi	r16,r16,-16
 304c9d4:	a5000204 	addi	r20,r20,8
 304c9d8:	9c00130e 	bge	r19,r16,304ca28 <___vfprintf_internal_r+0x498>
 304c9dc:	94800404 	addi	r18,r18,16
 304c9e0:	8c400044 	addi	r17,r17,1
 304c9e4:	a7000015 	stw	fp,0(r20)
 304c9e8:	a4c00115 	stw	r19,4(r20)
 304c9ec:	dc800e15 	stw	r18,56(sp)
 304c9f0:	dc400d15 	stw	r17,52(sp)
 304c9f4:	ac7ff60e 	bge	r21,r17,304c9d0 <___vfprintf_internal_r+0x440>
 304c9f8:	b809883a 	mov	r4,r23
 304c9fc:	b00b883a 	mov	r5,r22
 304ca00:	d9800c04 	addi	r6,sp,48
 304ca04:	d9c15115 	stw	r7,1348(sp)
 304ca08:	304c5380 	call	304c538 <__sprint_r>
 304ca0c:	d9c15117 	ldw	r7,1348(sp)
 304ca10:	1000a11e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304ca14:	843ffc04 	addi	r16,r16,-16
 304ca18:	dc800e17 	ldw	r18,56(sp)
 304ca1c:	dc400d17 	ldw	r17,52(sp)
 304ca20:	dd001904 	addi	r20,sp,100
 304ca24:	9c3fed16 	blt	r19,r16,304c9dc <___vfprintf_internal_r+0x44c>
 304ca28:	9425883a 	add	r18,r18,r16
 304ca2c:	8c400044 	addi	r17,r17,1
 304ca30:	008001c4 	movi	r2,7
 304ca34:	a7000015 	stw	fp,0(r20)
 304ca38:	a4000115 	stw	r16,4(r20)
 304ca3c:	dc800e15 	stw	r18,56(sp)
 304ca40:	dc400d15 	stw	r17,52(sp)
 304ca44:	1441eb16 	blt	r2,r17,304d1f4 <___vfprintf_internal_r+0xc64>
 304ca48:	a5000204 	addi	r20,r20,8
 304ca4c:	00000206 	br	304ca58 <___vfprintf_internal_r+0x4c8>
 304ca50:	dc800e17 	ldw	r18,56(sp)
 304ca54:	dc400d17 	ldw	r17,52(sp)
 304ca58:	d8800407 	ldb	r2,16(sp)
 304ca5c:	10000b26 	beq	r2,zero,304ca8c <___vfprintf_internal_r+0x4fc>
 304ca60:	00800044 	movi	r2,1
 304ca64:	a0800115 	stw	r2,4(r20)
 304ca68:	d8800404 	addi	r2,sp,16
 304ca6c:	94800044 	addi	r18,r18,1
 304ca70:	8c400044 	addi	r17,r17,1
 304ca74:	a0800015 	stw	r2,0(r20)
 304ca78:	008001c4 	movi	r2,7
 304ca7c:	dc800e15 	stw	r18,56(sp)
 304ca80:	dc400d15 	stw	r17,52(sp)
 304ca84:	1441d016 	blt	r2,r17,304d1c8 <___vfprintf_internal_r+0xc38>
 304ca88:	a5000204 	addi	r20,r20,8
 304ca8c:	d8c15017 	ldw	r3,1344(sp)
 304ca90:	18000b1e 	bne	r3,zero,304cac0 <___vfprintf_internal_r+0x530>
 304ca94:	d8800444 	addi	r2,sp,17
 304ca98:	94800084 	addi	r18,r18,2
 304ca9c:	8c400044 	addi	r17,r17,1
 304caa0:	a0800015 	stw	r2,0(r20)
 304caa4:	00c00084 	movi	r3,2
 304caa8:	008001c4 	movi	r2,7
 304caac:	a0c00115 	stw	r3,4(r20)
 304cab0:	dc800e15 	stw	r18,56(sp)
 304cab4:	dc400d15 	stw	r17,52(sp)
 304cab8:	1441b816 	blt	r2,r17,304d19c <___vfprintf_internal_r+0xc0c>
 304cabc:	a5000204 	addi	r20,r20,8
 304cac0:	d9014f17 	ldw	r4,1340(sp)
 304cac4:	00802004 	movi	r2,128
 304cac8:	2080b526 	beq	r4,r2,304cda0 <___vfprintf_internal_r+0x810>
 304cacc:	d8c14617 	ldw	r3,1304(sp)
 304cad0:	19e1c83a 	sub	r16,r3,r7
 304cad4:	0400260e 	bge	zero,r16,304cb70 <___vfprintf_internal_r+0x5e0>
 304cad8:	00800404 	movi	r2,16
 304cadc:	1403c20e 	bge	r2,r16,304d9e8 <___vfprintf_internal_r+0x1458>
 304cae0:	1027883a 	mov	r19,r2
 304cae4:	0700c1b4 	movhi	fp,774
 304cae8:	e72a2d84 	addi	fp,fp,-22346
 304caec:	054001c4 	movi	r21,7
 304caf0:	00000306 	br	304cb00 <___vfprintf_internal_r+0x570>
 304caf4:	843ffc04 	addi	r16,r16,-16
 304caf8:	a5000204 	addi	r20,r20,8
 304cafc:	9c00130e 	bge	r19,r16,304cb4c <___vfprintf_internal_r+0x5bc>
 304cb00:	94800404 	addi	r18,r18,16
 304cb04:	8c400044 	addi	r17,r17,1
 304cb08:	a7000015 	stw	fp,0(r20)
 304cb0c:	a4c00115 	stw	r19,4(r20)
 304cb10:	dc800e15 	stw	r18,56(sp)
 304cb14:	dc400d15 	stw	r17,52(sp)
 304cb18:	ac7ff60e 	bge	r21,r17,304caf4 <___vfprintf_internal_r+0x564>
 304cb1c:	b809883a 	mov	r4,r23
 304cb20:	b00b883a 	mov	r5,r22
 304cb24:	d9800c04 	addi	r6,sp,48
 304cb28:	d9c15115 	stw	r7,1348(sp)
 304cb2c:	304c5380 	call	304c538 <__sprint_r>
 304cb30:	d9c15117 	ldw	r7,1348(sp)
 304cb34:	1000581e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304cb38:	843ffc04 	addi	r16,r16,-16
 304cb3c:	dc800e17 	ldw	r18,56(sp)
 304cb40:	dc400d17 	ldw	r17,52(sp)
 304cb44:	dd001904 	addi	r20,sp,100
 304cb48:	9c3fed16 	blt	r19,r16,304cb00 <___vfprintf_internal_r+0x570>
 304cb4c:	9425883a 	add	r18,r18,r16
 304cb50:	8c400044 	addi	r17,r17,1
 304cb54:	008001c4 	movi	r2,7
 304cb58:	a7000015 	stw	fp,0(r20)
 304cb5c:	a4000115 	stw	r16,4(r20)
 304cb60:	dc800e15 	stw	r18,56(sp)
 304cb64:	dc400d15 	stw	r17,52(sp)
 304cb68:	14417816 	blt	r2,r17,304d14c <___vfprintf_internal_r+0xbbc>
 304cb6c:	a5000204 	addi	r20,r20,8
 304cb70:	d9014c17 	ldw	r4,1328(sp)
 304cb74:	2080400c 	andi	r2,r4,256
 304cb78:	10004d1e 	bne	r2,zero,304ccb0 <___vfprintf_internal_r+0x720>
 304cb7c:	d9414117 	ldw	r5,1284(sp)
 304cb80:	91e5883a 	add	r18,r18,r7
 304cb84:	8c400044 	addi	r17,r17,1
 304cb88:	008001c4 	movi	r2,7
 304cb8c:	a1400015 	stw	r5,0(r20)
 304cb90:	a1c00115 	stw	r7,4(r20)
 304cb94:	dc800e15 	stw	r18,56(sp)
 304cb98:	dc400d15 	stw	r17,52(sp)
 304cb9c:	14415d16 	blt	r2,r17,304d114 <___vfprintf_internal_r+0xb84>
 304cba0:	a0c00204 	addi	r3,r20,8
 304cba4:	d9014c17 	ldw	r4,1328(sp)
 304cba8:	2080010c 	andi	r2,r4,4
 304cbac:	10002826 	beq	r2,zero,304cc50 <___vfprintf_internal_r+0x6c0>
 304cbb0:	d9414a17 	ldw	r5,1320(sp)
 304cbb4:	d8814517 	ldw	r2,1300(sp)
 304cbb8:	28a1c83a 	sub	r16,r5,r2
 304cbbc:	0400240e 	bge	zero,r16,304cc50 <___vfprintf_internal_r+0x6c0>
 304cbc0:	00800404 	movi	r2,16
 304cbc4:	14040a0e 	bge	r2,r16,304dbf0 <___vfprintf_internal_r+0x1660>
 304cbc8:	dc400d17 	ldw	r17,52(sp)
 304cbcc:	1027883a 	mov	r19,r2
 304cbd0:	0700c1b4 	movhi	fp,774
 304cbd4:	e72a3184 	addi	fp,fp,-22330
 304cbd8:	050001c4 	movi	r20,7
 304cbdc:	00000306 	br	304cbec <___vfprintf_internal_r+0x65c>
 304cbe0:	843ffc04 	addi	r16,r16,-16
 304cbe4:	18c00204 	addi	r3,r3,8
 304cbe8:	9c00110e 	bge	r19,r16,304cc30 <___vfprintf_internal_r+0x6a0>
 304cbec:	94800404 	addi	r18,r18,16
 304cbf0:	8c400044 	addi	r17,r17,1
 304cbf4:	1f000015 	stw	fp,0(r3)
 304cbf8:	1cc00115 	stw	r19,4(r3)
 304cbfc:	dc800e15 	stw	r18,56(sp)
 304cc00:	dc400d15 	stw	r17,52(sp)
 304cc04:	a47ff60e 	bge	r20,r17,304cbe0 <___vfprintf_internal_r+0x650>
 304cc08:	b809883a 	mov	r4,r23
 304cc0c:	b00b883a 	mov	r5,r22
 304cc10:	d9800c04 	addi	r6,sp,48
 304cc14:	304c5380 	call	304c538 <__sprint_r>
 304cc18:	10001f1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304cc1c:	843ffc04 	addi	r16,r16,-16
 304cc20:	dc800e17 	ldw	r18,56(sp)
 304cc24:	dc400d17 	ldw	r17,52(sp)
 304cc28:	d8c01904 	addi	r3,sp,100
 304cc2c:	9c3fef16 	blt	r19,r16,304cbec <___vfprintf_internal_r+0x65c>
 304cc30:	9425883a 	add	r18,r18,r16
 304cc34:	8c400044 	addi	r17,r17,1
 304cc38:	008001c4 	movi	r2,7
 304cc3c:	1f000015 	stw	fp,0(r3)
 304cc40:	1c000115 	stw	r16,4(r3)
 304cc44:	dc800e15 	stw	r18,56(sp)
 304cc48:	dc400d15 	stw	r17,52(sp)
 304cc4c:	1440cf16 	blt	r2,r17,304cf8c <___vfprintf_internal_r+0x9fc>
 304cc50:	d8814a17 	ldw	r2,1320(sp)
 304cc54:	d8c14517 	ldw	r3,1300(sp)
 304cc58:	10c0010e 	bge	r2,r3,304cc60 <___vfprintf_internal_r+0x6d0>
 304cc5c:	1805883a 	mov	r2,r3
 304cc60:	d9014b17 	ldw	r4,1324(sp)
 304cc64:	2089883a 	add	r4,r4,r2
 304cc68:	d9014b15 	stw	r4,1324(sp)
 304cc6c:	9001311e 	bne	r18,zero,304d134 <___vfprintf_internal_r+0xba4>
 304cc70:	d9c14017 	ldw	r7,1280(sp)
 304cc74:	dd001904 	addi	r20,sp,100
 304cc78:	d8000d15 	stw	zero,52(sp)
 304cc7c:	003e9f06 	br	304c6fc <___vfprintf_internal_r+0x16c>
 304cc80:	d9414e17 	ldw	r5,1336(sp)
 304cc84:	8167c83a 	sub	r19,r16,r5
 304cc88:	003ea906 	br	304c730 <___vfprintf_internal_r+0x1a0>
 304cc8c:	d8800e17 	ldw	r2,56(sp)
 304cc90:	1004641e 	bne	r2,zero,304de24 <___vfprintf_internal_r+0x1894>
 304cc94:	d8000d15 	stw	zero,52(sp)
 304cc98:	b080030b 	ldhu	r2,12(r22)
 304cc9c:	1080100c 	andi	r2,r2,64
 304cca0:	103e7c26 	beq	r2,zero,304c694 <___vfprintf_internal_r+0x104>
 304cca4:	017fffc4 	movi	r5,-1
 304cca8:	d9414b15 	stw	r5,1324(sp)
 304ccac:	003e7906 	br	304c694 <___vfprintf_internal_r+0x104>
 304ccb0:	d8c14d17 	ldw	r3,1332(sp)
 304ccb4:	00801944 	movi	r2,101
 304ccb8:	10c06f16 	blt	r2,r3,304ce78 <___vfprintf_internal_r+0x8e8>
 304ccbc:	d9414717 	ldw	r5,1308(sp)
 304ccc0:	00c00044 	movi	r3,1
 304ccc4:	1943390e 	bge	r3,r5,304d9ac <___vfprintf_internal_r+0x141c>
 304ccc8:	d9414117 	ldw	r5,1284(sp)
 304cccc:	94800044 	addi	r18,r18,1
 304ccd0:	8c400044 	addi	r17,r17,1
 304ccd4:	008001c4 	movi	r2,7
 304ccd8:	a0c00115 	stw	r3,4(r20)
 304ccdc:	a1400015 	stw	r5,0(r20)
 304cce0:	dc800e15 	stw	r18,56(sp)
 304cce4:	dc400d15 	stw	r17,52(sp)
 304cce8:	1441bd16 	blt	r2,r17,304d3e0 <___vfprintf_internal_r+0xe50>
 304ccec:	a0c00204 	addi	r3,r20,8
 304ccf0:	00800044 	movi	r2,1
 304ccf4:	18800115 	stw	r2,4(r3)
 304ccf8:	d8814917 	ldw	r2,1316(sp)
 304ccfc:	94800044 	addi	r18,r18,1
 304cd00:	8c400044 	addi	r17,r17,1
 304cd04:	18800015 	stw	r2,0(r3)
 304cd08:	008001c4 	movi	r2,7
 304cd0c:	dc800e15 	stw	r18,56(sp)
 304cd10:	dc400d15 	stw	r17,52(sp)
 304cd14:	1441a916 	blt	r2,r17,304d3bc <___vfprintf_internal_r+0xe2c>
 304cd18:	1cc00204 	addi	r19,r3,8
 304cd1c:	d9014217 	ldw	r4,1288(sp)
 304cd20:	d9414317 	ldw	r5,1292(sp)
 304cd24:	000d883a 	mov	r6,zero
 304cd28:	000f883a 	mov	r7,zero
 304cd2c:	3052b480 	call	3052b48 <__nedf2>
 304cd30:	10016726 	beq	r2,zero,304d2d0 <___vfprintf_internal_r+0xd40>
 304cd34:	d8c14717 	ldw	r3,1308(sp)
 304cd38:	d9414717 	ldw	r5,1308(sp)
 304cd3c:	d9014117 	ldw	r4,1284(sp)
 304cd40:	1c85883a 	add	r2,r3,r18
 304cd44:	14bfffc4 	addi	r18,r2,-1
 304cd48:	28bfffc4 	addi	r2,r5,-1
 304cd4c:	20c00044 	addi	r3,r4,1
 304cd50:	8c400044 	addi	r17,r17,1
 304cd54:	98800115 	stw	r2,4(r19)
 304cd58:	008001c4 	movi	r2,7
 304cd5c:	98c00015 	stw	r3,0(r19)
 304cd60:	dc800e15 	stw	r18,56(sp)
 304cd64:	dc400d15 	stw	r17,52(sp)
 304cd68:	14418016 	blt	r2,r17,304d36c <___vfprintf_internal_r+0xddc>
 304cd6c:	9cc00204 	addi	r19,r19,8
 304cd70:	d9414817 	ldw	r5,1312(sp)
 304cd74:	d8800804 	addi	r2,sp,32
 304cd78:	8c400044 	addi	r17,r17,1
 304cd7c:	9165883a 	add	r18,r18,r5
 304cd80:	98800015 	stw	r2,0(r19)
 304cd84:	008001c4 	movi	r2,7
 304cd88:	99400115 	stw	r5,4(r19)
 304cd8c:	dc800e15 	stw	r18,56(sp)
 304cd90:	dc400d15 	stw	r17,52(sp)
 304cd94:	1440df16 	blt	r2,r17,304d114 <___vfprintf_internal_r+0xb84>
 304cd98:	98c00204 	addi	r3,r19,8
 304cd9c:	003f8106 	br	304cba4 <___vfprintf_internal_r+0x614>
 304cda0:	d9414a17 	ldw	r5,1320(sp)
 304cda4:	d8814517 	ldw	r2,1300(sp)
 304cda8:	28a1c83a 	sub	r16,r5,r2
 304cdac:	043f470e 	bge	zero,r16,304cacc <___vfprintf_internal_r+0x53c>
 304cdb0:	00800404 	movi	r2,16
 304cdb4:	1403cf0e 	bge	r2,r16,304dcf4 <___vfprintf_internal_r+0x1764>
 304cdb8:	1027883a 	mov	r19,r2
 304cdbc:	0700c1b4 	movhi	fp,774
 304cdc0:	e72a2d84 	addi	fp,fp,-22346
 304cdc4:	054001c4 	movi	r21,7
 304cdc8:	00000306 	br	304cdd8 <___vfprintf_internal_r+0x848>
 304cdcc:	843ffc04 	addi	r16,r16,-16
 304cdd0:	a5000204 	addi	r20,r20,8
 304cdd4:	9c00130e 	bge	r19,r16,304ce24 <___vfprintf_internal_r+0x894>
 304cdd8:	94800404 	addi	r18,r18,16
 304cddc:	8c400044 	addi	r17,r17,1
 304cde0:	a7000015 	stw	fp,0(r20)
 304cde4:	a4c00115 	stw	r19,4(r20)
 304cde8:	dc800e15 	stw	r18,56(sp)
 304cdec:	dc400d15 	stw	r17,52(sp)
 304cdf0:	ac7ff60e 	bge	r21,r17,304cdcc <___vfprintf_internal_r+0x83c>
 304cdf4:	b809883a 	mov	r4,r23
 304cdf8:	b00b883a 	mov	r5,r22
 304cdfc:	d9800c04 	addi	r6,sp,48
 304ce00:	d9c15115 	stw	r7,1348(sp)
 304ce04:	304c5380 	call	304c538 <__sprint_r>
 304ce08:	d9c15117 	ldw	r7,1348(sp)
 304ce0c:	103fa21e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304ce10:	843ffc04 	addi	r16,r16,-16
 304ce14:	dc800e17 	ldw	r18,56(sp)
 304ce18:	dc400d17 	ldw	r17,52(sp)
 304ce1c:	dd001904 	addi	r20,sp,100
 304ce20:	9c3fed16 	blt	r19,r16,304cdd8 <___vfprintf_internal_r+0x848>
 304ce24:	9425883a 	add	r18,r18,r16
 304ce28:	8c400044 	addi	r17,r17,1
 304ce2c:	008001c4 	movi	r2,7
 304ce30:	a7000015 	stw	fp,0(r20)
 304ce34:	a4000115 	stw	r16,4(r20)
 304ce38:	dc800e15 	stw	r18,56(sp)
 304ce3c:	dc400d15 	stw	r17,52(sp)
 304ce40:	14415316 	blt	r2,r17,304d390 <___vfprintf_internal_r+0xe00>
 304ce44:	a5000204 	addi	r20,r20,8
 304ce48:	003f2006 	br	304cacc <___vfprintf_internal_r+0x53c>
 304ce4c:	b809883a 	mov	r4,r23
 304ce50:	304a3800 	call	304a380 <__sinit>
 304ce54:	d9c15117 	ldw	r7,1348(sp)
 304ce58:	003de306 	br	304c5e8 <___vfprintf_internal_r+0x58>
 304ce5c:	b809883a 	mov	r4,r23
 304ce60:	b00b883a 	mov	r5,r22
 304ce64:	d9c15115 	stw	r7,1348(sp)
 304ce68:	304e4700 	call	304e470 <__swsetup_r>
 304ce6c:	d9c15117 	ldw	r7,1348(sp)
 304ce70:	103de226 	beq	r2,zero,304c5fc <___vfprintf_internal_r+0x6c>
 304ce74:	003f8b06 	br	304cca4 <___vfprintf_internal_r+0x714>
 304ce78:	d9014217 	ldw	r4,1288(sp)
 304ce7c:	d9414317 	ldw	r5,1292(sp)
 304ce80:	000d883a 	mov	r6,zero
 304ce84:	000f883a 	mov	r7,zero
 304ce88:	3052ac00 	call	3052ac0 <__eqdf2>
 304ce8c:	1000e41e 	bne	r2,zero,304d220 <___vfprintf_internal_r+0xc90>
 304ce90:	0080c1b4 	movhi	r2,774
 304ce94:	10aa2d04 	addi	r2,r2,-22348
 304ce98:	94800044 	addi	r18,r18,1
 304ce9c:	8c400044 	addi	r17,r17,1
 304cea0:	a0800015 	stw	r2,0(r20)
 304cea4:	00c00044 	movi	r3,1
 304cea8:	008001c4 	movi	r2,7
 304ceac:	a0c00115 	stw	r3,4(r20)
 304ceb0:	dc800e15 	stw	r18,56(sp)
 304ceb4:	dc400d15 	stw	r17,52(sp)
 304ceb8:	1442d516 	blt	r2,r17,304da10 <___vfprintf_internal_r+0x1480>
 304cebc:	a0c00204 	addi	r3,r20,8
 304cec0:	d8800517 	ldw	r2,20(sp)
 304cec4:	d9014717 	ldw	r4,1308(sp)
 304cec8:	11014e0e 	bge	r2,r4,304d404 <___vfprintf_internal_r+0xe74>
 304cecc:	00800044 	movi	r2,1
 304ced0:	dc400d17 	ldw	r17,52(sp)
 304ced4:	18800115 	stw	r2,4(r3)
 304ced8:	d8814917 	ldw	r2,1316(sp)
 304cedc:	94800044 	addi	r18,r18,1
 304cee0:	8c400044 	addi	r17,r17,1
 304cee4:	18800015 	stw	r2,0(r3)
 304cee8:	008001c4 	movi	r2,7
 304ceec:	dc800e15 	stw	r18,56(sp)
 304cef0:	dc400d15 	stw	r17,52(sp)
 304cef4:	1442e016 	blt	r2,r17,304da78 <___vfprintf_internal_r+0x14e8>
 304cef8:	18c00204 	addi	r3,r3,8
 304cefc:	d9014717 	ldw	r4,1308(sp)
 304cf00:	243fffc4 	addi	r16,r4,-1
 304cf04:	043f270e 	bge	zero,r16,304cba4 <___vfprintf_internal_r+0x614>
 304cf08:	00800404 	movi	r2,16
 304cf0c:	1402930e 	bge	r2,r16,304d95c <___vfprintf_internal_r+0x13cc>
 304cf10:	dc400d17 	ldw	r17,52(sp)
 304cf14:	1027883a 	mov	r19,r2
 304cf18:	0700c1b4 	movhi	fp,774
 304cf1c:	e72a2d84 	addi	fp,fp,-22346
 304cf20:	050001c4 	movi	r20,7
 304cf24:	00000306 	br	304cf34 <___vfprintf_internal_r+0x9a4>
 304cf28:	18c00204 	addi	r3,r3,8
 304cf2c:	843ffc04 	addi	r16,r16,-16
 304cf30:	9c028d0e 	bge	r19,r16,304d968 <___vfprintf_internal_r+0x13d8>
 304cf34:	94800404 	addi	r18,r18,16
 304cf38:	8c400044 	addi	r17,r17,1
 304cf3c:	1f000015 	stw	fp,0(r3)
 304cf40:	1cc00115 	stw	r19,4(r3)
 304cf44:	dc800e15 	stw	r18,56(sp)
 304cf48:	dc400d15 	stw	r17,52(sp)
 304cf4c:	a47ff60e 	bge	r20,r17,304cf28 <___vfprintf_internal_r+0x998>
 304cf50:	b809883a 	mov	r4,r23
 304cf54:	b00b883a 	mov	r5,r22
 304cf58:	d9800c04 	addi	r6,sp,48
 304cf5c:	304c5380 	call	304c538 <__sprint_r>
 304cf60:	103f4d1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304cf64:	dc800e17 	ldw	r18,56(sp)
 304cf68:	dc400d17 	ldw	r17,52(sp)
 304cf6c:	d8c01904 	addi	r3,sp,100
 304cf70:	003fee06 	br	304cf2c <___vfprintf_internal_r+0x99c>
 304cf74:	00bfffc4 	movi	r2,-1
 304cf78:	d8814b15 	stw	r2,1324(sp)
 304cf7c:	d8802c0b 	ldhu	r2,176(sp)
 304cf80:	1080100c 	andi	r2,r2,64
 304cf84:	103dc01e 	bne	r2,zero,304c688 <___vfprintf_internal_r+0xf8>
 304cf88:	003dc206 	br	304c694 <___vfprintf_internal_r+0x104>
 304cf8c:	b809883a 	mov	r4,r23
 304cf90:	b00b883a 	mov	r5,r22
 304cf94:	d9800c04 	addi	r6,sp,48
 304cf98:	304c5380 	call	304c538 <__sprint_r>
 304cf9c:	103f3e1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304cfa0:	dc800e17 	ldw	r18,56(sp)
 304cfa4:	003f2a06 	br	304cc50 <___vfprintf_internal_r+0x6c0>
 304cfa8:	d9414c17 	ldw	r5,1328(sp)
 304cfac:	29400414 	ori	r5,r5,16
 304cfb0:	d9414c15 	stw	r5,1328(sp)
 304cfb4:	d8c14c17 	ldw	r3,1328(sp)
 304cfb8:	1880040c 	andi	r2,r3,16
 304cfbc:	1001401e 	bne	r2,zero,304d4c0 <___vfprintf_internal_r+0xf30>
 304cfc0:	d9014c17 	ldw	r4,1328(sp)
 304cfc4:	2080100c 	andi	r2,r4,64
 304cfc8:	10013d26 	beq	r2,zero,304d4c0 <___vfprintf_internal_r+0xf30>
 304cfcc:	3c00000f 	ldh	r16,0(r7)
 304cfd0:	39c00104 	addi	r7,r7,4
 304cfd4:	d9c14015 	stw	r7,1280(sp)
 304cfd8:	80032416 	blt	r16,zero,304dc6c <___vfprintf_internal_r+0x16dc>
 304cfdc:	01000044 	movi	r4,1
 304cfe0:	98000416 	blt	r19,zero,304cff4 <___vfprintf_internal_r+0xa64>
 304cfe4:	d8c14c17 	ldw	r3,1328(sp)
 304cfe8:	00bfdfc4 	movi	r2,-129
 304cfec:	1886703a 	and	r3,r3,r2
 304cff0:	d8c14c15 	stw	r3,1328(sp)
 304cff4:	8002171e 	bne	r16,zero,304d854 <___vfprintf_internal_r+0x12c4>
 304cff8:	9802161e 	bne	r19,zero,304d854 <___vfprintf_internal_r+0x12c4>
 304cffc:	20803fcc 	andi	r2,r4,255
 304d000:	10027c26 	beq	r2,zero,304d9f4 <___vfprintf_internal_r+0x1464>
 304d004:	d9001904 	addi	r4,sp,100
 304d008:	dd400f04 	addi	r21,sp,60
 304d00c:	d9014115 	stw	r4,1284(sp)
 304d010:	d9014117 	ldw	r4,1284(sp)
 304d014:	dcc14515 	stw	r19,1300(sp)
 304d018:	a905c83a 	sub	r2,r21,r4
 304d01c:	11c00a04 	addi	r7,r2,40
 304d020:	99c0010e 	bge	r19,r7,304d028 <___vfprintf_internal_r+0xa98>
 304d024:	d9c14515 	stw	r7,1300(sp)
 304d028:	dcc14615 	stw	r19,1304(sp)
 304d02c:	d8800407 	ldb	r2,16(sp)
 304d030:	103e4e26 	beq	r2,zero,304c96c <___vfprintf_internal_r+0x3dc>
 304d034:	d9014517 	ldw	r4,1300(sp)
 304d038:	21000044 	addi	r4,r4,1
 304d03c:	d9014515 	stw	r4,1300(sp)
 304d040:	003e4a06 	br	304c96c <___vfprintf_internal_r+0x3dc>
 304d044:	d8814c17 	ldw	r2,1328(sp)
 304d048:	10800414 	ori	r2,r2,16
 304d04c:	d8814c15 	stw	r2,1328(sp)
 304d050:	d8c14c17 	ldw	r3,1328(sp)
 304d054:	1880040c 	andi	r2,r3,16
 304d058:	10011d1e 	bne	r2,zero,304d4d0 <___vfprintf_internal_r+0xf40>
 304d05c:	d9014c17 	ldw	r4,1328(sp)
 304d060:	2080100c 	andi	r2,r4,64
 304d064:	10011a26 	beq	r2,zero,304d4d0 <___vfprintf_internal_r+0xf40>
 304d068:	3c00000b 	ldhu	r16,0(r7)
 304d06c:	0009883a 	mov	r4,zero
 304d070:	39c00104 	addi	r7,r7,4
 304d074:	d9c14015 	stw	r7,1280(sp)
 304d078:	d8000405 	stb	zero,16(sp)
 304d07c:	003fd806 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d080:	d9014c17 	ldw	r4,1328(sp)
 304d084:	21000414 	ori	r4,r4,16
 304d088:	d9014c15 	stw	r4,1328(sp)
 304d08c:	d9414c17 	ldw	r5,1328(sp)
 304d090:	2880040c 	andi	r2,r5,16
 304d094:	1001041e 	bne	r2,zero,304d4a8 <___vfprintf_internal_r+0xf18>
 304d098:	d8c14c17 	ldw	r3,1328(sp)
 304d09c:	1880100c 	andi	r2,r3,64
 304d0a0:	10010126 	beq	r2,zero,304d4a8 <___vfprintf_internal_r+0xf18>
 304d0a4:	3c00000b 	ldhu	r16,0(r7)
 304d0a8:	01000044 	movi	r4,1
 304d0ac:	39c00104 	addi	r7,r7,4
 304d0b0:	d9c14015 	stw	r7,1280(sp)
 304d0b4:	d8000405 	stb	zero,16(sp)
 304d0b8:	003fc906 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d0bc:	b809883a 	mov	r4,r23
 304d0c0:	b00b883a 	mov	r5,r22
 304d0c4:	d9800c04 	addi	r6,sp,48
 304d0c8:	304c5380 	call	304c538 <__sprint_r>
 304d0cc:	103ef21e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d0d0:	dc800e17 	ldw	r18,56(sp)
 304d0d4:	d8c01904 	addi	r3,sp,100
 304d0d8:	d9014c17 	ldw	r4,1328(sp)
 304d0dc:	2080004c 	andi	r2,r4,1
 304d0e0:	1005003a 	cmpeq	r2,r2,zero
 304d0e4:	103eaf1e 	bne	r2,zero,304cba4 <___vfprintf_internal_r+0x614>
 304d0e8:	dc400d17 	ldw	r17,52(sp)
 304d0ec:	d9414917 	ldw	r5,1316(sp)
 304d0f0:	00800044 	movi	r2,1
 304d0f4:	94800044 	addi	r18,r18,1
 304d0f8:	8c400044 	addi	r17,r17,1
 304d0fc:	18800115 	stw	r2,4(r3)
 304d100:	008001c4 	movi	r2,7
 304d104:	19400015 	stw	r5,0(r3)
 304d108:	dc800e15 	stw	r18,56(sp)
 304d10c:	dc400d15 	stw	r17,52(sp)
 304d110:	14421d0e 	bge	r2,r17,304d988 <___vfprintf_internal_r+0x13f8>
 304d114:	b809883a 	mov	r4,r23
 304d118:	b00b883a 	mov	r5,r22
 304d11c:	d9800c04 	addi	r6,sp,48
 304d120:	304c5380 	call	304c538 <__sprint_r>
 304d124:	103edc1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d128:	dc800e17 	ldw	r18,56(sp)
 304d12c:	d8c01904 	addi	r3,sp,100
 304d130:	003e9c06 	br	304cba4 <___vfprintf_internal_r+0x614>
 304d134:	b809883a 	mov	r4,r23
 304d138:	b00b883a 	mov	r5,r22
 304d13c:	d9800c04 	addi	r6,sp,48
 304d140:	304c5380 	call	304c538 <__sprint_r>
 304d144:	103eca26 	beq	r2,zero,304cc70 <___vfprintf_internal_r+0x6e0>
 304d148:	003ed306 	br	304cc98 <___vfprintf_internal_r+0x708>
 304d14c:	b809883a 	mov	r4,r23
 304d150:	b00b883a 	mov	r5,r22
 304d154:	d9800c04 	addi	r6,sp,48
 304d158:	d9c15115 	stw	r7,1348(sp)
 304d15c:	304c5380 	call	304c538 <__sprint_r>
 304d160:	d9c15117 	ldw	r7,1348(sp)
 304d164:	103ecc1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d168:	dc800e17 	ldw	r18,56(sp)
 304d16c:	dc400d17 	ldw	r17,52(sp)
 304d170:	dd001904 	addi	r20,sp,100
 304d174:	003e7e06 	br	304cb70 <___vfprintf_internal_r+0x5e0>
 304d178:	b809883a 	mov	r4,r23
 304d17c:	b00b883a 	mov	r5,r22
 304d180:	d9800c04 	addi	r6,sp,48
 304d184:	d9c15115 	stw	r7,1348(sp)
 304d188:	304c5380 	call	304c538 <__sprint_r>
 304d18c:	d9c15117 	ldw	r7,1348(sp)
 304d190:	103ec11e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d194:	dd001904 	addi	r20,sp,100
 304d198:	003d7206 	br	304c764 <___vfprintf_internal_r+0x1d4>
 304d19c:	b809883a 	mov	r4,r23
 304d1a0:	b00b883a 	mov	r5,r22
 304d1a4:	d9800c04 	addi	r6,sp,48
 304d1a8:	d9c15115 	stw	r7,1348(sp)
 304d1ac:	304c5380 	call	304c538 <__sprint_r>
 304d1b0:	d9c15117 	ldw	r7,1348(sp)
 304d1b4:	103eb81e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d1b8:	dc800e17 	ldw	r18,56(sp)
 304d1bc:	dc400d17 	ldw	r17,52(sp)
 304d1c0:	dd001904 	addi	r20,sp,100
 304d1c4:	003e3e06 	br	304cac0 <___vfprintf_internal_r+0x530>
 304d1c8:	b809883a 	mov	r4,r23
 304d1cc:	b00b883a 	mov	r5,r22
 304d1d0:	d9800c04 	addi	r6,sp,48
 304d1d4:	d9c15115 	stw	r7,1348(sp)
 304d1d8:	304c5380 	call	304c538 <__sprint_r>
 304d1dc:	d9c15117 	ldw	r7,1348(sp)
 304d1e0:	103ead1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d1e4:	dc800e17 	ldw	r18,56(sp)
 304d1e8:	dc400d17 	ldw	r17,52(sp)
 304d1ec:	dd001904 	addi	r20,sp,100
 304d1f0:	003e2606 	br	304ca8c <___vfprintf_internal_r+0x4fc>
 304d1f4:	b809883a 	mov	r4,r23
 304d1f8:	b00b883a 	mov	r5,r22
 304d1fc:	d9800c04 	addi	r6,sp,48
 304d200:	d9c15115 	stw	r7,1348(sp)
 304d204:	304c5380 	call	304c538 <__sprint_r>
 304d208:	d9c15117 	ldw	r7,1348(sp)
 304d20c:	103ea21e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d210:	dc800e17 	ldw	r18,56(sp)
 304d214:	dc400d17 	ldw	r17,52(sp)
 304d218:	dd001904 	addi	r20,sp,100
 304d21c:	003e0e06 	br	304ca58 <___vfprintf_internal_r+0x4c8>
 304d220:	d9000517 	ldw	r4,20(sp)
 304d224:	01021c0e 	bge	zero,r4,304da98 <___vfprintf_internal_r+0x1508>
 304d228:	d8814717 	ldw	r2,1308(sp)
 304d22c:	20807a16 	blt	r4,r2,304d418 <___vfprintf_internal_r+0xe88>
 304d230:	d8c14117 	ldw	r3,1284(sp)
 304d234:	90a5883a 	add	r18,r18,r2
 304d238:	8c400044 	addi	r17,r17,1
 304d23c:	a0800115 	stw	r2,4(r20)
 304d240:	008001c4 	movi	r2,7
 304d244:	a0c00015 	stw	r3,0(r20)
 304d248:	dc800e15 	stw	r18,56(sp)
 304d24c:	dc400d15 	stw	r17,52(sp)
 304d250:	14429f16 	blt	r2,r17,304dcd0 <___vfprintf_internal_r+0x1740>
 304d254:	a0c00204 	addi	r3,r20,8
 304d258:	d9414717 	ldw	r5,1308(sp)
 304d25c:	2161c83a 	sub	r16,r4,r5
 304d260:	043f9d0e 	bge	zero,r16,304d0d8 <___vfprintf_internal_r+0xb48>
 304d264:	00800404 	movi	r2,16
 304d268:	1401f10e 	bge	r2,r16,304da30 <___vfprintf_internal_r+0x14a0>
 304d26c:	dc400d17 	ldw	r17,52(sp)
 304d270:	1027883a 	mov	r19,r2
 304d274:	0700c1b4 	movhi	fp,774
 304d278:	e72a2d84 	addi	fp,fp,-22346
 304d27c:	050001c4 	movi	r20,7
 304d280:	00000306 	br	304d290 <___vfprintf_internal_r+0xd00>
 304d284:	18c00204 	addi	r3,r3,8
 304d288:	843ffc04 	addi	r16,r16,-16
 304d28c:	9c01eb0e 	bge	r19,r16,304da3c <___vfprintf_internal_r+0x14ac>
 304d290:	94800404 	addi	r18,r18,16
 304d294:	8c400044 	addi	r17,r17,1
 304d298:	1f000015 	stw	fp,0(r3)
 304d29c:	1cc00115 	stw	r19,4(r3)
 304d2a0:	dc800e15 	stw	r18,56(sp)
 304d2a4:	dc400d15 	stw	r17,52(sp)
 304d2a8:	a47ff60e 	bge	r20,r17,304d284 <___vfprintf_internal_r+0xcf4>
 304d2ac:	b809883a 	mov	r4,r23
 304d2b0:	b00b883a 	mov	r5,r22
 304d2b4:	d9800c04 	addi	r6,sp,48
 304d2b8:	304c5380 	call	304c538 <__sprint_r>
 304d2bc:	103e761e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d2c0:	dc800e17 	ldw	r18,56(sp)
 304d2c4:	dc400d17 	ldw	r17,52(sp)
 304d2c8:	d8c01904 	addi	r3,sp,100
 304d2cc:	003fee06 	br	304d288 <___vfprintf_internal_r+0xcf8>
 304d2d0:	d8814717 	ldw	r2,1308(sp)
 304d2d4:	143fffc4 	addi	r16,r2,-1
 304d2d8:	043ea50e 	bge	zero,r16,304cd70 <___vfprintf_internal_r+0x7e0>
 304d2dc:	00800404 	movi	r2,16
 304d2e0:	1400180e 	bge	r2,r16,304d344 <___vfprintf_internal_r+0xdb4>
 304d2e4:	1029883a 	mov	r20,r2
 304d2e8:	0700c1b4 	movhi	fp,774
 304d2ec:	e72a2d84 	addi	fp,fp,-22346
 304d2f0:	054001c4 	movi	r21,7
 304d2f4:	00000306 	br	304d304 <___vfprintf_internal_r+0xd74>
 304d2f8:	9cc00204 	addi	r19,r19,8
 304d2fc:	843ffc04 	addi	r16,r16,-16
 304d300:	a400120e 	bge	r20,r16,304d34c <___vfprintf_internal_r+0xdbc>
 304d304:	94800404 	addi	r18,r18,16
 304d308:	8c400044 	addi	r17,r17,1
 304d30c:	9f000015 	stw	fp,0(r19)
 304d310:	9d000115 	stw	r20,4(r19)
 304d314:	dc800e15 	stw	r18,56(sp)
 304d318:	dc400d15 	stw	r17,52(sp)
 304d31c:	ac7ff60e 	bge	r21,r17,304d2f8 <___vfprintf_internal_r+0xd68>
 304d320:	b809883a 	mov	r4,r23
 304d324:	b00b883a 	mov	r5,r22
 304d328:	d9800c04 	addi	r6,sp,48
 304d32c:	304c5380 	call	304c538 <__sprint_r>
 304d330:	103e591e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d334:	dc800e17 	ldw	r18,56(sp)
 304d338:	dc400d17 	ldw	r17,52(sp)
 304d33c:	dcc01904 	addi	r19,sp,100
 304d340:	003fee06 	br	304d2fc <___vfprintf_internal_r+0xd6c>
 304d344:	0700c1b4 	movhi	fp,774
 304d348:	e72a2d84 	addi	fp,fp,-22346
 304d34c:	9425883a 	add	r18,r18,r16
 304d350:	8c400044 	addi	r17,r17,1
 304d354:	008001c4 	movi	r2,7
 304d358:	9f000015 	stw	fp,0(r19)
 304d35c:	9c000115 	stw	r16,4(r19)
 304d360:	dc800e15 	stw	r18,56(sp)
 304d364:	dc400d15 	stw	r17,52(sp)
 304d368:	147e800e 	bge	r2,r17,304cd6c <___vfprintf_internal_r+0x7dc>
 304d36c:	b809883a 	mov	r4,r23
 304d370:	b00b883a 	mov	r5,r22
 304d374:	d9800c04 	addi	r6,sp,48
 304d378:	304c5380 	call	304c538 <__sprint_r>
 304d37c:	103e461e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d380:	dc800e17 	ldw	r18,56(sp)
 304d384:	dc400d17 	ldw	r17,52(sp)
 304d388:	dcc01904 	addi	r19,sp,100
 304d38c:	003e7806 	br	304cd70 <___vfprintf_internal_r+0x7e0>
 304d390:	b809883a 	mov	r4,r23
 304d394:	b00b883a 	mov	r5,r22
 304d398:	d9800c04 	addi	r6,sp,48
 304d39c:	d9c15115 	stw	r7,1348(sp)
 304d3a0:	304c5380 	call	304c538 <__sprint_r>
 304d3a4:	d9c15117 	ldw	r7,1348(sp)
 304d3a8:	103e3b1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d3ac:	dc800e17 	ldw	r18,56(sp)
 304d3b0:	dc400d17 	ldw	r17,52(sp)
 304d3b4:	dd001904 	addi	r20,sp,100
 304d3b8:	003dc406 	br	304cacc <___vfprintf_internal_r+0x53c>
 304d3bc:	b809883a 	mov	r4,r23
 304d3c0:	b00b883a 	mov	r5,r22
 304d3c4:	d9800c04 	addi	r6,sp,48
 304d3c8:	304c5380 	call	304c538 <__sprint_r>
 304d3cc:	103e321e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d3d0:	dc800e17 	ldw	r18,56(sp)
 304d3d4:	dc400d17 	ldw	r17,52(sp)
 304d3d8:	dcc01904 	addi	r19,sp,100
 304d3dc:	003e4f06 	br	304cd1c <___vfprintf_internal_r+0x78c>
 304d3e0:	b809883a 	mov	r4,r23
 304d3e4:	b00b883a 	mov	r5,r22
 304d3e8:	d9800c04 	addi	r6,sp,48
 304d3ec:	304c5380 	call	304c538 <__sprint_r>
 304d3f0:	103e291e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304d3f4:	dc800e17 	ldw	r18,56(sp)
 304d3f8:	dc400d17 	ldw	r17,52(sp)
 304d3fc:	d8c01904 	addi	r3,sp,100
 304d400:	003e3b06 	br	304ccf0 <___vfprintf_internal_r+0x760>
 304d404:	d9414c17 	ldw	r5,1328(sp)
 304d408:	2880004c 	andi	r2,r5,1
 304d40c:	1005003a 	cmpeq	r2,r2,zero
 304d410:	103de41e 	bne	r2,zero,304cba4 <___vfprintf_internal_r+0x614>
 304d414:	003ead06 	br	304cecc <___vfprintf_internal_r+0x93c>
 304d418:	d8814117 	ldw	r2,1284(sp)
 304d41c:	9125883a 	add	r18,r18,r4
 304d420:	8c400044 	addi	r17,r17,1
 304d424:	a0800015 	stw	r2,0(r20)
 304d428:	008001c4 	movi	r2,7
 304d42c:	a1000115 	stw	r4,4(r20)
 304d430:	dc800e15 	stw	r18,56(sp)
 304d434:	dc400d15 	stw	r17,52(sp)
 304d438:	14421b16 	blt	r2,r17,304dca8 <___vfprintf_internal_r+0x1718>
 304d43c:	a0c00204 	addi	r3,r20,8
 304d440:	d9414917 	ldw	r5,1316(sp)
 304d444:	00800044 	movi	r2,1
 304d448:	94800044 	addi	r18,r18,1
 304d44c:	8c400044 	addi	r17,r17,1
 304d450:	18800115 	stw	r2,4(r3)
 304d454:	008001c4 	movi	r2,7
 304d458:	19400015 	stw	r5,0(r3)
 304d45c:	dc800e15 	stw	r18,56(sp)
 304d460:	dc400d15 	stw	r17,52(sp)
 304d464:	2021883a 	mov	r16,r4
 304d468:	14420516 	blt	r2,r17,304dc80 <___vfprintf_internal_r+0x16f0>
 304d46c:	19400204 	addi	r5,r3,8
 304d470:	d8814717 	ldw	r2,1308(sp)
 304d474:	8c400044 	addi	r17,r17,1
 304d478:	dc400d15 	stw	r17,52(sp)
 304d47c:	1107c83a 	sub	r3,r2,r4
 304d480:	d9014117 	ldw	r4,1284(sp)
 304d484:	90e5883a 	add	r18,r18,r3
 304d488:	28c00115 	stw	r3,4(r5)
 304d48c:	8105883a 	add	r2,r16,r4
 304d490:	28800015 	stw	r2,0(r5)
 304d494:	008001c4 	movi	r2,7
 304d498:	dc800e15 	stw	r18,56(sp)
 304d49c:	147f1d16 	blt	r2,r17,304d114 <___vfprintf_internal_r+0xb84>
 304d4a0:	28c00204 	addi	r3,r5,8
 304d4a4:	003dbf06 	br	304cba4 <___vfprintf_internal_r+0x614>
 304d4a8:	3c000017 	ldw	r16,0(r7)
 304d4ac:	01000044 	movi	r4,1
 304d4b0:	39c00104 	addi	r7,r7,4
 304d4b4:	d9c14015 	stw	r7,1280(sp)
 304d4b8:	d8000405 	stb	zero,16(sp)
 304d4bc:	003ec806 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d4c0:	3c000017 	ldw	r16,0(r7)
 304d4c4:	39c00104 	addi	r7,r7,4
 304d4c8:	d9c14015 	stw	r7,1280(sp)
 304d4cc:	003ec206 	br	304cfd8 <___vfprintf_internal_r+0xa48>
 304d4d0:	3c000017 	ldw	r16,0(r7)
 304d4d4:	0009883a 	mov	r4,zero
 304d4d8:	39c00104 	addi	r7,r7,4
 304d4dc:	d9c14015 	stw	r7,1280(sp)
 304d4e0:	d8000405 	stb	zero,16(sp)
 304d4e4:	003ebe06 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d4e8:	38c00017 	ldw	r3,0(r7)
 304d4ec:	39c00104 	addi	r7,r7,4
 304d4f0:	d8c14a15 	stw	r3,1320(sp)
 304d4f4:	183ca80e 	bge	r3,zero,304c798 <___vfprintf_internal_r+0x208>
 304d4f8:	00c7c83a 	sub	r3,zero,r3
 304d4fc:	d8c14a15 	stw	r3,1320(sp)
 304d500:	d9014c17 	ldw	r4,1328(sp)
 304d504:	21000114 	ori	r4,r4,4
 304d508:	d9014c15 	stw	r4,1328(sp)
 304d50c:	003ca206 	br	304c798 <___vfprintf_internal_r+0x208>
 304d510:	d9014c17 	ldw	r4,1328(sp)
 304d514:	2080040c 	andi	r2,r4,16
 304d518:	10019a1e 	bne	r2,zero,304db84 <___vfprintf_internal_r+0x15f4>
 304d51c:	d8c14c17 	ldw	r3,1328(sp)
 304d520:	1880100c 	andi	r2,r3,64
 304d524:	10019726 	beq	r2,zero,304db84 <___vfprintf_internal_r+0x15f4>
 304d528:	38800017 	ldw	r2,0(r7)
 304d52c:	39c00104 	addi	r7,r7,4
 304d530:	d9c14015 	stw	r7,1280(sp)
 304d534:	d9014b17 	ldw	r4,1324(sp)
 304d538:	d9c14017 	ldw	r7,1280(sp)
 304d53c:	1100000d 	sth	r4,0(r2)
 304d540:	003c6e06 	br	304c6fc <___vfprintf_internal_r+0x16c>
 304d544:	d9014c17 	ldw	r4,1328(sp)
 304d548:	21000414 	ori	r4,r4,16
 304d54c:	d9014c15 	stw	r4,1328(sp)
 304d550:	003c9106 	br	304c798 <___vfprintf_internal_r+0x208>
 304d554:	d9414c17 	ldw	r5,1328(sp)
 304d558:	29400414 	ori	r5,r5,16
 304d55c:	d9414c15 	stw	r5,1328(sp)
 304d560:	003c8d06 	br	304c798 <___vfprintf_internal_r+0x208>
 304d564:	d9414c17 	ldw	r5,1328(sp)
 304d568:	3c000017 	ldw	r16,0(r7)
 304d56c:	00801e04 	movi	r2,120
 304d570:	00c0c1b4 	movhi	r3,774
 304d574:	18ea1604 	addi	r3,r3,-22440
 304d578:	29400094 	ori	r5,r5,2
 304d57c:	39c00104 	addi	r7,r7,4
 304d580:	d8814d15 	stw	r2,1332(sp)
 304d584:	d8c14415 	stw	r3,1296(sp)
 304d588:	00800c04 	movi	r2,48
 304d58c:	00c01e04 	movi	r3,120
 304d590:	01000084 	movi	r4,2
 304d594:	d9414c15 	stw	r5,1328(sp)
 304d598:	d9c14015 	stw	r7,1280(sp)
 304d59c:	d8800445 	stb	r2,17(sp)
 304d5a0:	d8c00485 	stb	r3,18(sp)
 304d5a4:	d8000405 	stb	zero,16(sp)
 304d5a8:	003e8d06 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d5ac:	0140c1b4 	movhi	r5,774
 304d5b0:	296a1604 	addi	r5,r5,-22440
 304d5b4:	d9414415 	stw	r5,1296(sp)
 304d5b8:	d9414c17 	ldw	r5,1328(sp)
 304d5bc:	2880040c 	andi	r2,r5,16
 304d5c0:	1000f61e 	bne	r2,zero,304d99c <___vfprintf_internal_r+0x140c>
 304d5c4:	d8c14c17 	ldw	r3,1328(sp)
 304d5c8:	1880100c 	andi	r2,r3,64
 304d5cc:	1000f326 	beq	r2,zero,304d99c <___vfprintf_internal_r+0x140c>
 304d5d0:	3c00000b 	ldhu	r16,0(r7)
 304d5d4:	39c00104 	addi	r7,r7,4
 304d5d8:	d9c14015 	stw	r7,1280(sp)
 304d5dc:	d9014c17 	ldw	r4,1328(sp)
 304d5e0:	2080004c 	andi	r2,r4,1
 304d5e4:	1005003a 	cmpeq	r2,r2,zero
 304d5e8:	1000e91e 	bne	r2,zero,304d990 <___vfprintf_internal_r+0x1400>
 304d5ec:	8000e826 	beq	r16,zero,304d990 <___vfprintf_internal_r+0x1400>
 304d5f0:	d9414d17 	ldw	r5,1332(sp)
 304d5f4:	21000094 	ori	r4,r4,2
 304d5f8:	d9014c15 	stw	r4,1328(sp)
 304d5fc:	00800c04 	movi	r2,48
 304d600:	01000084 	movi	r4,2
 304d604:	d8800445 	stb	r2,17(sp)
 304d608:	d9400485 	stb	r5,18(sp)
 304d60c:	d8000405 	stb	zero,16(sp)
 304d610:	003e7306 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d614:	d8c14c17 	ldw	r3,1328(sp)
 304d618:	18c01014 	ori	r3,r3,64
 304d61c:	d8c14c15 	stw	r3,1328(sp)
 304d620:	003c5d06 	br	304c798 <___vfprintf_internal_r+0x208>
 304d624:	d9414c17 	ldw	r5,1328(sp)
 304d628:	2880020c 	andi	r2,r5,8
 304d62c:	10018826 	beq	r2,zero,304dc50 <___vfprintf_internal_r+0x16c0>
 304d630:	38800017 	ldw	r2,0(r7)
 304d634:	38c00204 	addi	r3,r7,8
 304d638:	d8c14015 	stw	r3,1280(sp)
 304d63c:	d8814215 	stw	r2,1288(sp)
 304d640:	39c00117 	ldw	r7,4(r7)
 304d644:	d9c14315 	stw	r7,1292(sp)
 304d648:	d9014217 	ldw	r4,1288(sp)
 304d64c:	d9414317 	ldw	r5,1292(sp)
 304d650:	3051f780 	call	3051f78 <__isinfd>
 304d654:	1001ba26 	beq	r2,zero,304dd40 <___vfprintf_internal_r+0x17b0>
 304d658:	d9014217 	ldw	r4,1288(sp)
 304d65c:	d9414317 	ldw	r5,1292(sp)
 304d660:	000d883a 	mov	r6,zero
 304d664:	000f883a 	mov	r7,zero
 304d668:	3052ce00 	call	3052ce0 <__ltdf2>
 304d66c:	10027216 	blt	r2,zero,304e038 <___vfprintf_internal_r+0x1aa8>
 304d670:	d8c14d17 	ldw	r3,1332(sp)
 304d674:	008011c4 	movi	r2,71
 304d678:	10c1ad16 	blt	r2,r3,304dd30 <___vfprintf_internal_r+0x17a0>
 304d67c:	0100c1b4 	movhi	r4,774
 304d680:	212a1b04 	addi	r4,r4,-22420
 304d684:	d9014115 	stw	r4,1284(sp)
 304d688:	008000c4 	movi	r2,3
 304d68c:	d8814515 	stw	r2,1300(sp)
 304d690:	d8c14c17 	ldw	r3,1328(sp)
 304d694:	d9c14517 	ldw	r7,1300(sp)
 304d698:	00bfdfc4 	movi	r2,-129
 304d69c:	1886703a 	and	r3,r3,r2
 304d6a0:	d8c14c15 	stw	r3,1328(sp)
 304d6a4:	d8014615 	stw	zero,1304(sp)
 304d6a8:	003e6006 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304d6ac:	00800ac4 	movi	r2,43
 304d6b0:	d8800405 	stb	r2,16(sp)
 304d6b4:	003c3806 	br	304c798 <___vfprintf_internal_r+0x208>
 304d6b8:	d8814c17 	ldw	r2,1328(sp)
 304d6bc:	10800054 	ori	r2,r2,1
 304d6c0:	d8814c15 	stw	r2,1328(sp)
 304d6c4:	003c3406 	br	304c798 <___vfprintf_internal_r+0x208>
 304d6c8:	d8800407 	ldb	r2,16(sp)
 304d6cc:	103c321e 	bne	r2,zero,304c798 <___vfprintf_internal_r+0x208>
 304d6d0:	00800804 	movi	r2,32
 304d6d4:	d8800405 	stb	r2,16(sp)
 304d6d8:	003c2f06 	br	304c798 <___vfprintf_internal_r+0x208>
 304d6dc:	d8814c17 	ldw	r2,1328(sp)
 304d6e0:	10800214 	ori	r2,r2,8
 304d6e4:	d8814c15 	stw	r2,1328(sp)
 304d6e8:	003c2b06 	br	304c798 <___vfprintf_internal_r+0x208>
 304d6ec:	38800017 	ldw	r2,0(r7)
 304d6f0:	00c00044 	movi	r3,1
 304d6f4:	39c00104 	addi	r7,r7,4
 304d6f8:	d9c14015 	stw	r7,1280(sp)
 304d6fc:	d9000f04 	addi	r4,sp,60
 304d700:	180f883a 	mov	r7,r3
 304d704:	d8c14515 	stw	r3,1300(sp)
 304d708:	d9014115 	stw	r4,1284(sp)
 304d70c:	d8800f05 	stb	r2,60(sp)
 304d710:	d8000405 	stb	zero,16(sp)
 304d714:	003c9406 	br	304c968 <___vfprintf_internal_r+0x3d8>
 304d718:	0100c1b4 	movhi	r4,774
 304d71c:	212a2104 	addi	r4,r4,-22396
 304d720:	d9014415 	stw	r4,1296(sp)
 304d724:	003fa406 	br	304d5b8 <___vfprintf_internal_r+0x1028>
 304d728:	0007883a 	mov	r3,zero
 304d72c:	01000244 	movi	r4,9
 304d730:	d9414d17 	ldw	r5,1332(sp)
 304d734:	188002a4 	muli	r2,r3,10
 304d738:	d8c14e17 	ldw	r3,1336(sp)
 304d73c:	2885883a 	add	r2,r5,r2
 304d740:	18c00007 	ldb	r3,0(r3)
 304d744:	d9414e17 	ldw	r5,1336(sp)
 304d748:	d8c14d15 	stw	r3,1332(sp)
 304d74c:	29400044 	addi	r5,r5,1
 304d750:	d9414e15 	stw	r5,1336(sp)
 304d754:	d9414d17 	ldw	r5,1332(sp)
 304d758:	10fff404 	addi	r3,r2,-48
 304d75c:	28bff404 	addi	r2,r5,-48
 304d760:	20bff32e 	bgeu	r4,r2,304d730 <___vfprintf_internal_r+0x11a0>
 304d764:	d8c14a15 	stw	r3,1320(sp)
 304d768:	003c1106 	br	304c7b0 <___vfprintf_internal_r+0x220>
 304d76c:	d8c14c17 	ldw	r3,1328(sp)
 304d770:	18c02014 	ori	r3,r3,128
 304d774:	d8c14c15 	stw	r3,1328(sp)
 304d778:	003c0706 	br	304c798 <___vfprintf_internal_r+0x208>
 304d77c:	d9414e17 	ldw	r5,1336(sp)
 304d780:	00800a84 	movi	r2,42
 304d784:	28c00007 	ldb	r3,0(r5)
 304d788:	29400044 	addi	r5,r5,1
 304d78c:	d9414e15 	stw	r5,1336(sp)
 304d790:	1882b326 	beq	r3,r2,304e260 <___vfprintf_internal_r+0x1cd0>
 304d794:	d8c14d15 	stw	r3,1332(sp)
 304d798:	18bff404 	addi	r2,r3,-48
 304d79c:	00c00244 	movi	r3,9
 304d7a0:	18822c36 	bltu	r3,r2,304e054 <___vfprintf_internal_r+0x1ac4>
 304d7a4:	000d883a 	mov	r6,zero
 304d7a8:	308002a4 	muli	r2,r6,10
 304d7ac:	d9014d17 	ldw	r4,1332(sp)
 304d7b0:	d9414e17 	ldw	r5,1336(sp)
 304d7b4:	1105883a 	add	r2,r2,r4
 304d7b8:	11bff404 	addi	r6,r2,-48
 304d7bc:	d8814e17 	ldw	r2,1336(sp)
 304d7c0:	29400007 	ldb	r5,0(r5)
 304d7c4:	10800044 	addi	r2,r2,1
 304d7c8:	d8814e15 	stw	r2,1336(sp)
 304d7cc:	28bff404 	addi	r2,r5,-48
 304d7d0:	d9414d15 	stw	r5,1332(sp)
 304d7d4:	18bff42e 	bgeu	r3,r2,304d7a8 <___vfprintf_internal_r+0x1218>
 304d7d8:	3027883a 	mov	r19,r6
 304d7dc:	303bf40e 	bge	r6,zero,304c7b0 <___vfprintf_internal_r+0x220>
 304d7e0:	04ffffc4 	movi	r19,-1
 304d7e4:	003bf206 	br	304c7b0 <___vfprintf_internal_r+0x220>
 304d7e8:	d8000405 	stb	zero,16(sp)
 304d7ec:	39000017 	ldw	r4,0(r7)
 304d7f0:	39c00104 	addi	r7,r7,4
 304d7f4:	d9c14015 	stw	r7,1280(sp)
 304d7f8:	d9014115 	stw	r4,1284(sp)
 304d7fc:	20017126 	beq	r4,zero,304ddc4 <___vfprintf_internal_r+0x1834>
 304d800:	98000c16 	blt	r19,zero,304d834 <___vfprintf_internal_r+0x12a4>
 304d804:	d9014117 	ldw	r4,1284(sp)
 304d808:	000b883a 	mov	r5,zero
 304d80c:	980d883a 	mov	r6,r19
 304d810:	305050c0 	call	305050c <memchr>
 304d814:	10020b26 	beq	r2,zero,304e044 <___vfprintf_internal_r+0x1ab4>
 304d818:	d8c14117 	ldw	r3,1284(sp)
 304d81c:	10cfc83a 	sub	r7,r2,r3
 304d820:	99c15a16 	blt	r19,r7,304dd8c <___vfprintf_internal_r+0x17fc>
 304d824:	d9c14515 	stw	r7,1300(sp)
 304d828:	38000716 	blt	r7,zero,304d848 <___vfprintf_internal_r+0x12b8>
 304d82c:	d8014615 	stw	zero,1304(sp)
 304d830:	003dfe06 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304d834:	d9014117 	ldw	r4,1284(sp)
 304d838:	304c4c40 	call	304c4c4 <strlen>
 304d83c:	d8814515 	stw	r2,1300(sp)
 304d840:	100f883a 	mov	r7,r2
 304d844:	103ff90e 	bge	r2,zero,304d82c <___vfprintf_internal_r+0x129c>
 304d848:	d8014515 	stw	zero,1300(sp)
 304d84c:	d8014615 	stw	zero,1304(sp)
 304d850:	003df606 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304d854:	20c03fcc 	andi	r3,r4,255
 304d858:	00800044 	movi	r2,1
 304d85c:	18802926 	beq	r3,r2,304d904 <___vfprintf_internal_r+0x1374>
 304d860:	18800e36 	bltu	r3,r2,304d89c <___vfprintf_internal_r+0x130c>
 304d864:	00800084 	movi	r2,2
 304d868:	1880cd26 	beq	r3,r2,304dba0 <___vfprintf_internal_r+0x1610>
 304d86c:	0100c1b4 	movhi	r4,774
 304d870:	212a2604 	addi	r4,r4,-22376
 304d874:	304c4c40 	call	304c4c4 <strlen>
 304d878:	100f883a 	mov	r7,r2
 304d87c:	dcc14515 	stw	r19,1300(sp)
 304d880:	9880010e 	bge	r19,r2,304d888 <___vfprintf_internal_r+0x12f8>
 304d884:	d8814515 	stw	r2,1300(sp)
 304d888:	00c0c1b4 	movhi	r3,774
 304d88c:	18ea2604 	addi	r3,r3,-22376
 304d890:	dcc14615 	stw	r19,1304(sp)
 304d894:	d8c14115 	stw	r3,1284(sp)
 304d898:	003de406 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304d89c:	d9401904 	addi	r5,sp,100
 304d8a0:	dd400f04 	addi	r21,sp,60
 304d8a4:	d9414115 	stw	r5,1284(sp)
 304d8a8:	d8c14117 	ldw	r3,1284(sp)
 304d8ac:	808001cc 	andi	r2,r16,7
 304d8b0:	8020d0fa 	srli	r16,r16,3
 304d8b4:	18ffffc4 	addi	r3,r3,-1
 304d8b8:	10800c04 	addi	r2,r2,48
 304d8bc:	d8c14115 	stw	r3,1284(sp)
 304d8c0:	18800005 	stb	r2,0(r3)
 304d8c4:	1007883a 	mov	r3,r2
 304d8c8:	803ff71e 	bne	r16,zero,304d8a8 <___vfprintf_internal_r+0x1318>
 304d8cc:	d9014c17 	ldw	r4,1328(sp)
 304d8d0:	2080004c 	andi	r2,r4,1
 304d8d4:	1005003a 	cmpeq	r2,r2,zero
 304d8d8:	103dcd1e 	bne	r2,zero,304d010 <___vfprintf_internal_r+0xa80>
 304d8dc:	18803fcc 	andi	r2,r3,255
 304d8e0:	1080201c 	xori	r2,r2,128
 304d8e4:	10bfe004 	addi	r2,r2,-128
 304d8e8:	00c00c04 	movi	r3,48
 304d8ec:	10fdc826 	beq	r2,r3,304d010 <___vfprintf_internal_r+0xa80>
 304d8f0:	d9414117 	ldw	r5,1284(sp)
 304d8f4:	297fffc4 	addi	r5,r5,-1
 304d8f8:	d9414115 	stw	r5,1284(sp)
 304d8fc:	28c00005 	stb	r3,0(r5)
 304d900:	003dc306 	br	304d010 <___vfprintf_internal_r+0xa80>
 304d904:	00800244 	movi	r2,9
 304d908:	1401382e 	bgeu	r2,r16,304ddec <___vfprintf_internal_r+0x185c>
 304d90c:	1025883a 	mov	r18,r2
 304d910:	dd400f04 	addi	r21,sp,60
 304d914:	dc401904 	addi	r17,sp,100
 304d918:	8009883a 	mov	r4,r16
 304d91c:	01400284 	movi	r5,10
 304d920:	30497f40 	call	30497f4 <__umodsi3>
 304d924:	10800c04 	addi	r2,r2,48
 304d928:	8c7fffc4 	addi	r17,r17,-1
 304d92c:	8009883a 	mov	r4,r16
 304d930:	01400284 	movi	r5,10
 304d934:	88800005 	stb	r2,0(r17)
 304d938:	30497ec0 	call	30497ec <__udivsi3>
 304d93c:	1021883a 	mov	r16,r2
 304d940:	90bff536 	bltu	r18,r2,304d918 <___vfprintf_internal_r+0x1388>
 304d944:	8c7fffc4 	addi	r17,r17,-1
 304d948:	dc414115 	stw	r17,1284(sp)
 304d94c:	d8c14117 	ldw	r3,1284(sp)
 304d950:	80800c04 	addi	r2,r16,48
 304d954:	18800005 	stb	r2,0(r3)
 304d958:	003dad06 	br	304d010 <___vfprintf_internal_r+0xa80>
 304d95c:	dc400d17 	ldw	r17,52(sp)
 304d960:	0700c1b4 	movhi	fp,774
 304d964:	e72a2d84 	addi	fp,fp,-22346
 304d968:	9425883a 	add	r18,r18,r16
 304d96c:	8c400044 	addi	r17,r17,1
 304d970:	008001c4 	movi	r2,7
 304d974:	1f000015 	stw	fp,0(r3)
 304d978:	1c000115 	stw	r16,4(r3)
 304d97c:	dc800e15 	stw	r18,56(sp)
 304d980:	dc400d15 	stw	r17,52(sp)
 304d984:	147de316 	blt	r2,r17,304d114 <___vfprintf_internal_r+0xb84>
 304d988:	18c00204 	addi	r3,r3,8
 304d98c:	003c8506 	br	304cba4 <___vfprintf_internal_r+0x614>
 304d990:	01000084 	movi	r4,2
 304d994:	d8000405 	stb	zero,16(sp)
 304d998:	003d9106 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304d99c:	3c000017 	ldw	r16,0(r7)
 304d9a0:	39c00104 	addi	r7,r7,4
 304d9a4:	d9c14015 	stw	r7,1280(sp)
 304d9a8:	003f0c06 	br	304d5dc <___vfprintf_internal_r+0x104c>
 304d9ac:	d9014c17 	ldw	r4,1328(sp)
 304d9b0:	20c4703a 	and	r2,r4,r3
 304d9b4:	1005003a 	cmpeq	r2,r2,zero
 304d9b8:	103cc326 	beq	r2,zero,304ccc8 <___vfprintf_internal_r+0x738>
 304d9bc:	d9014117 	ldw	r4,1284(sp)
 304d9c0:	94800044 	addi	r18,r18,1
 304d9c4:	8c400044 	addi	r17,r17,1
 304d9c8:	008001c4 	movi	r2,7
 304d9cc:	a1000015 	stw	r4,0(r20)
 304d9d0:	a0c00115 	stw	r3,4(r20)
 304d9d4:	dc800e15 	stw	r18,56(sp)
 304d9d8:	dc400d15 	stw	r17,52(sp)
 304d9dc:	147e6316 	blt	r2,r17,304d36c <___vfprintf_internal_r+0xddc>
 304d9e0:	a4c00204 	addi	r19,r20,8
 304d9e4:	003ce206 	br	304cd70 <___vfprintf_internal_r+0x7e0>
 304d9e8:	0700c1b4 	movhi	fp,774
 304d9ec:	e72a2d84 	addi	fp,fp,-22346
 304d9f0:	003c5606 	br	304cb4c <___vfprintf_internal_r+0x5bc>
 304d9f4:	d9414c17 	ldw	r5,1328(sp)
 304d9f8:	2880004c 	andi	r2,r5,1
 304d9fc:	1000761e 	bne	r2,zero,304dbd8 <___vfprintf_internal_r+0x1648>
 304da00:	d8801904 	addi	r2,sp,100
 304da04:	dd400f04 	addi	r21,sp,60
 304da08:	d8814115 	stw	r2,1284(sp)
 304da0c:	003d8006 	br	304d010 <___vfprintf_internal_r+0xa80>
 304da10:	b809883a 	mov	r4,r23
 304da14:	b00b883a 	mov	r5,r22
 304da18:	d9800c04 	addi	r6,sp,48
 304da1c:	304c5380 	call	304c538 <__sprint_r>
 304da20:	103c9d1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304da24:	dc800e17 	ldw	r18,56(sp)
 304da28:	d8c01904 	addi	r3,sp,100
 304da2c:	003d2406 	br	304cec0 <___vfprintf_internal_r+0x930>
 304da30:	dc400d17 	ldw	r17,52(sp)
 304da34:	0700c1b4 	movhi	fp,774
 304da38:	e72a2d84 	addi	fp,fp,-22346
 304da3c:	9425883a 	add	r18,r18,r16
 304da40:	8c400044 	addi	r17,r17,1
 304da44:	008001c4 	movi	r2,7
 304da48:	1f000015 	stw	fp,0(r3)
 304da4c:	1c000115 	stw	r16,4(r3)
 304da50:	dc800e15 	stw	r18,56(sp)
 304da54:	dc400d15 	stw	r17,52(sp)
 304da58:	147d9816 	blt	r2,r17,304d0bc <___vfprintf_internal_r+0xb2c>
 304da5c:	18c00204 	addi	r3,r3,8
 304da60:	003d9d06 	br	304d0d8 <___vfprintf_internal_r+0xb48>
 304da64:	dc800e17 	ldw	r18,56(sp)
 304da68:	dc400d17 	ldw	r17,52(sp)
 304da6c:	0700c1b4 	movhi	fp,774
 304da70:	e72a3184 	addi	fp,fp,-22330
 304da74:	003bec06 	br	304ca28 <___vfprintf_internal_r+0x498>
 304da78:	b809883a 	mov	r4,r23
 304da7c:	b00b883a 	mov	r5,r22
 304da80:	d9800c04 	addi	r6,sp,48
 304da84:	304c5380 	call	304c538 <__sprint_r>
 304da88:	103c831e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304da8c:	dc800e17 	ldw	r18,56(sp)
 304da90:	d8c01904 	addi	r3,sp,100
 304da94:	003d1906 	br	304cefc <___vfprintf_internal_r+0x96c>
 304da98:	0080c1b4 	movhi	r2,774
 304da9c:	10aa2d04 	addi	r2,r2,-22348
 304daa0:	94800044 	addi	r18,r18,1
 304daa4:	8c400044 	addi	r17,r17,1
 304daa8:	a0800015 	stw	r2,0(r20)
 304daac:	00c00044 	movi	r3,1
 304dab0:	008001c4 	movi	r2,7
 304dab4:	a0c00115 	stw	r3,4(r20)
 304dab8:	dc800e15 	stw	r18,56(sp)
 304dabc:	dc400d15 	stw	r17,52(sp)
 304dac0:	1440b716 	blt	r2,r17,304dda0 <___vfprintf_internal_r+0x1810>
 304dac4:	a0c00204 	addi	r3,r20,8
 304dac8:	2000061e 	bne	r4,zero,304dae4 <___vfprintf_internal_r+0x1554>
 304dacc:	d9414717 	ldw	r5,1308(sp)
 304dad0:	2800041e 	bne	r5,zero,304dae4 <___vfprintf_internal_r+0x1554>
 304dad4:	d9414c17 	ldw	r5,1328(sp)
 304dad8:	2880004c 	andi	r2,r5,1
 304dadc:	1005003a 	cmpeq	r2,r2,zero
 304dae0:	103c301e 	bne	r2,zero,304cba4 <___vfprintf_internal_r+0x614>
 304dae4:	00800044 	movi	r2,1
 304dae8:	dc400d17 	ldw	r17,52(sp)
 304daec:	18800115 	stw	r2,4(r3)
 304daf0:	d8814917 	ldw	r2,1316(sp)
 304daf4:	94800044 	addi	r18,r18,1
 304daf8:	8c400044 	addi	r17,r17,1
 304dafc:	18800015 	stw	r2,0(r3)
 304db00:	008001c4 	movi	r2,7
 304db04:	dc800e15 	stw	r18,56(sp)
 304db08:	dc400d15 	stw	r17,52(sp)
 304db0c:	1440bb16 	blt	r2,r17,304ddfc <___vfprintf_internal_r+0x186c>
 304db10:	18c00204 	addi	r3,r3,8
 304db14:	0121c83a 	sub	r16,zero,r4
 304db18:	0400410e 	bge	zero,r16,304dc20 <___vfprintf_internal_r+0x1690>
 304db1c:	00800404 	movi	r2,16
 304db20:	1400770e 	bge	r2,r16,304dd00 <___vfprintf_internal_r+0x1770>
 304db24:	1027883a 	mov	r19,r2
 304db28:	0700c1b4 	movhi	fp,774
 304db2c:	e72a2d84 	addi	fp,fp,-22346
 304db30:	050001c4 	movi	r20,7
 304db34:	00000306 	br	304db44 <___vfprintf_internal_r+0x15b4>
 304db38:	18c00204 	addi	r3,r3,8
 304db3c:	843ffc04 	addi	r16,r16,-16
 304db40:	9c00710e 	bge	r19,r16,304dd08 <___vfprintf_internal_r+0x1778>
 304db44:	94800404 	addi	r18,r18,16
 304db48:	8c400044 	addi	r17,r17,1
 304db4c:	1f000015 	stw	fp,0(r3)
 304db50:	1cc00115 	stw	r19,4(r3)
 304db54:	dc800e15 	stw	r18,56(sp)
 304db58:	dc400d15 	stw	r17,52(sp)
 304db5c:	a47ff60e 	bge	r20,r17,304db38 <___vfprintf_internal_r+0x15a8>
 304db60:	b809883a 	mov	r4,r23
 304db64:	b00b883a 	mov	r5,r22
 304db68:	d9800c04 	addi	r6,sp,48
 304db6c:	304c5380 	call	304c538 <__sprint_r>
 304db70:	103c491e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304db74:	dc800e17 	ldw	r18,56(sp)
 304db78:	dc400d17 	ldw	r17,52(sp)
 304db7c:	d8c01904 	addi	r3,sp,100
 304db80:	003fee06 	br	304db3c <___vfprintf_internal_r+0x15ac>
 304db84:	38800017 	ldw	r2,0(r7)
 304db88:	d9414b17 	ldw	r5,1324(sp)
 304db8c:	39c00104 	addi	r7,r7,4
 304db90:	d9c14015 	stw	r7,1280(sp)
 304db94:	11400015 	stw	r5,0(r2)
 304db98:	d9c14017 	ldw	r7,1280(sp)
 304db9c:	003ad706 	br	304c6fc <___vfprintf_internal_r+0x16c>
 304dba0:	d9001904 	addi	r4,sp,100
 304dba4:	dd400f04 	addi	r21,sp,60
 304dba8:	d9014115 	stw	r4,1284(sp)
 304dbac:	d9414417 	ldw	r5,1296(sp)
 304dbb0:	808003cc 	andi	r2,r16,15
 304dbb4:	8020d13a 	srli	r16,r16,4
 304dbb8:	2885883a 	add	r2,r5,r2
 304dbbc:	10c00003 	ldbu	r3,0(r2)
 304dbc0:	d8814117 	ldw	r2,1284(sp)
 304dbc4:	10bfffc4 	addi	r2,r2,-1
 304dbc8:	d8814115 	stw	r2,1284(sp)
 304dbcc:	10c00005 	stb	r3,0(r2)
 304dbd0:	803ff61e 	bne	r16,zero,304dbac <___vfprintf_internal_r+0x161c>
 304dbd4:	003d0e06 	br	304d010 <___vfprintf_internal_r+0xa80>
 304dbd8:	00800c04 	movi	r2,48
 304dbdc:	d8c018c4 	addi	r3,sp,99
 304dbe0:	dd400f04 	addi	r21,sp,60
 304dbe4:	d88018c5 	stb	r2,99(sp)
 304dbe8:	d8c14115 	stw	r3,1284(sp)
 304dbec:	003d0806 	br	304d010 <___vfprintf_internal_r+0xa80>
 304dbf0:	dc400d17 	ldw	r17,52(sp)
 304dbf4:	0700c1b4 	movhi	fp,774
 304dbf8:	e72a3184 	addi	fp,fp,-22330
 304dbfc:	003c0c06 	br	304cc30 <___vfprintf_internal_r+0x6a0>
 304dc00:	b809883a 	mov	r4,r23
 304dc04:	b00b883a 	mov	r5,r22
 304dc08:	d9800c04 	addi	r6,sp,48
 304dc0c:	304c5380 	call	304c538 <__sprint_r>
 304dc10:	103c211e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304dc14:	dc800e17 	ldw	r18,56(sp)
 304dc18:	dc400d17 	ldw	r17,52(sp)
 304dc1c:	d8c01904 	addi	r3,sp,100
 304dc20:	d9014717 	ldw	r4,1308(sp)
 304dc24:	d9414117 	ldw	r5,1284(sp)
 304dc28:	8c400044 	addi	r17,r17,1
 304dc2c:	9125883a 	add	r18,r18,r4
 304dc30:	008001c4 	movi	r2,7
 304dc34:	19400015 	stw	r5,0(r3)
 304dc38:	19000115 	stw	r4,4(r3)
 304dc3c:	dc800e15 	stw	r18,56(sp)
 304dc40:	dc400d15 	stw	r17,52(sp)
 304dc44:	147d3316 	blt	r2,r17,304d114 <___vfprintf_internal_r+0xb84>
 304dc48:	18c00204 	addi	r3,r3,8
 304dc4c:	003bd506 	br	304cba4 <___vfprintf_internal_r+0x614>
 304dc50:	39000017 	ldw	r4,0(r7)
 304dc54:	39400204 	addi	r5,r7,8
 304dc58:	d9414015 	stw	r5,1280(sp)
 304dc5c:	d9014215 	stw	r4,1288(sp)
 304dc60:	39c00117 	ldw	r7,4(r7)
 304dc64:	d9c14315 	stw	r7,1292(sp)
 304dc68:	003e7706 	br	304d648 <___vfprintf_internal_r+0x10b8>
 304dc6c:	00800b44 	movi	r2,45
 304dc70:	0421c83a 	sub	r16,zero,r16
 304dc74:	01000044 	movi	r4,1
 304dc78:	d8800405 	stb	r2,16(sp)
 304dc7c:	003cd806 	br	304cfe0 <___vfprintf_internal_r+0xa50>
 304dc80:	b809883a 	mov	r4,r23
 304dc84:	b00b883a 	mov	r5,r22
 304dc88:	d9800c04 	addi	r6,sp,48
 304dc8c:	304c5380 	call	304c538 <__sprint_r>
 304dc90:	103c011e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304dc94:	dc800e17 	ldw	r18,56(sp)
 304dc98:	dc400d17 	ldw	r17,52(sp)
 304dc9c:	d9000517 	ldw	r4,20(sp)
 304dca0:	d9401904 	addi	r5,sp,100
 304dca4:	003df206 	br	304d470 <___vfprintf_internal_r+0xee0>
 304dca8:	b809883a 	mov	r4,r23
 304dcac:	b00b883a 	mov	r5,r22
 304dcb0:	d9800c04 	addi	r6,sp,48
 304dcb4:	304c5380 	call	304c538 <__sprint_r>
 304dcb8:	103bf71e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304dcbc:	dc800e17 	ldw	r18,56(sp)
 304dcc0:	dc400d17 	ldw	r17,52(sp)
 304dcc4:	d9000517 	ldw	r4,20(sp)
 304dcc8:	d8c01904 	addi	r3,sp,100
 304dccc:	003ddc06 	br	304d440 <___vfprintf_internal_r+0xeb0>
 304dcd0:	b809883a 	mov	r4,r23
 304dcd4:	b00b883a 	mov	r5,r22
 304dcd8:	d9800c04 	addi	r6,sp,48
 304dcdc:	304c5380 	call	304c538 <__sprint_r>
 304dce0:	103bed1e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304dce4:	dc800e17 	ldw	r18,56(sp)
 304dce8:	d9000517 	ldw	r4,20(sp)
 304dcec:	d8c01904 	addi	r3,sp,100
 304dcf0:	003d5906 	br	304d258 <___vfprintf_internal_r+0xcc8>
 304dcf4:	0700c1b4 	movhi	fp,774
 304dcf8:	e72a2d84 	addi	fp,fp,-22346
 304dcfc:	003c4906 	br	304ce24 <___vfprintf_internal_r+0x894>
 304dd00:	0700c1b4 	movhi	fp,774
 304dd04:	e72a2d84 	addi	fp,fp,-22346
 304dd08:	9425883a 	add	r18,r18,r16
 304dd0c:	8c400044 	addi	r17,r17,1
 304dd10:	008001c4 	movi	r2,7
 304dd14:	1f000015 	stw	fp,0(r3)
 304dd18:	1c000115 	stw	r16,4(r3)
 304dd1c:	dc800e15 	stw	r18,56(sp)
 304dd20:	dc400d15 	stw	r17,52(sp)
 304dd24:	147fb616 	blt	r2,r17,304dc00 <___vfprintf_internal_r+0x1670>
 304dd28:	18c00204 	addi	r3,r3,8
 304dd2c:	003fbc06 	br	304dc20 <___vfprintf_internal_r+0x1690>
 304dd30:	0140c1b4 	movhi	r5,774
 304dd34:	296a1c04 	addi	r5,r5,-22416
 304dd38:	d9414115 	stw	r5,1284(sp)
 304dd3c:	003e5206 	br	304d688 <___vfprintf_internal_r+0x10f8>
 304dd40:	d9014217 	ldw	r4,1288(sp)
 304dd44:	d9414317 	ldw	r5,1292(sp)
 304dd48:	3051fbc0 	call	3051fbc <__isnand>
 304dd4c:	10003b26 	beq	r2,zero,304de3c <___vfprintf_internal_r+0x18ac>
 304dd50:	d9014d17 	ldw	r4,1332(sp)
 304dd54:	008011c4 	movi	r2,71
 304dd58:	1100c016 	blt	r2,r4,304e05c <___vfprintf_internal_r+0x1acc>
 304dd5c:	0140c1b4 	movhi	r5,774
 304dd60:	296a1d04 	addi	r5,r5,-22412
 304dd64:	d9414115 	stw	r5,1284(sp)
 304dd68:	d9014c17 	ldw	r4,1328(sp)
 304dd6c:	00c000c4 	movi	r3,3
 304dd70:	00bfdfc4 	movi	r2,-129
 304dd74:	2088703a 	and	r4,r4,r2
 304dd78:	180f883a 	mov	r7,r3
 304dd7c:	d8c14515 	stw	r3,1300(sp)
 304dd80:	d9014c15 	stw	r4,1328(sp)
 304dd84:	d8014615 	stw	zero,1304(sp)
 304dd88:	003ca806 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304dd8c:	dcc14515 	stw	r19,1300(sp)
 304dd90:	98010616 	blt	r19,zero,304e1ac <___vfprintf_internal_r+0x1c1c>
 304dd94:	980f883a 	mov	r7,r19
 304dd98:	d8014615 	stw	zero,1304(sp)
 304dd9c:	003ca306 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304dda0:	b809883a 	mov	r4,r23
 304dda4:	b00b883a 	mov	r5,r22
 304dda8:	d9800c04 	addi	r6,sp,48
 304ddac:	304c5380 	call	304c538 <__sprint_r>
 304ddb0:	103bb91e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304ddb4:	dc800e17 	ldw	r18,56(sp)
 304ddb8:	d9000517 	ldw	r4,20(sp)
 304ddbc:	d8c01904 	addi	r3,sp,100
 304ddc0:	003f4106 	br	304dac8 <___vfprintf_internal_r+0x1538>
 304ddc4:	00800184 	movi	r2,6
 304ddc8:	14c0c936 	bltu	r2,r19,304e0f0 <___vfprintf_internal_r+0x1b60>
 304ddcc:	dcc14515 	stw	r19,1300(sp)
 304ddd0:	9800010e 	bge	r19,zero,304ddd8 <___vfprintf_internal_r+0x1848>
 304ddd4:	d8014515 	stw	zero,1300(sp)
 304ddd8:	0140c1b4 	movhi	r5,774
 304dddc:	296a1f04 	addi	r5,r5,-22404
 304dde0:	980f883a 	mov	r7,r19
 304dde4:	d9414115 	stw	r5,1284(sp)
 304dde8:	003adf06 	br	304c968 <___vfprintf_internal_r+0x3d8>
 304ddec:	d90018c4 	addi	r4,sp,99
 304ddf0:	dd400f04 	addi	r21,sp,60
 304ddf4:	d9014115 	stw	r4,1284(sp)
 304ddf8:	003ed406 	br	304d94c <___vfprintf_internal_r+0x13bc>
 304ddfc:	b809883a 	mov	r4,r23
 304de00:	b00b883a 	mov	r5,r22
 304de04:	d9800c04 	addi	r6,sp,48
 304de08:	304c5380 	call	304c538 <__sprint_r>
 304de0c:	103ba21e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304de10:	dc800e17 	ldw	r18,56(sp)
 304de14:	dc400d17 	ldw	r17,52(sp)
 304de18:	d9000517 	ldw	r4,20(sp)
 304de1c:	d8c01904 	addi	r3,sp,100
 304de20:	003f3c06 	br	304db14 <___vfprintf_internal_r+0x1584>
 304de24:	b809883a 	mov	r4,r23
 304de28:	b00b883a 	mov	r5,r22
 304de2c:	d9800c04 	addi	r6,sp,48
 304de30:	304c5380 	call	304c538 <__sprint_r>
 304de34:	103b981e 	bne	r2,zero,304cc98 <___vfprintf_internal_r+0x708>
 304de38:	003b9606 	br	304cc94 <___vfprintf_internal_r+0x704>
 304de3c:	00bfffc4 	movi	r2,-1
 304de40:	9880d826 	beq	r19,r2,304e1a4 <___vfprintf_internal_r+0x1c14>
 304de44:	d9414d17 	ldw	r5,1332(sp)
 304de48:	008019c4 	movi	r2,103
 304de4c:	2880d226 	beq	r5,r2,304e198 <___vfprintf_internal_r+0x1c08>
 304de50:	008011c4 	movi	r2,71
 304de54:	2880d026 	beq	r5,r2,304e198 <___vfprintf_internal_r+0x1c08>
 304de58:	d9014217 	ldw	r4,1288(sp)
 304de5c:	d9414317 	ldw	r5,1292(sp)
 304de60:	2005883a 	mov	r2,r4
 304de64:	d9014c17 	ldw	r4,1328(sp)
 304de68:	2807883a 	mov	r3,r5
 304de6c:	21004014 	ori	r4,r4,256
 304de70:	d9014c15 	stw	r4,1328(sp)
 304de74:	2800c216 	blt	r5,zero,304e180 <___vfprintf_internal_r+0x1bf0>
 304de78:	1021883a 	mov	r16,r2
 304de7c:	1823883a 	mov	r17,r3
 304de80:	0039883a 	mov	fp,zero
 304de84:	d9414d17 	ldw	r5,1332(sp)
 304de88:	00801984 	movi	r2,102
 304de8c:	28809e26 	beq	r5,r2,304e108 <___vfprintf_internal_r+0x1b78>
 304de90:	00801184 	movi	r2,70
 304de94:	28809c26 	beq	r5,r2,304e108 <___vfprintf_internal_r+0x1b78>
 304de98:	00801944 	movi	r2,101
 304de9c:	2880b626 	beq	r5,r2,304e178 <___vfprintf_internal_r+0x1be8>
 304dea0:	00801144 	movi	r2,69
 304dea4:	2880b426 	beq	r5,r2,304e178 <___vfprintf_internal_r+0x1be8>
 304dea8:	982b883a 	mov	r21,r19
 304deac:	d8800504 	addi	r2,sp,20
 304deb0:	d8c00604 	addi	r3,sp,24
 304deb4:	d8800115 	stw	r2,4(sp)
 304deb8:	b809883a 	mov	r4,r23
 304debc:	d8800704 	addi	r2,sp,28
 304dec0:	800b883a 	mov	r5,r16
 304dec4:	880d883a 	mov	r6,r17
 304dec8:	01c00084 	movi	r7,2
 304decc:	d8c00215 	stw	r3,8(sp)
 304ded0:	d8800315 	stw	r2,12(sp)
 304ded4:	dd400015 	stw	r21,0(sp)
 304ded8:	304e8240 	call	304e824 <_dtoa_r>
 304dedc:	d8c14d17 	ldw	r3,1332(sp)
 304dee0:	d8814115 	stw	r2,1284(sp)
 304dee4:	008019c4 	movi	r2,103
 304dee8:	18809626 	beq	r3,r2,304e144 <___vfprintf_internal_r+0x1bb4>
 304deec:	d9014d17 	ldw	r4,1332(sp)
 304def0:	008011c4 	movi	r2,71
 304def4:	20809326 	beq	r4,r2,304e144 <___vfprintf_internal_r+0x1bb4>
 304def8:	d8814117 	ldw	r2,1284(sp)
 304defc:	d8c14d17 	ldw	r3,1332(sp)
 304df00:	a8a5883a 	add	r18,r21,r2
 304df04:	00801984 	movi	r2,102
 304df08:	18809426 	beq	r3,r2,304e15c <___vfprintf_internal_r+0x1bcc>
 304df0c:	00801184 	movi	r2,70
 304df10:	18809226 	beq	r3,r2,304e15c <___vfprintf_internal_r+0x1bcc>
 304df14:	000d883a 	mov	r6,zero
 304df18:	000f883a 	mov	r7,zero
 304df1c:	880b883a 	mov	r5,r17
 304df20:	8009883a 	mov	r4,r16
 304df24:	3052ac00 	call	3052ac0 <__eqdf2>
 304df28:	1000681e 	bne	r2,zero,304e0cc <___vfprintf_internal_r+0x1b3c>
 304df2c:	9005883a 	mov	r2,r18
 304df30:	dc800715 	stw	r18,28(sp)
 304df34:	d9414117 	ldw	r5,1284(sp)
 304df38:	00c019c4 	movi	r3,103
 304df3c:	1165c83a 	sub	r18,r2,r5
 304df40:	d8814d17 	ldw	r2,1332(sp)
 304df44:	10c05b26 	beq	r2,r3,304e0b4 <___vfprintf_internal_r+0x1b24>
 304df48:	d9014d17 	ldw	r4,1332(sp)
 304df4c:	008011c4 	movi	r2,71
 304df50:	20805826 	beq	r4,r2,304e0b4 <___vfprintf_internal_r+0x1b24>
 304df54:	d9000517 	ldw	r4,20(sp)
 304df58:	d8c14d17 	ldw	r3,1332(sp)
 304df5c:	00801944 	movi	r2,101
 304df60:	10c04716 	blt	r2,r3,304e080 <___vfprintf_internal_r+0x1af0>
 304df64:	213fffc4 	addi	r4,r4,-1
 304df68:	d9000515 	stw	r4,20(sp)
 304df6c:	d8c00805 	stb	r3,32(sp)
 304df70:	2021883a 	mov	r16,r4
 304df74:	2000ca16 	blt	r4,zero,304e2a0 <___vfprintf_internal_r+0x1d10>
 304df78:	00800ac4 	movi	r2,43
 304df7c:	d8800845 	stb	r2,33(sp)
 304df80:	00800244 	movi	r2,9
 304df84:	14009e0e 	bge	r2,r16,304e200 <___vfprintf_internal_r+0x1c70>
 304df88:	1027883a 	mov	r19,r2
 304df8c:	dc400b84 	addi	r17,sp,46
 304df90:	8009883a 	mov	r4,r16
 304df94:	01400284 	movi	r5,10
 304df98:	304978c0 	call	304978c <__modsi3>
 304df9c:	10800c04 	addi	r2,r2,48
 304dfa0:	8c7fffc4 	addi	r17,r17,-1
 304dfa4:	8009883a 	mov	r4,r16
 304dfa8:	01400284 	movi	r5,10
 304dfac:	88800005 	stb	r2,0(r17)
 304dfb0:	304972c0 	call	304972c <__divsi3>
 304dfb4:	1021883a 	mov	r16,r2
 304dfb8:	98bff516 	blt	r19,r2,304df90 <___vfprintf_internal_r+0x1a00>
 304dfbc:	10c00c04 	addi	r3,r2,48
 304dfc0:	d88009c4 	addi	r2,sp,39
 304dfc4:	897fffc4 	addi	r5,r17,-1
 304dfc8:	108001c4 	addi	r2,r2,7
 304dfcc:	28c00005 	stb	r3,0(r5)
 304dfd0:	2880962e 	bgeu	r5,r2,304e22c <___vfprintf_internal_r+0x1c9c>
 304dfd4:	1009883a 	mov	r4,r2
 304dfd8:	d9800804 	addi	r6,sp,32
 304dfdc:	d8c00884 	addi	r3,sp,34
 304dfe0:	28800003 	ldbu	r2,0(r5)
 304dfe4:	29400044 	addi	r5,r5,1
 304dfe8:	18800005 	stb	r2,0(r3)
 304dfec:	18c00044 	addi	r3,r3,1
 304dff0:	293ffb36 	bltu	r5,r4,304dfe0 <___vfprintf_internal_r+0x1a50>
 304dff4:	1987c83a 	sub	r3,r3,r6
 304dff8:	00800044 	movi	r2,1
 304dffc:	d8c14815 	stw	r3,1312(sp)
 304e000:	90cf883a 	add	r7,r18,r3
 304e004:	1480af0e 	bge	r2,r18,304e2c4 <___vfprintf_internal_r+0x1d34>
 304e008:	39c00044 	addi	r7,r7,1
 304e00c:	d9c14515 	stw	r7,1300(sp)
 304e010:	38002616 	blt	r7,zero,304e0ac <___vfprintf_internal_r+0x1b1c>
 304e014:	e0803fcc 	andi	r2,fp,255
 304e018:	1080201c 	xori	r2,r2,128
 304e01c:	10bfe004 	addi	r2,r2,-128
 304e020:	10001226 	beq	r2,zero,304e06c <___vfprintf_internal_r+0x1adc>
 304e024:	00800b44 	movi	r2,45
 304e028:	dc814715 	stw	r18,1308(sp)
 304e02c:	d8014615 	stw	zero,1304(sp)
 304e030:	d8800405 	stb	r2,16(sp)
 304e034:	003bff06 	br	304d034 <___vfprintf_internal_r+0xaa4>
 304e038:	00800b44 	movi	r2,45
 304e03c:	d8800405 	stb	r2,16(sp)
 304e040:	003d8b06 	br	304d670 <___vfprintf_internal_r+0x10e0>
 304e044:	980f883a 	mov	r7,r19
 304e048:	dcc14515 	stw	r19,1300(sp)
 304e04c:	d8014615 	stw	zero,1304(sp)
 304e050:	003bf606 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304e054:	0027883a 	mov	r19,zero
 304e058:	0039d506 	br	304c7b0 <___vfprintf_internal_r+0x220>
 304e05c:	0080c1b4 	movhi	r2,774
 304e060:	10aa1e04 	addi	r2,r2,-22408
 304e064:	d8814115 	stw	r2,1284(sp)
 304e068:	003f3f06 	br	304dd68 <___vfprintf_internal_r+0x17d8>
 304e06c:	d9c14515 	stw	r7,1300(sp)
 304e070:	38009816 	blt	r7,zero,304e2d4 <___vfprintf_internal_r+0x1d44>
 304e074:	dc814715 	stw	r18,1308(sp)
 304e078:	d8014615 	stw	zero,1304(sp)
 304e07c:	003beb06 	br	304d02c <___vfprintf_internal_r+0xa9c>
 304e080:	d9414d17 	ldw	r5,1332(sp)
 304e084:	00801984 	movi	r2,102
 304e088:	28805126 	beq	r5,r2,304e1d0 <___vfprintf_internal_r+0x1c40>
 304e08c:	200f883a 	mov	r7,r4
 304e090:	24804816 	blt	r4,r18,304e1b4 <___vfprintf_internal_r+0x1c24>
 304e094:	d8c14c17 	ldw	r3,1328(sp)
 304e098:	1880004c 	andi	r2,r3,1
 304e09c:	10000126 	beq	r2,zero,304e0a4 <___vfprintf_internal_r+0x1b14>
 304e0a0:	21c00044 	addi	r7,r4,1
 304e0a4:	d9c14515 	stw	r7,1300(sp)
 304e0a8:	383fda0e 	bge	r7,zero,304e014 <___vfprintf_internal_r+0x1a84>
 304e0ac:	d8014515 	stw	zero,1300(sp)
 304e0b0:	003fd806 	br	304e014 <___vfprintf_internal_r+0x1a84>
 304e0b4:	d9000517 	ldw	r4,20(sp)
 304e0b8:	00bfff04 	movi	r2,-4
 304e0bc:	1100570e 	bge	r2,r4,304e21c <___vfprintf_internal_r+0x1c8c>
 304e0c0:	99005616 	blt	r19,r4,304e21c <___vfprintf_internal_r+0x1c8c>
 304e0c4:	d8c14d15 	stw	r3,1332(sp)
 304e0c8:	003ff006 	br	304e08c <___vfprintf_internal_r+0x1afc>
 304e0cc:	d8800717 	ldw	r2,28(sp)
 304e0d0:	14bf982e 	bgeu	r2,r18,304df34 <___vfprintf_internal_r+0x19a4>
 304e0d4:	9007883a 	mov	r3,r18
 304e0d8:	01000c04 	movi	r4,48
 304e0dc:	11000005 	stb	r4,0(r2)
 304e0e0:	10800044 	addi	r2,r2,1
 304e0e4:	d8800715 	stw	r2,28(sp)
 304e0e8:	18bffc1e 	bne	r3,r2,304e0dc <___vfprintf_internal_r+0x1b4c>
 304e0ec:	003f9106 	br	304df34 <___vfprintf_internal_r+0x19a4>
 304e0f0:	d8814515 	stw	r2,1300(sp)
 304e0f4:	d9c14517 	ldw	r7,1300(sp)
 304e0f8:	0080c1b4 	movhi	r2,774
 304e0fc:	10aa1f04 	addi	r2,r2,-22404
 304e100:	d8814115 	stw	r2,1284(sp)
 304e104:	003a1806 	br	304c968 <___vfprintf_internal_r+0x3d8>
 304e108:	d8800504 	addi	r2,sp,20
 304e10c:	d8800115 	stw	r2,4(sp)
 304e110:	d8c00604 	addi	r3,sp,24
 304e114:	d8800704 	addi	r2,sp,28
 304e118:	b809883a 	mov	r4,r23
 304e11c:	800b883a 	mov	r5,r16
 304e120:	880d883a 	mov	r6,r17
 304e124:	01c000c4 	movi	r7,3
 304e128:	d8c00215 	stw	r3,8(sp)
 304e12c:	d8800315 	stw	r2,12(sp)
 304e130:	dcc00015 	stw	r19,0(sp)
 304e134:	982b883a 	mov	r21,r19
 304e138:	304e8240 	call	304e824 <_dtoa_r>
 304e13c:	d8814115 	stw	r2,1284(sp)
 304e140:	003f6a06 	br	304deec <___vfprintf_internal_r+0x195c>
 304e144:	d9414c17 	ldw	r5,1328(sp)
 304e148:	2880004c 	andi	r2,r5,1
 304e14c:	1005003a 	cmpeq	r2,r2,zero
 304e150:	103f6926 	beq	r2,zero,304def8 <___vfprintf_internal_r+0x1968>
 304e154:	d8800717 	ldw	r2,28(sp)
 304e158:	003f7606 	br	304df34 <___vfprintf_internal_r+0x19a4>
 304e15c:	d9014117 	ldw	r4,1284(sp)
 304e160:	00800c04 	movi	r2,48
 304e164:	20c00007 	ldb	r3,0(r4)
 304e168:	18803326 	beq	r3,r2,304e238 <___vfprintf_internal_r+0x1ca8>
 304e16c:	d9000517 	ldw	r4,20(sp)
 304e170:	9125883a 	add	r18,r18,r4
 304e174:	003f6706 	br	304df14 <___vfprintf_internal_r+0x1984>
 304e178:	9d400044 	addi	r21,r19,1
 304e17c:	003f4b06 	br	304deac <___vfprintf_internal_r+0x191c>
 304e180:	d8c14217 	ldw	r3,1288(sp)
 304e184:	d9014317 	ldw	r4,1292(sp)
 304e188:	07000b44 	movi	fp,45
 304e18c:	1821883a 	mov	r16,r3
 304e190:	2460003c 	xorhi	r17,r4,32768
 304e194:	003f3b06 	br	304de84 <___vfprintf_internal_r+0x18f4>
 304e198:	983f2f1e 	bne	r19,zero,304de58 <___vfprintf_internal_r+0x18c8>
 304e19c:	04c00044 	movi	r19,1
 304e1a0:	003f2d06 	br	304de58 <___vfprintf_internal_r+0x18c8>
 304e1a4:	04c00184 	movi	r19,6
 304e1a8:	003f2b06 	br	304de58 <___vfprintf_internal_r+0x18c8>
 304e1ac:	d8014515 	stw	zero,1300(sp)
 304e1b0:	003ef806 	br	304dd94 <___vfprintf_internal_r+0x1804>
 304e1b4:	01002f0e 	bge	zero,r4,304e274 <___vfprintf_internal_r+0x1ce4>
 304e1b8:	00800044 	movi	r2,1
 304e1bc:	1485883a 	add	r2,r2,r18
 304e1c0:	d8814515 	stw	r2,1300(sp)
 304e1c4:	100f883a 	mov	r7,r2
 304e1c8:	103f920e 	bge	r2,zero,304e014 <___vfprintf_internal_r+0x1a84>
 304e1cc:	003fb706 	br	304e0ac <___vfprintf_internal_r+0x1b1c>
 304e1d0:	200f883a 	mov	r7,r4
 304e1d4:	01002a0e 	bge	zero,r4,304e280 <___vfprintf_internal_r+0x1cf0>
 304e1d8:	9800031e 	bne	r19,zero,304e1e8 <___vfprintf_internal_r+0x1c58>
 304e1dc:	d8c14c17 	ldw	r3,1328(sp)
 304e1e0:	1880004c 	andi	r2,r3,1
 304e1e4:	103faf26 	beq	r2,zero,304e0a4 <___vfprintf_internal_r+0x1b14>
 304e1e8:	20800044 	addi	r2,r4,1
 304e1ec:	98a7883a 	add	r19,r19,r2
 304e1f0:	dcc14515 	stw	r19,1300(sp)
 304e1f4:	980f883a 	mov	r7,r19
 304e1f8:	983f860e 	bge	r19,zero,304e014 <___vfprintf_internal_r+0x1a84>
 304e1fc:	003fab06 	br	304e0ac <___vfprintf_internal_r+0x1b1c>
 304e200:	80c00c04 	addi	r3,r16,48
 304e204:	00800c04 	movi	r2,48
 304e208:	d8c008c5 	stb	r3,35(sp)
 304e20c:	d9800804 	addi	r6,sp,32
 304e210:	d8c00904 	addi	r3,sp,36
 304e214:	d8800885 	stb	r2,34(sp)
 304e218:	003f7606 	br	304dff4 <___vfprintf_internal_r+0x1a64>
 304e21c:	d9414d17 	ldw	r5,1332(sp)
 304e220:	297fff84 	addi	r5,r5,-2
 304e224:	d9414d15 	stw	r5,1332(sp)
 304e228:	003f4b06 	br	304df58 <___vfprintf_internal_r+0x19c8>
 304e22c:	d9800804 	addi	r6,sp,32
 304e230:	d8c00884 	addi	r3,sp,34
 304e234:	003f6f06 	br	304dff4 <___vfprintf_internal_r+0x1a64>
 304e238:	000d883a 	mov	r6,zero
 304e23c:	000f883a 	mov	r7,zero
 304e240:	8009883a 	mov	r4,r16
 304e244:	880b883a 	mov	r5,r17
 304e248:	3052b480 	call	3052b48 <__nedf2>
 304e24c:	103fc726 	beq	r2,zero,304e16c <___vfprintf_internal_r+0x1bdc>
 304e250:	00800044 	movi	r2,1
 304e254:	1549c83a 	sub	r4,r2,r21
 304e258:	d9000515 	stw	r4,20(sp)
 304e25c:	003fc306 	br	304e16c <___vfprintf_internal_r+0x1bdc>
 304e260:	3cc00017 	ldw	r19,0(r7)
 304e264:	39c00104 	addi	r7,r7,4
 304e268:	98394b0e 	bge	r19,zero,304c798 <___vfprintf_internal_r+0x208>
 304e26c:	04ffffc4 	movi	r19,-1
 304e270:	00394906 	br	304c798 <___vfprintf_internal_r+0x208>
 304e274:	00800084 	movi	r2,2
 304e278:	1105c83a 	sub	r2,r2,r4
 304e27c:	003fcf06 	br	304e1bc <___vfprintf_internal_r+0x1c2c>
 304e280:	98000b1e 	bne	r19,zero,304e2b0 <___vfprintf_internal_r+0x1d20>
 304e284:	d9014c17 	ldw	r4,1328(sp)
 304e288:	2080004c 	andi	r2,r4,1
 304e28c:	1000081e 	bne	r2,zero,304e2b0 <___vfprintf_internal_r+0x1d20>
 304e290:	01400044 	movi	r5,1
 304e294:	280f883a 	mov	r7,r5
 304e298:	d9414515 	stw	r5,1300(sp)
 304e29c:	003f5d06 	br	304e014 <___vfprintf_internal_r+0x1a84>
 304e2a0:	00800b44 	movi	r2,45
 304e2a4:	0121c83a 	sub	r16,zero,r4
 304e2a8:	d8800845 	stb	r2,33(sp)
 304e2ac:	003f3406 	br	304df80 <___vfprintf_internal_r+0x19f0>
 304e2b0:	9cc00084 	addi	r19,r19,2
 304e2b4:	dcc14515 	stw	r19,1300(sp)
 304e2b8:	980f883a 	mov	r7,r19
 304e2bc:	983f550e 	bge	r19,zero,304e014 <___vfprintf_internal_r+0x1a84>
 304e2c0:	003f7a06 	br	304e0ac <___vfprintf_internal_r+0x1b1c>
 304e2c4:	d9014c17 	ldw	r4,1328(sp)
 304e2c8:	2084703a 	and	r2,r4,r2
 304e2cc:	103f7526 	beq	r2,zero,304e0a4 <___vfprintf_internal_r+0x1b14>
 304e2d0:	003f4d06 	br	304e008 <___vfprintf_internal_r+0x1a78>
 304e2d4:	d8014515 	stw	zero,1300(sp)
 304e2d8:	dc814715 	stw	r18,1308(sp)
 304e2dc:	003f6606 	br	304e078 <___vfprintf_internal_r+0x1ae8>

0304e2e0 <__vfprintf_internal>:
 304e2e0:	0080c1b4 	movhi	r2,774
 304e2e4:	10b28804 	addi	r2,r2,-13792
 304e2e8:	2013883a 	mov	r9,r4
 304e2ec:	11000017 	ldw	r4,0(r2)
 304e2f0:	2805883a 	mov	r2,r5
 304e2f4:	300f883a 	mov	r7,r6
 304e2f8:	480b883a 	mov	r5,r9
 304e2fc:	100d883a 	mov	r6,r2
 304e300:	304c5901 	jmpi	304c590 <___vfprintf_internal_r>

0304e304 <_vsnprintf_r>:
 304e304:	deffe604 	addi	sp,sp,-104
 304e308:	dc401815 	stw	r17,96(sp)
 304e30c:	dc001715 	stw	r16,92(sp)
 304e310:	dfc01915 	stw	ra,100(sp)
 304e314:	3021883a 	mov	r16,r6
 304e318:	00ffffc4 	movi	r3,-1
 304e31c:	2023883a 	mov	r17,r4
 304e320:	2811883a 	mov	r8,r5
 304e324:	30002116 	blt	r6,zero,304e3ac <_vsnprintf_r+0xa8>
 304e328:	0007883a 	mov	r3,zero
 304e32c:	30000126 	beq	r6,zero,304e334 <_vsnprintf_r+0x30>
 304e330:	30ffffc4 	addi	r3,r6,-1
 304e334:	0080c1b4 	movhi	r2,774
 304e338:	10b28804 	addi	r2,r2,-13792
 304e33c:	380d883a 	mov	r6,r7
 304e340:	11000017 	ldw	r4,0(r2)
 304e344:	d9c01a17 	ldw	r7,104(sp)
 304e348:	00808204 	movi	r2,520
 304e34c:	d880030d 	sth	r2,12(sp)
 304e350:	d80b883a 	mov	r5,sp
 304e354:	00bfffc4 	movi	r2,-1
 304e358:	d8c00515 	stw	r3,20(sp)
 304e35c:	d8c00215 	stw	r3,8(sp)
 304e360:	da000415 	stw	r8,16(sp)
 304e364:	d880038d 	sth	r2,14(sp)
 304e368:	da000015 	stw	r8,0(sp)
 304e36c:	304c5900 	call	304c590 <___vfprintf_internal_r>
 304e370:	1007883a 	mov	r3,r2
 304e374:	00bfffc4 	movi	r2,-1
 304e378:	18800916 	blt	r3,r2,304e3a0 <_vsnprintf_r+0x9c>
 304e37c:	80000226 	beq	r16,zero,304e388 <_vsnprintf_r+0x84>
 304e380:	d8800017 	ldw	r2,0(sp)
 304e384:	10000005 	stb	zero,0(r2)
 304e388:	1805883a 	mov	r2,r3
 304e38c:	dfc01917 	ldw	ra,100(sp)
 304e390:	dc401817 	ldw	r17,96(sp)
 304e394:	dc001717 	ldw	r16,92(sp)
 304e398:	dec01a04 	addi	sp,sp,104
 304e39c:	f800283a 	ret
 304e3a0:	008022c4 	movi	r2,139
 304e3a4:	88800015 	stw	r2,0(r17)
 304e3a8:	003ff406 	br	304e37c <_vsnprintf_r+0x78>
 304e3ac:	008022c4 	movi	r2,139
 304e3b0:	20800015 	stw	r2,0(r4)
 304e3b4:	003ff406 	br	304e388 <_vsnprintf_r+0x84>

0304e3b8 <vsnprintf>:
 304e3b8:	0080c1b4 	movhi	r2,774
 304e3bc:	10b28804 	addi	r2,r2,-13792
 304e3c0:	2017883a 	mov	r11,r4
 304e3c4:	11000017 	ldw	r4,0(r2)
 304e3c8:	defffe04 	addi	sp,sp,-8
 304e3cc:	3013883a 	mov	r9,r6
 304e3d0:	2805883a 	mov	r2,r5
 304e3d4:	d9c00015 	stw	r7,0(sp)
 304e3d8:	580b883a 	mov	r5,r11
 304e3dc:	100d883a 	mov	r6,r2
 304e3e0:	480f883a 	mov	r7,r9
 304e3e4:	dfc00115 	stw	ra,4(sp)
 304e3e8:	304e3040 	call	304e304 <_vsnprintf_r>
 304e3ec:	dfc00117 	ldw	ra,4(sp)
 304e3f0:	dec00204 	addi	sp,sp,8
 304e3f4:	f800283a 	ret

0304e3f8 <_write_r>:
 304e3f8:	defffd04 	addi	sp,sp,-12
 304e3fc:	dc000015 	stw	r16,0(sp)
 304e400:	0400c1b4 	movhi	r16,774
 304e404:	8439ff04 	addi	r16,r16,-6148
 304e408:	dc400115 	stw	r17,4(sp)
 304e40c:	80000015 	stw	zero,0(r16)
 304e410:	2023883a 	mov	r17,r4
 304e414:	2809883a 	mov	r4,r5
 304e418:	300b883a 	mov	r5,r6
 304e41c:	380d883a 	mov	r6,r7
 304e420:	dfc00215 	stw	ra,8(sp)
 304e424:	30540740 	call	3054074 <write>
 304e428:	1007883a 	mov	r3,r2
 304e42c:	00bfffc4 	movi	r2,-1
 304e430:	18800626 	beq	r3,r2,304e44c <_write_r+0x54>
 304e434:	1805883a 	mov	r2,r3
 304e438:	dfc00217 	ldw	ra,8(sp)
 304e43c:	dc400117 	ldw	r17,4(sp)
 304e440:	dc000017 	ldw	r16,0(sp)
 304e444:	dec00304 	addi	sp,sp,12
 304e448:	f800283a 	ret
 304e44c:	80800017 	ldw	r2,0(r16)
 304e450:	103ff826 	beq	r2,zero,304e434 <_write_r+0x3c>
 304e454:	88800015 	stw	r2,0(r17)
 304e458:	1805883a 	mov	r2,r3
 304e45c:	dfc00217 	ldw	ra,8(sp)
 304e460:	dc400117 	ldw	r17,4(sp)
 304e464:	dc000017 	ldw	r16,0(sp)
 304e468:	dec00304 	addi	sp,sp,12
 304e46c:	f800283a 	ret

0304e470 <__swsetup_r>:
 304e470:	0080c1b4 	movhi	r2,774
 304e474:	10b28804 	addi	r2,r2,-13792
 304e478:	10c00017 	ldw	r3,0(r2)
 304e47c:	defffd04 	addi	sp,sp,-12
 304e480:	dc400115 	stw	r17,4(sp)
 304e484:	dc000015 	stw	r16,0(sp)
 304e488:	dfc00215 	stw	ra,8(sp)
 304e48c:	2023883a 	mov	r17,r4
 304e490:	2821883a 	mov	r16,r5
 304e494:	18000226 	beq	r3,zero,304e4a0 <__swsetup_r+0x30>
 304e498:	18800e17 	ldw	r2,56(r3)
 304e49c:	10001f26 	beq	r2,zero,304e51c <__swsetup_r+0xac>
 304e4a0:	8100030b 	ldhu	r4,12(r16)
 304e4a4:	2080020c 	andi	r2,r4,8
 304e4a8:	10002826 	beq	r2,zero,304e54c <__swsetup_r+0xdc>
 304e4ac:	81400417 	ldw	r5,16(r16)
 304e4b0:	28001d26 	beq	r5,zero,304e528 <__swsetup_r+0xb8>
 304e4b4:	2080004c 	andi	r2,r4,1
 304e4b8:	1005003a 	cmpeq	r2,r2,zero
 304e4bc:	10000b26 	beq	r2,zero,304e4ec <__swsetup_r+0x7c>
 304e4c0:	2080008c 	andi	r2,r4,2
 304e4c4:	10001226 	beq	r2,zero,304e510 <__swsetup_r+0xa0>
 304e4c8:	0005883a 	mov	r2,zero
 304e4cc:	80800215 	stw	r2,8(r16)
 304e4d0:	28000b26 	beq	r5,zero,304e500 <__swsetup_r+0x90>
 304e4d4:	0005883a 	mov	r2,zero
 304e4d8:	dfc00217 	ldw	ra,8(sp)
 304e4dc:	dc400117 	ldw	r17,4(sp)
 304e4e0:	dc000017 	ldw	r16,0(sp)
 304e4e4:	dec00304 	addi	sp,sp,12
 304e4e8:	f800283a 	ret
 304e4ec:	80800517 	ldw	r2,20(r16)
 304e4f0:	80000215 	stw	zero,8(r16)
 304e4f4:	0085c83a 	sub	r2,zero,r2
 304e4f8:	80800615 	stw	r2,24(r16)
 304e4fc:	283ff51e 	bne	r5,zero,304e4d4 <__swsetup_r+0x64>
 304e500:	2080200c 	andi	r2,r4,128
 304e504:	103ff326 	beq	r2,zero,304e4d4 <__swsetup_r+0x64>
 304e508:	00bfffc4 	movi	r2,-1
 304e50c:	003ff206 	br	304e4d8 <__swsetup_r+0x68>
 304e510:	80800517 	ldw	r2,20(r16)
 304e514:	80800215 	stw	r2,8(r16)
 304e518:	003fed06 	br	304e4d0 <__swsetup_r+0x60>
 304e51c:	1809883a 	mov	r4,r3
 304e520:	304a3800 	call	304a380 <__sinit>
 304e524:	003fde06 	br	304e4a0 <__swsetup_r+0x30>
 304e528:	20c0a00c 	andi	r3,r4,640
 304e52c:	00808004 	movi	r2,512
 304e530:	18bfe026 	beq	r3,r2,304e4b4 <__swsetup_r+0x44>
 304e534:	8809883a 	mov	r4,r17
 304e538:	800b883a 	mov	r5,r16
 304e53c:	304b2600 	call	304b260 <__smakebuf_r>
 304e540:	8100030b 	ldhu	r4,12(r16)
 304e544:	81400417 	ldw	r5,16(r16)
 304e548:	003fda06 	br	304e4b4 <__swsetup_r+0x44>
 304e54c:	2080040c 	andi	r2,r4,16
 304e550:	103fed26 	beq	r2,zero,304e508 <__swsetup_r+0x98>
 304e554:	2080010c 	andi	r2,r4,4
 304e558:	10001226 	beq	r2,zero,304e5a4 <__swsetup_r+0x134>
 304e55c:	81400c17 	ldw	r5,48(r16)
 304e560:	28000526 	beq	r5,zero,304e578 <__swsetup_r+0x108>
 304e564:	80801004 	addi	r2,r16,64
 304e568:	28800226 	beq	r5,r2,304e574 <__swsetup_r+0x104>
 304e56c:	8809883a 	mov	r4,r17
 304e570:	304a8140 	call	304a814 <_free_r>
 304e574:	80000c15 	stw	zero,48(r16)
 304e578:	8080030b 	ldhu	r2,12(r16)
 304e57c:	81400417 	ldw	r5,16(r16)
 304e580:	80000115 	stw	zero,4(r16)
 304e584:	10bff6cc 	andi	r2,r2,65499
 304e588:	8080030d 	sth	r2,12(r16)
 304e58c:	81400015 	stw	r5,0(r16)
 304e590:	8080030b 	ldhu	r2,12(r16)
 304e594:	10800214 	ori	r2,r2,8
 304e598:	113fffcc 	andi	r4,r2,65535
 304e59c:	8080030d 	sth	r2,12(r16)
 304e5a0:	003fc306 	br	304e4b0 <__swsetup_r+0x40>
 304e5a4:	81400417 	ldw	r5,16(r16)
 304e5a8:	003ff906 	br	304e590 <__swsetup_r+0x120>

0304e5ac <_close_r>:
 304e5ac:	defffd04 	addi	sp,sp,-12
 304e5b0:	dc000015 	stw	r16,0(sp)
 304e5b4:	0400c1b4 	movhi	r16,774
 304e5b8:	8439ff04 	addi	r16,r16,-6148
 304e5bc:	dc400115 	stw	r17,4(sp)
 304e5c0:	80000015 	stw	zero,0(r16)
 304e5c4:	2023883a 	mov	r17,r4
 304e5c8:	2809883a 	mov	r4,r5
 304e5cc:	dfc00215 	stw	ra,8(sp)
 304e5d0:	30531a00 	call	30531a0 <close>
 304e5d4:	1007883a 	mov	r3,r2
 304e5d8:	00bfffc4 	movi	r2,-1
 304e5dc:	18800626 	beq	r3,r2,304e5f8 <_close_r+0x4c>
 304e5e0:	1805883a 	mov	r2,r3
 304e5e4:	dfc00217 	ldw	ra,8(sp)
 304e5e8:	dc400117 	ldw	r17,4(sp)
 304e5ec:	dc000017 	ldw	r16,0(sp)
 304e5f0:	dec00304 	addi	sp,sp,12
 304e5f4:	f800283a 	ret
 304e5f8:	80800017 	ldw	r2,0(r16)
 304e5fc:	103ff826 	beq	r2,zero,304e5e0 <_close_r+0x34>
 304e600:	88800015 	stw	r2,0(r17)
 304e604:	1805883a 	mov	r2,r3
 304e608:	dfc00217 	ldw	ra,8(sp)
 304e60c:	dc400117 	ldw	r17,4(sp)
 304e610:	dc000017 	ldw	r16,0(sp)
 304e614:	dec00304 	addi	sp,sp,12
 304e618:	f800283a 	ret

0304e61c <quorem>:
 304e61c:	28c00417 	ldw	r3,16(r5)
 304e620:	20800417 	ldw	r2,16(r4)
 304e624:	defff604 	addi	sp,sp,-40
 304e628:	dd800615 	stw	r22,24(sp)
 304e62c:	dd400515 	stw	r21,20(sp)
 304e630:	dfc00915 	stw	ra,36(sp)
 304e634:	df000815 	stw	fp,32(sp)
 304e638:	ddc00715 	stw	r23,28(sp)
 304e63c:	dd000415 	stw	r20,16(sp)
 304e640:	dcc00315 	stw	r19,12(sp)
 304e644:	dc800215 	stw	r18,8(sp)
 304e648:	dc400115 	stw	r17,4(sp)
 304e64c:	dc000015 	stw	r16,0(sp)
 304e650:	202d883a 	mov	r22,r4
 304e654:	282b883a 	mov	r21,r5
 304e658:	10c07016 	blt	r2,r3,304e81c <quorem+0x200>
 304e65c:	1c7fffc4 	addi	r17,r3,-1
 304e660:	8c45883a 	add	r2,r17,r17
 304e664:	1085883a 	add	r2,r2,r2
 304e668:	2c000504 	addi	r16,r5,20
 304e66c:	24c00504 	addi	r19,r4,20
 304e670:	14f9883a 	add	fp,r2,r19
 304e674:	80a5883a 	add	r18,r16,r2
 304e678:	e5c00017 	ldw	r23,0(fp)
 304e67c:	91400017 	ldw	r5,0(r18)
 304e680:	b809883a 	mov	r4,r23
 304e684:	29400044 	addi	r5,r5,1
 304e688:	30497ec0 	call	30497ec <__udivsi3>
 304e68c:	1029883a 	mov	r20,r2
 304e690:	10003a1e 	bne	r2,zero,304e77c <quorem+0x160>
 304e694:	a80b883a 	mov	r5,r21
 304e698:	b009883a 	mov	r4,r22
 304e69c:	30508440 	call	3050844 <__mcmp>
 304e6a0:	10002916 	blt	r2,zero,304e748 <quorem+0x12c>
 304e6a4:	a5000044 	addi	r20,r20,1
 304e6a8:	980f883a 	mov	r7,r19
 304e6ac:	0011883a 	mov	r8,zero
 304e6b0:	0009883a 	mov	r4,zero
 304e6b4:	81400017 	ldw	r5,0(r16)
 304e6b8:	38c00017 	ldw	r3,0(r7)
 304e6bc:	84000104 	addi	r16,r16,4
 304e6c0:	28bfffcc 	andi	r2,r5,65535
 304e6c4:	2085883a 	add	r2,r4,r2
 304e6c8:	11bfffcc 	andi	r6,r2,65535
 304e6cc:	193fffcc 	andi	r4,r3,65535
 304e6d0:	1004d43a 	srli	r2,r2,16
 304e6d4:	280ad43a 	srli	r5,r5,16
 304e6d8:	2189c83a 	sub	r4,r4,r6
 304e6dc:	2209883a 	add	r4,r4,r8
 304e6e0:	1806d43a 	srli	r3,r3,16
 304e6e4:	288b883a 	add	r5,r5,r2
 304e6e8:	200dd43a 	srai	r6,r4,16
 304e6ec:	28bfffcc 	andi	r2,r5,65535
 304e6f0:	1887c83a 	sub	r3,r3,r2
 304e6f4:	1987883a 	add	r3,r3,r6
 304e6f8:	3900000d 	sth	r4,0(r7)
 304e6fc:	38c0008d 	sth	r3,2(r7)
 304e700:	2808d43a 	srli	r4,r5,16
 304e704:	39c00104 	addi	r7,r7,4
 304e708:	1811d43a 	srai	r8,r3,16
 304e70c:	943fe92e 	bgeu	r18,r16,304e6b4 <quorem+0x98>
 304e710:	8c45883a 	add	r2,r17,r17
 304e714:	1085883a 	add	r2,r2,r2
 304e718:	9885883a 	add	r2,r19,r2
 304e71c:	10c00017 	ldw	r3,0(r2)
 304e720:	1800091e 	bne	r3,zero,304e748 <quorem+0x12c>
 304e724:	10ffff04 	addi	r3,r2,-4
 304e728:	98c00436 	bltu	r19,r3,304e73c <quorem+0x120>
 304e72c:	00000506 	br	304e744 <quorem+0x128>
 304e730:	18ffff04 	addi	r3,r3,-4
 304e734:	8c7fffc4 	addi	r17,r17,-1
 304e738:	98c0022e 	bgeu	r19,r3,304e744 <quorem+0x128>
 304e73c:	18800017 	ldw	r2,0(r3)
 304e740:	103ffb26 	beq	r2,zero,304e730 <quorem+0x114>
 304e744:	b4400415 	stw	r17,16(r22)
 304e748:	a005883a 	mov	r2,r20
 304e74c:	dfc00917 	ldw	ra,36(sp)
 304e750:	df000817 	ldw	fp,32(sp)
 304e754:	ddc00717 	ldw	r23,28(sp)
 304e758:	dd800617 	ldw	r22,24(sp)
 304e75c:	dd400517 	ldw	r21,20(sp)
 304e760:	dd000417 	ldw	r20,16(sp)
 304e764:	dcc00317 	ldw	r19,12(sp)
 304e768:	dc800217 	ldw	r18,8(sp)
 304e76c:	dc400117 	ldw	r17,4(sp)
 304e770:	dc000017 	ldw	r16,0(sp)
 304e774:	dec00a04 	addi	sp,sp,40
 304e778:	f800283a 	ret
 304e77c:	980f883a 	mov	r7,r19
 304e780:	8011883a 	mov	r8,r16
 304e784:	0013883a 	mov	r9,zero
 304e788:	000d883a 	mov	r6,zero
 304e78c:	40c00017 	ldw	r3,0(r8)
 304e790:	39000017 	ldw	r4,0(r7)
 304e794:	42000104 	addi	r8,r8,4
 304e798:	18bfffcc 	andi	r2,r3,65535
 304e79c:	a085383a 	mul	r2,r20,r2
 304e7a0:	1806d43a 	srli	r3,r3,16
 304e7a4:	217fffcc 	andi	r5,r4,65535
 304e7a8:	3085883a 	add	r2,r6,r2
 304e7ac:	11bfffcc 	andi	r6,r2,65535
 304e7b0:	a0c7383a 	mul	r3,r20,r3
 304e7b4:	1004d43a 	srli	r2,r2,16
 304e7b8:	298bc83a 	sub	r5,r5,r6
 304e7bc:	2a4b883a 	add	r5,r5,r9
 304e7c0:	2008d43a 	srli	r4,r4,16
 304e7c4:	1887883a 	add	r3,r3,r2
 304e7c8:	280dd43a 	srai	r6,r5,16
 304e7cc:	18bfffcc 	andi	r2,r3,65535
 304e7d0:	2089c83a 	sub	r4,r4,r2
 304e7d4:	2189883a 	add	r4,r4,r6
 304e7d8:	3900008d 	sth	r4,2(r7)
 304e7dc:	3940000d 	sth	r5,0(r7)
 304e7e0:	180cd43a 	srli	r6,r3,16
 304e7e4:	39c00104 	addi	r7,r7,4
 304e7e8:	2013d43a 	srai	r9,r4,16
 304e7ec:	923fe72e 	bgeu	r18,r8,304e78c <quorem+0x170>
 304e7f0:	b83fa81e 	bne	r23,zero,304e694 <quorem+0x78>
 304e7f4:	e0ffff04 	addi	r3,fp,-4
 304e7f8:	98c00436 	bltu	r19,r3,304e80c <quorem+0x1f0>
 304e7fc:	00000506 	br	304e814 <quorem+0x1f8>
 304e800:	18ffff04 	addi	r3,r3,-4
 304e804:	8c7fffc4 	addi	r17,r17,-1
 304e808:	98c0022e 	bgeu	r19,r3,304e814 <quorem+0x1f8>
 304e80c:	18800017 	ldw	r2,0(r3)
 304e810:	103ffb26 	beq	r2,zero,304e800 <quorem+0x1e4>
 304e814:	b4400415 	stw	r17,16(r22)
 304e818:	003f9e06 	br	304e694 <quorem+0x78>
 304e81c:	0005883a 	mov	r2,zero
 304e820:	003fca06 	br	304e74c <quorem+0x130>

0304e824 <_dtoa_r>:
 304e824:	22001017 	ldw	r8,64(r4)
 304e828:	deffda04 	addi	sp,sp,-152
 304e82c:	dd402115 	stw	r21,132(sp)
 304e830:	dd002015 	stw	r20,128(sp)
 304e834:	dc801e15 	stw	r18,120(sp)
 304e838:	dc401d15 	stw	r17,116(sp)
 304e83c:	dfc02515 	stw	ra,148(sp)
 304e840:	df002415 	stw	fp,144(sp)
 304e844:	ddc02315 	stw	r23,140(sp)
 304e848:	dd802215 	stw	r22,136(sp)
 304e84c:	dcc01f15 	stw	r19,124(sp)
 304e850:	dc001c15 	stw	r16,112(sp)
 304e854:	d9001615 	stw	r4,88(sp)
 304e858:	3023883a 	mov	r17,r6
 304e85c:	2829883a 	mov	r20,r5
 304e860:	d9c01715 	stw	r7,92(sp)
 304e864:	dc802817 	ldw	r18,160(sp)
 304e868:	302b883a 	mov	r21,r6
 304e86c:	40000a26 	beq	r8,zero,304e898 <_dtoa_r+0x74>
 304e870:	20801117 	ldw	r2,68(r4)
 304e874:	400b883a 	mov	r5,r8
 304e878:	40800115 	stw	r2,4(r8)
 304e87c:	20c01117 	ldw	r3,68(r4)
 304e880:	00800044 	movi	r2,1
 304e884:	10c4983a 	sll	r2,r2,r3
 304e888:	40800215 	stw	r2,8(r8)
 304e88c:	30506e80 	call	30506e8 <_Bfree>
 304e890:	d8c01617 	ldw	r3,88(sp)
 304e894:	18001015 	stw	zero,64(r3)
 304e898:	8800a516 	blt	r17,zero,304eb30 <_dtoa_r+0x30c>
 304e89c:	90000015 	stw	zero,0(r18)
 304e8a0:	a8dffc2c 	andhi	r3,r21,32752
 304e8a4:	009ffc34 	movhi	r2,32752
 304e8a8:	10800004 	addi	r2,r2,0
 304e8ac:	18809226 	beq	r3,r2,304eaf8 <_dtoa_r+0x2d4>
 304e8b0:	000d883a 	mov	r6,zero
 304e8b4:	000f883a 	mov	r7,zero
 304e8b8:	a009883a 	mov	r4,r20
 304e8bc:	a80b883a 	mov	r5,r21
 304e8c0:	dd001215 	stw	r20,72(sp)
 304e8c4:	dd401315 	stw	r21,76(sp)
 304e8c8:	3052b480 	call	3052b48 <__nedf2>
 304e8cc:	1000171e 	bne	r2,zero,304e92c <_dtoa_r+0x108>
 304e8d0:	d9802717 	ldw	r6,156(sp)
 304e8d4:	00800044 	movi	r2,1
 304e8d8:	30800015 	stw	r2,0(r6)
 304e8dc:	d8802917 	ldw	r2,164(sp)
 304e8e0:	1002a326 	beq	r2,zero,304f370 <_dtoa_r+0xb4c>
 304e8e4:	d8c02917 	ldw	r3,164(sp)
 304e8e8:	0080c1b4 	movhi	r2,774
 304e8ec:	10aa2d44 	addi	r2,r2,-22347
 304e8f0:	113fffc4 	addi	r4,r2,-1
 304e8f4:	18800015 	stw	r2,0(r3)
 304e8f8:	2005883a 	mov	r2,r4
 304e8fc:	dfc02517 	ldw	ra,148(sp)
 304e900:	df002417 	ldw	fp,144(sp)
 304e904:	ddc02317 	ldw	r23,140(sp)
 304e908:	dd802217 	ldw	r22,136(sp)
 304e90c:	dd402117 	ldw	r21,132(sp)
 304e910:	dd002017 	ldw	r20,128(sp)
 304e914:	dcc01f17 	ldw	r19,124(sp)
 304e918:	dc801e17 	ldw	r18,120(sp)
 304e91c:	dc401d17 	ldw	r17,116(sp)
 304e920:	dc001c17 	ldw	r16,112(sp)
 304e924:	dec02604 	addi	sp,sp,152
 304e928:	f800283a 	ret
 304e92c:	d9001617 	ldw	r4,88(sp)
 304e930:	d9401217 	ldw	r5,72(sp)
 304e934:	d8800104 	addi	r2,sp,4
 304e938:	a80d883a 	mov	r6,r21
 304e93c:	d9c00204 	addi	r7,sp,8
 304e940:	d8800015 	stw	r2,0(sp)
 304e944:	3050d3c0 	call	3050d3c <__d2b>
 304e948:	d8800715 	stw	r2,28(sp)
 304e94c:	a804d53a 	srli	r2,r21,20
 304e950:	1101ffcc 	andi	r4,r2,2047
 304e954:	20008726 	beq	r4,zero,304eb74 <_dtoa_r+0x350>
 304e958:	d8c01217 	ldw	r3,72(sp)
 304e95c:	00800434 	movhi	r2,16
 304e960:	10bfffc4 	addi	r2,r2,-1
 304e964:	ddc00117 	ldw	r23,4(sp)
 304e968:	a884703a 	and	r2,r21,r2
 304e96c:	1811883a 	mov	r8,r3
 304e970:	124ffc34 	orhi	r9,r2,16368
 304e974:	25bf0044 	addi	r22,r4,-1023
 304e978:	d8000815 	stw	zero,32(sp)
 304e97c:	0005883a 	mov	r2,zero
 304e980:	00cffe34 	movhi	r3,16376
 304e984:	18c00004 	addi	r3,r3,0
 304e988:	480b883a 	mov	r5,r9
 304e98c:	4009883a 	mov	r4,r8
 304e990:	180f883a 	mov	r7,r3
 304e994:	100d883a 	mov	r6,r2
 304e998:	30526040 	call	3052604 <__subdf3>
 304e99c:	0218dbf4 	movhi	r8,25455
 304e9a0:	4210d844 	addi	r8,r8,17249
 304e9a4:	024ff4f4 	movhi	r9,16339
 304e9a8:	4a61e9c4 	addi	r9,r9,-30809
 304e9ac:	480f883a 	mov	r7,r9
 304e9b0:	400d883a 	mov	r6,r8
 304e9b4:	180b883a 	mov	r5,r3
 304e9b8:	1009883a 	mov	r4,r2
 304e9bc:	30526f80 	call	30526f8 <__muldf3>
 304e9c0:	0222d874 	movhi	r8,35681
 304e9c4:	42322cc4 	addi	r8,r8,-14157
 304e9c8:	024ff1f4 	movhi	r9,16327
 304e9cc:	4a628a04 	addi	r9,r9,-30168
 304e9d0:	480f883a 	mov	r7,r9
 304e9d4:	400d883a 	mov	r6,r8
 304e9d8:	180b883a 	mov	r5,r3
 304e9dc:	1009883a 	mov	r4,r2
 304e9e0:	30526840 	call	3052684 <__adddf3>
 304e9e4:	b009883a 	mov	r4,r22
 304e9e8:	1021883a 	mov	r16,r2
 304e9ec:	1823883a 	mov	r17,r3
 304e9f0:	3052d680 	call	3052d68 <__floatsidf>
 304e9f4:	021427f4 	movhi	r8,20639
 304e9f8:	421e7ec4 	addi	r8,r8,31227
 304e9fc:	024ff4f4 	movhi	r9,16339
 304ea00:	4a5104c4 	addi	r9,r9,17427
 304ea04:	480f883a 	mov	r7,r9
 304ea08:	400d883a 	mov	r6,r8
 304ea0c:	180b883a 	mov	r5,r3
 304ea10:	1009883a 	mov	r4,r2
 304ea14:	30526f80 	call	30526f8 <__muldf3>
 304ea18:	180f883a 	mov	r7,r3
 304ea1c:	880b883a 	mov	r5,r17
 304ea20:	100d883a 	mov	r6,r2
 304ea24:	8009883a 	mov	r4,r16
 304ea28:	30526840 	call	3052684 <__adddf3>
 304ea2c:	1009883a 	mov	r4,r2
 304ea30:	180b883a 	mov	r5,r3
 304ea34:	1021883a 	mov	r16,r2
 304ea38:	1823883a 	mov	r17,r3
 304ea3c:	3052e680 	call	3052e68 <__fixdfsi>
 304ea40:	000d883a 	mov	r6,zero
 304ea44:	000f883a 	mov	r7,zero
 304ea48:	8009883a 	mov	r4,r16
 304ea4c:	880b883a 	mov	r5,r17
 304ea50:	d8800d15 	stw	r2,52(sp)
 304ea54:	3052ce00 	call	3052ce0 <__ltdf2>
 304ea58:	10031e16 	blt	r2,zero,304f6d4 <_dtoa_r+0xeb0>
 304ea5c:	d8c00d17 	ldw	r3,52(sp)
 304ea60:	00800584 	movi	r2,22
 304ea64:	10c14f2e 	bgeu	r2,r3,304efa4 <_dtoa_r+0x780>
 304ea68:	01000044 	movi	r4,1
 304ea6c:	d9000c15 	stw	r4,48(sp)
 304ea70:	bd85c83a 	sub	r2,r23,r22
 304ea74:	11bfffc4 	addi	r6,r2,-1
 304ea78:	30031216 	blt	r6,zero,304f6c4 <_dtoa_r+0xea0>
 304ea7c:	d9800a15 	stw	r6,40(sp)
 304ea80:	d8001115 	stw	zero,68(sp)
 304ea84:	d8c00d17 	ldw	r3,52(sp)
 304ea88:	18030616 	blt	r3,zero,304f6a4 <_dtoa_r+0xe80>
 304ea8c:	d9000a17 	ldw	r4,40(sp)
 304ea90:	d8c00915 	stw	r3,36(sp)
 304ea94:	d8001015 	stw	zero,64(sp)
 304ea98:	20c9883a 	add	r4,r4,r3
 304ea9c:	d9000a15 	stw	r4,40(sp)
 304eaa0:	d9001717 	ldw	r4,92(sp)
 304eaa4:	00800244 	movi	r2,9
 304eaa8:	11004736 	bltu	r2,r4,304ebc8 <_dtoa_r+0x3a4>
 304eaac:	00800144 	movi	r2,5
 304eab0:	11020b16 	blt	r2,r4,304f2e0 <_dtoa_r+0xabc>
 304eab4:	04400044 	movi	r17,1
 304eab8:	d8c01717 	ldw	r3,92(sp)
 304eabc:	00800144 	movi	r2,5
 304eac0:	10c1f436 	bltu	r2,r3,304f294 <_dtoa_r+0xa70>
 304eac4:	18c5883a 	add	r2,r3,r3
 304eac8:	1085883a 	add	r2,r2,r2
 304eacc:	00c0c174 	movhi	r3,773
 304ead0:	18fab804 	addi	r3,r3,-5408
 304ead4:	10c5883a 	add	r2,r2,r3
 304ead8:	11000017 	ldw	r4,0(r2)
 304eadc:	2000683a 	jmp	r4
 304eae0:	0304ebd0 	cmplti	r12,zero,5039
 304eae4:	0304ebd0 	cmplti	r12,zero,5039
 304eae8:	0304f5e8 	cmpgeui	r12,zero,5079
 304eaec:	0304f5c0 	call	304f5c <__alt_mem_av_tri_s1_cfi_flash_0-0x24fb0a4>
 304eaf0:	0304f604 	movi	r12,5080
 304eaf4:	0304f610 	cmplti	r12,zero,5080
 304eaf8:	d9002717 	ldw	r4,156(sp)
 304eafc:	0089c3c4 	movi	r2,9999
 304eb00:	20800015 	stw	r2,0(r4)
 304eb04:	a0001026 	beq	r20,zero,304eb48 <_dtoa_r+0x324>
 304eb08:	0100c1b4 	movhi	r4,774
 304eb0c:	212ad904 	addi	r4,r4,-21660
 304eb10:	d9802917 	ldw	r6,164(sp)
 304eb14:	303f7826 	beq	r6,zero,304e8f8 <_dtoa_r+0xd4>
 304eb18:	20c000c4 	addi	r3,r4,3
 304eb1c:	18800007 	ldb	r2,0(r3)
 304eb20:	1000101e 	bne	r2,zero,304eb64 <_dtoa_r+0x340>
 304eb24:	d8802917 	ldw	r2,164(sp)
 304eb28:	10c00015 	stw	r3,0(r2)
 304eb2c:	003f7206 	br	304e8f8 <_dtoa_r+0xd4>
 304eb30:	00a00034 	movhi	r2,32768
 304eb34:	10bfffc4 	addi	r2,r2,-1
 304eb38:	00c00044 	movi	r3,1
 304eb3c:	88aa703a 	and	r21,r17,r2
 304eb40:	90c00015 	stw	r3,0(r18)
 304eb44:	003f5606 	br	304e8a0 <_dtoa_r+0x7c>
 304eb48:	00800434 	movhi	r2,16
 304eb4c:	10bfffc4 	addi	r2,r2,-1
 304eb50:	a884703a 	and	r2,r21,r2
 304eb54:	103fec1e 	bne	r2,zero,304eb08 <_dtoa_r+0x2e4>
 304eb58:	0100c1b4 	movhi	r4,774
 304eb5c:	212ad604 	addi	r4,r4,-21672
 304eb60:	003feb06 	br	304eb10 <_dtoa_r+0x2ec>
 304eb64:	d8802917 	ldw	r2,164(sp)
 304eb68:	20c00204 	addi	r3,r4,8
 304eb6c:	10c00015 	stw	r3,0(r2)
 304eb70:	003f6106 	br	304e8f8 <_dtoa_r+0xd4>
 304eb74:	ddc00117 	ldw	r23,4(sp)
 304eb78:	d8800217 	ldw	r2,8(sp)
 304eb7c:	01000804 	movi	r4,32
 304eb80:	b8c10c84 	addi	r3,r23,1074
 304eb84:	18a3883a 	add	r17,r3,r2
 304eb88:	2441bf0e 	bge	r4,r17,304f288 <_dtoa_r+0xa64>
 304eb8c:	00c01004 	movi	r3,64
 304eb90:	1c47c83a 	sub	r3,r3,r17
 304eb94:	88bff804 	addi	r2,r17,-32
 304eb98:	a8c6983a 	sll	r3,r21,r3
 304eb9c:	a084d83a 	srl	r2,r20,r2
 304eba0:	1888b03a 	or	r4,r3,r2
 304eba4:	3052f440 	call	3052f44 <__floatunsidf>
 304eba8:	1011883a 	mov	r8,r2
 304ebac:	00bf8434 	movhi	r2,65040
 304ebb0:	10800004 	addi	r2,r2,0
 304ebb4:	01000044 	movi	r4,1
 304ebb8:	10d3883a 	add	r9,r2,r3
 304ebbc:	8dbef344 	addi	r22,r17,-1075
 304ebc0:	d9000815 	stw	r4,32(sp)
 304ebc4:	003f6d06 	br	304e97c <_dtoa_r+0x158>
 304ebc8:	d8001715 	stw	zero,92(sp)
 304ebcc:	04400044 	movi	r17,1
 304ebd0:	00bfffc4 	movi	r2,-1
 304ebd4:	00c00044 	movi	r3,1
 304ebd8:	d8800e15 	stw	r2,56(sp)
 304ebdc:	d8002615 	stw	zero,152(sp)
 304ebe0:	d8800f15 	stw	r2,60(sp)
 304ebe4:	d8c00b15 	stw	r3,44(sp)
 304ebe8:	1021883a 	mov	r16,r2
 304ebec:	d8c01617 	ldw	r3,88(sp)
 304ebf0:	18001115 	stw	zero,68(r3)
 304ebf4:	d8801617 	ldw	r2,88(sp)
 304ebf8:	11401117 	ldw	r5,68(r2)
 304ebfc:	1009883a 	mov	r4,r2
 304ec00:	3050c800 	call	3050c80 <_Balloc>
 304ec04:	d8c01617 	ldw	r3,88(sp)
 304ec08:	d8800515 	stw	r2,20(sp)
 304ec0c:	18801015 	stw	r2,64(r3)
 304ec10:	00800384 	movi	r2,14
 304ec14:	14006c36 	bltu	r2,r16,304edc8 <_dtoa_r+0x5a4>
 304ec18:	8805003a 	cmpeq	r2,r17,zero
 304ec1c:	10006a1e 	bne	r2,zero,304edc8 <_dtoa_r+0x5a4>
 304ec20:	d9000d17 	ldw	r4,52(sp)
 304ec24:	0102360e 	bge	zero,r4,304f500 <_dtoa_r+0xcdc>
 304ec28:	208003cc 	andi	r2,r4,15
 304ec2c:	100490fa 	slli	r2,r2,3
 304ec30:	2025d13a 	srai	r18,r4,4
 304ec34:	00c0c1b4 	movhi	r3,774
 304ec38:	18eaea04 	addi	r3,r3,-21592
 304ec3c:	10c5883a 	add	r2,r2,r3
 304ec40:	90c0040c 	andi	r3,r18,16
 304ec44:	14000017 	ldw	r16,0(r2)
 304ec48:	14400117 	ldw	r17,4(r2)
 304ec4c:	1803741e 	bne	r3,zero,304fa20 <_dtoa_r+0x11fc>
 304ec50:	05800084 	movi	r22,2
 304ec54:	90001026 	beq	r18,zero,304ec98 <_dtoa_r+0x474>
 304ec58:	04c0c1b4 	movhi	r19,774
 304ec5c:	9ceb1c04 	addi	r19,r19,-21392
 304ec60:	9080004c 	andi	r2,r18,1
 304ec64:	1005003a 	cmpeq	r2,r2,zero
 304ec68:	1000081e 	bne	r2,zero,304ec8c <_dtoa_r+0x468>
 304ec6c:	99800017 	ldw	r6,0(r19)
 304ec70:	99c00117 	ldw	r7,4(r19)
 304ec74:	880b883a 	mov	r5,r17
 304ec78:	8009883a 	mov	r4,r16
 304ec7c:	30526f80 	call	30526f8 <__muldf3>
 304ec80:	1021883a 	mov	r16,r2
 304ec84:	b5800044 	addi	r22,r22,1
 304ec88:	1823883a 	mov	r17,r3
 304ec8c:	9025d07a 	srai	r18,r18,1
 304ec90:	9cc00204 	addi	r19,r19,8
 304ec94:	903ff21e 	bne	r18,zero,304ec60 <_dtoa_r+0x43c>
 304ec98:	a80b883a 	mov	r5,r21
 304ec9c:	a009883a 	mov	r4,r20
 304eca0:	880f883a 	mov	r7,r17
 304eca4:	800d883a 	mov	r6,r16
 304eca8:	30493a80 	call	30493a8 <__divdf3>
 304ecac:	1029883a 	mov	r20,r2
 304ecb0:	182b883a 	mov	r21,r3
 304ecb4:	d8c00c17 	ldw	r3,48(sp)
 304ecb8:	1805003a 	cmpeq	r2,r3,zero
 304ecbc:	1000091e 	bne	r2,zero,304ece4 <_dtoa_r+0x4c0>
 304ecc0:	0005883a 	mov	r2,zero
 304ecc4:	00cffc34 	movhi	r3,16368
 304ecc8:	18c00004 	addi	r3,r3,0
 304eccc:	180f883a 	mov	r7,r3
 304ecd0:	a009883a 	mov	r4,r20
 304ecd4:	a80b883a 	mov	r5,r21
 304ecd8:	100d883a 	mov	r6,r2
 304ecdc:	3052ce00 	call	3052ce0 <__ltdf2>
 304ece0:	10040a16 	blt	r2,zero,304fd0c <_dtoa_r+0x14e8>
 304ece4:	b009883a 	mov	r4,r22
 304ece8:	3052d680 	call	3052d68 <__floatsidf>
 304ecec:	180b883a 	mov	r5,r3
 304ecf0:	1009883a 	mov	r4,r2
 304ecf4:	a00d883a 	mov	r6,r20
 304ecf8:	a80f883a 	mov	r7,r21
 304ecfc:	30526f80 	call	30526f8 <__muldf3>
 304ed00:	0011883a 	mov	r8,zero
 304ed04:	02500734 	movhi	r9,16412
 304ed08:	4a400004 	addi	r9,r9,0
 304ed0c:	1009883a 	mov	r4,r2
 304ed10:	180b883a 	mov	r5,r3
 304ed14:	480f883a 	mov	r7,r9
 304ed18:	400d883a 	mov	r6,r8
 304ed1c:	30526840 	call	3052684 <__adddf3>
 304ed20:	d9000f17 	ldw	r4,60(sp)
 304ed24:	102d883a 	mov	r22,r2
 304ed28:	00bf3034 	movhi	r2,64704
 304ed2c:	10800004 	addi	r2,r2,0
 304ed30:	18b9883a 	add	fp,r3,r2
 304ed34:	e02f883a 	mov	r23,fp
 304ed38:	2002921e 	bne	r4,zero,304f784 <_dtoa_r+0xf60>
 304ed3c:	0005883a 	mov	r2,zero
 304ed40:	00d00534 	movhi	r3,16404
 304ed44:	18c00004 	addi	r3,r3,0
 304ed48:	a009883a 	mov	r4,r20
 304ed4c:	a80b883a 	mov	r5,r21
 304ed50:	180f883a 	mov	r7,r3
 304ed54:	100d883a 	mov	r6,r2
 304ed58:	30526040 	call	3052604 <__subdf3>
 304ed5c:	1009883a 	mov	r4,r2
 304ed60:	e00f883a 	mov	r7,fp
 304ed64:	180b883a 	mov	r5,r3
 304ed68:	b00d883a 	mov	r6,r22
 304ed6c:	1025883a 	mov	r18,r2
 304ed70:	1827883a 	mov	r19,r3
 304ed74:	3052bd00 	call	3052bd0 <__gtdf2>
 304ed78:	00835616 	blt	zero,r2,304fad4 <_dtoa_r+0x12b0>
 304ed7c:	e0e0003c 	xorhi	r3,fp,32768
 304ed80:	9009883a 	mov	r4,r18
 304ed84:	980b883a 	mov	r5,r19
 304ed88:	180f883a 	mov	r7,r3
 304ed8c:	b00d883a 	mov	r6,r22
 304ed90:	3052ce00 	call	3052ce0 <__ltdf2>
 304ed94:	1000080e 	bge	r2,zero,304edb8 <_dtoa_r+0x594>
 304ed98:	0027883a 	mov	r19,zero
 304ed9c:	0025883a 	mov	r18,zero
 304eda0:	d8802617 	ldw	r2,152(sp)
 304eda4:	df000517 	ldw	fp,20(sp)
 304eda8:	d8000615 	stw	zero,24(sp)
 304edac:	0084303a 	nor	r2,zero,r2
 304edb0:	d8800d15 	stw	r2,52(sp)
 304edb4:	00019d06 	br	304f42c <_dtoa_r+0xc08>
 304edb8:	d9801217 	ldw	r6,72(sp)
 304edbc:	d8801317 	ldw	r2,76(sp)
 304edc0:	3029883a 	mov	r20,r6
 304edc4:	102b883a 	mov	r21,r2
 304edc8:	d8c00217 	ldw	r3,8(sp)
 304edcc:	18008716 	blt	r3,zero,304efec <_dtoa_r+0x7c8>
 304edd0:	d9000d17 	ldw	r4,52(sp)
 304edd4:	00800384 	movi	r2,14
 304edd8:	11008416 	blt	r2,r4,304efec <_dtoa_r+0x7c8>
 304eddc:	200490fa 	slli	r2,r4,3
 304ede0:	d9802617 	ldw	r6,152(sp)
 304ede4:	00c0c1b4 	movhi	r3,774
 304ede8:	18eaea04 	addi	r3,r3,-21592
 304edec:	10c5883a 	add	r2,r2,r3
 304edf0:	14800017 	ldw	r18,0(r2)
 304edf4:	14c00117 	ldw	r19,4(r2)
 304edf8:	30032416 	blt	r6,zero,304fa8c <_dtoa_r+0x1268>
 304edfc:	d9000517 	ldw	r4,20(sp)
 304ee00:	d8c00f17 	ldw	r3,60(sp)
 304ee04:	a823883a 	mov	r17,r21
 304ee08:	a021883a 	mov	r16,r20
 304ee0c:	192b883a 	add	r21,r3,r4
 304ee10:	2039883a 	mov	fp,r4
 304ee14:	00001006 	br	304ee58 <_dtoa_r+0x634>
 304ee18:	0005883a 	mov	r2,zero
 304ee1c:	00d00934 	movhi	r3,16420
 304ee20:	18c00004 	addi	r3,r3,0
 304ee24:	5009883a 	mov	r4,r10
 304ee28:	580b883a 	mov	r5,r11
 304ee2c:	180f883a 	mov	r7,r3
 304ee30:	100d883a 	mov	r6,r2
 304ee34:	30526f80 	call	30526f8 <__muldf3>
 304ee38:	180b883a 	mov	r5,r3
 304ee3c:	000d883a 	mov	r6,zero
 304ee40:	000f883a 	mov	r7,zero
 304ee44:	1009883a 	mov	r4,r2
 304ee48:	1021883a 	mov	r16,r2
 304ee4c:	1823883a 	mov	r17,r3
 304ee50:	3052b480 	call	3052b48 <__nedf2>
 304ee54:	10004526 	beq	r2,zero,304ef6c <_dtoa_r+0x748>
 304ee58:	900d883a 	mov	r6,r18
 304ee5c:	980f883a 	mov	r7,r19
 304ee60:	8009883a 	mov	r4,r16
 304ee64:	880b883a 	mov	r5,r17
 304ee68:	30493a80 	call	30493a8 <__divdf3>
 304ee6c:	180b883a 	mov	r5,r3
 304ee70:	1009883a 	mov	r4,r2
 304ee74:	3052e680 	call	3052e68 <__fixdfsi>
 304ee78:	1009883a 	mov	r4,r2
 304ee7c:	1029883a 	mov	r20,r2
 304ee80:	3052d680 	call	3052d68 <__floatsidf>
 304ee84:	180f883a 	mov	r7,r3
 304ee88:	9009883a 	mov	r4,r18
 304ee8c:	980b883a 	mov	r5,r19
 304ee90:	100d883a 	mov	r6,r2
 304ee94:	30526f80 	call	30526f8 <__muldf3>
 304ee98:	180f883a 	mov	r7,r3
 304ee9c:	880b883a 	mov	r5,r17
 304eea0:	8009883a 	mov	r4,r16
 304eea4:	100d883a 	mov	r6,r2
 304eea8:	30526040 	call	3052604 <__subdf3>
 304eeac:	1015883a 	mov	r10,r2
 304eeb0:	a0800c04 	addi	r2,r20,48
 304eeb4:	e0800005 	stb	r2,0(fp)
 304eeb8:	e7000044 	addi	fp,fp,1
 304eebc:	1817883a 	mov	r11,r3
 304eec0:	e57fd51e 	bne	fp,r21,304ee18 <_dtoa_r+0x5f4>
 304eec4:	500d883a 	mov	r6,r10
 304eec8:	180f883a 	mov	r7,r3
 304eecc:	5009883a 	mov	r4,r10
 304eed0:	180b883a 	mov	r5,r3
 304eed4:	30526840 	call	3052684 <__adddf3>
 304eed8:	100d883a 	mov	r6,r2
 304eedc:	9009883a 	mov	r4,r18
 304eee0:	980b883a 	mov	r5,r19
 304eee4:	180f883a 	mov	r7,r3
 304eee8:	1021883a 	mov	r16,r2
 304eeec:	1823883a 	mov	r17,r3
 304eef0:	3052ce00 	call	3052ce0 <__ltdf2>
 304eef4:	10000816 	blt	r2,zero,304ef18 <_dtoa_r+0x6f4>
 304eef8:	980b883a 	mov	r5,r19
 304eefc:	800d883a 	mov	r6,r16
 304ef00:	880f883a 	mov	r7,r17
 304ef04:	9009883a 	mov	r4,r18
 304ef08:	3052ac00 	call	3052ac0 <__eqdf2>
 304ef0c:	1000171e 	bne	r2,zero,304ef6c <_dtoa_r+0x748>
 304ef10:	a080004c 	andi	r2,r20,1
 304ef14:	10001526 	beq	r2,zero,304ef6c <_dtoa_r+0x748>
 304ef18:	d8800d17 	ldw	r2,52(sp)
 304ef1c:	d8800415 	stw	r2,16(sp)
 304ef20:	e009883a 	mov	r4,fp
 304ef24:	213fffc4 	addi	r4,r4,-1
 304ef28:	20c00007 	ldb	r3,0(r4)
 304ef2c:	00800e44 	movi	r2,57
 304ef30:	1880081e 	bne	r3,r2,304ef54 <_dtoa_r+0x730>
 304ef34:	d8800517 	ldw	r2,20(sp)
 304ef38:	113ffa1e 	bne	r2,r4,304ef24 <_dtoa_r+0x700>
 304ef3c:	d8c00417 	ldw	r3,16(sp)
 304ef40:	d9800517 	ldw	r6,20(sp)
 304ef44:	00800c04 	movi	r2,48
 304ef48:	18c00044 	addi	r3,r3,1
 304ef4c:	d8c00415 	stw	r3,16(sp)
 304ef50:	30800005 	stb	r2,0(r6)
 304ef54:	20800003 	ldbu	r2,0(r4)
 304ef58:	d8c00417 	ldw	r3,16(sp)
 304ef5c:	27000044 	addi	fp,r4,1
 304ef60:	10800044 	addi	r2,r2,1
 304ef64:	d8c00d15 	stw	r3,52(sp)
 304ef68:	20800005 	stb	r2,0(r4)
 304ef6c:	d9001617 	ldw	r4,88(sp)
 304ef70:	d9400717 	ldw	r5,28(sp)
 304ef74:	30506e80 	call	30506e8 <_Bfree>
 304ef78:	e0000005 	stb	zero,0(fp)
 304ef7c:	d9800d17 	ldw	r6,52(sp)
 304ef80:	d8c02717 	ldw	r3,156(sp)
 304ef84:	d9002917 	ldw	r4,164(sp)
 304ef88:	30800044 	addi	r2,r6,1
 304ef8c:	18800015 	stw	r2,0(r3)
 304ef90:	2002a126 	beq	r4,zero,304fa18 <_dtoa_r+0x11f4>
 304ef94:	d9802917 	ldw	r6,164(sp)
 304ef98:	d9000517 	ldw	r4,20(sp)
 304ef9c:	37000015 	stw	fp,0(r6)
 304efa0:	003e5506 	br	304e8f8 <_dtoa_r+0xd4>
 304efa4:	d9800d17 	ldw	r6,52(sp)
 304efa8:	00c0c1b4 	movhi	r3,774
 304efac:	18eaea04 	addi	r3,r3,-21592
 304efb0:	d9001217 	ldw	r4,72(sp)
 304efb4:	300490fa 	slli	r2,r6,3
 304efb8:	d9401317 	ldw	r5,76(sp)
 304efbc:	10c5883a 	add	r2,r2,r3
 304efc0:	12000017 	ldw	r8,0(r2)
 304efc4:	12400117 	ldw	r9,4(r2)
 304efc8:	400d883a 	mov	r6,r8
 304efcc:	480f883a 	mov	r7,r9
 304efd0:	3052ce00 	call	3052ce0 <__ltdf2>
 304efd4:	1000030e 	bge	r2,zero,304efe4 <_dtoa_r+0x7c0>
 304efd8:	d8800d17 	ldw	r2,52(sp)
 304efdc:	10bfffc4 	addi	r2,r2,-1
 304efe0:	d8800d15 	stw	r2,52(sp)
 304efe4:	d8000c15 	stw	zero,48(sp)
 304efe8:	003ea106 	br	304ea70 <_dtoa_r+0x24c>
 304efec:	d9000b17 	ldw	r4,44(sp)
 304eff0:	202cc03a 	cmpne	r22,r4,zero
 304eff4:	b000c71e 	bne	r22,zero,304f314 <_dtoa_r+0xaf0>
 304eff8:	dc001117 	ldw	r16,68(sp)
 304effc:	dc801017 	ldw	r18,64(sp)
 304f000:	0027883a 	mov	r19,zero
 304f004:	04000b0e 	bge	zero,r16,304f034 <_dtoa_r+0x810>
 304f008:	d8c00a17 	ldw	r3,40(sp)
 304f00c:	00c0090e 	bge	zero,r3,304f034 <_dtoa_r+0x810>
 304f010:	8005883a 	mov	r2,r16
 304f014:	1c011316 	blt	r3,r16,304f464 <_dtoa_r+0xc40>
 304f018:	d9000a17 	ldw	r4,40(sp)
 304f01c:	d9801117 	ldw	r6,68(sp)
 304f020:	80a1c83a 	sub	r16,r16,r2
 304f024:	2089c83a 	sub	r4,r4,r2
 304f028:	308dc83a 	sub	r6,r6,r2
 304f02c:	d9000a15 	stw	r4,40(sp)
 304f030:	d9801115 	stw	r6,68(sp)
 304f034:	d8801017 	ldw	r2,64(sp)
 304f038:	0080150e 	bge	zero,r2,304f090 <_dtoa_r+0x86c>
 304f03c:	d8c00b17 	ldw	r3,44(sp)
 304f040:	1805003a 	cmpeq	r2,r3,zero
 304f044:	1001c91e 	bne	r2,zero,304f76c <_dtoa_r+0xf48>
 304f048:	04800e0e 	bge	zero,r18,304f084 <_dtoa_r+0x860>
 304f04c:	d9001617 	ldw	r4,88(sp)
 304f050:	980b883a 	mov	r5,r19
 304f054:	900d883a 	mov	r6,r18
 304f058:	30514ac0 	call	30514ac <__pow5mult>
 304f05c:	d9001617 	ldw	r4,88(sp)
 304f060:	d9800717 	ldw	r6,28(sp)
 304f064:	100b883a 	mov	r5,r2
 304f068:	1027883a 	mov	r19,r2
 304f06c:	30511900 	call	3051190 <__multiply>
 304f070:	d9001617 	ldw	r4,88(sp)
 304f074:	d9400717 	ldw	r5,28(sp)
 304f078:	1023883a 	mov	r17,r2
 304f07c:	30506e80 	call	30506e8 <_Bfree>
 304f080:	dc400715 	stw	r17,28(sp)
 304f084:	d9001017 	ldw	r4,64(sp)
 304f088:	248dc83a 	sub	r6,r4,r18
 304f08c:	30010e1e 	bne	r6,zero,304f4c8 <_dtoa_r+0xca4>
 304f090:	d9001617 	ldw	r4,88(sp)
 304f094:	04400044 	movi	r17,1
 304f098:	880b883a 	mov	r5,r17
 304f09c:	30513700 	call	3051370 <__i2b>
 304f0a0:	d9800917 	ldw	r6,36(sp)
 304f0a4:	1025883a 	mov	r18,r2
 304f0a8:	0180040e 	bge	zero,r6,304f0bc <_dtoa_r+0x898>
 304f0ac:	d9001617 	ldw	r4,88(sp)
 304f0b0:	100b883a 	mov	r5,r2
 304f0b4:	30514ac0 	call	30514ac <__pow5mult>
 304f0b8:	1025883a 	mov	r18,r2
 304f0bc:	d8801717 	ldw	r2,92(sp)
 304f0c0:	8880f30e 	bge	r17,r2,304f490 <_dtoa_r+0xc6c>
 304f0c4:	0023883a 	mov	r17,zero
 304f0c8:	d9800917 	ldw	r6,36(sp)
 304f0cc:	30019e1e 	bne	r6,zero,304f748 <_dtoa_r+0xf24>
 304f0d0:	00c00044 	movi	r3,1
 304f0d4:	d9000a17 	ldw	r4,40(sp)
 304f0d8:	20c5883a 	add	r2,r4,r3
 304f0dc:	10c007cc 	andi	r3,r2,31
 304f0e0:	1800841e 	bne	r3,zero,304f2f4 <_dtoa_r+0xad0>
 304f0e4:	00800704 	movi	r2,28
 304f0e8:	d9000a17 	ldw	r4,40(sp)
 304f0ec:	d9801117 	ldw	r6,68(sp)
 304f0f0:	80a1883a 	add	r16,r16,r2
 304f0f4:	2089883a 	add	r4,r4,r2
 304f0f8:	308d883a 	add	r6,r6,r2
 304f0fc:	d9000a15 	stw	r4,40(sp)
 304f100:	d9801115 	stw	r6,68(sp)
 304f104:	d8801117 	ldw	r2,68(sp)
 304f108:	0080050e 	bge	zero,r2,304f120 <_dtoa_r+0x8fc>
 304f10c:	d9400717 	ldw	r5,28(sp)
 304f110:	d9001617 	ldw	r4,88(sp)
 304f114:	100d883a 	mov	r6,r2
 304f118:	30510440 	call	3051044 <__lshift>
 304f11c:	d8800715 	stw	r2,28(sp)
 304f120:	d8c00a17 	ldw	r3,40(sp)
 304f124:	00c0050e 	bge	zero,r3,304f13c <_dtoa_r+0x918>
 304f128:	d9001617 	ldw	r4,88(sp)
 304f12c:	900b883a 	mov	r5,r18
 304f130:	180d883a 	mov	r6,r3
 304f134:	30510440 	call	3051044 <__lshift>
 304f138:	1025883a 	mov	r18,r2
 304f13c:	d9000c17 	ldw	r4,48(sp)
 304f140:	2005003a 	cmpeq	r2,r4,zero
 304f144:	10016f26 	beq	r2,zero,304f704 <_dtoa_r+0xee0>
 304f148:	d9000f17 	ldw	r4,60(sp)
 304f14c:	01021b0e 	bge	zero,r4,304f9bc <_dtoa_r+0x1198>
 304f150:	d9800b17 	ldw	r6,44(sp)
 304f154:	3005003a 	cmpeq	r2,r6,zero
 304f158:	1000881e 	bne	r2,zero,304f37c <_dtoa_r+0xb58>
 304f15c:	0400050e 	bge	zero,r16,304f174 <_dtoa_r+0x950>
 304f160:	d9001617 	ldw	r4,88(sp)
 304f164:	980b883a 	mov	r5,r19
 304f168:	800d883a 	mov	r6,r16
 304f16c:	30510440 	call	3051044 <__lshift>
 304f170:	1027883a 	mov	r19,r2
 304f174:	8804c03a 	cmpne	r2,r17,zero
 304f178:	1002591e 	bne	r2,zero,304fae0 <_dtoa_r+0x12bc>
 304f17c:	980b883a 	mov	r5,r19
 304f180:	dd800517 	ldw	r22,20(sp)
 304f184:	dcc00615 	stw	r19,24(sp)
 304f188:	a700004c 	andi	fp,r20,1
 304f18c:	2827883a 	mov	r19,r5
 304f190:	d9000717 	ldw	r4,28(sp)
 304f194:	900b883a 	mov	r5,r18
 304f198:	304e61c0 	call	304e61c <quorem>
 304f19c:	d9000717 	ldw	r4,28(sp)
 304f1a0:	d9400617 	ldw	r5,24(sp)
 304f1a4:	1023883a 	mov	r17,r2
 304f1a8:	8dc00c04 	addi	r23,r17,48
 304f1ac:	30508440 	call	3050844 <__mcmp>
 304f1b0:	d9001617 	ldw	r4,88(sp)
 304f1b4:	900b883a 	mov	r5,r18
 304f1b8:	980d883a 	mov	r6,r19
 304f1bc:	1029883a 	mov	r20,r2
 304f1c0:	3050eb80 	call	3050eb8 <__mdiff>
 304f1c4:	102b883a 	mov	r21,r2
 304f1c8:	10800317 	ldw	r2,12(r2)
 304f1cc:	1001281e 	bne	r2,zero,304f670 <_dtoa_r+0xe4c>
 304f1d0:	d9000717 	ldw	r4,28(sp)
 304f1d4:	a80b883a 	mov	r5,r21
 304f1d8:	30508440 	call	3050844 <__mcmp>
 304f1dc:	d9001617 	ldw	r4,88(sp)
 304f1e0:	1021883a 	mov	r16,r2
 304f1e4:	a80b883a 	mov	r5,r21
 304f1e8:	30506e80 	call	30506e8 <_Bfree>
 304f1ec:	8000041e 	bne	r16,zero,304f200 <_dtoa_r+0x9dc>
 304f1f0:	d8801717 	ldw	r2,92(sp)
 304f1f4:	1000021e 	bne	r2,zero,304f200 <_dtoa_r+0x9dc>
 304f1f8:	e004c03a 	cmpne	r2,fp,zero
 304f1fc:	10011726 	beq	r2,zero,304f65c <_dtoa_r+0xe38>
 304f200:	a0010616 	blt	r20,zero,304f61c <_dtoa_r+0xdf8>
 304f204:	a000041e 	bne	r20,zero,304f218 <_dtoa_r+0x9f4>
 304f208:	d8c01717 	ldw	r3,92(sp)
 304f20c:	1800021e 	bne	r3,zero,304f218 <_dtoa_r+0x9f4>
 304f210:	e004c03a 	cmpne	r2,fp,zero
 304f214:	10010126 	beq	r2,zero,304f61c <_dtoa_r+0xdf8>
 304f218:	04024216 	blt	zero,r16,304fb24 <_dtoa_r+0x1300>
 304f21c:	b5c00005 	stb	r23,0(r22)
 304f220:	d9800517 	ldw	r6,20(sp)
 304f224:	d9000f17 	ldw	r4,60(sp)
 304f228:	b5800044 	addi	r22,r22,1
 304f22c:	3105883a 	add	r2,r6,r4
 304f230:	b0806526 	beq	r22,r2,304f3c8 <_dtoa_r+0xba4>
 304f234:	d9400717 	ldw	r5,28(sp)
 304f238:	d9001617 	ldw	r4,88(sp)
 304f23c:	01800284 	movi	r6,10
 304f240:	000f883a 	mov	r7,zero
 304f244:	30513ac0 	call	30513ac <__multadd>
 304f248:	d8800715 	stw	r2,28(sp)
 304f24c:	d8800617 	ldw	r2,24(sp)
 304f250:	14c10c26 	beq	r2,r19,304f684 <_dtoa_r+0xe60>
 304f254:	d9400617 	ldw	r5,24(sp)
 304f258:	d9001617 	ldw	r4,88(sp)
 304f25c:	01800284 	movi	r6,10
 304f260:	000f883a 	mov	r7,zero
 304f264:	30513ac0 	call	30513ac <__multadd>
 304f268:	d9001617 	ldw	r4,88(sp)
 304f26c:	980b883a 	mov	r5,r19
 304f270:	01800284 	movi	r6,10
 304f274:	000f883a 	mov	r7,zero
 304f278:	d8800615 	stw	r2,24(sp)
 304f27c:	30513ac0 	call	30513ac <__multadd>
 304f280:	1027883a 	mov	r19,r2
 304f284:	003fc206 	br	304f190 <_dtoa_r+0x96c>
 304f288:	2445c83a 	sub	r2,r4,r17
 304f28c:	a088983a 	sll	r4,r20,r2
 304f290:	003e4406 	br	304eba4 <_dtoa_r+0x380>
 304f294:	01bfffc4 	movi	r6,-1
 304f298:	00800044 	movi	r2,1
 304f29c:	d9800e15 	stw	r6,56(sp)
 304f2a0:	d9800f15 	stw	r6,60(sp)
 304f2a4:	d8800b15 	stw	r2,44(sp)
 304f2a8:	d8c01617 	ldw	r3,88(sp)
 304f2ac:	008005c4 	movi	r2,23
 304f2b0:	18001115 	stw	zero,68(r3)
 304f2b4:	1580082e 	bgeu	r2,r22,304f2d8 <_dtoa_r+0xab4>
 304f2b8:	00c00104 	movi	r3,4
 304f2bc:	0009883a 	mov	r4,zero
 304f2c0:	18c7883a 	add	r3,r3,r3
 304f2c4:	18800504 	addi	r2,r3,20
 304f2c8:	21000044 	addi	r4,r4,1
 304f2cc:	b0bffc2e 	bgeu	r22,r2,304f2c0 <_dtoa_r+0xa9c>
 304f2d0:	d9801617 	ldw	r6,88(sp)
 304f2d4:	31001115 	stw	r4,68(r6)
 304f2d8:	dc000f17 	ldw	r16,60(sp)
 304f2dc:	003e4506 	br	304ebf4 <_dtoa_r+0x3d0>
 304f2e0:	d9801717 	ldw	r6,92(sp)
 304f2e4:	0023883a 	mov	r17,zero
 304f2e8:	31bfff04 	addi	r6,r6,-4
 304f2ec:	d9801715 	stw	r6,92(sp)
 304f2f0:	003df106 	br	304eab8 <_dtoa_r+0x294>
 304f2f4:	00800804 	movi	r2,32
 304f2f8:	10c9c83a 	sub	r4,r2,r3
 304f2fc:	00c00104 	movi	r3,4
 304f300:	19005a16 	blt	r3,r4,304f46c <_dtoa_r+0xc48>
 304f304:	008000c4 	movi	r2,3
 304f308:	113f7e16 	blt	r2,r4,304f104 <_dtoa_r+0x8e0>
 304f30c:	20800704 	addi	r2,r4,28
 304f310:	003f7506 	br	304f0e8 <_dtoa_r+0x8c4>
 304f314:	d9801717 	ldw	r6,92(sp)
 304f318:	00800044 	movi	r2,1
 304f31c:	1180a10e 	bge	r2,r6,304f5a4 <_dtoa_r+0xd80>
 304f320:	d9800f17 	ldw	r6,60(sp)
 304f324:	d8c01017 	ldw	r3,64(sp)
 304f328:	30bfffc4 	addi	r2,r6,-1
 304f32c:	1881ca16 	blt	r3,r2,304fa58 <_dtoa_r+0x1234>
 304f330:	18a5c83a 	sub	r18,r3,r2
 304f334:	d8800f17 	ldw	r2,60(sp)
 304f338:	10026916 	blt	r2,zero,304fce0 <_dtoa_r+0x14bc>
 304f33c:	dc001117 	ldw	r16,68(sp)
 304f340:	1007883a 	mov	r3,r2
 304f344:	d9800a17 	ldw	r6,40(sp)
 304f348:	d8801117 	ldw	r2,68(sp)
 304f34c:	d9001617 	ldw	r4,88(sp)
 304f350:	30cd883a 	add	r6,r6,r3
 304f354:	10c5883a 	add	r2,r2,r3
 304f358:	01400044 	movi	r5,1
 304f35c:	d9800a15 	stw	r6,40(sp)
 304f360:	d8801115 	stw	r2,68(sp)
 304f364:	30513700 	call	3051370 <__i2b>
 304f368:	1027883a 	mov	r19,r2
 304f36c:	003f2506 	br	304f004 <_dtoa_r+0x7e0>
 304f370:	0100c1b4 	movhi	r4,774
 304f374:	212a2d04 	addi	r4,r4,-22348
 304f378:	003d5f06 	br	304e8f8 <_dtoa_r+0xd4>
 304f37c:	dd800517 	ldw	r22,20(sp)
 304f380:	04000044 	movi	r16,1
 304f384:	00000706 	br	304f3a4 <_dtoa_r+0xb80>
 304f388:	d9400717 	ldw	r5,28(sp)
 304f38c:	d9001617 	ldw	r4,88(sp)
 304f390:	01800284 	movi	r6,10
 304f394:	000f883a 	mov	r7,zero
 304f398:	30513ac0 	call	30513ac <__multadd>
 304f39c:	d8800715 	stw	r2,28(sp)
 304f3a0:	84000044 	addi	r16,r16,1
 304f3a4:	d9000717 	ldw	r4,28(sp)
 304f3a8:	900b883a 	mov	r5,r18
 304f3ac:	304e61c0 	call	304e61c <quorem>
 304f3b0:	15c00c04 	addi	r23,r2,48
 304f3b4:	b5c00005 	stb	r23,0(r22)
 304f3b8:	d8c00f17 	ldw	r3,60(sp)
 304f3bc:	b5800044 	addi	r22,r22,1
 304f3c0:	80fff116 	blt	r16,r3,304f388 <_dtoa_r+0xb64>
 304f3c4:	d8000615 	stw	zero,24(sp)
 304f3c8:	d9400717 	ldw	r5,28(sp)
 304f3cc:	d9001617 	ldw	r4,88(sp)
 304f3d0:	01800044 	movi	r6,1
 304f3d4:	30510440 	call	3051044 <__lshift>
 304f3d8:	1009883a 	mov	r4,r2
 304f3dc:	900b883a 	mov	r5,r18
 304f3e0:	d8800715 	stw	r2,28(sp)
 304f3e4:	30508440 	call	3050844 <__mcmp>
 304f3e8:	00803c0e 	bge	zero,r2,304f4dc <_dtoa_r+0xcb8>
 304f3ec:	b009883a 	mov	r4,r22
 304f3f0:	213fffc4 	addi	r4,r4,-1
 304f3f4:	21400003 	ldbu	r5,0(r4)
 304f3f8:	00800e44 	movi	r2,57
 304f3fc:	28c03fcc 	andi	r3,r5,255
 304f400:	18c0201c 	xori	r3,r3,128
 304f404:	18ffe004 	addi	r3,r3,-128
 304f408:	18819c1e 	bne	r3,r2,304fa7c <_dtoa_r+0x1258>
 304f40c:	d9800517 	ldw	r6,20(sp)
 304f410:	21bff71e 	bne	r4,r6,304f3f0 <_dtoa_r+0xbcc>
 304f414:	d8800d17 	ldw	r2,52(sp)
 304f418:	37000044 	addi	fp,r6,1
 304f41c:	10800044 	addi	r2,r2,1
 304f420:	d8800d15 	stw	r2,52(sp)
 304f424:	00800c44 	movi	r2,49
 304f428:	30800005 	stb	r2,0(r6)
 304f42c:	d9001617 	ldw	r4,88(sp)
 304f430:	900b883a 	mov	r5,r18
 304f434:	30506e80 	call	30506e8 <_Bfree>
 304f438:	983ecc26 	beq	r19,zero,304ef6c <_dtoa_r+0x748>
 304f43c:	d8c00617 	ldw	r3,24(sp)
 304f440:	18000426 	beq	r3,zero,304f454 <_dtoa_r+0xc30>
 304f444:	1cc00326 	beq	r3,r19,304f454 <_dtoa_r+0xc30>
 304f448:	d9001617 	ldw	r4,88(sp)
 304f44c:	180b883a 	mov	r5,r3
 304f450:	30506e80 	call	30506e8 <_Bfree>
 304f454:	d9001617 	ldw	r4,88(sp)
 304f458:	980b883a 	mov	r5,r19
 304f45c:	30506e80 	call	30506e8 <_Bfree>
 304f460:	003ec206 	br	304ef6c <_dtoa_r+0x748>
 304f464:	1805883a 	mov	r2,r3
 304f468:	003eeb06 	br	304f018 <_dtoa_r+0x7f4>
 304f46c:	d9800a17 	ldw	r6,40(sp)
 304f470:	d8c01117 	ldw	r3,68(sp)
 304f474:	20bfff04 	addi	r2,r4,-4
 304f478:	308d883a 	add	r6,r6,r2
 304f47c:	1887883a 	add	r3,r3,r2
 304f480:	80a1883a 	add	r16,r16,r2
 304f484:	d9800a15 	stw	r6,40(sp)
 304f488:	d8c01115 	stw	r3,68(sp)
 304f48c:	003f1d06 	br	304f104 <_dtoa_r+0x8e0>
 304f490:	a03f0c1e 	bne	r20,zero,304f0c4 <_dtoa_r+0x8a0>
 304f494:	00800434 	movhi	r2,16
 304f498:	10bfffc4 	addi	r2,r2,-1
 304f49c:	a884703a 	and	r2,r21,r2
 304f4a0:	103f081e 	bne	r2,zero,304f0c4 <_dtoa_r+0x8a0>
 304f4a4:	a89ffc2c 	andhi	r2,r21,32752
 304f4a8:	103f0626 	beq	r2,zero,304f0c4 <_dtoa_r+0x8a0>
 304f4ac:	d8c01117 	ldw	r3,68(sp)
 304f4b0:	d9000a17 	ldw	r4,40(sp)
 304f4b4:	18c00044 	addi	r3,r3,1
 304f4b8:	21000044 	addi	r4,r4,1
 304f4bc:	d8c01115 	stw	r3,68(sp)
 304f4c0:	d9000a15 	stw	r4,40(sp)
 304f4c4:	003f0006 	br	304f0c8 <_dtoa_r+0x8a4>
 304f4c8:	d9400717 	ldw	r5,28(sp)
 304f4cc:	d9001617 	ldw	r4,88(sp)
 304f4d0:	30514ac0 	call	30514ac <__pow5mult>
 304f4d4:	d8800715 	stw	r2,28(sp)
 304f4d8:	003eed06 	br	304f090 <_dtoa_r+0x86c>
 304f4dc:	1000021e 	bne	r2,zero,304f4e8 <_dtoa_r+0xcc4>
 304f4e0:	b880004c 	andi	r2,r23,1
 304f4e4:	103fc11e 	bne	r2,zero,304f3ec <_dtoa_r+0xbc8>
 304f4e8:	b5bfffc4 	addi	r22,r22,-1
 304f4ec:	b0c00007 	ldb	r3,0(r22)
 304f4f0:	00800c04 	movi	r2,48
 304f4f4:	18bffc26 	beq	r3,r2,304f4e8 <_dtoa_r+0xcc4>
 304f4f8:	b7000044 	addi	fp,r22,1
 304f4fc:	003fcb06 	br	304f42c <_dtoa_r+0xc08>
 304f500:	d9800d17 	ldw	r6,52(sp)
 304f504:	018fc83a 	sub	r7,zero,r6
 304f508:	3801fe26 	beq	r7,zero,304fd04 <_dtoa_r+0x14e0>
 304f50c:	398003cc 	andi	r6,r7,15
 304f510:	300c90fa 	slli	r6,r6,3
 304f514:	0140c1b4 	movhi	r5,774
 304f518:	296aea04 	addi	r5,r5,-21592
 304f51c:	d9001217 	ldw	r4,72(sp)
 304f520:	314d883a 	add	r6,r6,r5
 304f524:	30c00117 	ldw	r3,4(r6)
 304f528:	30800017 	ldw	r2,0(r6)
 304f52c:	d9401317 	ldw	r5,76(sp)
 304f530:	3821d13a 	srai	r16,r7,4
 304f534:	100d883a 	mov	r6,r2
 304f538:	180f883a 	mov	r7,r3
 304f53c:	30526f80 	call	30526f8 <__muldf3>
 304f540:	1011883a 	mov	r8,r2
 304f544:	1813883a 	mov	r9,r3
 304f548:	1029883a 	mov	r20,r2
 304f54c:	182b883a 	mov	r21,r3
 304f550:	8001ec26 	beq	r16,zero,304fd04 <_dtoa_r+0x14e0>
 304f554:	05800084 	movi	r22,2
 304f558:	0440c1b4 	movhi	r17,774
 304f55c:	8c6b1c04 	addi	r17,r17,-21392
 304f560:	8080004c 	andi	r2,r16,1
 304f564:	1005003a 	cmpeq	r2,r2,zero
 304f568:	1000081e 	bne	r2,zero,304f58c <_dtoa_r+0xd68>
 304f56c:	89800017 	ldw	r6,0(r17)
 304f570:	89c00117 	ldw	r7,4(r17)
 304f574:	480b883a 	mov	r5,r9
 304f578:	4009883a 	mov	r4,r8
 304f57c:	30526f80 	call	30526f8 <__muldf3>
 304f580:	1011883a 	mov	r8,r2
 304f584:	b5800044 	addi	r22,r22,1
 304f588:	1813883a 	mov	r9,r3
 304f58c:	8021d07a 	srai	r16,r16,1
 304f590:	8c400204 	addi	r17,r17,8
 304f594:	803ff21e 	bne	r16,zero,304f560 <_dtoa_r+0xd3c>
 304f598:	4029883a 	mov	r20,r8
 304f59c:	482b883a 	mov	r21,r9
 304f5a0:	003dc406 	br	304ecb4 <_dtoa_r+0x490>
 304f5a4:	d9000817 	ldw	r4,32(sp)
 304f5a8:	2005003a 	cmpeq	r2,r4,zero
 304f5ac:	1002001e 	bne	r2,zero,304fdb0 <_dtoa_r+0x158c>
 304f5b0:	dc001117 	ldw	r16,68(sp)
 304f5b4:	dc801017 	ldw	r18,64(sp)
 304f5b8:	18c10cc4 	addi	r3,r3,1075
 304f5bc:	003f6106 	br	304f344 <_dtoa_r+0xb20>
 304f5c0:	d8000b15 	stw	zero,44(sp)
 304f5c4:	d9802617 	ldw	r6,152(sp)
 304f5c8:	d8c00d17 	ldw	r3,52(sp)
 304f5cc:	30800044 	addi	r2,r6,1
 304f5d0:	18ad883a 	add	r22,r3,r2
 304f5d4:	b13fffc4 	addi	r4,r22,-1
 304f5d8:	d9000e15 	stw	r4,56(sp)
 304f5dc:	0582000e 	bge	zero,r22,304fde0 <_dtoa_r+0x15bc>
 304f5e0:	dd800f15 	stw	r22,60(sp)
 304f5e4:	003f3006 	br	304f2a8 <_dtoa_r+0xa84>
 304f5e8:	d8000b15 	stw	zero,44(sp)
 304f5ec:	d9002617 	ldw	r4,152(sp)
 304f5f0:	0101f50e 	bge	zero,r4,304fdc8 <_dtoa_r+0x15a4>
 304f5f4:	202d883a 	mov	r22,r4
 304f5f8:	d9000e15 	stw	r4,56(sp)
 304f5fc:	d9000f15 	stw	r4,60(sp)
 304f600:	003f2906 	br	304f2a8 <_dtoa_r+0xa84>
 304f604:	01800044 	movi	r6,1
 304f608:	d9800b15 	stw	r6,44(sp)
 304f60c:	003ff706 	br	304f5ec <_dtoa_r+0xdc8>
 304f610:	01000044 	movi	r4,1
 304f614:	d9000b15 	stw	r4,44(sp)
 304f618:	003fea06 	br	304f5c4 <_dtoa_r+0xda0>
 304f61c:	04000c0e 	bge	zero,r16,304f650 <_dtoa_r+0xe2c>
 304f620:	d9400717 	ldw	r5,28(sp)
 304f624:	d9001617 	ldw	r4,88(sp)
 304f628:	01800044 	movi	r6,1
 304f62c:	30510440 	call	3051044 <__lshift>
 304f630:	1009883a 	mov	r4,r2
 304f634:	900b883a 	mov	r5,r18
 304f638:	d8800715 	stw	r2,28(sp)
 304f63c:	30508440 	call	3050844 <__mcmp>
 304f640:	0081ea0e 	bge	zero,r2,304fdec <_dtoa_r+0x15c8>
 304f644:	bdc00044 	addi	r23,r23,1
 304f648:	00800e84 	movi	r2,58
 304f64c:	b881a926 	beq	r23,r2,304fcf4 <_dtoa_r+0x14d0>
 304f650:	b7000044 	addi	fp,r22,1
 304f654:	b5c00005 	stb	r23,0(r22)
 304f658:	003f7406 	br	304f42c <_dtoa_r+0xc08>
 304f65c:	00800e44 	movi	r2,57
 304f660:	b881a426 	beq	r23,r2,304fcf4 <_dtoa_r+0x14d0>
 304f664:	053ffa0e 	bge	zero,r20,304f650 <_dtoa_r+0xe2c>
 304f668:	8dc00c44 	addi	r23,r17,49
 304f66c:	003ff806 	br	304f650 <_dtoa_r+0xe2c>
 304f670:	d9001617 	ldw	r4,88(sp)
 304f674:	a80b883a 	mov	r5,r21
 304f678:	04000044 	movi	r16,1
 304f67c:	30506e80 	call	30506e8 <_Bfree>
 304f680:	003edf06 	br	304f200 <_dtoa_r+0x9dc>
 304f684:	d9001617 	ldw	r4,88(sp)
 304f688:	980b883a 	mov	r5,r19
 304f68c:	01800284 	movi	r6,10
 304f690:	000f883a 	mov	r7,zero
 304f694:	30513ac0 	call	30513ac <__multadd>
 304f698:	1027883a 	mov	r19,r2
 304f69c:	d8800615 	stw	r2,24(sp)
 304f6a0:	003ebb06 	br	304f190 <_dtoa_r+0x96c>
 304f6a4:	d9801117 	ldw	r6,68(sp)
 304f6a8:	d8800d17 	ldw	r2,52(sp)
 304f6ac:	d8000915 	stw	zero,36(sp)
 304f6b0:	308dc83a 	sub	r6,r6,r2
 304f6b4:	0087c83a 	sub	r3,zero,r2
 304f6b8:	d9801115 	stw	r6,68(sp)
 304f6bc:	d8c01015 	stw	r3,64(sp)
 304f6c0:	003cf706 	br	304eaa0 <_dtoa_r+0x27c>
 304f6c4:	018dc83a 	sub	r6,zero,r6
 304f6c8:	d9801115 	stw	r6,68(sp)
 304f6cc:	d8000a15 	stw	zero,40(sp)
 304f6d0:	003cec06 	br	304ea84 <_dtoa_r+0x260>
 304f6d4:	d9000d17 	ldw	r4,52(sp)
 304f6d8:	3052d680 	call	3052d68 <__floatsidf>
 304f6dc:	880b883a 	mov	r5,r17
 304f6e0:	8009883a 	mov	r4,r16
 304f6e4:	180f883a 	mov	r7,r3
 304f6e8:	100d883a 	mov	r6,r2
 304f6ec:	3052b480 	call	3052b48 <__nedf2>
 304f6f0:	103cda26 	beq	r2,zero,304ea5c <_dtoa_r+0x238>
 304f6f4:	d9800d17 	ldw	r6,52(sp)
 304f6f8:	31bfffc4 	addi	r6,r6,-1
 304f6fc:	d9800d15 	stw	r6,52(sp)
 304f700:	003cd606 	br	304ea5c <_dtoa_r+0x238>
 304f704:	d9000717 	ldw	r4,28(sp)
 304f708:	900b883a 	mov	r5,r18
 304f70c:	30508440 	call	3050844 <__mcmp>
 304f710:	103e8d0e 	bge	r2,zero,304f148 <_dtoa_r+0x924>
 304f714:	d9400717 	ldw	r5,28(sp)
 304f718:	d9001617 	ldw	r4,88(sp)
 304f71c:	01800284 	movi	r6,10
 304f720:	000f883a 	mov	r7,zero
 304f724:	30513ac0 	call	30513ac <__multadd>
 304f728:	d9800d17 	ldw	r6,52(sp)
 304f72c:	d8800715 	stw	r2,28(sp)
 304f730:	31bfffc4 	addi	r6,r6,-1
 304f734:	d9800d15 	stw	r6,52(sp)
 304f738:	b001b11e 	bne	r22,zero,304fe00 <_dtoa_r+0x15dc>
 304f73c:	d8800e17 	ldw	r2,56(sp)
 304f740:	d8800f15 	stw	r2,60(sp)
 304f744:	003e8006 	br	304f148 <_dtoa_r+0x924>
 304f748:	90800417 	ldw	r2,16(r18)
 304f74c:	1085883a 	add	r2,r2,r2
 304f750:	1085883a 	add	r2,r2,r2
 304f754:	1485883a 	add	r2,r2,r18
 304f758:	11000417 	ldw	r4,16(r2)
 304f75c:	30507100 	call	3050710 <__hi0bits>
 304f760:	00c00804 	movi	r3,32
 304f764:	1887c83a 	sub	r3,r3,r2
 304f768:	003e5a06 	br	304f0d4 <_dtoa_r+0x8b0>
 304f76c:	d9400717 	ldw	r5,28(sp)
 304f770:	d9801017 	ldw	r6,64(sp)
 304f774:	d9001617 	ldw	r4,88(sp)
 304f778:	30514ac0 	call	30514ac <__pow5mult>
 304f77c:	d8800715 	stw	r2,28(sp)
 304f780:	003e4306 	br	304f090 <_dtoa_r+0x86c>
 304f784:	d9800f17 	ldw	r6,60(sp)
 304f788:	d8800d17 	ldw	r2,52(sp)
 304f78c:	d9800315 	stw	r6,12(sp)
 304f790:	d8800415 	stw	r2,16(sp)
 304f794:	d8c00b17 	ldw	r3,44(sp)
 304f798:	1805003a 	cmpeq	r2,r3,zero
 304f79c:	1000e71e 	bne	r2,zero,304fb3c <_dtoa_r+0x1318>
 304f7a0:	d9000317 	ldw	r4,12(sp)
 304f7a4:	0005883a 	mov	r2,zero
 304f7a8:	00cff834 	movhi	r3,16352
 304f7ac:	18c00004 	addi	r3,r3,0
 304f7b0:	200c90fa 	slli	r6,r4,3
 304f7b4:	0100c1b4 	movhi	r4,774
 304f7b8:	212ae804 	addi	r4,r4,-21600
 304f7bc:	180b883a 	mov	r5,r3
 304f7c0:	310d883a 	add	r6,r6,r4
 304f7c4:	32400117 	ldw	r9,4(r6)
 304f7c8:	32000017 	ldw	r8,0(r6)
 304f7cc:	1009883a 	mov	r4,r2
 304f7d0:	480f883a 	mov	r7,r9
 304f7d4:	400d883a 	mov	r6,r8
 304f7d8:	30493a80 	call	30493a8 <__divdf3>
 304f7dc:	180b883a 	mov	r5,r3
 304f7e0:	b00d883a 	mov	r6,r22
 304f7e4:	b80f883a 	mov	r7,r23
 304f7e8:	1009883a 	mov	r4,r2
 304f7ec:	30526040 	call	3052604 <__subdf3>
 304f7f0:	a80b883a 	mov	r5,r21
 304f7f4:	a009883a 	mov	r4,r20
 304f7f8:	d8c01915 	stw	r3,100(sp)
 304f7fc:	d8801815 	stw	r2,96(sp)
 304f800:	3052e680 	call	3052e68 <__fixdfsi>
 304f804:	1009883a 	mov	r4,r2
 304f808:	1027883a 	mov	r19,r2
 304f80c:	3052d680 	call	3052d68 <__floatsidf>
 304f810:	a80b883a 	mov	r5,r21
 304f814:	a009883a 	mov	r4,r20
 304f818:	180f883a 	mov	r7,r3
 304f81c:	100d883a 	mov	r6,r2
 304f820:	30526040 	call	3052604 <__subdf3>
 304f824:	d9801817 	ldw	r6,96(sp)
 304f828:	1823883a 	mov	r17,r3
 304f82c:	d8801415 	stw	r2,80(sp)
 304f830:	302d883a 	mov	r22,r6
 304f834:	d9800517 	ldw	r6,20(sp)
 304f838:	9cc00c04 	addi	r19,r19,48
 304f83c:	dc401515 	stw	r17,84(sp)
 304f840:	d8c01917 	ldw	r3,100(sp)
 304f844:	34c00005 	stb	r19,0(r6)
 304f848:	d8800517 	ldw	r2,20(sp)
 304f84c:	d9401917 	ldw	r5,100(sp)
 304f850:	d9801417 	ldw	r6,80(sp)
 304f854:	b009883a 	mov	r4,r22
 304f858:	880f883a 	mov	r7,r17
 304f85c:	182f883a 	mov	r23,r3
 304f860:	17000044 	addi	fp,r2,1
 304f864:	3052bd00 	call	3052bd0 <__gtdf2>
 304f868:	00805116 	blt	zero,r2,304f9b0 <_dtoa_r+0x118c>
 304f86c:	d9801417 	ldw	r6,80(sp)
 304f870:	0005883a 	mov	r2,zero
 304f874:	00cffc34 	movhi	r3,16368
 304f878:	18c00004 	addi	r3,r3,0
 304f87c:	180b883a 	mov	r5,r3
 304f880:	880f883a 	mov	r7,r17
 304f884:	1009883a 	mov	r4,r2
 304f888:	30526040 	call	3052604 <__subdf3>
 304f88c:	d9401917 	ldw	r5,100(sp)
 304f890:	180f883a 	mov	r7,r3
 304f894:	b009883a 	mov	r4,r22
 304f898:	100d883a 	mov	r6,r2
 304f89c:	3052bd00 	call	3052bd0 <__gtdf2>
 304f8a0:	00bd9f16 	blt	zero,r2,304ef20 <_dtoa_r+0x6fc>
 304f8a4:	d8c00317 	ldw	r3,12(sp)
 304f8a8:	00800044 	movi	r2,1
 304f8ac:	10c01316 	blt	r2,r3,304f8fc <_dtoa_r+0x10d8>
 304f8b0:	003d4106 	br	304edb8 <_dtoa_r+0x594>
 304f8b4:	d9801417 	ldw	r6,80(sp)
 304f8b8:	0005883a 	mov	r2,zero
 304f8bc:	00cffc34 	movhi	r3,16368
 304f8c0:	18c00004 	addi	r3,r3,0
 304f8c4:	180b883a 	mov	r5,r3
 304f8c8:	880f883a 	mov	r7,r17
 304f8cc:	1009883a 	mov	r4,r2
 304f8d0:	30526040 	call	3052604 <__subdf3>
 304f8d4:	d9c01b17 	ldw	r7,108(sp)
 304f8d8:	180b883a 	mov	r5,r3
 304f8dc:	1009883a 	mov	r4,r2
 304f8e0:	b00d883a 	mov	r6,r22
 304f8e4:	3052ce00 	call	3052ce0 <__ltdf2>
 304f8e8:	103d8d16 	blt	r2,zero,304ef20 <_dtoa_r+0x6fc>
 304f8ec:	d9800517 	ldw	r6,20(sp)
 304f8f0:	d9000317 	ldw	r4,12(sp)
 304f8f4:	3105883a 	add	r2,r6,r4
 304f8f8:	e0bd2f26 	beq	fp,r2,304edb8 <_dtoa_r+0x594>
 304f8fc:	04500934 	movhi	r17,16420
 304f900:	8c400004 	addi	r17,r17,0
 304f904:	0021883a 	mov	r16,zero
 304f908:	b80b883a 	mov	r5,r23
 304f90c:	b009883a 	mov	r4,r22
 304f910:	800d883a 	mov	r6,r16
 304f914:	880f883a 	mov	r7,r17
 304f918:	30526f80 	call	30526f8 <__muldf3>
 304f91c:	d9401517 	ldw	r5,84(sp)
 304f920:	d9001417 	ldw	r4,80(sp)
 304f924:	880f883a 	mov	r7,r17
 304f928:	000d883a 	mov	r6,zero
 304f92c:	d8801a15 	stw	r2,104(sp)
 304f930:	d8c01b15 	stw	r3,108(sp)
 304f934:	30526f80 	call	30526f8 <__muldf3>
 304f938:	180b883a 	mov	r5,r3
 304f93c:	1009883a 	mov	r4,r2
 304f940:	1823883a 	mov	r17,r3
 304f944:	1021883a 	mov	r16,r2
 304f948:	3052e680 	call	3052e68 <__fixdfsi>
 304f94c:	1009883a 	mov	r4,r2
 304f950:	102b883a 	mov	r21,r2
 304f954:	3052d680 	call	3052d68 <__floatsidf>
 304f958:	880b883a 	mov	r5,r17
 304f95c:	8009883a 	mov	r4,r16
 304f960:	180f883a 	mov	r7,r3
 304f964:	100d883a 	mov	r6,r2
 304f968:	30526040 	call	3052604 <__subdf3>
 304f96c:	1021883a 	mov	r16,r2
 304f970:	d9001b17 	ldw	r4,108(sp)
 304f974:	1823883a 	mov	r17,r3
 304f978:	dc001415 	stw	r16,80(sp)
 304f97c:	ad400c04 	addi	r21,r21,48
 304f980:	dc401515 	stw	r17,84(sp)
 304f984:	d8801a17 	ldw	r2,104(sp)
 304f988:	e5400005 	stb	r21,0(fp)
 304f98c:	202f883a 	mov	r23,r4
 304f990:	d9c01b17 	ldw	r7,108(sp)
 304f994:	d9001417 	ldw	r4,80(sp)
 304f998:	880b883a 	mov	r5,r17
 304f99c:	100d883a 	mov	r6,r2
 304f9a0:	102d883a 	mov	r22,r2
 304f9a4:	e7000044 	addi	fp,fp,1
 304f9a8:	3052ce00 	call	3052ce0 <__ltdf2>
 304f9ac:	103fc10e 	bge	r2,zero,304f8b4 <_dtoa_r+0x1090>
 304f9b0:	d9000417 	ldw	r4,16(sp)
 304f9b4:	d9000d15 	stw	r4,52(sp)
 304f9b8:	003d6c06 	br	304ef6c <_dtoa_r+0x748>
 304f9bc:	d9801717 	ldw	r6,92(sp)
 304f9c0:	00800084 	movi	r2,2
 304f9c4:	11bde20e 	bge	r2,r6,304f150 <_dtoa_r+0x92c>
 304f9c8:	203cf51e 	bne	r4,zero,304eda0 <_dtoa_r+0x57c>
 304f9cc:	d9001617 	ldw	r4,88(sp)
 304f9d0:	900b883a 	mov	r5,r18
 304f9d4:	01800144 	movi	r6,5
 304f9d8:	000f883a 	mov	r7,zero
 304f9dc:	30513ac0 	call	30513ac <__multadd>
 304f9e0:	d9000717 	ldw	r4,28(sp)
 304f9e4:	100b883a 	mov	r5,r2
 304f9e8:	1025883a 	mov	r18,r2
 304f9ec:	30508440 	call	3050844 <__mcmp>
 304f9f0:	00bceb0e 	bge	zero,r2,304eda0 <_dtoa_r+0x57c>
 304f9f4:	d8c00d17 	ldw	r3,52(sp)
 304f9f8:	d9000517 	ldw	r4,20(sp)
 304f9fc:	d8000615 	stw	zero,24(sp)
 304fa00:	18c00044 	addi	r3,r3,1
 304fa04:	d8c00d15 	stw	r3,52(sp)
 304fa08:	00800c44 	movi	r2,49
 304fa0c:	27000044 	addi	fp,r4,1
 304fa10:	20800005 	stb	r2,0(r4)
 304fa14:	003e8506 	br	304f42c <_dtoa_r+0xc08>
 304fa18:	d9000517 	ldw	r4,20(sp)
 304fa1c:	003bb606 	br	304e8f8 <_dtoa_r+0xd4>
 304fa20:	0180c1b4 	movhi	r6,774
 304fa24:	31ab1c04 	addi	r6,r6,-21392
 304fa28:	30c00917 	ldw	r3,36(r6)
 304fa2c:	30800817 	ldw	r2,32(r6)
 304fa30:	d9001217 	ldw	r4,72(sp)
 304fa34:	d9401317 	ldw	r5,76(sp)
 304fa38:	180f883a 	mov	r7,r3
 304fa3c:	100d883a 	mov	r6,r2
 304fa40:	30493a80 	call	30493a8 <__divdf3>
 304fa44:	948003cc 	andi	r18,r18,15
 304fa48:	058000c4 	movi	r22,3
 304fa4c:	1029883a 	mov	r20,r2
 304fa50:	182b883a 	mov	r21,r3
 304fa54:	003c7f06 	br	304ec54 <_dtoa_r+0x430>
 304fa58:	d9001017 	ldw	r4,64(sp)
 304fa5c:	d9800917 	ldw	r6,36(sp)
 304fa60:	0025883a 	mov	r18,zero
 304fa64:	1105c83a 	sub	r2,r2,r4
 304fa68:	2089883a 	add	r4,r4,r2
 304fa6c:	308d883a 	add	r6,r6,r2
 304fa70:	d9001015 	stw	r4,64(sp)
 304fa74:	d9800915 	stw	r6,36(sp)
 304fa78:	003e2e06 	br	304f334 <_dtoa_r+0xb10>
 304fa7c:	28800044 	addi	r2,r5,1
 304fa80:	27000044 	addi	fp,r4,1
 304fa84:	20800005 	stb	r2,0(r4)
 304fa88:	003e6806 	br	304f42c <_dtoa_r+0xc08>
 304fa8c:	d8800f17 	ldw	r2,60(sp)
 304fa90:	00bcda16 	blt	zero,r2,304edfc <_dtoa_r+0x5d8>
 304fa94:	d9800f17 	ldw	r6,60(sp)
 304fa98:	303cbf1e 	bne	r6,zero,304ed98 <_dtoa_r+0x574>
 304fa9c:	0005883a 	mov	r2,zero
 304faa0:	00d00534 	movhi	r3,16404
 304faa4:	18c00004 	addi	r3,r3,0
 304faa8:	980b883a 	mov	r5,r19
 304faac:	180f883a 	mov	r7,r3
 304fab0:	9009883a 	mov	r4,r18
 304fab4:	100d883a 	mov	r6,r2
 304fab8:	30526f80 	call	30526f8 <__muldf3>
 304fabc:	180b883a 	mov	r5,r3
 304fac0:	a80f883a 	mov	r7,r21
 304fac4:	1009883a 	mov	r4,r2
 304fac8:	a00d883a 	mov	r6,r20
 304facc:	3052c580 	call	3052c58 <__gedf2>
 304fad0:	103cb10e 	bge	r2,zero,304ed98 <_dtoa_r+0x574>
 304fad4:	0027883a 	mov	r19,zero
 304fad8:	0025883a 	mov	r18,zero
 304fadc:	003fc506 	br	304f9f4 <_dtoa_r+0x11d0>
 304fae0:	99400117 	ldw	r5,4(r19)
 304fae4:	d9001617 	ldw	r4,88(sp)
 304fae8:	3050c800 	call	3050c80 <_Balloc>
 304faec:	99800417 	ldw	r6,16(r19)
 304faf0:	11000304 	addi	r4,r2,12
 304faf4:	99400304 	addi	r5,r19,12
 304faf8:	318d883a 	add	r6,r6,r6
 304fafc:	318d883a 	add	r6,r6,r6
 304fb00:	31800204 	addi	r6,r6,8
 304fb04:	1023883a 	mov	r17,r2
 304fb08:	304bb5c0 	call	304bb5c <memcpy>
 304fb0c:	d9001617 	ldw	r4,88(sp)
 304fb10:	880b883a 	mov	r5,r17
 304fb14:	01800044 	movi	r6,1
 304fb18:	30510440 	call	3051044 <__lshift>
 304fb1c:	100b883a 	mov	r5,r2
 304fb20:	003d9706 	br	304f180 <_dtoa_r+0x95c>
 304fb24:	00800e44 	movi	r2,57
 304fb28:	b8807226 	beq	r23,r2,304fcf4 <_dtoa_r+0x14d0>
 304fb2c:	b8800044 	addi	r2,r23,1
 304fb30:	b7000044 	addi	fp,r22,1
 304fb34:	b0800005 	stb	r2,0(r22)
 304fb38:	003e3c06 	br	304f42c <_dtoa_r+0xc08>
 304fb3c:	d8800317 	ldw	r2,12(sp)
 304fb40:	0180c1b4 	movhi	r6,774
 304fb44:	31aae804 	addi	r6,r6,-21600
 304fb48:	b009883a 	mov	r4,r22
 304fb4c:	100e90fa 	slli	r7,r2,3
 304fb50:	b80b883a 	mov	r5,r23
 304fb54:	398f883a 	add	r7,r7,r6
 304fb58:	38800017 	ldw	r2,0(r7)
 304fb5c:	d9800517 	ldw	r6,20(sp)
 304fb60:	38c00117 	ldw	r3,4(r7)
 304fb64:	37000044 	addi	fp,r6,1
 304fb68:	180f883a 	mov	r7,r3
 304fb6c:	100d883a 	mov	r6,r2
 304fb70:	30526f80 	call	30526f8 <__muldf3>
 304fb74:	a80b883a 	mov	r5,r21
 304fb78:	a009883a 	mov	r4,r20
 304fb7c:	182f883a 	mov	r23,r3
 304fb80:	102d883a 	mov	r22,r2
 304fb84:	3052e680 	call	3052e68 <__fixdfsi>
 304fb88:	1009883a 	mov	r4,r2
 304fb8c:	1027883a 	mov	r19,r2
 304fb90:	3052d680 	call	3052d68 <__floatsidf>
 304fb94:	a80b883a 	mov	r5,r21
 304fb98:	a009883a 	mov	r4,r20
 304fb9c:	180f883a 	mov	r7,r3
 304fba0:	100d883a 	mov	r6,r2
 304fba4:	30526040 	call	3052604 <__subdf3>
 304fba8:	180b883a 	mov	r5,r3
 304fbac:	d8c00517 	ldw	r3,20(sp)
 304fbb0:	9cc00c04 	addi	r19,r19,48
 304fbb4:	1009883a 	mov	r4,r2
 304fbb8:	1cc00005 	stb	r19,0(r3)
 304fbbc:	2021883a 	mov	r16,r4
 304fbc0:	d9000317 	ldw	r4,12(sp)
 304fbc4:	00800044 	movi	r2,1
 304fbc8:	2823883a 	mov	r17,r5
 304fbcc:	20802326 	beq	r4,r2,304fc5c <_dtoa_r+0x1438>
 304fbd0:	1029883a 	mov	r20,r2
 304fbd4:	0005883a 	mov	r2,zero
 304fbd8:	00d00934 	movhi	r3,16420
 304fbdc:	18c00004 	addi	r3,r3,0
 304fbe0:	180f883a 	mov	r7,r3
 304fbe4:	100d883a 	mov	r6,r2
 304fbe8:	880b883a 	mov	r5,r17
 304fbec:	8009883a 	mov	r4,r16
 304fbf0:	30526f80 	call	30526f8 <__muldf3>
 304fbf4:	180b883a 	mov	r5,r3
 304fbf8:	1009883a 	mov	r4,r2
 304fbfc:	1823883a 	mov	r17,r3
 304fc00:	1021883a 	mov	r16,r2
 304fc04:	3052e680 	call	3052e68 <__fixdfsi>
 304fc08:	1009883a 	mov	r4,r2
 304fc0c:	102b883a 	mov	r21,r2
 304fc10:	3052d680 	call	3052d68 <__floatsidf>
 304fc14:	880b883a 	mov	r5,r17
 304fc18:	8009883a 	mov	r4,r16
 304fc1c:	180f883a 	mov	r7,r3
 304fc20:	100d883a 	mov	r6,r2
 304fc24:	30526040 	call	3052604 <__subdf3>
 304fc28:	180b883a 	mov	r5,r3
 304fc2c:	d8c00517 	ldw	r3,20(sp)
 304fc30:	1009883a 	mov	r4,r2
 304fc34:	ad400c04 	addi	r21,r21,48
 304fc38:	1d05883a 	add	r2,r3,r20
 304fc3c:	15400005 	stb	r21,0(r2)
 304fc40:	2021883a 	mov	r16,r4
 304fc44:	d9000317 	ldw	r4,12(sp)
 304fc48:	a5000044 	addi	r20,r20,1
 304fc4c:	2823883a 	mov	r17,r5
 304fc50:	a13fe01e 	bne	r20,r4,304fbd4 <_dtoa_r+0x13b0>
 304fc54:	e505883a 	add	r2,fp,r20
 304fc58:	173fffc4 	addi	fp,r2,-1
 304fc5c:	0025883a 	mov	r18,zero
 304fc60:	04cff834 	movhi	r19,16352
 304fc64:	9cc00004 	addi	r19,r19,0
 304fc68:	b009883a 	mov	r4,r22
 304fc6c:	b80b883a 	mov	r5,r23
 304fc70:	900d883a 	mov	r6,r18
 304fc74:	980f883a 	mov	r7,r19
 304fc78:	30526840 	call	3052684 <__adddf3>
 304fc7c:	180b883a 	mov	r5,r3
 304fc80:	1009883a 	mov	r4,r2
 304fc84:	800d883a 	mov	r6,r16
 304fc88:	880f883a 	mov	r7,r17
 304fc8c:	3052ce00 	call	3052ce0 <__ltdf2>
 304fc90:	103ca316 	blt	r2,zero,304ef20 <_dtoa_r+0x6fc>
 304fc94:	0009883a 	mov	r4,zero
 304fc98:	980b883a 	mov	r5,r19
 304fc9c:	b80f883a 	mov	r7,r23
 304fca0:	b00d883a 	mov	r6,r22
 304fca4:	30526040 	call	3052604 <__subdf3>
 304fca8:	180b883a 	mov	r5,r3
 304fcac:	880f883a 	mov	r7,r17
 304fcb0:	1009883a 	mov	r4,r2
 304fcb4:	800d883a 	mov	r6,r16
 304fcb8:	3052bd00 	call	3052bd0 <__gtdf2>
 304fcbc:	00bc3e0e 	bge	zero,r2,304edb8 <_dtoa_r+0x594>
 304fcc0:	00c00c04 	movi	r3,48
 304fcc4:	e73fffc4 	addi	fp,fp,-1
 304fcc8:	e0800007 	ldb	r2,0(fp)
 304fccc:	10fffd26 	beq	r2,r3,304fcc4 <_dtoa_r+0x14a0>
 304fcd0:	d9800417 	ldw	r6,16(sp)
 304fcd4:	e7000044 	addi	fp,fp,1
 304fcd8:	d9800d15 	stw	r6,52(sp)
 304fcdc:	003ca306 	br	304ef6c <_dtoa_r+0x748>
 304fce0:	d8c00f17 	ldw	r3,60(sp)
 304fce4:	d9001117 	ldw	r4,68(sp)
 304fce8:	20e1c83a 	sub	r16,r4,r3
 304fcec:	0007883a 	mov	r3,zero
 304fcf0:	003d9406 	br	304f344 <_dtoa_r+0xb20>
 304fcf4:	00800e44 	movi	r2,57
 304fcf8:	b0800005 	stb	r2,0(r22)
 304fcfc:	b5800044 	addi	r22,r22,1
 304fd00:	003dba06 	br	304f3ec <_dtoa_r+0xbc8>
 304fd04:	05800084 	movi	r22,2
 304fd08:	003bea06 	br	304ecb4 <_dtoa_r+0x490>
 304fd0c:	d9000f17 	ldw	r4,60(sp)
 304fd10:	013bf40e 	bge	zero,r4,304ece4 <_dtoa_r+0x4c0>
 304fd14:	d9800e17 	ldw	r6,56(sp)
 304fd18:	01bc270e 	bge	zero,r6,304edb8 <_dtoa_r+0x594>
 304fd1c:	0005883a 	mov	r2,zero
 304fd20:	00d00934 	movhi	r3,16420
 304fd24:	18c00004 	addi	r3,r3,0
 304fd28:	a80b883a 	mov	r5,r21
 304fd2c:	180f883a 	mov	r7,r3
 304fd30:	a009883a 	mov	r4,r20
 304fd34:	100d883a 	mov	r6,r2
 304fd38:	30526f80 	call	30526f8 <__muldf3>
 304fd3c:	b1000044 	addi	r4,r22,1
 304fd40:	1021883a 	mov	r16,r2
 304fd44:	1823883a 	mov	r17,r3
 304fd48:	3052d680 	call	3052d68 <__floatsidf>
 304fd4c:	880b883a 	mov	r5,r17
 304fd50:	8009883a 	mov	r4,r16
 304fd54:	180f883a 	mov	r7,r3
 304fd58:	100d883a 	mov	r6,r2
 304fd5c:	30526f80 	call	30526f8 <__muldf3>
 304fd60:	0011883a 	mov	r8,zero
 304fd64:	02500734 	movhi	r9,16412
 304fd68:	4a400004 	addi	r9,r9,0
 304fd6c:	180b883a 	mov	r5,r3
 304fd70:	480f883a 	mov	r7,r9
 304fd74:	1009883a 	mov	r4,r2
 304fd78:	400d883a 	mov	r6,r8
 304fd7c:	30526840 	call	3052684 <__adddf3>
 304fd80:	102d883a 	mov	r22,r2
 304fd84:	00bf3034 	movhi	r2,64704
 304fd88:	10800004 	addi	r2,r2,0
 304fd8c:	10ef883a 	add	r23,r2,r3
 304fd90:	d8800d17 	ldw	r2,52(sp)
 304fd94:	d8c00e17 	ldw	r3,56(sp)
 304fd98:	8029883a 	mov	r20,r16
 304fd9c:	10bfffc4 	addi	r2,r2,-1
 304fda0:	882b883a 	mov	r21,r17
 304fda4:	d8800415 	stw	r2,16(sp)
 304fda8:	d8c00315 	stw	r3,12(sp)
 304fdac:	003e7906 	br	304f794 <_dtoa_r+0xf70>
 304fdb0:	d8800117 	ldw	r2,4(sp)
 304fdb4:	dc001117 	ldw	r16,68(sp)
 304fdb8:	dc801017 	ldw	r18,64(sp)
 304fdbc:	00c00d84 	movi	r3,54
 304fdc0:	1887c83a 	sub	r3,r3,r2
 304fdc4:	003d5f06 	br	304f344 <_dtoa_r+0xb20>
 304fdc8:	00800044 	movi	r2,1
 304fdcc:	1021883a 	mov	r16,r2
 304fdd0:	d8800f15 	stw	r2,60(sp)
 304fdd4:	d8802615 	stw	r2,152(sp)
 304fdd8:	d8800e15 	stw	r2,56(sp)
 304fddc:	003b8306 	br	304ebec <_dtoa_r+0x3c8>
 304fde0:	b021883a 	mov	r16,r22
 304fde4:	dd800f15 	stw	r22,60(sp)
 304fde8:	003b8006 	br	304ebec <_dtoa_r+0x3c8>
 304fdec:	103e181e 	bne	r2,zero,304f650 <_dtoa_r+0xe2c>
 304fdf0:	b880004c 	andi	r2,r23,1
 304fdf4:	1005003a 	cmpeq	r2,r2,zero
 304fdf8:	103e151e 	bne	r2,zero,304f650 <_dtoa_r+0xe2c>
 304fdfc:	003e1106 	br	304f644 <_dtoa_r+0xe20>
 304fe00:	d9001617 	ldw	r4,88(sp)
 304fe04:	980b883a 	mov	r5,r19
 304fe08:	01800284 	movi	r6,10
 304fe0c:	000f883a 	mov	r7,zero
 304fe10:	30513ac0 	call	30513ac <__multadd>
 304fe14:	d8c00e17 	ldw	r3,56(sp)
 304fe18:	1027883a 	mov	r19,r2
 304fe1c:	d8c00f15 	stw	r3,60(sp)
 304fe20:	003cc906 	br	304f148 <_dtoa_r+0x924>

0304fe24 <__sflags>:
 304fe24:	28c00007 	ldb	r3,0(r5)
 304fe28:	00801c84 	movi	r2,114
 304fe2c:	18800926 	beq	r3,r2,304fe54 <__sflags+0x30>
 304fe30:	00801dc4 	movi	r2,119
 304fe34:	18801426 	beq	r3,r2,304fe88 <__sflags+0x64>
 304fe38:	00801844 	movi	r2,97
 304fe3c:	18801626 	beq	r3,r2,304fe98 <__sflags+0x74>
 304fe40:	0007883a 	mov	r3,zero
 304fe44:	00800584 	movi	r2,22
 304fe48:	20800015 	stw	r2,0(r4)
 304fe4c:	1805883a 	mov	r2,r3
 304fe50:	f800283a 	ret
 304fe54:	000f883a 	mov	r7,zero
 304fe58:	0011883a 	mov	r8,zero
 304fe5c:	00c00104 	movi	r3,4
 304fe60:	28800047 	ldb	r2,1(r5)
 304fe64:	10000426 	beq	r2,zero,304fe78 <__sflags+0x54>
 304fe68:	01000ac4 	movi	r4,43
 304fe6c:	11000e26 	beq	r2,r4,304fea8 <__sflags+0x84>
 304fe70:	28800087 	ldb	r2,2(r5)
 304fe74:	11000c26 	beq	r2,r4,304fea8 <__sflags+0x84>
 304fe78:	3a04b03a 	or	r2,r7,r8
 304fe7c:	30800015 	stw	r2,0(r6)
 304fe80:	1805883a 	mov	r2,r3
 304fe84:	f800283a 	ret
 304fe88:	01c00044 	movi	r7,1
 304fe8c:	02018004 	movi	r8,1536
 304fe90:	00c00204 	movi	r3,8
 304fe94:	003ff206 	br	304fe60 <__sflags+0x3c>
 304fe98:	01c00044 	movi	r7,1
 304fe9c:	02008204 	movi	r8,520
 304fea0:	00c04204 	movi	r3,264
 304fea4:	003fee06 	br	304fe60 <__sflags+0x3c>
 304fea8:	00bffcc4 	movi	r2,-13
 304feac:	1884703a 	and	r2,r3,r2
 304feb0:	01c00084 	movi	r7,2
 304feb4:	10c00414 	ori	r3,r2,16
 304feb8:	3a04b03a 	or	r2,r7,r8
 304febc:	30800015 	stw	r2,0(r6)
 304fec0:	003fef06 	br	304fe80 <__sflags+0x5c>

0304fec4 <__sfvwrite_r>:
 304fec4:	30800217 	ldw	r2,8(r6)
 304fec8:	defff504 	addi	sp,sp,-44
 304fecc:	df000915 	stw	fp,36(sp)
 304fed0:	dd800715 	stw	r22,28(sp)
 304fed4:	dc800315 	stw	r18,12(sp)
 304fed8:	dfc00a15 	stw	ra,40(sp)
 304fedc:	ddc00815 	stw	r23,32(sp)
 304fee0:	dd400615 	stw	r21,24(sp)
 304fee4:	dd000515 	stw	r20,20(sp)
 304fee8:	dcc00415 	stw	r19,16(sp)
 304feec:	dc400215 	stw	r17,8(sp)
 304fef0:	dc000115 	stw	r16,4(sp)
 304fef4:	302d883a 	mov	r22,r6
 304fef8:	2039883a 	mov	fp,r4
 304fefc:	2825883a 	mov	r18,r5
 304ff00:	10001c26 	beq	r2,zero,304ff74 <__sfvwrite_r+0xb0>
 304ff04:	29c0030b 	ldhu	r7,12(r5)
 304ff08:	3880020c 	andi	r2,r7,8
 304ff0c:	10002726 	beq	r2,zero,304ffac <__sfvwrite_r+0xe8>
 304ff10:	28800417 	ldw	r2,16(r5)
 304ff14:	10002526 	beq	r2,zero,304ffac <__sfvwrite_r+0xe8>
 304ff18:	3880008c 	andi	r2,r7,2
 304ff1c:	b5400017 	ldw	r21,0(r22)
 304ff20:	10002826 	beq	r2,zero,304ffc4 <__sfvwrite_r+0x100>
 304ff24:	0021883a 	mov	r16,zero
 304ff28:	0023883a 	mov	r17,zero
 304ff2c:	880d883a 	mov	r6,r17
 304ff30:	e009883a 	mov	r4,fp
 304ff34:	00810004 	movi	r2,1024
 304ff38:	80006e26 	beq	r16,zero,30500f4 <__sfvwrite_r+0x230>
 304ff3c:	800f883a 	mov	r7,r16
 304ff40:	91400717 	ldw	r5,28(r18)
 304ff44:	1400012e 	bgeu	r2,r16,304ff4c <__sfvwrite_r+0x88>
 304ff48:	100f883a 	mov	r7,r2
 304ff4c:	90c00917 	ldw	r3,36(r18)
 304ff50:	183ee83a 	callr	r3
 304ff54:	1007883a 	mov	r3,r2
 304ff58:	80a1c83a 	sub	r16,r16,r2
 304ff5c:	88a3883a 	add	r17,r17,r2
 304ff60:	00806d0e 	bge	zero,r2,3050118 <__sfvwrite_r+0x254>
 304ff64:	b0800217 	ldw	r2,8(r22)
 304ff68:	10c5c83a 	sub	r2,r2,r3
 304ff6c:	b0800215 	stw	r2,8(r22)
 304ff70:	103fee1e 	bne	r2,zero,304ff2c <__sfvwrite_r+0x68>
 304ff74:	0009883a 	mov	r4,zero
 304ff78:	2005883a 	mov	r2,r4
 304ff7c:	dfc00a17 	ldw	ra,40(sp)
 304ff80:	df000917 	ldw	fp,36(sp)
 304ff84:	ddc00817 	ldw	r23,32(sp)
 304ff88:	dd800717 	ldw	r22,28(sp)
 304ff8c:	dd400617 	ldw	r21,24(sp)
 304ff90:	dd000517 	ldw	r20,20(sp)
 304ff94:	dcc00417 	ldw	r19,16(sp)
 304ff98:	dc800317 	ldw	r18,12(sp)
 304ff9c:	dc400217 	ldw	r17,8(sp)
 304ffa0:	dc000117 	ldw	r16,4(sp)
 304ffa4:	dec00b04 	addi	sp,sp,44
 304ffa8:	f800283a 	ret
 304ffac:	304e4700 	call	304e470 <__swsetup_r>
 304ffb0:	1000e41e 	bne	r2,zero,3050344 <__sfvwrite_r+0x480>
 304ffb4:	91c0030b 	ldhu	r7,12(r18)
 304ffb8:	b5400017 	ldw	r21,0(r22)
 304ffbc:	3880008c 	andi	r2,r7,2
 304ffc0:	103fd81e 	bne	r2,zero,304ff24 <__sfvwrite_r+0x60>
 304ffc4:	3880004c 	andi	r2,r7,1
 304ffc8:	1005003a 	cmpeq	r2,r2,zero
 304ffcc:	10005726 	beq	r2,zero,305012c <__sfvwrite_r+0x268>
 304ffd0:	0029883a 	mov	r20,zero
 304ffd4:	002f883a 	mov	r23,zero
 304ffd8:	a0004226 	beq	r20,zero,30500e4 <__sfvwrite_r+0x220>
 304ffdc:	3880800c 	andi	r2,r7,512
 304ffe0:	94000217 	ldw	r16,8(r18)
 304ffe4:	10008b26 	beq	r2,zero,3050214 <__sfvwrite_r+0x350>
 304ffe8:	800d883a 	mov	r6,r16
 304ffec:	a400a536 	bltu	r20,r16,3050284 <__sfvwrite_r+0x3c0>
 304fff0:	3881200c 	andi	r2,r7,1152
 304fff4:	10002726 	beq	r2,zero,3050094 <__sfvwrite_r+0x1d0>
 304fff8:	90800517 	ldw	r2,20(r18)
 304fffc:	92000417 	ldw	r8,16(r18)
 3050000:	91400017 	ldw	r5,0(r18)
 3050004:	1087883a 	add	r3,r2,r2
 3050008:	1887883a 	add	r3,r3,r2
 305000c:	1808d7fa 	srli	r4,r3,31
 3050010:	2a21c83a 	sub	r16,r5,r8
 3050014:	80800044 	addi	r2,r16,1
 3050018:	20c9883a 	add	r4,r4,r3
 305001c:	2027d07a 	srai	r19,r4,1
 3050020:	a085883a 	add	r2,r20,r2
 3050024:	980d883a 	mov	r6,r19
 3050028:	9880022e 	bgeu	r19,r2,3050034 <__sfvwrite_r+0x170>
 305002c:	1027883a 	mov	r19,r2
 3050030:	100d883a 	mov	r6,r2
 3050034:	3881000c 	andi	r2,r7,1024
 3050038:	1000b826 	beq	r2,zero,305031c <__sfvwrite_r+0x458>
 305003c:	300b883a 	mov	r5,r6
 3050040:	e009883a 	mov	r4,fp
 3050044:	304b41c0 	call	304b41c <_malloc_r>
 3050048:	10003126 	beq	r2,zero,3050110 <__sfvwrite_r+0x24c>
 305004c:	91400417 	ldw	r5,16(r18)
 3050050:	1009883a 	mov	r4,r2
 3050054:	800d883a 	mov	r6,r16
 3050058:	1023883a 	mov	r17,r2
 305005c:	304bb5c0 	call	304bb5c <memcpy>
 3050060:	90c0030b 	ldhu	r3,12(r18)
 3050064:	00beffc4 	movi	r2,-1025
 3050068:	1886703a 	and	r3,r3,r2
 305006c:	18c02014 	ori	r3,r3,128
 3050070:	90c0030d 	sth	r3,12(r18)
 3050074:	9c07c83a 	sub	r3,r19,r16
 3050078:	8c05883a 	add	r2,r17,r16
 305007c:	a00d883a 	mov	r6,r20
 3050080:	a021883a 	mov	r16,r20
 3050084:	90800015 	stw	r2,0(r18)
 3050088:	90c00215 	stw	r3,8(r18)
 305008c:	94400415 	stw	r17,16(r18)
 3050090:	94c00515 	stw	r19,20(r18)
 3050094:	91000017 	ldw	r4,0(r18)
 3050098:	b80b883a 	mov	r5,r23
 305009c:	a023883a 	mov	r17,r20
 30500a0:	30506080 	call	3050608 <memmove>
 30500a4:	90c00217 	ldw	r3,8(r18)
 30500a8:	90800017 	ldw	r2,0(r18)
 30500ac:	a027883a 	mov	r19,r20
 30500b0:	1c07c83a 	sub	r3,r3,r16
 30500b4:	1405883a 	add	r2,r2,r16
 30500b8:	90c00215 	stw	r3,8(r18)
 30500bc:	a021883a 	mov	r16,r20
 30500c0:	90800015 	stw	r2,0(r18)
 30500c4:	b0800217 	ldw	r2,8(r22)
 30500c8:	1405c83a 	sub	r2,r2,r16
 30500cc:	b0800215 	stw	r2,8(r22)
 30500d0:	103fa826 	beq	r2,zero,304ff74 <__sfvwrite_r+0xb0>
 30500d4:	a469c83a 	sub	r20,r20,r17
 30500d8:	91c0030b 	ldhu	r7,12(r18)
 30500dc:	bcef883a 	add	r23,r23,r19
 30500e0:	a03fbe1e 	bne	r20,zero,304ffdc <__sfvwrite_r+0x118>
 30500e4:	adc00017 	ldw	r23,0(r21)
 30500e8:	ad000117 	ldw	r20,4(r21)
 30500ec:	ad400204 	addi	r21,r21,8
 30500f0:	003fb906 	br	304ffd8 <__sfvwrite_r+0x114>
 30500f4:	ac400017 	ldw	r17,0(r21)
 30500f8:	ac000117 	ldw	r16,4(r21)
 30500fc:	ad400204 	addi	r21,r21,8
 3050100:	003f8a06 	br	304ff2c <__sfvwrite_r+0x68>
 3050104:	91400417 	ldw	r5,16(r18)
 3050108:	e009883a 	mov	r4,fp
 305010c:	304a8140 	call	304a814 <_free_r>
 3050110:	00800304 	movi	r2,12
 3050114:	e0800015 	stw	r2,0(fp)
 3050118:	9080030b 	ldhu	r2,12(r18)
 305011c:	013fffc4 	movi	r4,-1
 3050120:	10801014 	ori	r2,r2,64
 3050124:	9080030d 	sth	r2,12(r18)
 3050128:	003f9306 	br	304ff78 <__sfvwrite_r+0xb4>
 305012c:	0027883a 	mov	r19,zero
 3050130:	002f883a 	mov	r23,zero
 3050134:	d8000015 	stw	zero,0(sp)
 3050138:	0029883a 	mov	r20,zero
 305013c:	98001e26 	beq	r19,zero,30501b8 <__sfvwrite_r+0x2f4>
 3050140:	d8c00017 	ldw	r3,0(sp)
 3050144:	1804c03a 	cmpne	r2,r3,zero
 3050148:	10005e26 	beq	r2,zero,30502c4 <__sfvwrite_r+0x400>
 305014c:	9821883a 	mov	r16,r19
 3050150:	a4c0012e 	bgeu	r20,r19,3050158 <__sfvwrite_r+0x294>
 3050154:	a021883a 	mov	r16,r20
 3050158:	91000017 	ldw	r4,0(r18)
 305015c:	90800417 	ldw	r2,16(r18)
 3050160:	91800217 	ldw	r6,8(r18)
 3050164:	91c00517 	ldw	r7,20(r18)
 3050168:	1100022e 	bgeu	r2,r4,3050174 <__sfvwrite_r+0x2b0>
 305016c:	31e3883a 	add	r17,r6,r7
 3050170:	8c001616 	blt	r17,r16,30501cc <__sfvwrite_r+0x308>
 3050174:	81c03816 	blt	r16,r7,3050258 <__sfvwrite_r+0x394>
 3050178:	90c00917 	ldw	r3,36(r18)
 305017c:	91400717 	ldw	r5,28(r18)
 3050180:	e009883a 	mov	r4,fp
 3050184:	b80d883a 	mov	r6,r23
 3050188:	183ee83a 	callr	r3
 305018c:	1023883a 	mov	r17,r2
 3050190:	00bfe10e 	bge	zero,r2,3050118 <__sfvwrite_r+0x254>
 3050194:	a469c83a 	sub	r20,r20,r17
 3050198:	a0001826 	beq	r20,zero,30501fc <__sfvwrite_r+0x338>
 305019c:	b0800217 	ldw	r2,8(r22)
 30501a0:	1445c83a 	sub	r2,r2,r17
 30501a4:	b0800215 	stw	r2,8(r22)
 30501a8:	103f7226 	beq	r2,zero,304ff74 <__sfvwrite_r+0xb0>
 30501ac:	9c67c83a 	sub	r19,r19,r17
 30501b0:	bc6f883a 	add	r23,r23,r17
 30501b4:	983fe21e 	bne	r19,zero,3050140 <__sfvwrite_r+0x27c>
 30501b8:	adc00017 	ldw	r23,0(r21)
 30501bc:	acc00117 	ldw	r19,4(r21)
 30501c0:	ad400204 	addi	r21,r21,8
 30501c4:	d8000015 	stw	zero,0(sp)
 30501c8:	003fdc06 	br	305013c <__sfvwrite_r+0x278>
 30501cc:	b80b883a 	mov	r5,r23
 30501d0:	880d883a 	mov	r6,r17
 30501d4:	30506080 	call	3050608 <memmove>
 30501d8:	90c00017 	ldw	r3,0(r18)
 30501dc:	e009883a 	mov	r4,fp
 30501e0:	900b883a 	mov	r5,r18
 30501e4:	1c47883a 	add	r3,r3,r17
 30501e8:	90c00015 	stw	r3,0(r18)
 30501ec:	304a0e80 	call	304a0e8 <_fflush_r>
 30501f0:	103fc91e 	bne	r2,zero,3050118 <__sfvwrite_r+0x254>
 30501f4:	a469c83a 	sub	r20,r20,r17
 30501f8:	a03fe81e 	bne	r20,zero,305019c <__sfvwrite_r+0x2d8>
 30501fc:	e009883a 	mov	r4,fp
 3050200:	900b883a 	mov	r5,r18
 3050204:	304a0e80 	call	304a0e8 <_fflush_r>
 3050208:	103fc31e 	bne	r2,zero,3050118 <__sfvwrite_r+0x254>
 305020c:	d8000015 	stw	zero,0(sp)
 3050210:	003fe206 	br	305019c <__sfvwrite_r+0x2d8>
 3050214:	91000017 	ldw	r4,0(r18)
 3050218:	90800417 	ldw	r2,16(r18)
 305021c:	1100022e 	bgeu	r2,r4,3050228 <__sfvwrite_r+0x364>
 3050220:	8023883a 	mov	r17,r16
 3050224:	85003136 	bltu	r16,r20,30502ec <__sfvwrite_r+0x428>
 3050228:	91c00517 	ldw	r7,20(r18)
 305022c:	a1c01836 	bltu	r20,r7,3050290 <__sfvwrite_r+0x3cc>
 3050230:	90c00917 	ldw	r3,36(r18)
 3050234:	91400717 	ldw	r5,28(r18)
 3050238:	e009883a 	mov	r4,fp
 305023c:	b80d883a 	mov	r6,r23
 3050240:	183ee83a 	callr	r3
 3050244:	1021883a 	mov	r16,r2
 3050248:	00bfb30e 	bge	zero,r2,3050118 <__sfvwrite_r+0x254>
 305024c:	1023883a 	mov	r17,r2
 3050250:	1027883a 	mov	r19,r2
 3050254:	003f9b06 	br	30500c4 <__sfvwrite_r+0x200>
 3050258:	b80b883a 	mov	r5,r23
 305025c:	800d883a 	mov	r6,r16
 3050260:	30506080 	call	3050608 <memmove>
 3050264:	90c00217 	ldw	r3,8(r18)
 3050268:	90800017 	ldw	r2,0(r18)
 305026c:	8023883a 	mov	r17,r16
 3050270:	1c07c83a 	sub	r3,r3,r16
 3050274:	1405883a 	add	r2,r2,r16
 3050278:	90c00215 	stw	r3,8(r18)
 305027c:	90800015 	stw	r2,0(r18)
 3050280:	003fc406 	br	3050194 <__sfvwrite_r+0x2d0>
 3050284:	a00d883a 	mov	r6,r20
 3050288:	a021883a 	mov	r16,r20
 305028c:	003f8106 	br	3050094 <__sfvwrite_r+0x1d0>
 3050290:	b80b883a 	mov	r5,r23
 3050294:	a00d883a 	mov	r6,r20
 3050298:	30506080 	call	3050608 <memmove>
 305029c:	90c00217 	ldw	r3,8(r18)
 30502a0:	90800017 	ldw	r2,0(r18)
 30502a4:	a021883a 	mov	r16,r20
 30502a8:	1d07c83a 	sub	r3,r3,r20
 30502ac:	1505883a 	add	r2,r2,r20
 30502b0:	a023883a 	mov	r17,r20
 30502b4:	a027883a 	mov	r19,r20
 30502b8:	90c00215 	stw	r3,8(r18)
 30502bc:	90800015 	stw	r2,0(r18)
 30502c0:	003f8006 	br	30500c4 <__sfvwrite_r+0x200>
 30502c4:	b809883a 	mov	r4,r23
 30502c8:	01400284 	movi	r5,10
 30502cc:	980d883a 	mov	r6,r19
 30502d0:	305050c0 	call	305050c <memchr>
 30502d4:	10001726 	beq	r2,zero,3050334 <__sfvwrite_r+0x470>
 30502d8:	15c5c83a 	sub	r2,r2,r23
 30502dc:	15000044 	addi	r20,r2,1
 30502e0:	00800044 	movi	r2,1
 30502e4:	d8800015 	stw	r2,0(sp)
 30502e8:	003f9806 	br	305014c <__sfvwrite_r+0x288>
 30502ec:	b80b883a 	mov	r5,r23
 30502f0:	800d883a 	mov	r6,r16
 30502f4:	30506080 	call	3050608 <memmove>
 30502f8:	90c00017 	ldw	r3,0(r18)
 30502fc:	e009883a 	mov	r4,fp
 3050300:	900b883a 	mov	r5,r18
 3050304:	1c07883a 	add	r3,r3,r16
 3050308:	90c00015 	stw	r3,0(r18)
 305030c:	8027883a 	mov	r19,r16
 3050310:	304a0e80 	call	304a0e8 <_fflush_r>
 3050314:	103f6b26 	beq	r2,zero,30500c4 <__sfvwrite_r+0x200>
 3050318:	003f7f06 	br	3050118 <__sfvwrite_r+0x254>
 305031c:	400b883a 	mov	r5,r8
 3050320:	e009883a 	mov	r4,fp
 3050324:	30519500 	call	3051950 <_realloc_r>
 3050328:	103f7626 	beq	r2,zero,3050104 <__sfvwrite_r+0x240>
 305032c:	1023883a 	mov	r17,r2
 3050330:	003f5006 	br	3050074 <__sfvwrite_r+0x1b0>
 3050334:	00c00044 	movi	r3,1
 3050338:	9d000044 	addi	r20,r19,1
 305033c:	d8c00015 	stw	r3,0(sp)
 3050340:	003f8206 	br	305014c <__sfvwrite_r+0x288>
 3050344:	9080030b 	ldhu	r2,12(r18)
 3050348:	00c00244 	movi	r3,9
 305034c:	013fffc4 	movi	r4,-1
 3050350:	10801014 	ori	r2,r2,64
 3050354:	9080030d 	sth	r2,12(r18)
 3050358:	e0c00015 	stw	r3,0(fp)
 305035c:	003f0606 	br	304ff78 <__sfvwrite_r+0xb4>

03050360 <_isatty_r>:
 3050360:	defffd04 	addi	sp,sp,-12
 3050364:	dc000015 	stw	r16,0(sp)
 3050368:	0400c1b4 	movhi	r16,774
 305036c:	8439ff04 	addi	r16,r16,-6148
 3050370:	dc400115 	stw	r17,4(sp)
 3050374:	80000015 	stw	zero,0(r16)
 3050378:	2023883a 	mov	r17,r4
 305037c:	2809883a 	mov	r4,r5
 3050380:	dfc00215 	stw	ra,8(sp)
 3050384:	30535cc0 	call	30535cc <isatty>
 3050388:	1007883a 	mov	r3,r2
 305038c:	00bfffc4 	movi	r2,-1
 3050390:	18800626 	beq	r3,r2,30503ac <_isatty_r+0x4c>
 3050394:	1805883a 	mov	r2,r3
 3050398:	dfc00217 	ldw	ra,8(sp)
 305039c:	dc400117 	ldw	r17,4(sp)
 30503a0:	dc000017 	ldw	r16,0(sp)
 30503a4:	dec00304 	addi	sp,sp,12
 30503a8:	f800283a 	ret
 30503ac:	80800017 	ldw	r2,0(r16)
 30503b0:	103ff826 	beq	r2,zero,3050394 <_isatty_r+0x34>
 30503b4:	88800015 	stw	r2,0(r17)
 30503b8:	1805883a 	mov	r2,r3
 30503bc:	dfc00217 	ldw	ra,8(sp)
 30503c0:	dc400117 	ldw	r17,4(sp)
 30503c4:	dc000017 	ldw	r16,0(sp)
 30503c8:	dec00304 	addi	sp,sp,12
 30503cc:	f800283a 	ret

030503d0 <__locale_charset>:
 30503d0:	d0a00917 	ldw	r2,-32732(gp)
 30503d4:	f800283a 	ret

030503d8 <_localeconv_r>:
 30503d8:	0080c1b4 	movhi	r2,774
 30503dc:	10aade04 	addi	r2,r2,-21640
 30503e0:	f800283a 	ret

030503e4 <localeconv>:
 30503e4:	0080c1b4 	movhi	r2,774
 30503e8:	10b28804 	addi	r2,r2,-13792
 30503ec:	11000017 	ldw	r4,0(r2)
 30503f0:	30503d81 	jmpi	30503d8 <_localeconv_r>

030503f4 <_setlocale_r>:
 30503f4:	defffc04 	addi	sp,sp,-16
 30503f8:	00c0c1b4 	movhi	r3,774
 30503fc:	18ea1404 	addi	r3,r3,-22448
 3050400:	dc800215 	stw	r18,8(sp)
 3050404:	dc400115 	stw	r17,4(sp)
 3050408:	dc000015 	stw	r16,0(sp)
 305040c:	2023883a 	mov	r17,r4
 3050410:	2825883a 	mov	r18,r5
 3050414:	dfc00315 	stw	ra,12(sp)
 3050418:	3021883a 	mov	r16,r6
 305041c:	3009883a 	mov	r4,r6
 3050420:	180b883a 	mov	r5,r3
 3050424:	30000926 	beq	r6,zero,305044c <_setlocale_r+0x58>
 3050428:	304c37c0 	call	304c37c <strcmp>
 305042c:	8009883a 	mov	r4,r16
 3050430:	0140c1b4 	movhi	r5,774
 3050434:	296a2504 	addi	r5,r5,-22380
 3050438:	10000b1e 	bne	r2,zero,3050468 <_setlocale_r+0x74>
 305043c:	8c000d15 	stw	r16,52(r17)
 3050440:	8c800c15 	stw	r18,48(r17)
 3050444:	00c0c1b4 	movhi	r3,774
 3050448:	18ea1404 	addi	r3,r3,-22448
 305044c:	1805883a 	mov	r2,r3
 3050450:	dfc00317 	ldw	ra,12(sp)
 3050454:	dc800217 	ldw	r18,8(sp)
 3050458:	dc400117 	ldw	r17,4(sp)
 305045c:	dc000017 	ldw	r16,0(sp)
 3050460:	dec00404 	addi	sp,sp,16
 3050464:	f800283a 	ret
 3050468:	304c37c0 	call	304c37c <strcmp>
 305046c:	0007883a 	mov	r3,zero
 3050470:	103ff226 	beq	r2,zero,305043c <_setlocale_r+0x48>
 3050474:	003ff506 	br	305044c <_setlocale_r+0x58>

03050478 <setlocale>:
 3050478:	0180c1b4 	movhi	r6,774
 305047c:	31b28804 	addi	r6,r6,-13792
 3050480:	2007883a 	mov	r3,r4
 3050484:	31000017 	ldw	r4,0(r6)
 3050488:	280d883a 	mov	r6,r5
 305048c:	180b883a 	mov	r5,r3
 3050490:	30503f41 	jmpi	30503f4 <_setlocale_r>

03050494 <_lseek_r>:
 3050494:	defffd04 	addi	sp,sp,-12
 3050498:	dc000015 	stw	r16,0(sp)
 305049c:	0400c1b4 	movhi	r16,774
 30504a0:	8439ff04 	addi	r16,r16,-6148
 30504a4:	dc400115 	stw	r17,4(sp)
 30504a8:	80000015 	stw	zero,0(r16)
 30504ac:	2023883a 	mov	r17,r4
 30504b0:	2809883a 	mov	r4,r5
 30504b4:	300b883a 	mov	r5,r6
 30504b8:	380d883a 	mov	r6,r7
 30504bc:	dfc00215 	stw	ra,8(sp)
 30504c0:	30537b80 	call	30537b8 <lseek>
 30504c4:	1007883a 	mov	r3,r2
 30504c8:	00bfffc4 	movi	r2,-1
 30504cc:	18800626 	beq	r3,r2,30504e8 <_lseek_r+0x54>
 30504d0:	1805883a 	mov	r2,r3
 30504d4:	dfc00217 	ldw	ra,8(sp)
 30504d8:	dc400117 	ldw	r17,4(sp)
 30504dc:	dc000017 	ldw	r16,0(sp)
 30504e0:	dec00304 	addi	sp,sp,12
 30504e4:	f800283a 	ret
 30504e8:	80800017 	ldw	r2,0(r16)
 30504ec:	103ff826 	beq	r2,zero,30504d0 <_lseek_r+0x3c>
 30504f0:	88800015 	stw	r2,0(r17)
 30504f4:	1805883a 	mov	r2,r3
 30504f8:	dfc00217 	ldw	ra,8(sp)
 30504fc:	dc400117 	ldw	r17,4(sp)
 3050500:	dc000017 	ldw	r16,0(sp)
 3050504:	dec00304 	addi	sp,sp,12
 3050508:	f800283a 	ret

0305050c <memchr>:
 305050c:	008000c4 	movi	r2,3
 3050510:	29403fcc 	andi	r5,r5,255
 3050514:	2007883a 	mov	r3,r4
 3050518:	1180022e 	bgeu	r2,r6,3050524 <memchr+0x18>
 305051c:	2084703a 	and	r2,r4,r2
 3050520:	10000b26 	beq	r2,zero,3050550 <memchr+0x44>
 3050524:	313fffc4 	addi	r4,r6,-1
 3050528:	3000051e 	bne	r6,zero,3050540 <memchr+0x34>
 305052c:	00003206 	br	30505f8 <memchr+0xec>
 3050530:	213fffc4 	addi	r4,r4,-1
 3050534:	00bfffc4 	movi	r2,-1
 3050538:	18c00044 	addi	r3,r3,1
 305053c:	20802e26 	beq	r4,r2,30505f8 <memchr+0xec>
 3050540:	18800003 	ldbu	r2,0(r3)
 3050544:	28bffa1e 	bne	r5,r2,3050530 <memchr+0x24>
 3050548:	1805883a 	mov	r2,r3
 305054c:	f800283a 	ret
 3050550:	0017883a 	mov	r11,zero
 3050554:	0007883a 	mov	r3,zero
 3050558:	01c00104 	movi	r7,4
 305055c:	5804923a 	slli	r2,r11,8
 3050560:	18c00044 	addi	r3,r3,1
 3050564:	1157883a 	add	r11,r2,r5
 3050568:	19fffc1e 	bne	r3,r7,305055c <memchr+0x50>
 305056c:	228000c4 	addi	r10,r4,3
 3050570:	22400084 	addi	r9,r4,2
 3050574:	22000044 	addi	r8,r4,1
 3050578:	037fbff4 	movhi	r13,65279
 305057c:	6b7fbfc4 	addi	r13,r13,-257
 3050580:	03202074 	movhi	r12,32897
 3050584:	63202004 	addi	r12,r12,-32640
 3050588:	038000c4 	movi	r14,3
 305058c:	20800017 	ldw	r2,0(r4)
 3050590:	31bfff04 	addi	r6,r6,-4
 3050594:	200f883a 	mov	r7,r4
 3050598:	12c4f03a 	xor	r2,r2,r11
 305059c:	1347883a 	add	r3,r2,r13
 30505a0:	1b06703a 	and	r3,r3,r12
 30505a4:	0084303a 	nor	r2,zero,r2
 30505a8:	10c4703a 	and	r2,r2,r3
 30505ac:	10000b26 	beq	r2,zero,30505dc <memchr+0xd0>
 30505b0:	20800003 	ldbu	r2,0(r4)
 30505b4:	28801226 	beq	r5,r2,3050600 <memchr+0xf4>
 30505b8:	40800003 	ldbu	r2,0(r8)
 30505bc:	400f883a 	mov	r7,r8
 30505c0:	28800f26 	beq	r5,r2,3050600 <memchr+0xf4>
 30505c4:	48800003 	ldbu	r2,0(r9)
 30505c8:	480f883a 	mov	r7,r9
 30505cc:	28800c26 	beq	r5,r2,3050600 <memchr+0xf4>
 30505d0:	50800003 	ldbu	r2,0(r10)
 30505d4:	500f883a 	mov	r7,r10
 30505d8:	28800926 	beq	r5,r2,3050600 <memchr+0xf4>
 30505dc:	21000104 	addi	r4,r4,4
 30505e0:	52800104 	addi	r10,r10,4
 30505e4:	4a400104 	addi	r9,r9,4
 30505e8:	42000104 	addi	r8,r8,4
 30505ec:	71bfe736 	bltu	r14,r6,305058c <memchr+0x80>
 30505f0:	2007883a 	mov	r3,r4
 30505f4:	003fcb06 	br	3050524 <memchr+0x18>
 30505f8:	0005883a 	mov	r2,zero
 30505fc:	f800283a 	ret
 3050600:	3805883a 	mov	r2,r7
 3050604:	f800283a 	ret

03050608 <memmove>:
 3050608:	2807883a 	mov	r3,r5
 305060c:	2011883a 	mov	r8,r4
 3050610:	29000c2e 	bgeu	r5,r4,3050644 <memmove+0x3c>
 3050614:	298f883a 	add	r7,r5,r6
 3050618:	21c00a2e 	bgeu	r4,r7,3050644 <memmove+0x3c>
 305061c:	30000726 	beq	r6,zero,305063c <memmove+0x34>
 3050620:	2187883a 	add	r3,r4,r6
 3050624:	198dc83a 	sub	r6,r3,r6
 3050628:	39ffffc4 	addi	r7,r7,-1
 305062c:	38800003 	ldbu	r2,0(r7)
 3050630:	18ffffc4 	addi	r3,r3,-1
 3050634:	18800005 	stb	r2,0(r3)
 3050638:	19bffb1e 	bne	r3,r6,3050628 <memmove+0x20>
 305063c:	2005883a 	mov	r2,r4
 3050640:	f800283a 	ret
 3050644:	01c003c4 	movi	r7,15
 3050648:	39800a36 	bltu	r7,r6,3050674 <memmove+0x6c>
 305064c:	303ffb26 	beq	r6,zero,305063c <memmove+0x34>
 3050650:	400f883a 	mov	r7,r8
 3050654:	320d883a 	add	r6,r6,r8
 3050658:	28800003 	ldbu	r2,0(r5)
 305065c:	29400044 	addi	r5,r5,1
 3050660:	38800005 	stb	r2,0(r7)
 3050664:	39c00044 	addi	r7,r7,1
 3050668:	39bffb1e 	bne	r7,r6,3050658 <memmove+0x50>
 305066c:	2005883a 	mov	r2,r4
 3050670:	f800283a 	ret
 3050674:	1904b03a 	or	r2,r3,r4
 3050678:	108000cc 	andi	r2,r2,3
 305067c:	103ff31e 	bne	r2,zero,305064c <memmove+0x44>
 3050680:	3811883a 	mov	r8,r7
 3050684:	180b883a 	mov	r5,r3
 3050688:	200f883a 	mov	r7,r4
 305068c:	28c00017 	ldw	r3,0(r5)
 3050690:	31bffc04 	addi	r6,r6,-16
 3050694:	38c00015 	stw	r3,0(r7)
 3050698:	28800117 	ldw	r2,4(r5)
 305069c:	38800115 	stw	r2,4(r7)
 30506a0:	28c00217 	ldw	r3,8(r5)
 30506a4:	38c00215 	stw	r3,8(r7)
 30506a8:	28800317 	ldw	r2,12(r5)
 30506ac:	29400404 	addi	r5,r5,16
 30506b0:	38800315 	stw	r2,12(r7)
 30506b4:	39c00404 	addi	r7,r7,16
 30506b8:	41bff436 	bltu	r8,r6,305068c <memmove+0x84>
 30506bc:	008000c4 	movi	r2,3
 30506c0:	1180072e 	bgeu	r2,r6,30506e0 <memmove+0xd8>
 30506c4:	1007883a 	mov	r3,r2
 30506c8:	28800017 	ldw	r2,0(r5)
 30506cc:	31bfff04 	addi	r6,r6,-4
 30506d0:	29400104 	addi	r5,r5,4
 30506d4:	38800015 	stw	r2,0(r7)
 30506d8:	39c00104 	addi	r7,r7,4
 30506dc:	19bffa36 	bltu	r3,r6,30506c8 <memmove+0xc0>
 30506e0:	3811883a 	mov	r8,r7
 30506e4:	003fd906 	br	305064c <memmove+0x44>

030506e8 <_Bfree>:
 30506e8:	28000826 	beq	r5,zero,305070c <_Bfree+0x24>
 30506ec:	28800117 	ldw	r2,4(r5)
 30506f0:	21001317 	ldw	r4,76(r4)
 30506f4:	1085883a 	add	r2,r2,r2
 30506f8:	1085883a 	add	r2,r2,r2
 30506fc:	1105883a 	add	r2,r2,r4
 3050700:	10c00017 	ldw	r3,0(r2)
 3050704:	28c00015 	stw	r3,0(r5)
 3050708:	11400015 	stw	r5,0(r2)
 305070c:	f800283a 	ret

03050710 <__hi0bits>:
 3050710:	20bfffec 	andhi	r2,r4,65535
 3050714:	10001426 	beq	r2,zero,3050768 <__hi0bits+0x58>
 3050718:	0007883a 	mov	r3,zero
 305071c:	20bfc02c 	andhi	r2,r4,65280
 3050720:	1000021e 	bne	r2,zero,305072c <__hi0bits+0x1c>
 3050724:	2008923a 	slli	r4,r4,8
 3050728:	18c00204 	addi	r3,r3,8
 305072c:	20bc002c 	andhi	r2,r4,61440
 3050730:	1000021e 	bne	r2,zero,305073c <__hi0bits+0x2c>
 3050734:	2008913a 	slli	r4,r4,4
 3050738:	18c00104 	addi	r3,r3,4
 305073c:	20b0002c 	andhi	r2,r4,49152
 3050740:	1000031e 	bne	r2,zero,3050750 <__hi0bits+0x40>
 3050744:	2105883a 	add	r2,r4,r4
 3050748:	18c00084 	addi	r3,r3,2
 305074c:	1089883a 	add	r4,r2,r2
 3050750:	20000316 	blt	r4,zero,3050760 <__hi0bits+0x50>
 3050754:	2090002c 	andhi	r2,r4,16384
 3050758:	10000626 	beq	r2,zero,3050774 <__hi0bits+0x64>
 305075c:	18c00044 	addi	r3,r3,1
 3050760:	1805883a 	mov	r2,r3
 3050764:	f800283a 	ret
 3050768:	2008943a 	slli	r4,r4,16
 305076c:	00c00404 	movi	r3,16
 3050770:	003fea06 	br	305071c <__hi0bits+0xc>
 3050774:	00c00804 	movi	r3,32
 3050778:	1805883a 	mov	r2,r3
 305077c:	f800283a 	ret

03050780 <__lo0bits>:
 3050780:	20c00017 	ldw	r3,0(r4)
 3050784:	188001cc 	andi	r2,r3,7
 3050788:	10000a26 	beq	r2,zero,30507b4 <__lo0bits+0x34>
 305078c:	1880004c 	andi	r2,r3,1
 3050790:	1005003a 	cmpeq	r2,r2,zero
 3050794:	10002126 	beq	r2,zero,305081c <__lo0bits+0x9c>
 3050798:	1880008c 	andi	r2,r3,2
 305079c:	1000251e 	bne	r2,zero,3050834 <__lo0bits+0xb4>
 30507a0:	1804d0ba 	srli	r2,r3,2
 30507a4:	01400084 	movi	r5,2
 30507a8:	20800015 	stw	r2,0(r4)
 30507ac:	2805883a 	mov	r2,r5
 30507b0:	f800283a 	ret
 30507b4:	18bfffcc 	andi	r2,r3,65535
 30507b8:	10001526 	beq	r2,zero,3050810 <__lo0bits+0x90>
 30507bc:	000b883a 	mov	r5,zero
 30507c0:	18803fcc 	andi	r2,r3,255
 30507c4:	1000021e 	bne	r2,zero,30507d0 <__lo0bits+0x50>
 30507c8:	1806d23a 	srli	r3,r3,8
 30507cc:	29400204 	addi	r5,r5,8
 30507d0:	188003cc 	andi	r2,r3,15
 30507d4:	1000021e 	bne	r2,zero,30507e0 <__lo0bits+0x60>
 30507d8:	1806d13a 	srli	r3,r3,4
 30507dc:	29400104 	addi	r5,r5,4
 30507e0:	188000cc 	andi	r2,r3,3
 30507e4:	1000021e 	bne	r2,zero,30507f0 <__lo0bits+0x70>
 30507e8:	1806d0ba 	srli	r3,r3,2
 30507ec:	29400084 	addi	r5,r5,2
 30507f0:	1880004c 	andi	r2,r3,1
 30507f4:	1000031e 	bne	r2,zero,3050804 <__lo0bits+0x84>
 30507f8:	1806d07a 	srli	r3,r3,1
 30507fc:	18000a26 	beq	r3,zero,3050828 <__lo0bits+0xa8>
 3050800:	29400044 	addi	r5,r5,1
 3050804:	2805883a 	mov	r2,r5
 3050808:	20c00015 	stw	r3,0(r4)
 305080c:	f800283a 	ret
 3050810:	1806d43a 	srli	r3,r3,16
 3050814:	01400404 	movi	r5,16
 3050818:	003fe906 	br	30507c0 <__lo0bits+0x40>
 305081c:	000b883a 	mov	r5,zero
 3050820:	2805883a 	mov	r2,r5
 3050824:	f800283a 	ret
 3050828:	01400804 	movi	r5,32
 305082c:	2805883a 	mov	r2,r5
 3050830:	f800283a 	ret
 3050834:	1804d07a 	srli	r2,r3,1
 3050838:	01400044 	movi	r5,1
 305083c:	20800015 	stw	r2,0(r4)
 3050840:	003fda06 	br	30507ac <__lo0bits+0x2c>

03050844 <__mcmp>:
 3050844:	20800417 	ldw	r2,16(r4)
 3050848:	28c00417 	ldw	r3,16(r5)
 305084c:	10cfc83a 	sub	r7,r2,r3
 3050850:	38000c1e 	bne	r7,zero,3050884 <__mcmp+0x40>
 3050854:	18c5883a 	add	r2,r3,r3
 3050858:	1085883a 	add	r2,r2,r2
 305085c:	10c00504 	addi	r3,r2,20
 3050860:	21000504 	addi	r4,r4,20
 3050864:	28cb883a 	add	r5,r5,r3
 3050868:	2085883a 	add	r2,r4,r2
 305086c:	10bfff04 	addi	r2,r2,-4
 3050870:	297fff04 	addi	r5,r5,-4
 3050874:	11800017 	ldw	r6,0(r2)
 3050878:	28c00017 	ldw	r3,0(r5)
 305087c:	30c0031e 	bne	r6,r3,305088c <__mcmp+0x48>
 3050880:	20bffa36 	bltu	r4,r2,305086c <__mcmp+0x28>
 3050884:	3805883a 	mov	r2,r7
 3050888:	f800283a 	ret
 305088c:	30c00336 	bltu	r6,r3,305089c <__mcmp+0x58>
 3050890:	01c00044 	movi	r7,1
 3050894:	3805883a 	mov	r2,r7
 3050898:	f800283a 	ret
 305089c:	01ffffc4 	movi	r7,-1
 30508a0:	003ff806 	br	3050884 <__mcmp+0x40>

030508a4 <__ulp>:
 30508a4:	295ffc2c 	andhi	r5,r5,32752
 30508a8:	013f3034 	movhi	r4,64704
 30508ac:	21000004 	addi	r4,r4,0
 30508b0:	290b883a 	add	r5,r5,r4
 30508b4:	0145c83a 	sub	r2,zero,r5
 30508b8:	1007d53a 	srai	r3,r2,20
 30508bc:	000d883a 	mov	r6,zero
 30508c0:	0140040e 	bge	zero,r5,30508d4 <__ulp+0x30>
 30508c4:	280f883a 	mov	r7,r5
 30508c8:	3807883a 	mov	r3,r7
 30508cc:	3005883a 	mov	r2,r6
 30508d0:	f800283a 	ret
 30508d4:	008004c4 	movi	r2,19
 30508d8:	193ffb04 	addi	r4,r3,-20
 30508dc:	10c00c0e 	bge	r2,r3,3050910 <__ulp+0x6c>
 30508e0:	008007c4 	movi	r2,31
 30508e4:	1107c83a 	sub	r3,r2,r4
 30508e8:	00800784 	movi	r2,30
 30508ec:	01400044 	movi	r5,1
 30508f0:	11000216 	blt	r2,r4,30508fc <__ulp+0x58>
 30508f4:	00800044 	movi	r2,1
 30508f8:	10ca983a 	sll	r5,r2,r3
 30508fc:	000f883a 	mov	r7,zero
 3050900:	280d883a 	mov	r6,r5
 3050904:	3807883a 	mov	r3,r7
 3050908:	3005883a 	mov	r2,r6
 305090c:	f800283a 	ret
 3050910:	00800234 	movhi	r2,8
 3050914:	10800004 	addi	r2,r2,0
 3050918:	10cfd83a 	sra	r7,r2,r3
 305091c:	000d883a 	mov	r6,zero
 3050920:	3005883a 	mov	r2,r6
 3050924:	3807883a 	mov	r3,r7
 3050928:	f800283a 	ret

0305092c <__b2d>:
 305092c:	20800417 	ldw	r2,16(r4)
 3050930:	defff804 	addi	sp,sp,-32
 3050934:	dd000415 	stw	r20,16(sp)
 3050938:	1085883a 	add	r2,r2,r2
 305093c:	25000504 	addi	r20,r4,20
 3050940:	1085883a 	add	r2,r2,r2
 3050944:	dd800615 	stw	r22,24(sp)
 3050948:	a0ad883a 	add	r22,r20,r2
 305094c:	dc000015 	stw	r16,0(sp)
 3050950:	b43fff04 	addi	r16,r22,-4
 3050954:	dd400515 	stw	r21,20(sp)
 3050958:	85400017 	ldw	r21,0(r16)
 305095c:	dc400115 	stw	r17,4(sp)
 3050960:	dfc00715 	stw	ra,28(sp)
 3050964:	a809883a 	mov	r4,r21
 3050968:	2823883a 	mov	r17,r5
 305096c:	dcc00315 	stw	r19,12(sp)
 3050970:	dc800215 	stw	r18,8(sp)
 3050974:	30507100 	call	3050710 <__hi0bits>
 3050978:	100b883a 	mov	r5,r2
 305097c:	00800804 	movi	r2,32
 3050980:	1145c83a 	sub	r2,r2,r5
 3050984:	00c00284 	movi	r3,10
 3050988:	88800015 	stw	r2,0(r17)
 305098c:	19401516 	blt	r3,r5,30509e4 <__b2d+0xb8>
 3050990:	008002c4 	movi	r2,11
 3050994:	1147c83a 	sub	r3,r2,r5
 3050998:	a4002836 	bltu	r20,r16,3050a3c <__b2d+0x110>
 305099c:	0009883a 	mov	r4,zero
 30509a0:	28800544 	addi	r2,r5,21
 30509a4:	a8c6d83a 	srl	r3,r21,r3
 30509a8:	a884983a 	sll	r2,r21,r2
 30509ac:	1ccffc34 	orhi	r19,r3,16368
 30509b0:	1124b03a 	or	r18,r2,r4
 30509b4:	9005883a 	mov	r2,r18
 30509b8:	9807883a 	mov	r3,r19
 30509bc:	dfc00717 	ldw	ra,28(sp)
 30509c0:	dd800617 	ldw	r22,24(sp)
 30509c4:	dd400517 	ldw	r21,20(sp)
 30509c8:	dd000417 	ldw	r20,16(sp)
 30509cc:	dcc00317 	ldw	r19,12(sp)
 30509d0:	dc800217 	ldw	r18,8(sp)
 30509d4:	dc400117 	ldw	r17,4(sp)
 30509d8:	dc000017 	ldw	r16,0(sp)
 30509dc:	dec00804 	addi	sp,sp,32
 30509e0:	f800283a 	ret
 30509e4:	a4000e36 	bltu	r20,r16,3050a20 <__b2d+0xf4>
 30509e8:	293ffd44 	addi	r4,r5,-11
 30509ec:	000d883a 	mov	r6,zero
 30509f0:	20000f26 	beq	r4,zero,3050a30 <__b2d+0x104>
 30509f4:	00800804 	movi	r2,32
 30509f8:	1107c83a 	sub	r3,r2,r4
 30509fc:	a4001236 	bltu	r20,r16,3050a48 <__b2d+0x11c>
 3050a00:	000b883a 	mov	r5,zero
 3050a04:	a904983a 	sll	r2,r21,r4
 3050a08:	30c6d83a 	srl	r3,r6,r3
 3050a0c:	3108983a 	sll	r4,r6,r4
 3050a10:	108ffc34 	orhi	r2,r2,16368
 3050a14:	18a6b03a 	or	r19,r3,r2
 3050a18:	2924b03a 	or	r18,r5,r4
 3050a1c:	003fe506 	br	30509b4 <__b2d+0x88>
 3050a20:	b43ffe04 	addi	r16,r22,-8
 3050a24:	293ffd44 	addi	r4,r5,-11
 3050a28:	81800017 	ldw	r6,0(r16)
 3050a2c:	203ff11e 	bne	r4,zero,30509f4 <__b2d+0xc8>
 3050a30:	accffc34 	orhi	r19,r21,16368
 3050a34:	3025883a 	mov	r18,r6
 3050a38:	003fde06 	br	30509b4 <__b2d+0x88>
 3050a3c:	80bfff17 	ldw	r2,-4(r16)
 3050a40:	10c8d83a 	srl	r4,r2,r3
 3050a44:	003fd606 	br	30509a0 <__b2d+0x74>
 3050a48:	80bfff17 	ldw	r2,-4(r16)
 3050a4c:	10cad83a 	srl	r5,r2,r3
 3050a50:	003fec06 	br	3050a04 <__b2d+0xd8>

03050a54 <__ratio>:
 3050a54:	defff904 	addi	sp,sp,-28
 3050a58:	dc400215 	stw	r17,8(sp)
 3050a5c:	2823883a 	mov	r17,r5
 3050a60:	d80b883a 	mov	r5,sp
 3050a64:	dfc00615 	stw	ra,24(sp)
 3050a68:	dd000515 	stw	r20,20(sp)
 3050a6c:	dcc00415 	stw	r19,16(sp)
 3050a70:	dc800315 	stw	r18,12(sp)
 3050a74:	2025883a 	mov	r18,r4
 3050a78:	305092c0 	call	305092c <__b2d>
 3050a7c:	8809883a 	mov	r4,r17
 3050a80:	d9400104 	addi	r5,sp,4
 3050a84:	1027883a 	mov	r19,r2
 3050a88:	1829883a 	mov	r20,r3
 3050a8c:	305092c0 	call	305092c <__b2d>
 3050a90:	89000417 	ldw	r4,16(r17)
 3050a94:	91c00417 	ldw	r7,16(r18)
 3050a98:	d9800117 	ldw	r6,4(sp)
 3050a9c:	180b883a 	mov	r5,r3
 3050aa0:	390fc83a 	sub	r7,r7,r4
 3050aa4:	1009883a 	mov	r4,r2
 3050aa8:	d8800017 	ldw	r2,0(sp)
 3050aac:	380e917a 	slli	r7,r7,5
 3050ab0:	2011883a 	mov	r8,r4
 3050ab4:	1185c83a 	sub	r2,r2,r6
 3050ab8:	11c5883a 	add	r2,r2,r7
 3050abc:	1006953a 	slli	r3,r2,20
 3050ac0:	2813883a 	mov	r9,r5
 3050ac4:	00800d0e 	bge	zero,r2,3050afc <__ratio+0xa8>
 3050ac8:	1d29883a 	add	r20,r3,r20
 3050acc:	a00b883a 	mov	r5,r20
 3050ad0:	480f883a 	mov	r7,r9
 3050ad4:	9809883a 	mov	r4,r19
 3050ad8:	400d883a 	mov	r6,r8
 3050adc:	30493a80 	call	30493a8 <__divdf3>
 3050ae0:	dfc00617 	ldw	ra,24(sp)
 3050ae4:	dd000517 	ldw	r20,20(sp)
 3050ae8:	dcc00417 	ldw	r19,16(sp)
 3050aec:	dc800317 	ldw	r18,12(sp)
 3050af0:	dc400217 	ldw	r17,8(sp)
 3050af4:	dec00704 	addi	sp,sp,28
 3050af8:	f800283a 	ret
 3050afc:	28d3c83a 	sub	r9,r5,r3
 3050b00:	003ff206 	br	3050acc <__ratio+0x78>

03050b04 <_mprec_log10>:
 3050b04:	defffe04 	addi	sp,sp,-8
 3050b08:	008005c4 	movi	r2,23
 3050b0c:	dc000015 	stw	r16,0(sp)
 3050b10:	dfc00115 	stw	ra,4(sp)
 3050b14:	2021883a 	mov	r16,r4
 3050b18:	11000c16 	blt	r2,r4,3050b4c <_mprec_log10+0x48>
 3050b1c:	200490fa 	slli	r2,r4,3
 3050b20:	00c0c1b4 	movhi	r3,774
 3050b24:	18eaea04 	addi	r3,r3,-21592
 3050b28:	10c5883a 	add	r2,r2,r3
 3050b2c:	12400117 	ldw	r9,4(r2)
 3050b30:	12000017 	ldw	r8,0(r2)
 3050b34:	4807883a 	mov	r3,r9
 3050b38:	4005883a 	mov	r2,r8
 3050b3c:	dfc00117 	ldw	ra,4(sp)
 3050b40:	dc000017 	ldw	r16,0(sp)
 3050b44:	dec00204 	addi	sp,sp,8
 3050b48:	f800283a 	ret
 3050b4c:	0011883a 	mov	r8,zero
 3050b50:	024ffc34 	movhi	r9,16368
 3050b54:	4a400004 	addi	r9,r9,0
 3050b58:	0005883a 	mov	r2,zero
 3050b5c:	00d00934 	movhi	r3,16420
 3050b60:	18c00004 	addi	r3,r3,0
 3050b64:	480b883a 	mov	r5,r9
 3050b68:	4009883a 	mov	r4,r8
 3050b6c:	180f883a 	mov	r7,r3
 3050b70:	100d883a 	mov	r6,r2
 3050b74:	30526f80 	call	30526f8 <__muldf3>
 3050b78:	843fffc4 	addi	r16,r16,-1
 3050b7c:	1011883a 	mov	r8,r2
 3050b80:	1813883a 	mov	r9,r3
 3050b84:	803ff41e 	bne	r16,zero,3050b58 <_mprec_log10+0x54>
 3050b88:	4005883a 	mov	r2,r8
 3050b8c:	4807883a 	mov	r3,r9
 3050b90:	dfc00117 	ldw	ra,4(sp)
 3050b94:	dc000017 	ldw	r16,0(sp)
 3050b98:	dec00204 	addi	sp,sp,8
 3050b9c:	f800283a 	ret

03050ba0 <__copybits>:
 3050ba0:	297fffc4 	addi	r5,r5,-1
 3050ba4:	30800417 	ldw	r2,16(r6)
 3050ba8:	280bd17a 	srai	r5,r5,5
 3050bac:	31800504 	addi	r6,r6,20
 3050bb0:	1085883a 	add	r2,r2,r2
 3050bb4:	294b883a 	add	r5,r5,r5
 3050bb8:	294b883a 	add	r5,r5,r5
 3050bbc:	1085883a 	add	r2,r2,r2
 3050bc0:	290b883a 	add	r5,r5,r4
 3050bc4:	3087883a 	add	r3,r6,r2
 3050bc8:	29400104 	addi	r5,r5,4
 3050bcc:	30c0052e 	bgeu	r6,r3,3050be4 <__copybits+0x44>
 3050bd0:	30800017 	ldw	r2,0(r6)
 3050bd4:	31800104 	addi	r6,r6,4
 3050bd8:	20800015 	stw	r2,0(r4)
 3050bdc:	21000104 	addi	r4,r4,4
 3050be0:	30fffb36 	bltu	r6,r3,3050bd0 <__copybits+0x30>
 3050be4:	2140032e 	bgeu	r4,r5,3050bf4 <__copybits+0x54>
 3050be8:	20000015 	stw	zero,0(r4)
 3050bec:	21000104 	addi	r4,r4,4
 3050bf0:	217ffd36 	bltu	r4,r5,3050be8 <__copybits+0x48>
 3050bf4:	f800283a 	ret

03050bf8 <__any_on>:
 3050bf8:	20800417 	ldw	r2,16(r4)
 3050bfc:	2807d17a 	srai	r3,r5,5
 3050c00:	21000504 	addi	r4,r4,20
 3050c04:	10c00d0e 	bge	r2,r3,3050c3c <__any_on+0x44>
 3050c08:	1085883a 	add	r2,r2,r2
 3050c0c:	1085883a 	add	r2,r2,r2
 3050c10:	208d883a 	add	r6,r4,r2
 3050c14:	2180182e 	bgeu	r4,r6,3050c78 <__any_on+0x80>
 3050c18:	30ffff04 	addi	r3,r6,-4
 3050c1c:	18800017 	ldw	r2,0(r3)
 3050c20:	1000041e 	bne	r2,zero,3050c34 <__any_on+0x3c>
 3050c24:	20c0142e 	bgeu	r4,r3,3050c78 <__any_on+0x80>
 3050c28:	18ffff04 	addi	r3,r3,-4
 3050c2c:	18800017 	ldw	r2,0(r3)
 3050c30:	103ffc26 	beq	r2,zero,3050c24 <__any_on+0x2c>
 3050c34:	00800044 	movi	r2,1
 3050c38:	f800283a 	ret
 3050c3c:	18800a0e 	bge	r3,r2,3050c68 <__any_on+0x70>
 3050c40:	294007cc 	andi	r5,r5,31
 3050c44:	28000826 	beq	r5,zero,3050c68 <__any_on+0x70>
 3050c48:	18c5883a 	add	r2,r3,r3
 3050c4c:	1085883a 	add	r2,r2,r2
 3050c50:	208d883a 	add	r6,r4,r2
 3050c54:	30c00017 	ldw	r3,0(r6)
 3050c58:	1944d83a 	srl	r2,r3,r5
 3050c5c:	1144983a 	sll	r2,r2,r5
 3050c60:	18bff41e 	bne	r3,r2,3050c34 <__any_on+0x3c>
 3050c64:	003feb06 	br	3050c14 <__any_on+0x1c>
 3050c68:	18c5883a 	add	r2,r3,r3
 3050c6c:	1085883a 	add	r2,r2,r2
 3050c70:	208d883a 	add	r6,r4,r2
 3050c74:	003fe706 	br	3050c14 <__any_on+0x1c>
 3050c78:	0005883a 	mov	r2,zero
 3050c7c:	f800283a 	ret

03050c80 <_Balloc>:
 3050c80:	20c01317 	ldw	r3,76(r4)
 3050c84:	defffb04 	addi	sp,sp,-20
 3050c88:	dcc00315 	stw	r19,12(sp)
 3050c8c:	dc800215 	stw	r18,8(sp)
 3050c90:	dfc00415 	stw	ra,16(sp)
 3050c94:	2825883a 	mov	r18,r5
 3050c98:	dc400115 	stw	r17,4(sp)
 3050c9c:	dc000015 	stw	r16,0(sp)
 3050ca0:	2027883a 	mov	r19,r4
 3050ca4:	01800404 	movi	r6,16
 3050ca8:	01400104 	movi	r5,4
 3050cac:	18001726 	beq	r3,zero,3050d0c <_Balloc+0x8c>
 3050cb0:	01400044 	movi	r5,1
 3050cb4:	9485883a 	add	r2,r18,r18
 3050cb8:	2ca2983a 	sll	r17,r5,r18
 3050cbc:	1085883a 	add	r2,r2,r2
 3050cc0:	10c7883a 	add	r3,r2,r3
 3050cc4:	1c000017 	ldw	r16,0(r3)
 3050cc8:	8c4d883a 	add	r6,r17,r17
 3050ccc:	318d883a 	add	r6,r6,r6
 3050cd0:	9809883a 	mov	r4,r19
 3050cd4:	31800504 	addi	r6,r6,20
 3050cd8:	80001226 	beq	r16,zero,3050d24 <_Balloc+0xa4>
 3050cdc:	80800017 	ldw	r2,0(r16)
 3050ce0:	18800015 	stw	r2,0(r3)
 3050ce4:	80000415 	stw	zero,16(r16)
 3050ce8:	80000315 	stw	zero,12(r16)
 3050cec:	8005883a 	mov	r2,r16
 3050cf0:	dfc00417 	ldw	ra,16(sp)
 3050cf4:	dcc00317 	ldw	r19,12(sp)
 3050cf8:	dc800217 	ldw	r18,8(sp)
 3050cfc:	dc400117 	ldw	r17,4(sp)
 3050d00:	dc000017 	ldw	r16,0(sp)
 3050d04:	dec00504 	addi	sp,sp,20
 3050d08:	f800283a 	ret
 3050d0c:	305213c0 	call	305213c <_calloc_r>
 3050d10:	1007883a 	mov	r3,r2
 3050d14:	0021883a 	mov	r16,zero
 3050d18:	98801315 	stw	r2,76(r19)
 3050d1c:	103fe41e 	bne	r2,zero,3050cb0 <_Balloc+0x30>
 3050d20:	003ff206 	br	3050cec <_Balloc+0x6c>
 3050d24:	305213c0 	call	305213c <_calloc_r>
 3050d28:	103ff026 	beq	r2,zero,3050cec <_Balloc+0x6c>
 3050d2c:	1021883a 	mov	r16,r2
 3050d30:	14800115 	stw	r18,4(r2)
 3050d34:	14400215 	stw	r17,8(r2)
 3050d38:	003fea06 	br	3050ce4 <_Balloc+0x64>

03050d3c <__d2b>:
 3050d3c:	defff504 	addi	sp,sp,-44
 3050d40:	dcc00515 	stw	r19,20(sp)
 3050d44:	04c00044 	movi	r19,1
 3050d48:	dc000215 	stw	r16,8(sp)
 3050d4c:	2821883a 	mov	r16,r5
 3050d50:	980b883a 	mov	r5,r19
 3050d54:	ddc00915 	stw	r23,36(sp)
 3050d58:	dd800815 	stw	r22,32(sp)
 3050d5c:	dd400715 	stw	r21,28(sp)
 3050d60:	dd000615 	stw	r20,24(sp)
 3050d64:	dc800415 	stw	r18,16(sp)
 3050d68:	dc400315 	stw	r17,12(sp)
 3050d6c:	dfc00a15 	stw	ra,40(sp)
 3050d70:	3023883a 	mov	r17,r6
 3050d74:	382d883a 	mov	r22,r7
 3050d78:	ddc00b17 	ldw	r23,44(sp)
 3050d7c:	3050c800 	call	3050c80 <_Balloc>
 3050d80:	1025883a 	mov	r18,r2
 3050d84:	00a00034 	movhi	r2,32768
 3050d88:	10bfffc4 	addi	r2,r2,-1
 3050d8c:	8888703a 	and	r4,r17,r2
 3050d90:	202ad53a 	srli	r21,r4,20
 3050d94:	00800434 	movhi	r2,16
 3050d98:	10bfffc4 	addi	r2,r2,-1
 3050d9c:	8886703a 	and	r3,r17,r2
 3050da0:	a829003a 	cmpeq	r20,r21,zero
 3050da4:	800b883a 	mov	r5,r16
 3050da8:	d8c00115 	stw	r3,4(sp)
 3050dac:	94000504 	addi	r16,r18,20
 3050db0:	a000021e 	bne	r20,zero,3050dbc <__d2b+0x80>
 3050db4:	18c00434 	orhi	r3,r3,16
 3050db8:	d8c00115 	stw	r3,4(sp)
 3050dbc:	28002726 	beq	r5,zero,3050e5c <__d2b+0x120>
 3050dc0:	d809883a 	mov	r4,sp
 3050dc4:	d9400015 	stw	r5,0(sp)
 3050dc8:	30507800 	call	3050780 <__lo0bits>
 3050dcc:	100d883a 	mov	r6,r2
 3050dd0:	10003526 	beq	r2,zero,3050ea8 <__d2b+0x16c>
 3050dd4:	d8c00117 	ldw	r3,4(sp)
 3050dd8:	00800804 	movi	r2,32
 3050ddc:	1185c83a 	sub	r2,r2,r6
 3050de0:	d9000017 	ldw	r4,0(sp)
 3050de4:	1886983a 	sll	r3,r3,r2
 3050de8:	1906b03a 	or	r3,r3,r4
 3050dec:	80c00015 	stw	r3,0(r16)
 3050df0:	d8c00117 	ldw	r3,4(sp)
 3050df4:	1986d83a 	srl	r3,r3,r6
 3050df8:	d8c00115 	stw	r3,4(sp)
 3050dfc:	180b003a 	cmpeq	r5,r3,zero
 3050e00:	00800084 	movi	r2,2
 3050e04:	114bc83a 	sub	r5,r2,r5
 3050e08:	80c00115 	stw	r3,4(r16)
 3050e0c:	91400415 	stw	r5,16(r18)
 3050e10:	a0001a1e 	bne	r20,zero,3050e7c <__d2b+0x140>
 3050e14:	3545883a 	add	r2,r6,r21
 3050e18:	10bef344 	addi	r2,r2,-1075
 3050e1c:	00c00d44 	movi	r3,53
 3050e20:	b0800015 	stw	r2,0(r22)
 3050e24:	1987c83a 	sub	r3,r3,r6
 3050e28:	b8c00015 	stw	r3,0(r23)
 3050e2c:	9005883a 	mov	r2,r18
 3050e30:	dfc00a17 	ldw	ra,40(sp)
 3050e34:	ddc00917 	ldw	r23,36(sp)
 3050e38:	dd800817 	ldw	r22,32(sp)
 3050e3c:	dd400717 	ldw	r21,28(sp)
 3050e40:	dd000617 	ldw	r20,24(sp)
 3050e44:	dcc00517 	ldw	r19,20(sp)
 3050e48:	dc800417 	ldw	r18,16(sp)
 3050e4c:	dc400317 	ldw	r17,12(sp)
 3050e50:	dc000217 	ldw	r16,8(sp)
 3050e54:	dec00b04 	addi	sp,sp,44
 3050e58:	f800283a 	ret
 3050e5c:	d9000104 	addi	r4,sp,4
 3050e60:	30507800 	call	3050780 <__lo0bits>
 3050e64:	11800804 	addi	r6,r2,32
 3050e68:	d8800117 	ldw	r2,4(sp)
 3050e6c:	94c00415 	stw	r19,16(r18)
 3050e70:	980b883a 	mov	r5,r19
 3050e74:	80800015 	stw	r2,0(r16)
 3050e78:	a03fe626 	beq	r20,zero,3050e14 <__d2b+0xd8>
 3050e7c:	2945883a 	add	r2,r5,r5
 3050e80:	1085883a 	add	r2,r2,r2
 3050e84:	1405883a 	add	r2,r2,r16
 3050e88:	113fff17 	ldw	r4,-4(r2)
 3050e8c:	30fef384 	addi	r3,r6,-1074
 3050e90:	2820917a 	slli	r16,r5,5
 3050e94:	b0c00015 	stw	r3,0(r22)
 3050e98:	30507100 	call	3050710 <__hi0bits>
 3050e9c:	80a1c83a 	sub	r16,r16,r2
 3050ea0:	bc000015 	stw	r16,0(r23)
 3050ea4:	003fe106 	br	3050e2c <__d2b+0xf0>
 3050ea8:	d8800017 	ldw	r2,0(sp)
 3050eac:	80800015 	stw	r2,0(r16)
 3050eb0:	d8c00117 	ldw	r3,4(sp)
 3050eb4:	003fd106 	br	3050dfc <__d2b+0xc0>

03050eb8 <__mdiff>:
 3050eb8:	defffb04 	addi	sp,sp,-20
 3050ebc:	dc000015 	stw	r16,0(sp)
 3050ec0:	2821883a 	mov	r16,r5
 3050ec4:	dc800215 	stw	r18,8(sp)
 3050ec8:	300b883a 	mov	r5,r6
 3050ecc:	2025883a 	mov	r18,r4
 3050ed0:	8009883a 	mov	r4,r16
 3050ed4:	dc400115 	stw	r17,4(sp)
 3050ed8:	dfc00415 	stw	ra,16(sp)
 3050edc:	dcc00315 	stw	r19,12(sp)
 3050ee0:	3023883a 	mov	r17,r6
 3050ee4:	30508440 	call	3050844 <__mcmp>
 3050ee8:	10004226 	beq	r2,zero,3050ff4 <__mdiff+0x13c>
 3050eec:	10005016 	blt	r2,zero,3051030 <__mdiff+0x178>
 3050ef0:	0027883a 	mov	r19,zero
 3050ef4:	81400117 	ldw	r5,4(r16)
 3050ef8:	9009883a 	mov	r4,r18
 3050efc:	3050c800 	call	3050c80 <_Balloc>
 3050f00:	1019883a 	mov	r12,r2
 3050f04:	82800417 	ldw	r10,16(r16)
 3050f08:	88800417 	ldw	r2,16(r17)
 3050f0c:	81800504 	addi	r6,r16,20
 3050f10:	5287883a 	add	r3,r10,r10
 3050f14:	1085883a 	add	r2,r2,r2
 3050f18:	18c7883a 	add	r3,r3,r3
 3050f1c:	1085883a 	add	r2,r2,r2
 3050f20:	8a000504 	addi	r8,r17,20
 3050f24:	64c00315 	stw	r19,12(r12)
 3050f28:	30db883a 	add	r13,r6,r3
 3050f2c:	4097883a 	add	r11,r8,r2
 3050f30:	61c00504 	addi	r7,r12,20
 3050f34:	0013883a 	mov	r9,zero
 3050f38:	31000017 	ldw	r4,0(r6)
 3050f3c:	41400017 	ldw	r5,0(r8)
 3050f40:	42000104 	addi	r8,r8,4
 3050f44:	20bfffcc 	andi	r2,r4,65535
 3050f48:	28ffffcc 	andi	r3,r5,65535
 3050f4c:	10c5c83a 	sub	r2,r2,r3
 3050f50:	1245883a 	add	r2,r2,r9
 3050f54:	2008d43a 	srli	r4,r4,16
 3050f58:	280ad43a 	srli	r5,r5,16
 3050f5c:	1007d43a 	srai	r3,r2,16
 3050f60:	3880000d 	sth	r2,0(r7)
 3050f64:	2149c83a 	sub	r4,r4,r5
 3050f68:	20c9883a 	add	r4,r4,r3
 3050f6c:	3900008d 	sth	r4,2(r7)
 3050f70:	31800104 	addi	r6,r6,4
 3050f74:	39c00104 	addi	r7,r7,4
 3050f78:	2013d43a 	srai	r9,r4,16
 3050f7c:	42ffee36 	bltu	r8,r11,3050f38 <__mdiff+0x80>
 3050f80:	33400c2e 	bgeu	r6,r13,3050fb4 <__mdiff+0xfc>
 3050f84:	30800017 	ldw	r2,0(r6)
 3050f88:	31800104 	addi	r6,r6,4
 3050f8c:	10ffffcc 	andi	r3,r2,65535
 3050f90:	1a47883a 	add	r3,r3,r9
 3050f94:	1004d43a 	srli	r2,r2,16
 3050f98:	1809d43a 	srai	r4,r3,16
 3050f9c:	38c0000d 	sth	r3,0(r7)
 3050fa0:	1105883a 	add	r2,r2,r4
 3050fa4:	3880008d 	sth	r2,2(r7)
 3050fa8:	1013d43a 	srai	r9,r2,16
 3050fac:	39c00104 	addi	r7,r7,4
 3050fb0:	337ff436 	bltu	r6,r13,3050f84 <__mdiff+0xcc>
 3050fb4:	38ffff04 	addi	r3,r7,-4
 3050fb8:	18800017 	ldw	r2,0(r3)
 3050fbc:	1000041e 	bne	r2,zero,3050fd0 <__mdiff+0x118>
 3050fc0:	18ffff04 	addi	r3,r3,-4
 3050fc4:	18800017 	ldw	r2,0(r3)
 3050fc8:	52bfffc4 	addi	r10,r10,-1
 3050fcc:	103ffc26 	beq	r2,zero,3050fc0 <__mdiff+0x108>
 3050fd0:	6005883a 	mov	r2,r12
 3050fd4:	62800415 	stw	r10,16(r12)
 3050fd8:	dfc00417 	ldw	ra,16(sp)
 3050fdc:	dcc00317 	ldw	r19,12(sp)
 3050fe0:	dc800217 	ldw	r18,8(sp)
 3050fe4:	dc400117 	ldw	r17,4(sp)
 3050fe8:	dc000017 	ldw	r16,0(sp)
 3050fec:	dec00504 	addi	sp,sp,20
 3050ff0:	f800283a 	ret
 3050ff4:	9009883a 	mov	r4,r18
 3050ff8:	000b883a 	mov	r5,zero
 3050ffc:	3050c800 	call	3050c80 <_Balloc>
 3051000:	1019883a 	mov	r12,r2
 3051004:	00800044 	movi	r2,1
 3051008:	60800415 	stw	r2,16(r12)
 305100c:	6005883a 	mov	r2,r12
 3051010:	60000515 	stw	zero,20(r12)
 3051014:	dfc00417 	ldw	ra,16(sp)
 3051018:	dcc00317 	ldw	r19,12(sp)
 305101c:	dc800217 	ldw	r18,8(sp)
 3051020:	dc400117 	ldw	r17,4(sp)
 3051024:	dc000017 	ldw	r16,0(sp)
 3051028:	dec00504 	addi	sp,sp,20
 305102c:	f800283a 	ret
 3051030:	880d883a 	mov	r6,r17
 3051034:	04c00044 	movi	r19,1
 3051038:	8023883a 	mov	r17,r16
 305103c:	3021883a 	mov	r16,r6
 3051040:	003fac06 	br	3050ef4 <__mdiff+0x3c>

03051044 <__lshift>:
 3051044:	defff904 	addi	sp,sp,-28
 3051048:	28800417 	ldw	r2,16(r5)
 305104c:	dc000015 	stw	r16,0(sp)
 3051050:	3021d17a 	srai	r16,r6,5
 3051054:	28c00217 	ldw	r3,8(r5)
 3051058:	10800044 	addi	r2,r2,1
 305105c:	dc400115 	stw	r17,4(sp)
 3051060:	80a3883a 	add	r17,r16,r2
 3051064:	dd400515 	stw	r21,20(sp)
 3051068:	dd000415 	stw	r20,16(sp)
 305106c:	dc800215 	stw	r18,8(sp)
 3051070:	dfc00615 	stw	ra,24(sp)
 3051074:	2825883a 	mov	r18,r5
 3051078:	dcc00315 	stw	r19,12(sp)
 305107c:	3029883a 	mov	r20,r6
 3051080:	202b883a 	mov	r21,r4
 3051084:	29400117 	ldw	r5,4(r5)
 3051088:	1c40030e 	bge	r3,r17,3051098 <__lshift+0x54>
 305108c:	18c7883a 	add	r3,r3,r3
 3051090:	29400044 	addi	r5,r5,1
 3051094:	1c7ffd16 	blt	r3,r17,305108c <__lshift+0x48>
 3051098:	a809883a 	mov	r4,r21
 305109c:	3050c800 	call	3050c80 <_Balloc>
 30510a0:	1027883a 	mov	r19,r2
 30510a4:	11400504 	addi	r5,r2,20
 30510a8:	0400090e 	bge	zero,r16,30510d0 <__lshift+0x8c>
 30510ac:	2805883a 	mov	r2,r5
 30510b0:	0007883a 	mov	r3,zero
 30510b4:	18c00044 	addi	r3,r3,1
 30510b8:	10000015 	stw	zero,0(r2)
 30510bc:	10800104 	addi	r2,r2,4
 30510c0:	80fffc1e 	bne	r16,r3,30510b4 <__lshift+0x70>
 30510c4:	8405883a 	add	r2,r16,r16
 30510c8:	1085883a 	add	r2,r2,r2
 30510cc:	288b883a 	add	r5,r5,r2
 30510d0:	90800417 	ldw	r2,16(r18)
 30510d4:	91000504 	addi	r4,r18,20
 30510d8:	a18007cc 	andi	r6,r20,31
 30510dc:	1085883a 	add	r2,r2,r2
 30510e0:	1085883a 	add	r2,r2,r2
 30510e4:	208f883a 	add	r7,r4,r2
 30510e8:	30001e26 	beq	r6,zero,3051164 <__lshift+0x120>
 30510ec:	00800804 	movi	r2,32
 30510f0:	1191c83a 	sub	r8,r2,r6
 30510f4:	0007883a 	mov	r3,zero
 30510f8:	20800017 	ldw	r2,0(r4)
 30510fc:	1184983a 	sll	r2,r2,r6
 3051100:	1884b03a 	or	r2,r3,r2
 3051104:	28800015 	stw	r2,0(r5)
 3051108:	20c00017 	ldw	r3,0(r4)
 305110c:	21000104 	addi	r4,r4,4
 3051110:	29400104 	addi	r5,r5,4
 3051114:	1a06d83a 	srl	r3,r3,r8
 3051118:	21fff736 	bltu	r4,r7,30510f8 <__lshift+0xb4>
 305111c:	28c00015 	stw	r3,0(r5)
 3051120:	18000126 	beq	r3,zero,3051128 <__lshift+0xe4>
 3051124:	8c400044 	addi	r17,r17,1
 3051128:	88bfffc4 	addi	r2,r17,-1
 305112c:	98800415 	stw	r2,16(r19)
 3051130:	a809883a 	mov	r4,r21
 3051134:	900b883a 	mov	r5,r18
 3051138:	30506e80 	call	30506e8 <_Bfree>
 305113c:	9805883a 	mov	r2,r19
 3051140:	dfc00617 	ldw	ra,24(sp)
 3051144:	dd400517 	ldw	r21,20(sp)
 3051148:	dd000417 	ldw	r20,16(sp)
 305114c:	dcc00317 	ldw	r19,12(sp)
 3051150:	dc800217 	ldw	r18,8(sp)
 3051154:	dc400117 	ldw	r17,4(sp)
 3051158:	dc000017 	ldw	r16,0(sp)
 305115c:	dec00704 	addi	sp,sp,28
 3051160:	f800283a 	ret
 3051164:	20800017 	ldw	r2,0(r4)
 3051168:	21000104 	addi	r4,r4,4
 305116c:	28800015 	stw	r2,0(r5)
 3051170:	29400104 	addi	r5,r5,4
 3051174:	21ffec2e 	bgeu	r4,r7,3051128 <__lshift+0xe4>
 3051178:	20800017 	ldw	r2,0(r4)
 305117c:	21000104 	addi	r4,r4,4
 3051180:	28800015 	stw	r2,0(r5)
 3051184:	29400104 	addi	r5,r5,4
 3051188:	21fff636 	bltu	r4,r7,3051164 <__lshift+0x120>
 305118c:	003fe606 	br	3051128 <__lshift+0xe4>

03051190 <__multiply>:
 3051190:	defff904 	addi	sp,sp,-28
 3051194:	dcc00315 	stw	r19,12(sp)
 3051198:	dc800215 	stw	r18,8(sp)
 305119c:	2cc00417 	ldw	r19,16(r5)
 30511a0:	34800417 	ldw	r18,16(r6)
 30511a4:	dd000415 	stw	r20,16(sp)
 30511a8:	dc400115 	stw	r17,4(sp)
 30511ac:	dfc00615 	stw	ra,24(sp)
 30511b0:	dd400515 	stw	r21,20(sp)
 30511b4:	dc000015 	stw	r16,0(sp)
 30511b8:	2823883a 	mov	r17,r5
 30511bc:	3029883a 	mov	r20,r6
 30511c0:	9c80040e 	bge	r19,r18,30511d4 <__multiply+0x44>
 30511c4:	9027883a 	mov	r19,r18
 30511c8:	2c800417 	ldw	r18,16(r5)
 30511cc:	2829883a 	mov	r20,r5
 30511d0:	3023883a 	mov	r17,r6
 30511d4:	88800217 	ldw	r2,8(r17)
 30511d8:	9ca1883a 	add	r16,r19,r18
 30511dc:	89400117 	ldw	r5,4(r17)
 30511e0:	1400010e 	bge	r2,r16,30511e8 <__multiply+0x58>
 30511e4:	29400044 	addi	r5,r5,1
 30511e8:	3050c800 	call	3050c80 <_Balloc>
 30511ec:	102b883a 	mov	r21,r2
 30511f0:	8405883a 	add	r2,r16,r16
 30511f4:	1085883a 	add	r2,r2,r2
 30511f8:	a9000504 	addi	r4,r21,20
 30511fc:	209d883a 	add	r14,r4,r2
 3051200:	2380042e 	bgeu	r4,r14,3051214 <__multiply+0x84>
 3051204:	2005883a 	mov	r2,r4
 3051208:	10000015 	stw	zero,0(r2)
 305120c:	10800104 	addi	r2,r2,4
 3051210:	13bffd36 	bltu	r2,r14,3051208 <__multiply+0x78>
 3051214:	9485883a 	add	r2,r18,r18
 3051218:	9cc7883a 	add	r3,r19,r19
 305121c:	a1800504 	addi	r6,r20,20
 3051220:	1085883a 	add	r2,r2,r2
 3051224:	8b400504 	addi	r13,r17,20
 3051228:	18c7883a 	add	r3,r3,r3
 305122c:	309f883a 	add	r15,r6,r2
 3051230:	68d7883a 	add	r11,r13,r3
 3051234:	33c03b2e 	bgeu	r6,r15,3051324 <__multiply+0x194>
 3051238:	2019883a 	mov	r12,r4
 305123c:	30800017 	ldw	r2,0(r6)
 3051240:	127fffcc 	andi	r9,r2,65535
 3051244:	48001826 	beq	r9,zero,30512a8 <__multiply+0x118>
 3051248:	6811883a 	mov	r8,r13
 305124c:	600f883a 	mov	r7,r12
 3051250:	0015883a 	mov	r10,zero
 3051254:	40c00017 	ldw	r3,0(r8)
 3051258:	39400017 	ldw	r5,0(r7)
 305125c:	42000104 	addi	r8,r8,4
 3051260:	193fffcc 	andi	r4,r3,65535
 3051264:	4909383a 	mul	r4,r9,r4
 3051268:	1806d43a 	srli	r3,r3,16
 305126c:	28bfffcc 	andi	r2,r5,65535
 3051270:	5085883a 	add	r2,r10,r2
 3051274:	2089883a 	add	r4,r4,r2
 3051278:	48c7383a 	mul	r3,r9,r3
 305127c:	280ad43a 	srli	r5,r5,16
 3051280:	2004d43a 	srli	r2,r4,16
 3051284:	3900000d 	sth	r4,0(r7)
 3051288:	1947883a 	add	r3,r3,r5
 305128c:	10c5883a 	add	r2,r2,r3
 3051290:	3880008d 	sth	r2,2(r7)
 3051294:	1014d43a 	srli	r10,r2,16
 3051298:	39c00104 	addi	r7,r7,4
 305129c:	42ffed36 	bltu	r8,r11,3051254 <__multiply+0xc4>
 30512a0:	3a800015 	stw	r10,0(r7)
 30512a4:	30800017 	ldw	r2,0(r6)
 30512a8:	1012d43a 	srli	r9,r2,16
 30512ac:	48001926 	beq	r9,zero,3051314 <__multiply+0x184>
 30512b0:	60800017 	ldw	r2,0(r12)
 30512b4:	6811883a 	mov	r8,r13
 30512b8:	600f883a 	mov	r7,r12
 30512bc:	0015883a 	mov	r10,zero
 30512c0:	100b883a 	mov	r5,r2
 30512c4:	41000017 	ldw	r4,0(r8)
 30512c8:	2806d43a 	srli	r3,r5,16
 30512cc:	3880000d 	sth	r2,0(r7)
 30512d0:	20bfffcc 	andi	r2,r4,65535
 30512d4:	4885383a 	mul	r2,r9,r2
 30512d8:	50c7883a 	add	r3,r10,r3
 30512dc:	2008d43a 	srli	r4,r4,16
 30512e0:	10c5883a 	add	r2,r2,r3
 30512e4:	3880008d 	sth	r2,2(r7)
 30512e8:	39c00104 	addi	r7,r7,4
 30512ec:	39400017 	ldw	r5,0(r7)
 30512f0:	4909383a 	mul	r4,r9,r4
 30512f4:	1004d43a 	srli	r2,r2,16
 30512f8:	28ffffcc 	andi	r3,r5,65535
 30512fc:	20c9883a 	add	r4,r4,r3
 3051300:	1105883a 	add	r2,r2,r4
 3051304:	42000104 	addi	r8,r8,4
 3051308:	1014d43a 	srli	r10,r2,16
 305130c:	42ffed36 	bltu	r8,r11,30512c4 <__multiply+0x134>
 3051310:	38800015 	stw	r2,0(r7)
 3051314:	31800104 	addi	r6,r6,4
 3051318:	33c0022e 	bgeu	r6,r15,3051324 <__multiply+0x194>
 305131c:	63000104 	addi	r12,r12,4
 3051320:	003fc606 	br	305123c <__multiply+0xac>
 3051324:	0400070e 	bge	zero,r16,3051344 <__multiply+0x1b4>
 3051328:	70ffff04 	addi	r3,r14,-4
 305132c:	00000306 	br	305133c <__multiply+0x1ac>
 3051330:	843fffc4 	addi	r16,r16,-1
 3051334:	18ffff04 	addi	r3,r3,-4
 3051338:	80000226 	beq	r16,zero,3051344 <__multiply+0x1b4>
 305133c:	18800017 	ldw	r2,0(r3)
 3051340:	103ffb26 	beq	r2,zero,3051330 <__multiply+0x1a0>
 3051344:	a805883a 	mov	r2,r21
 3051348:	ac000415 	stw	r16,16(r21)
 305134c:	dfc00617 	ldw	ra,24(sp)
 3051350:	dd400517 	ldw	r21,20(sp)
 3051354:	dd000417 	ldw	r20,16(sp)
 3051358:	dcc00317 	ldw	r19,12(sp)
 305135c:	dc800217 	ldw	r18,8(sp)
 3051360:	dc400117 	ldw	r17,4(sp)
 3051364:	dc000017 	ldw	r16,0(sp)
 3051368:	dec00704 	addi	sp,sp,28
 305136c:	f800283a 	ret

03051370 <__i2b>:
 3051370:	defffd04 	addi	sp,sp,-12
 3051374:	dc000015 	stw	r16,0(sp)
 3051378:	04000044 	movi	r16,1
 305137c:	dc800115 	stw	r18,4(sp)
 3051380:	2825883a 	mov	r18,r5
 3051384:	800b883a 	mov	r5,r16
 3051388:	dfc00215 	stw	ra,8(sp)
 305138c:	3050c800 	call	3050c80 <_Balloc>
 3051390:	14000415 	stw	r16,16(r2)
 3051394:	14800515 	stw	r18,20(r2)
 3051398:	dfc00217 	ldw	ra,8(sp)
 305139c:	dc800117 	ldw	r18,4(sp)
 30513a0:	dc000017 	ldw	r16,0(sp)
 30513a4:	dec00304 	addi	sp,sp,12
 30513a8:	f800283a 	ret

030513ac <__multadd>:
 30513ac:	defffa04 	addi	sp,sp,-24
 30513b0:	dc800215 	stw	r18,8(sp)
 30513b4:	2c800417 	ldw	r18,16(r5)
 30513b8:	dd000415 	stw	r20,16(sp)
 30513bc:	dcc00315 	stw	r19,12(sp)
 30513c0:	dc000015 	stw	r16,0(sp)
 30513c4:	dfc00515 	stw	ra,20(sp)
 30513c8:	3821883a 	mov	r16,r7
 30513cc:	dc400115 	stw	r17,4(sp)
 30513d0:	2827883a 	mov	r19,r5
 30513d4:	2029883a 	mov	r20,r4
 30513d8:	2a000504 	addi	r8,r5,20
 30513dc:	000f883a 	mov	r7,zero
 30513e0:	40800017 	ldw	r2,0(r8)
 30513e4:	39c00044 	addi	r7,r7,1
 30513e8:	10ffffcc 	andi	r3,r2,65535
 30513ec:	1987383a 	mul	r3,r3,r6
 30513f0:	1004d43a 	srli	r2,r2,16
 30513f4:	1c07883a 	add	r3,r3,r16
 30513f8:	180ad43a 	srli	r5,r3,16
 30513fc:	1185383a 	mul	r2,r2,r6
 3051400:	18ffffcc 	andi	r3,r3,65535
 3051404:	1145883a 	add	r2,r2,r5
 3051408:	1008943a 	slli	r4,r2,16
 305140c:	1020d43a 	srli	r16,r2,16
 3051410:	20c9883a 	add	r4,r4,r3
 3051414:	41000015 	stw	r4,0(r8)
 3051418:	42000104 	addi	r8,r8,4
 305141c:	3cbff016 	blt	r7,r18,30513e0 <__multadd+0x34>
 3051420:	80000826 	beq	r16,zero,3051444 <__multadd+0x98>
 3051424:	98800217 	ldw	r2,8(r19)
 3051428:	90800f0e 	bge	r18,r2,3051468 <__multadd+0xbc>
 305142c:	9485883a 	add	r2,r18,r18
 3051430:	1085883a 	add	r2,r2,r2
 3051434:	14c5883a 	add	r2,r2,r19
 3051438:	90c00044 	addi	r3,r18,1
 305143c:	14000515 	stw	r16,20(r2)
 3051440:	98c00415 	stw	r3,16(r19)
 3051444:	9805883a 	mov	r2,r19
 3051448:	dfc00517 	ldw	ra,20(sp)
 305144c:	dd000417 	ldw	r20,16(sp)
 3051450:	dcc00317 	ldw	r19,12(sp)
 3051454:	dc800217 	ldw	r18,8(sp)
 3051458:	dc400117 	ldw	r17,4(sp)
 305145c:	dc000017 	ldw	r16,0(sp)
 3051460:	dec00604 	addi	sp,sp,24
 3051464:	f800283a 	ret
 3051468:	99400117 	ldw	r5,4(r19)
 305146c:	a009883a 	mov	r4,r20
 3051470:	29400044 	addi	r5,r5,1
 3051474:	3050c800 	call	3050c80 <_Balloc>
 3051478:	99800417 	ldw	r6,16(r19)
 305147c:	99400304 	addi	r5,r19,12
 3051480:	11000304 	addi	r4,r2,12
 3051484:	318d883a 	add	r6,r6,r6
 3051488:	318d883a 	add	r6,r6,r6
 305148c:	31800204 	addi	r6,r6,8
 3051490:	1023883a 	mov	r17,r2
 3051494:	304bb5c0 	call	304bb5c <memcpy>
 3051498:	980b883a 	mov	r5,r19
 305149c:	a009883a 	mov	r4,r20
 30514a0:	30506e80 	call	30506e8 <_Bfree>
 30514a4:	8827883a 	mov	r19,r17
 30514a8:	003fe006 	br	305142c <__multadd+0x80>

030514ac <__pow5mult>:
 30514ac:	defffa04 	addi	sp,sp,-24
 30514b0:	308000cc 	andi	r2,r6,3
 30514b4:	dd000415 	stw	r20,16(sp)
 30514b8:	dcc00315 	stw	r19,12(sp)
 30514bc:	dc000015 	stw	r16,0(sp)
 30514c0:	dfc00515 	stw	ra,20(sp)
 30514c4:	dc800215 	stw	r18,8(sp)
 30514c8:	dc400115 	stw	r17,4(sp)
 30514cc:	3021883a 	mov	r16,r6
 30514d0:	2027883a 	mov	r19,r4
 30514d4:	2829883a 	mov	r20,r5
 30514d8:	10002b1e 	bne	r2,zero,3051588 <__pow5mult+0xdc>
 30514dc:	8025d0ba 	srai	r18,r16,2
 30514e0:	90001b26 	beq	r18,zero,3051550 <__pow5mult+0xa4>
 30514e4:	9c001217 	ldw	r16,72(r19)
 30514e8:	8000081e 	bne	r16,zero,305150c <__pow5mult+0x60>
 30514ec:	00003006 	br	30515b0 <__pow5mult+0x104>
 30514f0:	800b883a 	mov	r5,r16
 30514f4:	800d883a 	mov	r6,r16
 30514f8:	9809883a 	mov	r4,r19
 30514fc:	90001426 	beq	r18,zero,3051550 <__pow5mult+0xa4>
 3051500:	80800017 	ldw	r2,0(r16)
 3051504:	10001b26 	beq	r2,zero,3051574 <__pow5mult+0xc8>
 3051508:	1021883a 	mov	r16,r2
 305150c:	9080004c 	andi	r2,r18,1
 3051510:	1005003a 	cmpeq	r2,r2,zero
 3051514:	9025d07a 	srai	r18,r18,1
 3051518:	800d883a 	mov	r6,r16
 305151c:	9809883a 	mov	r4,r19
 3051520:	a00b883a 	mov	r5,r20
 3051524:	103ff21e 	bne	r2,zero,30514f0 <__pow5mult+0x44>
 3051528:	30511900 	call	3051190 <__multiply>
 305152c:	a00b883a 	mov	r5,r20
 3051530:	9809883a 	mov	r4,r19
 3051534:	1023883a 	mov	r17,r2
 3051538:	30506e80 	call	30506e8 <_Bfree>
 305153c:	8829883a 	mov	r20,r17
 3051540:	800b883a 	mov	r5,r16
 3051544:	800d883a 	mov	r6,r16
 3051548:	9809883a 	mov	r4,r19
 305154c:	903fec1e 	bne	r18,zero,3051500 <__pow5mult+0x54>
 3051550:	a005883a 	mov	r2,r20
 3051554:	dfc00517 	ldw	ra,20(sp)
 3051558:	dd000417 	ldw	r20,16(sp)
 305155c:	dcc00317 	ldw	r19,12(sp)
 3051560:	dc800217 	ldw	r18,8(sp)
 3051564:	dc400117 	ldw	r17,4(sp)
 3051568:	dc000017 	ldw	r16,0(sp)
 305156c:	dec00604 	addi	sp,sp,24
 3051570:	f800283a 	ret
 3051574:	30511900 	call	3051190 <__multiply>
 3051578:	80800015 	stw	r2,0(r16)
 305157c:	1021883a 	mov	r16,r2
 3051580:	10000015 	stw	zero,0(r2)
 3051584:	003fe106 	br	305150c <__pow5mult+0x60>
 3051588:	1085883a 	add	r2,r2,r2
 305158c:	00c0c1b4 	movhi	r3,774
 3051590:	18eb2f04 	addi	r3,r3,-21316
 3051594:	1085883a 	add	r2,r2,r2
 3051598:	10c5883a 	add	r2,r2,r3
 305159c:	11800017 	ldw	r6,0(r2)
 30515a0:	000f883a 	mov	r7,zero
 30515a4:	30513ac0 	call	30513ac <__multadd>
 30515a8:	1029883a 	mov	r20,r2
 30515ac:	003fcb06 	br	30514dc <__pow5mult+0x30>
 30515b0:	9809883a 	mov	r4,r19
 30515b4:	01409c44 	movi	r5,625
 30515b8:	30513700 	call	3051370 <__i2b>
 30515bc:	98801215 	stw	r2,72(r19)
 30515c0:	1021883a 	mov	r16,r2
 30515c4:	10000015 	stw	zero,0(r2)
 30515c8:	003fd006 	br	305150c <__pow5mult+0x60>

030515cc <__s2b>:
 30515cc:	defff904 	addi	sp,sp,-28
 30515d0:	dcc00315 	stw	r19,12(sp)
 30515d4:	dc800215 	stw	r18,8(sp)
 30515d8:	2827883a 	mov	r19,r5
 30515dc:	2025883a 	mov	r18,r4
 30515e0:	01400244 	movi	r5,9
 30515e4:	39000204 	addi	r4,r7,8
 30515e8:	dd000415 	stw	r20,16(sp)
 30515ec:	dc400115 	stw	r17,4(sp)
 30515f0:	dfc00615 	stw	ra,24(sp)
 30515f4:	dd400515 	stw	r21,20(sp)
 30515f8:	dc000015 	stw	r16,0(sp)
 30515fc:	3829883a 	mov	r20,r7
 3051600:	3023883a 	mov	r17,r6
 3051604:	304972c0 	call	304972c <__divsi3>
 3051608:	00c00044 	movi	r3,1
 305160c:	1880350e 	bge	r3,r2,30516e4 <__s2b+0x118>
 3051610:	000b883a 	mov	r5,zero
 3051614:	18c7883a 	add	r3,r3,r3
 3051618:	29400044 	addi	r5,r5,1
 305161c:	18bffd16 	blt	r3,r2,3051614 <__s2b+0x48>
 3051620:	9009883a 	mov	r4,r18
 3051624:	3050c800 	call	3050c80 <_Balloc>
 3051628:	1011883a 	mov	r8,r2
 305162c:	d8800717 	ldw	r2,28(sp)
 3051630:	00c00044 	movi	r3,1
 3051634:	01800244 	movi	r6,9
 3051638:	40800515 	stw	r2,20(r8)
 305163c:	40c00415 	stw	r3,16(r8)
 3051640:	3440260e 	bge	r6,r17,30516dc <__s2b+0x110>
 3051644:	3021883a 	mov	r16,r6
 3051648:	99ab883a 	add	r21,r19,r6
 305164c:	9c05883a 	add	r2,r19,r16
 3051650:	11c00007 	ldb	r7,0(r2)
 3051654:	400b883a 	mov	r5,r8
 3051658:	9009883a 	mov	r4,r18
 305165c:	39fff404 	addi	r7,r7,-48
 3051660:	01800284 	movi	r6,10
 3051664:	30513ac0 	call	30513ac <__multadd>
 3051668:	84000044 	addi	r16,r16,1
 305166c:	1011883a 	mov	r8,r2
 3051670:	8c3ff61e 	bne	r17,r16,305164c <__s2b+0x80>
 3051674:	ac45883a 	add	r2,r21,r17
 3051678:	117ffe04 	addi	r5,r2,-8
 305167c:	880d883a 	mov	r6,r17
 3051680:	35000c0e 	bge	r6,r20,30516b4 <__s2b+0xe8>
 3051684:	a185c83a 	sub	r2,r20,r6
 3051688:	2821883a 	mov	r16,r5
 305168c:	28a3883a 	add	r17,r5,r2
 3051690:	81c00007 	ldb	r7,0(r16)
 3051694:	400b883a 	mov	r5,r8
 3051698:	9009883a 	mov	r4,r18
 305169c:	39fff404 	addi	r7,r7,-48
 30516a0:	01800284 	movi	r6,10
 30516a4:	30513ac0 	call	30513ac <__multadd>
 30516a8:	84000044 	addi	r16,r16,1
 30516ac:	1011883a 	mov	r8,r2
 30516b0:	847ff71e 	bne	r16,r17,3051690 <__s2b+0xc4>
 30516b4:	4005883a 	mov	r2,r8
 30516b8:	dfc00617 	ldw	ra,24(sp)
 30516bc:	dd400517 	ldw	r21,20(sp)
 30516c0:	dd000417 	ldw	r20,16(sp)
 30516c4:	dcc00317 	ldw	r19,12(sp)
 30516c8:	dc800217 	ldw	r18,8(sp)
 30516cc:	dc400117 	ldw	r17,4(sp)
 30516d0:	dc000017 	ldw	r16,0(sp)
 30516d4:	dec00704 	addi	sp,sp,28
 30516d8:	f800283a 	ret
 30516dc:	99400284 	addi	r5,r19,10
 30516e0:	003fe706 	br	3051680 <__s2b+0xb4>
 30516e4:	000b883a 	mov	r5,zero
 30516e8:	003fcd06 	br	3051620 <__s2b+0x54>

030516ec <putc>:
 30516ec:	defffc04 	addi	sp,sp,-16
 30516f0:	dc800215 	stw	r18,8(sp)
 30516f4:	0480c1b4 	movhi	r18,774
 30516f8:	94b28804 	addi	r18,r18,-13792
 30516fc:	90c00017 	ldw	r3,0(r18)
 3051700:	dc400115 	stw	r17,4(sp)
 3051704:	dc000015 	stw	r16,0(sp)
 3051708:	dfc00315 	stw	ra,12(sp)
 305170c:	2023883a 	mov	r17,r4
 3051710:	2821883a 	mov	r16,r5
 3051714:	18000226 	beq	r3,zero,3051720 <putc+0x34>
 3051718:	18800e17 	ldw	r2,56(r3)
 305171c:	10001126 	beq	r2,zero,3051764 <putc+0x78>
 3051720:	80800217 	ldw	r2,8(r16)
 3051724:	10ffffc4 	addi	r3,r2,-1
 3051728:	80c00215 	stw	r3,8(r16)
 305172c:	18001316 	blt	r3,zero,305177c <putc+0x90>
 3051730:	80800017 	ldw	r2,0(r16)
 3051734:	14400005 	stb	r17,0(r2)
 3051738:	80c00017 	ldw	r3,0(r16)
 305173c:	18800044 	addi	r2,r3,1
 3051740:	18c00003 	ldbu	r3,0(r3)
 3051744:	80800015 	stw	r2,0(r16)
 3051748:	1805883a 	mov	r2,r3
 305174c:	dfc00317 	ldw	ra,12(sp)
 3051750:	dc800217 	ldw	r18,8(sp)
 3051754:	dc400117 	ldw	r17,4(sp)
 3051758:	dc000017 	ldw	r16,0(sp)
 305175c:	dec00404 	addi	sp,sp,16
 3051760:	f800283a 	ret
 3051764:	1809883a 	mov	r4,r3
 3051768:	304a3800 	call	304a380 <__sinit>
 305176c:	80800217 	ldw	r2,8(r16)
 3051770:	10ffffc4 	addi	r3,r2,-1
 3051774:	80c00215 	stw	r3,8(r16)
 3051778:	183fed0e 	bge	r3,zero,3051730 <putc+0x44>
 305177c:	80800617 	ldw	r2,24(r16)
 3051780:	18800f16 	blt	r3,r2,30517c0 <putc+0xd4>
 3051784:	80800017 	ldw	r2,0(r16)
 3051788:	14400005 	stb	r17,0(r2)
 305178c:	81000017 	ldw	r4,0(r16)
 3051790:	00800284 	movi	r2,10
 3051794:	20c00003 	ldbu	r3,0(r4)
 3051798:	18801226 	beq	r3,r2,30517e4 <putc+0xf8>
 305179c:	20800044 	addi	r2,r4,1
 30517a0:	80800015 	stw	r2,0(r16)
 30517a4:	1805883a 	mov	r2,r3
 30517a8:	dfc00317 	ldw	ra,12(sp)
 30517ac:	dc800217 	ldw	r18,8(sp)
 30517b0:	dc400117 	ldw	r17,4(sp)
 30517b4:	dc000017 	ldw	r16,0(sp)
 30517b8:	dec00404 	addi	sp,sp,16
 30517bc:	f800283a 	ret
 30517c0:	91000017 	ldw	r4,0(r18)
 30517c4:	880b883a 	mov	r5,r17
 30517c8:	800d883a 	mov	r6,r16
 30517cc:	dfc00317 	ldw	ra,12(sp)
 30517d0:	dc800217 	ldw	r18,8(sp)
 30517d4:	dc400117 	ldw	r17,4(sp)
 30517d8:	dc000017 	ldw	r16,0(sp)
 30517dc:	dec00404 	addi	sp,sp,16
 30517e0:	3051ff01 	jmpi	3051ff0 <__swbuf_r>
 30517e4:	91000017 	ldw	r4,0(r18)
 30517e8:	180b883a 	mov	r5,r3
 30517ec:	003ff606 	br	30517c8 <putc+0xdc>

030517f0 <_putc_r>:
 30517f0:	defffc04 	addi	sp,sp,-16
 30517f4:	dc400215 	stw	r17,8(sp)
 30517f8:	dc000115 	stw	r16,4(sp)
 30517fc:	dfc00315 	stw	ra,12(sp)
 3051800:	2021883a 	mov	r16,r4
 3051804:	2823883a 	mov	r17,r5
 3051808:	20000226 	beq	r4,zero,3051814 <_putc_r+0x24>
 305180c:	20800e17 	ldw	r2,56(r4)
 3051810:	10001026 	beq	r2,zero,3051854 <_putc_r+0x64>
 3051814:	30800217 	ldw	r2,8(r6)
 3051818:	10ffffc4 	addi	r3,r2,-1
 305181c:	30c00215 	stw	r3,8(r6)
 3051820:	18001316 	blt	r3,zero,3051870 <_putc_r+0x80>
 3051824:	30800017 	ldw	r2,0(r6)
 3051828:	14400005 	stb	r17,0(r2)
 305182c:	30c00017 	ldw	r3,0(r6)
 3051830:	18800044 	addi	r2,r3,1
 3051834:	18c00003 	ldbu	r3,0(r3)
 3051838:	30800015 	stw	r2,0(r6)
 305183c:	1805883a 	mov	r2,r3
 3051840:	dfc00317 	ldw	ra,12(sp)
 3051844:	dc400217 	ldw	r17,8(sp)
 3051848:	dc000117 	ldw	r16,4(sp)
 305184c:	dec00404 	addi	sp,sp,16
 3051850:	f800283a 	ret
 3051854:	d9800015 	stw	r6,0(sp)
 3051858:	304a3800 	call	304a380 <__sinit>
 305185c:	d9800017 	ldw	r6,0(sp)
 3051860:	30800217 	ldw	r2,8(r6)
 3051864:	10ffffc4 	addi	r3,r2,-1
 3051868:	30c00215 	stw	r3,8(r6)
 305186c:	183fed0e 	bge	r3,zero,3051824 <_putc_r+0x34>
 3051870:	30800617 	ldw	r2,24(r6)
 3051874:	18800e16 	blt	r3,r2,30518b0 <_putc_r+0xc0>
 3051878:	30800017 	ldw	r2,0(r6)
 305187c:	14400005 	stb	r17,0(r2)
 3051880:	31000017 	ldw	r4,0(r6)
 3051884:	00800284 	movi	r2,10
 3051888:	20c00003 	ldbu	r3,0(r4)
 305188c:	18800f26 	beq	r3,r2,30518cc <_putc_r+0xdc>
 3051890:	20800044 	addi	r2,r4,1
 3051894:	30800015 	stw	r2,0(r6)
 3051898:	1805883a 	mov	r2,r3
 305189c:	dfc00317 	ldw	ra,12(sp)
 30518a0:	dc400217 	ldw	r17,8(sp)
 30518a4:	dc000117 	ldw	r16,4(sp)
 30518a8:	dec00404 	addi	sp,sp,16
 30518ac:	f800283a 	ret
 30518b0:	8009883a 	mov	r4,r16
 30518b4:	880b883a 	mov	r5,r17
 30518b8:	dfc00317 	ldw	ra,12(sp)
 30518bc:	dc400217 	ldw	r17,8(sp)
 30518c0:	dc000117 	ldw	r16,4(sp)
 30518c4:	dec00404 	addi	sp,sp,16
 30518c8:	3051ff01 	jmpi	3051ff0 <__swbuf_r>
 30518cc:	8009883a 	mov	r4,r16
 30518d0:	180b883a 	mov	r5,r3
 30518d4:	003ff806 	br	30518b8 <_putc_r+0xc8>

030518d8 <_read_r>:
 30518d8:	defffd04 	addi	sp,sp,-12
 30518dc:	dc000015 	stw	r16,0(sp)
 30518e0:	0400c1b4 	movhi	r16,774
 30518e4:	8439ff04 	addi	r16,r16,-6148
 30518e8:	dc400115 	stw	r17,4(sp)
 30518ec:	80000015 	stw	zero,0(r16)
 30518f0:	2023883a 	mov	r17,r4
 30518f4:	2809883a 	mov	r4,r5
 30518f8:	300b883a 	mov	r5,r6
 30518fc:	380d883a 	mov	r6,r7
 3051900:	dfc00215 	stw	ra,8(sp)
 3051904:	3053c280 	call	3053c28 <read>
 3051908:	1007883a 	mov	r3,r2
 305190c:	00bfffc4 	movi	r2,-1
 3051910:	18800626 	beq	r3,r2,305192c <_read_r+0x54>
 3051914:	1805883a 	mov	r2,r3
 3051918:	dfc00217 	ldw	ra,8(sp)
 305191c:	dc400117 	ldw	r17,4(sp)
 3051920:	dc000017 	ldw	r16,0(sp)
 3051924:	dec00304 	addi	sp,sp,12
 3051928:	f800283a 	ret
 305192c:	80800017 	ldw	r2,0(r16)
 3051930:	103ff826 	beq	r2,zero,3051914 <_read_r+0x3c>
 3051934:	88800015 	stw	r2,0(r17)
 3051938:	1805883a 	mov	r2,r3
 305193c:	dfc00217 	ldw	ra,8(sp)
 3051940:	dc400117 	ldw	r17,4(sp)
 3051944:	dc000017 	ldw	r16,0(sp)
 3051948:	dec00304 	addi	sp,sp,12
 305194c:	f800283a 	ret

03051950 <_realloc_r>:
 3051950:	defff404 	addi	sp,sp,-48
 3051954:	dd800815 	stw	r22,32(sp)
 3051958:	dc800415 	stw	r18,16(sp)
 305195c:	dc400315 	stw	r17,12(sp)
 3051960:	dfc00b15 	stw	ra,44(sp)
 3051964:	df000a15 	stw	fp,40(sp)
 3051968:	ddc00915 	stw	r23,36(sp)
 305196c:	dd400715 	stw	r21,28(sp)
 3051970:	dd000615 	stw	r20,24(sp)
 3051974:	dcc00515 	stw	r19,20(sp)
 3051978:	dc000215 	stw	r16,8(sp)
 305197c:	2825883a 	mov	r18,r5
 3051980:	3023883a 	mov	r17,r6
 3051984:	202d883a 	mov	r22,r4
 3051988:	2800d426 	beq	r5,zero,3051cdc <_realloc_r+0x38c>
 305198c:	30539600 	call	3053960 <__malloc_lock>
 3051990:	943ffe04 	addi	r16,r18,-8
 3051994:	88c002c4 	addi	r3,r17,11
 3051998:	00800584 	movi	r2,22
 305199c:	82000117 	ldw	r8,4(r16)
 30519a0:	10c01b2e 	bgeu	r2,r3,3051a10 <_realloc_r+0xc0>
 30519a4:	00bffe04 	movi	r2,-8
 30519a8:	188e703a 	and	r7,r3,r2
 30519ac:	382f883a 	mov	r23,r7
 30519b0:	38001a16 	blt	r7,zero,3051a1c <_realloc_r+0xcc>
 30519b4:	bc401936 	bltu	r23,r17,3051a1c <_realloc_r+0xcc>
 30519b8:	013fff04 	movi	r4,-4
 30519bc:	4126703a 	and	r19,r8,r4
 30519c0:	99c02616 	blt	r19,r7,3051a5c <_realloc_r+0x10c>
 30519c4:	802b883a 	mov	r21,r16
 30519c8:	9829883a 	mov	r20,r19
 30519cc:	84000204 	addi	r16,r16,8
 30519d0:	a80f883a 	mov	r7,r21
 30519d4:	a5cdc83a 	sub	r6,r20,r23
 30519d8:	008003c4 	movi	r2,15
 30519dc:	1180cc36 	bltu	r2,r6,3051d10 <_realloc_r+0x3c0>
 30519e0:	38800117 	ldw	r2,4(r7)
 30519e4:	a549883a 	add	r4,r20,r21
 30519e8:	1080004c 	andi	r2,r2,1
 30519ec:	a084b03a 	or	r2,r20,r2
 30519f0:	38800115 	stw	r2,4(r7)
 30519f4:	20c00117 	ldw	r3,4(r4)
 30519f8:	18c00054 	ori	r3,r3,1
 30519fc:	20c00115 	stw	r3,4(r4)
 3051a00:	b009883a 	mov	r4,r22
 3051a04:	305397c0 	call	305397c <__malloc_unlock>
 3051a08:	8023883a 	mov	r17,r16
 3051a0c:	00000606 	br	3051a28 <_realloc_r+0xd8>
 3051a10:	01c00404 	movi	r7,16
 3051a14:	382f883a 	mov	r23,r7
 3051a18:	bc7fe72e 	bgeu	r23,r17,30519b8 <_realloc_r+0x68>
 3051a1c:	00800304 	movi	r2,12
 3051a20:	0023883a 	mov	r17,zero
 3051a24:	b0800015 	stw	r2,0(r22)
 3051a28:	8805883a 	mov	r2,r17
 3051a2c:	dfc00b17 	ldw	ra,44(sp)
 3051a30:	df000a17 	ldw	fp,40(sp)
 3051a34:	ddc00917 	ldw	r23,36(sp)
 3051a38:	dd800817 	ldw	r22,32(sp)
 3051a3c:	dd400717 	ldw	r21,28(sp)
 3051a40:	dd000617 	ldw	r20,24(sp)
 3051a44:	dcc00517 	ldw	r19,20(sp)
 3051a48:	dc800417 	ldw	r18,16(sp)
 3051a4c:	dc400317 	ldw	r17,12(sp)
 3051a50:	dc000217 	ldw	r16,8(sp)
 3051a54:	dec00c04 	addi	sp,sp,48
 3051a58:	f800283a 	ret
 3051a5c:	0080c1b4 	movhi	r2,774
 3051a60:	10ac4f04 	addi	r2,r2,-20164
 3051a64:	12400217 	ldw	r9,8(r2)
 3051a68:	84cd883a 	add	r6,r16,r19
 3051a6c:	802b883a 	mov	r21,r16
 3051a70:	3240c426 	beq	r6,r9,3051d84 <_realloc_r+0x434>
 3051a74:	31400117 	ldw	r5,4(r6)
 3051a78:	00bfff84 	movi	r2,-2
 3051a7c:	2884703a 	and	r2,r5,r2
 3051a80:	1185883a 	add	r2,r2,r6
 3051a84:	10c00117 	ldw	r3,4(r2)
 3051a88:	18c0004c 	andi	r3,r3,1
 3051a8c:	1807003a 	cmpeq	r3,r3,zero
 3051a90:	1800ae26 	beq	r3,zero,3051d4c <_realloc_r+0x3fc>
 3051a94:	2908703a 	and	r4,r5,r4
 3051a98:	9929883a 	add	r20,r19,r4
 3051a9c:	a1c0ae0e 	bge	r20,r7,3051d58 <_realloc_r+0x408>
 3051aa0:	4080004c 	andi	r2,r8,1
 3051aa4:	10005e1e 	bne	r2,zero,3051c20 <_realloc_r+0x2d0>
 3051aa8:	80800017 	ldw	r2,0(r16)
 3051aac:	80b9c83a 	sub	fp,r16,r2
 3051ab0:	e0c00117 	ldw	r3,4(fp)
 3051ab4:	00bfff04 	movi	r2,-4
 3051ab8:	1884703a 	and	r2,r3,r2
 3051abc:	30003026 	beq	r6,zero,3051b80 <_realloc_r+0x230>
 3051ac0:	3240c426 	beq	r6,r9,3051dd4 <_realloc_r+0x484>
 3051ac4:	98a9883a 	add	r20,r19,r2
 3051ac8:	2509883a 	add	r4,r4,r20
 3051acc:	d9000015 	stw	r4,0(sp)
 3051ad0:	21c02c16 	blt	r4,r7,3051b84 <_realloc_r+0x234>
 3051ad4:	30800317 	ldw	r2,12(r6)
 3051ad8:	30c00217 	ldw	r3,8(r6)
 3051adc:	01400904 	movi	r5,36
 3051ae0:	99bfff04 	addi	r6,r19,-4
 3051ae4:	18800315 	stw	r2,12(r3)
 3051ae8:	10c00215 	stw	r3,8(r2)
 3051aec:	e1000317 	ldw	r4,12(fp)
 3051af0:	e0800217 	ldw	r2,8(fp)
 3051af4:	e02b883a 	mov	r21,fp
 3051af8:	e4000204 	addi	r16,fp,8
 3051afc:	20800215 	stw	r2,8(r4)
 3051b00:	11000315 	stw	r4,12(r2)
 3051b04:	2980f136 	bltu	r5,r6,3051ecc <_realloc_r+0x57c>
 3051b08:	008004c4 	movi	r2,19
 3051b0c:	9009883a 	mov	r4,r18
 3051b10:	800f883a 	mov	r7,r16
 3051b14:	11800f2e 	bgeu	r2,r6,3051b54 <_realloc_r+0x204>
 3051b18:	90800017 	ldw	r2,0(r18)
 3051b1c:	e1c00404 	addi	r7,fp,16
 3051b20:	91000204 	addi	r4,r18,8
 3051b24:	80800015 	stw	r2,0(r16)
 3051b28:	90c00117 	ldw	r3,4(r18)
 3051b2c:	008006c4 	movi	r2,27
 3051b30:	e0c00315 	stw	r3,12(fp)
 3051b34:	1180072e 	bgeu	r2,r6,3051b54 <_realloc_r+0x204>
 3051b38:	20800017 	ldw	r2,0(r4)
 3051b3c:	91000404 	addi	r4,r18,16
 3051b40:	38800015 	stw	r2,0(r7)
 3051b44:	90c00317 	ldw	r3,12(r18)
 3051b48:	e1c00604 	addi	r7,fp,24
 3051b4c:	e0c00515 	stw	r3,20(fp)
 3051b50:	3140f426 	beq	r6,r5,3051f24 <_realloc_r+0x5d4>
 3051b54:	20800017 	ldw	r2,0(r4)
 3051b58:	21000104 	addi	r4,r4,4
 3051b5c:	39400104 	addi	r5,r7,4
 3051b60:	38800015 	stw	r2,0(r7)
 3051b64:	20c00017 	ldw	r3,0(r4)
 3051b68:	dd000017 	ldw	r20,0(sp)
 3051b6c:	e00f883a 	mov	r7,fp
 3051b70:	28c00015 	stw	r3,0(r5)
 3051b74:	20800117 	ldw	r2,4(r4)
 3051b78:	28800115 	stw	r2,4(r5)
 3051b7c:	003f9506 	br	30519d4 <_realloc_r+0x84>
 3051b80:	98a9883a 	add	r20,r19,r2
 3051b84:	a1c02616 	blt	r20,r7,3051c20 <_realloc_r+0x2d0>
 3051b88:	e0c00317 	ldw	r3,12(fp)
 3051b8c:	e0800217 	ldw	r2,8(fp)
 3051b90:	99bfff04 	addi	r6,r19,-4
 3051b94:	01400904 	movi	r5,36
 3051b98:	e02b883a 	mov	r21,fp
 3051b9c:	18800215 	stw	r2,8(r3)
 3051ba0:	10c00315 	stw	r3,12(r2)
 3051ba4:	e4000204 	addi	r16,fp,8
 3051ba8:	2980ce36 	bltu	r5,r6,3051ee4 <_realloc_r+0x594>
 3051bac:	008004c4 	movi	r2,19
 3051bb0:	9009883a 	mov	r4,r18
 3051bb4:	800f883a 	mov	r7,r16
 3051bb8:	11800f2e 	bgeu	r2,r6,3051bf8 <_realloc_r+0x2a8>
 3051bbc:	90800017 	ldw	r2,0(r18)
 3051bc0:	e1c00404 	addi	r7,fp,16
 3051bc4:	91000204 	addi	r4,r18,8
 3051bc8:	80800015 	stw	r2,0(r16)
 3051bcc:	90c00117 	ldw	r3,4(r18)
 3051bd0:	008006c4 	movi	r2,27
 3051bd4:	e0c00315 	stw	r3,12(fp)
 3051bd8:	1180072e 	bgeu	r2,r6,3051bf8 <_realloc_r+0x2a8>
 3051bdc:	20800017 	ldw	r2,0(r4)
 3051be0:	91000404 	addi	r4,r18,16
 3051be4:	38800015 	stw	r2,0(r7)
 3051be8:	90c00317 	ldw	r3,12(r18)
 3051bec:	e1c00604 	addi	r7,fp,24
 3051bf0:	e0c00515 	stw	r3,20(fp)
 3051bf4:	3140d226 	beq	r6,r5,3051f40 <_realloc_r+0x5f0>
 3051bf8:	20800017 	ldw	r2,0(r4)
 3051bfc:	21000104 	addi	r4,r4,4
 3051c00:	39400104 	addi	r5,r7,4
 3051c04:	38800015 	stw	r2,0(r7)
 3051c08:	20c00017 	ldw	r3,0(r4)
 3051c0c:	e00f883a 	mov	r7,fp
 3051c10:	28c00015 	stw	r3,0(r5)
 3051c14:	20800117 	ldw	r2,4(r4)
 3051c18:	28800115 	stw	r2,4(r5)
 3051c1c:	003f6d06 	br	30519d4 <_realloc_r+0x84>
 3051c20:	880b883a 	mov	r5,r17
 3051c24:	b009883a 	mov	r4,r22
 3051c28:	304b41c0 	call	304b41c <_malloc_r>
 3051c2c:	1023883a 	mov	r17,r2
 3051c30:	10002726 	beq	r2,zero,3051cd0 <_realloc_r+0x380>
 3051c34:	80800117 	ldw	r2,4(r16)
 3051c38:	00ffff84 	movi	r3,-2
 3051c3c:	893ffe04 	addi	r4,r17,-8
 3051c40:	10c4703a 	and	r2,r2,r3
 3051c44:	8085883a 	add	r2,r16,r2
 3051c48:	20809926 	beq	r4,r2,3051eb0 <_realloc_r+0x560>
 3051c4c:	99bfff04 	addi	r6,r19,-4
 3051c50:	01400904 	movi	r5,36
 3051c54:	29804736 	bltu	r5,r6,3051d74 <_realloc_r+0x424>
 3051c58:	008004c4 	movi	r2,19
 3051c5c:	9009883a 	mov	r4,r18
 3051c60:	880f883a 	mov	r7,r17
 3051c64:	11800f2e 	bgeu	r2,r6,3051ca4 <_realloc_r+0x354>
 3051c68:	90800017 	ldw	r2,0(r18)
 3051c6c:	89c00204 	addi	r7,r17,8
 3051c70:	91000204 	addi	r4,r18,8
 3051c74:	88800015 	stw	r2,0(r17)
 3051c78:	90c00117 	ldw	r3,4(r18)
 3051c7c:	008006c4 	movi	r2,27
 3051c80:	88c00115 	stw	r3,4(r17)
 3051c84:	1180072e 	bgeu	r2,r6,3051ca4 <_realloc_r+0x354>
 3051c88:	20800017 	ldw	r2,0(r4)
 3051c8c:	91000404 	addi	r4,r18,16
 3051c90:	38800015 	stw	r2,0(r7)
 3051c94:	90c00317 	ldw	r3,12(r18)
 3051c98:	89c00404 	addi	r7,r17,16
 3051c9c:	88c00315 	stw	r3,12(r17)
 3051ca0:	31409526 	beq	r6,r5,3051ef8 <_realloc_r+0x5a8>
 3051ca4:	20c00017 	ldw	r3,0(r4)
 3051ca8:	21000104 	addi	r4,r4,4
 3051cac:	39400104 	addi	r5,r7,4
 3051cb0:	38c00015 	stw	r3,0(r7)
 3051cb4:	20800017 	ldw	r2,0(r4)
 3051cb8:	28800015 	stw	r2,0(r5)
 3051cbc:	20c00117 	ldw	r3,4(r4)
 3051cc0:	28c00115 	stw	r3,4(r5)
 3051cc4:	900b883a 	mov	r5,r18
 3051cc8:	b009883a 	mov	r4,r22
 3051ccc:	304a8140 	call	304a814 <_free_r>
 3051cd0:	b009883a 	mov	r4,r22
 3051cd4:	305397c0 	call	305397c <__malloc_unlock>
 3051cd8:	003f5306 	br	3051a28 <_realloc_r+0xd8>
 3051cdc:	300b883a 	mov	r5,r6
 3051ce0:	dfc00b17 	ldw	ra,44(sp)
 3051ce4:	df000a17 	ldw	fp,40(sp)
 3051ce8:	ddc00917 	ldw	r23,36(sp)
 3051cec:	dd800817 	ldw	r22,32(sp)
 3051cf0:	dd400717 	ldw	r21,28(sp)
 3051cf4:	dd000617 	ldw	r20,24(sp)
 3051cf8:	dcc00517 	ldw	r19,20(sp)
 3051cfc:	dc800417 	ldw	r18,16(sp)
 3051d00:	dc400317 	ldw	r17,12(sp)
 3051d04:	dc000217 	ldw	r16,8(sp)
 3051d08:	dec00c04 	addi	sp,sp,48
 3051d0c:	304b41c1 	jmpi	304b41c <_malloc_r>
 3051d10:	38800117 	ldw	r2,4(r7)
 3051d14:	bd4b883a 	add	r5,r23,r21
 3051d18:	31000054 	ori	r4,r6,1
 3051d1c:	1080004c 	andi	r2,r2,1
 3051d20:	15c4b03a 	or	r2,r2,r23
 3051d24:	38800115 	stw	r2,4(r7)
 3051d28:	29000115 	stw	r4,4(r5)
 3051d2c:	2987883a 	add	r3,r5,r6
 3051d30:	18800117 	ldw	r2,4(r3)
 3051d34:	29400204 	addi	r5,r5,8
 3051d38:	b009883a 	mov	r4,r22
 3051d3c:	10800054 	ori	r2,r2,1
 3051d40:	18800115 	stw	r2,4(r3)
 3051d44:	304a8140 	call	304a814 <_free_r>
 3051d48:	003f2d06 	br	3051a00 <_realloc_r+0xb0>
 3051d4c:	000d883a 	mov	r6,zero
 3051d50:	0009883a 	mov	r4,zero
 3051d54:	003f5206 	br	3051aa0 <_realloc_r+0x150>
 3051d58:	30c00217 	ldw	r3,8(r6)
 3051d5c:	30800317 	ldw	r2,12(r6)
 3051d60:	800f883a 	mov	r7,r16
 3051d64:	84000204 	addi	r16,r16,8
 3051d68:	10c00215 	stw	r3,8(r2)
 3051d6c:	18800315 	stw	r2,12(r3)
 3051d70:	003f1806 	br	30519d4 <_realloc_r+0x84>
 3051d74:	8809883a 	mov	r4,r17
 3051d78:	900b883a 	mov	r5,r18
 3051d7c:	30506080 	call	3050608 <memmove>
 3051d80:	003fd006 	br	3051cc4 <_realloc_r+0x374>
 3051d84:	30800117 	ldw	r2,4(r6)
 3051d88:	b8c00404 	addi	r3,r23,16
 3051d8c:	1108703a 	and	r4,r2,r4
 3051d90:	9905883a 	add	r2,r19,r4
 3051d94:	10ff4216 	blt	r2,r3,3051aa0 <_realloc_r+0x150>
 3051d98:	15c5c83a 	sub	r2,r2,r23
 3051d9c:	85cb883a 	add	r5,r16,r23
 3051da0:	10800054 	ori	r2,r2,1
 3051da4:	28800115 	stw	r2,4(r5)
 3051da8:	80c00117 	ldw	r3,4(r16)
 3051dac:	0080c1b4 	movhi	r2,774
 3051db0:	10ac4f04 	addi	r2,r2,-20164
 3051db4:	b009883a 	mov	r4,r22
 3051db8:	18c0004c 	andi	r3,r3,1
 3051dbc:	b8c6b03a 	or	r3,r23,r3
 3051dc0:	11400215 	stw	r5,8(r2)
 3051dc4:	80c00115 	stw	r3,4(r16)
 3051dc8:	305397c0 	call	305397c <__malloc_unlock>
 3051dcc:	84400204 	addi	r17,r16,8
 3051dd0:	003f1506 	br	3051a28 <_realloc_r+0xd8>
 3051dd4:	98a9883a 	add	r20,r19,r2
 3051dd8:	2509883a 	add	r4,r4,r20
 3051ddc:	b8800404 	addi	r2,r23,16
 3051de0:	d9000115 	stw	r4,4(sp)
 3051de4:	20bf6716 	blt	r4,r2,3051b84 <_realloc_r+0x234>
 3051de8:	e0c00317 	ldw	r3,12(fp)
 3051dec:	e0800217 	ldw	r2,8(fp)
 3051df0:	99bfff04 	addi	r6,r19,-4
 3051df4:	01400904 	movi	r5,36
 3051df8:	18800215 	stw	r2,8(r3)
 3051dfc:	10c00315 	stw	r3,12(r2)
 3051e00:	e4400204 	addi	r17,fp,8
 3051e04:	29804336 	bltu	r5,r6,3051f14 <_realloc_r+0x5c4>
 3051e08:	008004c4 	movi	r2,19
 3051e0c:	9009883a 	mov	r4,r18
 3051e10:	880f883a 	mov	r7,r17
 3051e14:	11800f2e 	bgeu	r2,r6,3051e54 <_realloc_r+0x504>
 3051e18:	90800017 	ldw	r2,0(r18)
 3051e1c:	e1c00404 	addi	r7,fp,16
 3051e20:	91000204 	addi	r4,r18,8
 3051e24:	88800015 	stw	r2,0(r17)
 3051e28:	90c00117 	ldw	r3,4(r18)
 3051e2c:	008006c4 	movi	r2,27
 3051e30:	e0c00315 	stw	r3,12(fp)
 3051e34:	1180072e 	bgeu	r2,r6,3051e54 <_realloc_r+0x504>
 3051e38:	20800017 	ldw	r2,0(r4)
 3051e3c:	91000404 	addi	r4,r18,16
 3051e40:	38800015 	stw	r2,0(r7)
 3051e44:	90c00317 	ldw	r3,12(r18)
 3051e48:	e1c00604 	addi	r7,fp,24
 3051e4c:	e0c00515 	stw	r3,20(fp)
 3051e50:	31404226 	beq	r6,r5,3051f5c <_realloc_r+0x60c>
 3051e54:	20c00017 	ldw	r3,0(r4)
 3051e58:	21000104 	addi	r4,r4,4
 3051e5c:	39400104 	addi	r5,r7,4
 3051e60:	38c00015 	stw	r3,0(r7)
 3051e64:	20800017 	ldw	r2,0(r4)
 3051e68:	28800015 	stw	r2,0(r5)
 3051e6c:	20c00117 	ldw	r3,4(r4)
 3051e70:	28c00115 	stw	r3,4(r5)
 3051e74:	d8c00117 	ldw	r3,4(sp)
 3051e78:	e5cb883a 	add	r5,fp,r23
 3051e7c:	b009883a 	mov	r4,r22
 3051e80:	1dc5c83a 	sub	r2,r3,r23
 3051e84:	10800054 	ori	r2,r2,1
 3051e88:	28800115 	stw	r2,4(r5)
 3051e8c:	e0c00117 	ldw	r3,4(fp)
 3051e90:	0080c1b4 	movhi	r2,774
 3051e94:	10ac4f04 	addi	r2,r2,-20164
 3051e98:	11400215 	stw	r5,8(r2)
 3051e9c:	18c0004c 	andi	r3,r3,1
 3051ea0:	b8c6b03a 	or	r3,r23,r3
 3051ea4:	e0c00115 	stw	r3,4(fp)
 3051ea8:	305397c0 	call	305397c <__malloc_unlock>
 3051eac:	003ede06 	br	3051a28 <_realloc_r+0xd8>
 3051eb0:	20800117 	ldw	r2,4(r4)
 3051eb4:	00ffff04 	movi	r3,-4
 3051eb8:	800f883a 	mov	r7,r16
 3051ebc:	10c4703a 	and	r2,r2,r3
 3051ec0:	98a9883a 	add	r20,r19,r2
 3051ec4:	84000204 	addi	r16,r16,8
 3051ec8:	003ec206 	br	30519d4 <_realloc_r+0x84>
 3051ecc:	900b883a 	mov	r5,r18
 3051ed0:	8009883a 	mov	r4,r16
 3051ed4:	30506080 	call	3050608 <memmove>
 3051ed8:	dd000017 	ldw	r20,0(sp)
 3051edc:	e00f883a 	mov	r7,fp
 3051ee0:	003ebc06 	br	30519d4 <_realloc_r+0x84>
 3051ee4:	900b883a 	mov	r5,r18
 3051ee8:	8009883a 	mov	r4,r16
 3051eec:	30506080 	call	3050608 <memmove>
 3051ef0:	e00f883a 	mov	r7,fp
 3051ef4:	003eb706 	br	30519d4 <_realloc_r+0x84>
 3051ef8:	20800017 	ldw	r2,0(r4)
 3051efc:	91000604 	addi	r4,r18,24
 3051f00:	38800015 	stw	r2,0(r7)
 3051f04:	90c00517 	ldw	r3,20(r18)
 3051f08:	89c00604 	addi	r7,r17,24
 3051f0c:	88c00515 	stw	r3,20(r17)
 3051f10:	003f6406 	br	3051ca4 <_realloc_r+0x354>
 3051f14:	900b883a 	mov	r5,r18
 3051f18:	8809883a 	mov	r4,r17
 3051f1c:	30506080 	call	3050608 <memmove>
 3051f20:	003fd406 	br	3051e74 <_realloc_r+0x524>
 3051f24:	20800017 	ldw	r2,0(r4)
 3051f28:	91000604 	addi	r4,r18,24
 3051f2c:	38800015 	stw	r2,0(r7)
 3051f30:	90c00517 	ldw	r3,20(r18)
 3051f34:	e1c00804 	addi	r7,fp,32
 3051f38:	e0c00715 	stw	r3,28(fp)
 3051f3c:	003f0506 	br	3051b54 <_realloc_r+0x204>
 3051f40:	20800017 	ldw	r2,0(r4)
 3051f44:	91000604 	addi	r4,r18,24
 3051f48:	38800015 	stw	r2,0(r7)
 3051f4c:	90c00517 	ldw	r3,20(r18)
 3051f50:	e1c00804 	addi	r7,fp,32
 3051f54:	e0c00715 	stw	r3,28(fp)
 3051f58:	003f2706 	br	3051bf8 <_realloc_r+0x2a8>
 3051f5c:	20800017 	ldw	r2,0(r4)
 3051f60:	91000604 	addi	r4,r18,24
 3051f64:	38800015 	stw	r2,0(r7)
 3051f68:	90c00517 	ldw	r3,20(r18)
 3051f6c:	e1c00804 	addi	r7,fp,32
 3051f70:	e0c00715 	stw	r3,28(fp)
 3051f74:	003fb706 	br	3051e54 <_realloc_r+0x504>

03051f78 <__isinfd>:
 3051f78:	200d883a 	mov	r6,r4
 3051f7c:	0109c83a 	sub	r4,zero,r4
 3051f80:	2188b03a 	or	r4,r4,r6
 3051f84:	2008d7fa 	srli	r4,r4,31
 3051f88:	00a00034 	movhi	r2,32768
 3051f8c:	10bfffc4 	addi	r2,r2,-1
 3051f90:	1144703a 	and	r2,r2,r5
 3051f94:	2088b03a 	or	r4,r4,r2
 3051f98:	009ffc34 	movhi	r2,32752
 3051f9c:	10800004 	addi	r2,r2,0
 3051fa0:	1105c83a 	sub	r2,r2,r4
 3051fa4:	0087c83a 	sub	r3,zero,r2
 3051fa8:	10c4b03a 	or	r2,r2,r3
 3051fac:	1004d7fa 	srli	r2,r2,31
 3051fb0:	00c00044 	movi	r3,1
 3051fb4:	1885c83a 	sub	r2,r3,r2
 3051fb8:	f800283a 	ret

03051fbc <__isnand>:
 3051fbc:	200d883a 	mov	r6,r4
 3051fc0:	0109c83a 	sub	r4,zero,r4
 3051fc4:	2188b03a 	or	r4,r4,r6
 3051fc8:	2008d7fa 	srli	r4,r4,31
 3051fcc:	00a00034 	movhi	r2,32768
 3051fd0:	10bfffc4 	addi	r2,r2,-1
 3051fd4:	1144703a 	and	r2,r2,r5
 3051fd8:	2088b03a 	or	r4,r4,r2
 3051fdc:	009ffc34 	movhi	r2,32752
 3051fe0:	10800004 	addi	r2,r2,0
 3051fe4:	1105c83a 	sub	r2,r2,r4
 3051fe8:	1004d7fa 	srli	r2,r2,31
 3051fec:	f800283a 	ret

03051ff0 <__swbuf_r>:
 3051ff0:	defffc04 	addi	sp,sp,-16
 3051ff4:	dc400215 	stw	r17,8(sp)
 3051ff8:	dc000115 	stw	r16,4(sp)
 3051ffc:	dfc00315 	stw	ra,12(sp)
 3052000:	2023883a 	mov	r17,r4
 3052004:	2821883a 	mov	r16,r5
 3052008:	20000226 	beq	r4,zero,3052014 <__swbuf_r+0x24>
 305200c:	20800e17 	ldw	r2,56(r4)
 3052010:	10002f26 	beq	r2,zero,30520d0 <__swbuf_r+0xe0>
 3052014:	3080030b 	ldhu	r2,12(r6)
 3052018:	30c00617 	ldw	r3,24(r6)
 305201c:	1080020c 	andi	r2,r2,8
 3052020:	30c00215 	stw	r3,8(r6)
 3052024:	10002226 	beq	r2,zero,30520b0 <__swbuf_r+0xc0>
 3052028:	30c00417 	ldw	r3,16(r6)
 305202c:	18002026 	beq	r3,zero,30520b0 <__swbuf_r+0xc0>
 3052030:	31000017 	ldw	r4,0(r6)
 3052034:	30800517 	ldw	r2,20(r6)
 3052038:	20c7c83a 	sub	r3,r4,r3
 305203c:	18802f0e 	bge	r3,r2,30520fc <__swbuf_r+0x10c>
 3052040:	19400044 	addi	r5,r3,1
 3052044:	30800217 	ldw	r2,8(r6)
 3052048:	84003fcc 	andi	r16,r16,255
 305204c:	20c00044 	addi	r3,r4,1
 3052050:	10bfffc4 	addi	r2,r2,-1
 3052054:	30800215 	stw	r2,8(r6)
 3052058:	24000005 	stb	r16,0(r4)
 305205c:	30800517 	ldw	r2,20(r6)
 3052060:	30c00015 	stw	r3,0(r6)
 3052064:	11400c26 	beq	r2,r5,3052098 <__swbuf_r+0xa8>
 3052068:	3080030b 	ldhu	r2,12(r6)
 305206c:	1080004c 	andi	r2,r2,1
 3052070:	1005003a 	cmpeq	r2,r2,zero
 3052074:	10000626 	beq	r2,zero,3052090 <__swbuf_r+0xa0>
 3052078:	8005883a 	mov	r2,r16
 305207c:	dfc00317 	ldw	ra,12(sp)
 3052080:	dc400217 	ldw	r17,8(sp)
 3052084:	dc000117 	ldw	r16,4(sp)
 3052088:	dec00404 	addi	sp,sp,16
 305208c:	f800283a 	ret
 3052090:	00800284 	movi	r2,10
 3052094:	80bff81e 	bne	r16,r2,3052078 <__swbuf_r+0x88>
 3052098:	8809883a 	mov	r4,r17
 305209c:	300b883a 	mov	r5,r6
 30520a0:	304a0e80 	call	304a0e8 <_fflush_r>
 30520a4:	103ff426 	beq	r2,zero,3052078 <__swbuf_r+0x88>
 30520a8:	043fffc4 	movi	r16,-1
 30520ac:	003ff206 	br	3052078 <__swbuf_r+0x88>
 30520b0:	300b883a 	mov	r5,r6
 30520b4:	8809883a 	mov	r4,r17
 30520b8:	d9800015 	stw	r6,0(sp)
 30520bc:	304e4700 	call	304e470 <__swsetup_r>
 30520c0:	d9800017 	ldw	r6,0(sp)
 30520c4:	1000061e 	bne	r2,zero,30520e0 <__swbuf_r+0xf0>
 30520c8:	30c00417 	ldw	r3,16(r6)
 30520cc:	003fd806 	br	3052030 <__swbuf_r+0x40>
 30520d0:	d9800015 	stw	r6,0(sp)
 30520d4:	304a3800 	call	304a380 <__sinit>
 30520d8:	d9800017 	ldw	r6,0(sp)
 30520dc:	003fcd06 	br	3052014 <__swbuf_r+0x24>
 30520e0:	3080030b 	ldhu	r2,12(r6)
 30520e4:	00c00244 	movi	r3,9
 30520e8:	043fffc4 	movi	r16,-1
 30520ec:	10801014 	ori	r2,r2,64
 30520f0:	3080030d 	sth	r2,12(r6)
 30520f4:	88c00015 	stw	r3,0(r17)
 30520f8:	003fdf06 	br	3052078 <__swbuf_r+0x88>
 30520fc:	300b883a 	mov	r5,r6
 3052100:	8809883a 	mov	r4,r17
 3052104:	d9800015 	stw	r6,0(sp)
 3052108:	304a0e80 	call	304a0e8 <_fflush_r>
 305210c:	d9800017 	ldw	r6,0(sp)
 3052110:	103fe51e 	bne	r2,zero,30520a8 <__swbuf_r+0xb8>
 3052114:	31000017 	ldw	r4,0(r6)
 3052118:	01400044 	movi	r5,1
 305211c:	003fc906 	br	3052044 <__swbuf_r+0x54>

03052120 <__swbuf>:
 3052120:	0180c1b4 	movhi	r6,774
 3052124:	31b28804 	addi	r6,r6,-13792
 3052128:	2007883a 	mov	r3,r4
 305212c:	31000017 	ldw	r4,0(r6)
 3052130:	280d883a 	mov	r6,r5
 3052134:	180b883a 	mov	r5,r3
 3052138:	3051ff01 	jmpi	3051ff0 <__swbuf_r>

0305213c <_calloc_r>:
 305213c:	298b383a 	mul	r5,r5,r6
 3052140:	defffe04 	addi	sp,sp,-8
 3052144:	dc000015 	stw	r16,0(sp)
 3052148:	dfc00115 	stw	ra,4(sp)
 305214c:	304b41c0 	call	304b41c <_malloc_r>
 3052150:	1021883a 	mov	r16,r2
 3052154:	01c00904 	movi	r7,36
 3052158:	10000e26 	beq	r2,zero,3052194 <_calloc_r+0x58>
 305215c:	10ffff17 	ldw	r3,-4(r2)
 3052160:	1009883a 	mov	r4,r2
 3052164:	00bfff04 	movi	r2,-4
 3052168:	1886703a 	and	r3,r3,r2
 305216c:	1887883a 	add	r3,r3,r2
 3052170:	180d883a 	mov	r6,r3
 3052174:	000b883a 	mov	r5,zero
 3052178:	38c01836 	bltu	r7,r3,30521dc <_calloc_r+0xa0>
 305217c:	008004c4 	movi	r2,19
 3052180:	10c00936 	bltu	r2,r3,30521a8 <_calloc_r+0x6c>
 3052184:	20000015 	stw	zero,0(r4)
 3052188:	20800104 	addi	r2,r4,4
 305218c:	10000115 	stw	zero,4(r2)
 3052190:	10000015 	stw	zero,0(r2)
 3052194:	8005883a 	mov	r2,r16
 3052198:	dfc00117 	ldw	ra,4(sp)
 305219c:	dc000017 	ldw	r16,0(sp)
 30521a0:	dec00204 	addi	sp,sp,8
 30521a4:	f800283a 	ret
 30521a8:	008006c4 	movi	r2,27
 30521ac:	80000015 	stw	zero,0(r16)
 30521b0:	80000115 	stw	zero,4(r16)
 30521b4:	81000204 	addi	r4,r16,8
 30521b8:	10fff22e 	bgeu	r2,r3,3052184 <_calloc_r+0x48>
 30521bc:	20000015 	stw	zero,0(r4)
 30521c0:	80000315 	stw	zero,12(r16)
 30521c4:	81000404 	addi	r4,r16,16
 30521c8:	19ffee1e 	bne	r3,r7,3052184 <_calloc_r+0x48>
 30521cc:	20000015 	stw	zero,0(r4)
 30521d0:	81000604 	addi	r4,r16,24
 30521d4:	80000515 	stw	zero,20(r16)
 30521d8:	003fea06 	br	3052184 <_calloc_r+0x48>
 30521dc:	304bbfc0 	call	304bbfc <memset>
 30521e0:	8005883a 	mov	r2,r16
 30521e4:	dfc00117 	ldw	ra,4(sp)
 30521e8:	dc000017 	ldw	r16,0(sp)
 30521ec:	dec00204 	addi	sp,sp,8
 30521f0:	f800283a 	ret

030521f4 <_fpadd_parts>:
 30521f4:	defff804 	addi	sp,sp,-32
 30521f8:	dcc00315 	stw	r19,12(sp)
 30521fc:	2027883a 	mov	r19,r4
 3052200:	21000017 	ldw	r4,0(r4)
 3052204:	00c00044 	movi	r3,1
 3052208:	dd400515 	stw	r21,20(sp)
 305220c:	dd000415 	stw	r20,16(sp)
 3052210:	ddc00715 	stw	r23,28(sp)
 3052214:	dd800615 	stw	r22,24(sp)
 3052218:	dc800215 	stw	r18,8(sp)
 305221c:	dc400115 	stw	r17,4(sp)
 3052220:	dc000015 	stw	r16,0(sp)
 3052224:	282b883a 	mov	r21,r5
 3052228:	3029883a 	mov	r20,r6
 305222c:	1900632e 	bgeu	r3,r4,30523bc <_fpadd_parts+0x1c8>
 3052230:	28800017 	ldw	r2,0(r5)
 3052234:	1880812e 	bgeu	r3,r2,305243c <_fpadd_parts+0x248>
 3052238:	00c00104 	movi	r3,4
 305223c:	20c0dc26 	beq	r4,r3,30525b0 <_fpadd_parts+0x3bc>
 3052240:	10c07e26 	beq	r2,r3,305243c <_fpadd_parts+0x248>
 3052244:	00c00084 	movi	r3,2
 3052248:	10c06726 	beq	r2,r3,30523e8 <_fpadd_parts+0x1f4>
 305224c:	20c07b26 	beq	r4,r3,305243c <_fpadd_parts+0x248>
 3052250:	9dc00217 	ldw	r23,8(r19)
 3052254:	28c00217 	ldw	r3,8(r5)
 3052258:	9c400317 	ldw	r17,12(r19)
 305225c:	2bc00317 	ldw	r15,12(r5)
 3052260:	b8cdc83a 	sub	r6,r23,r3
 3052264:	9c800417 	ldw	r18,16(r19)
 3052268:	2c000417 	ldw	r16,16(r5)
 305226c:	3009883a 	mov	r4,r6
 3052270:	30009716 	blt	r6,zero,30524d0 <_fpadd_parts+0x2dc>
 3052274:	00800fc4 	movi	r2,63
 3052278:	11806b16 	blt	r2,r6,3052428 <_fpadd_parts+0x234>
 305227c:	0100a40e 	bge	zero,r4,3052510 <_fpadd_parts+0x31c>
 3052280:	35bff804 	addi	r22,r6,-32
 3052284:	b000bc16 	blt	r22,zero,3052578 <_fpadd_parts+0x384>
 3052288:	8596d83a 	srl	r11,r16,r22
 305228c:	0019883a 	mov	r12,zero
 3052290:	0013883a 	mov	r9,zero
 3052294:	01000044 	movi	r4,1
 3052298:	0015883a 	mov	r10,zero
 305229c:	b000be16 	blt	r22,zero,3052598 <_fpadd_parts+0x3a4>
 30522a0:	2590983a 	sll	r8,r4,r22
 30522a4:	000f883a 	mov	r7,zero
 30522a8:	00bfffc4 	movi	r2,-1
 30522ac:	3889883a 	add	r4,r7,r2
 30522b0:	408b883a 	add	r5,r8,r2
 30522b4:	21cd803a 	cmpltu	r6,r4,r7
 30522b8:	314b883a 	add	r5,r6,r5
 30522bc:	7904703a 	and	r2,r15,r4
 30522c0:	8146703a 	and	r3,r16,r5
 30522c4:	10c4b03a 	or	r2,r2,r3
 30522c8:	10000226 	beq	r2,zero,30522d4 <_fpadd_parts+0xe0>
 30522cc:	02400044 	movi	r9,1
 30522d0:	0015883a 	mov	r10,zero
 30522d4:	5a5eb03a 	or	r15,r11,r9
 30522d8:	62a0b03a 	or	r16,r12,r10
 30522dc:	99400117 	ldw	r5,4(r19)
 30522e0:	a8800117 	ldw	r2,4(r21)
 30522e4:	28806e26 	beq	r5,r2,30524a0 <_fpadd_parts+0x2ac>
 30522e8:	28006626 	beq	r5,zero,3052484 <_fpadd_parts+0x290>
 30522ec:	7c45c83a 	sub	r2,r15,r17
 30522f0:	7889803a 	cmpltu	r4,r15,r2
 30522f4:	8487c83a 	sub	r3,r16,r18
 30522f8:	1909c83a 	sub	r4,r3,r4
 30522fc:	100d883a 	mov	r6,r2
 3052300:	200f883a 	mov	r7,r4
 3052304:	38007716 	blt	r7,zero,30524e4 <_fpadd_parts+0x2f0>
 3052308:	a5c00215 	stw	r23,8(r20)
 305230c:	a1c00415 	stw	r7,16(r20)
 3052310:	a0000115 	stw	zero,4(r20)
 3052314:	a1800315 	stw	r6,12(r20)
 3052318:	a2000317 	ldw	r8,12(r20)
 305231c:	a2400417 	ldw	r9,16(r20)
 3052320:	00bfffc4 	movi	r2,-1
 3052324:	408b883a 	add	r5,r8,r2
 3052328:	2a09803a 	cmpltu	r4,r5,r8
 305232c:	488d883a 	add	r6,r9,r2
 3052330:	01c40034 	movhi	r7,4096
 3052334:	39ffffc4 	addi	r7,r7,-1
 3052338:	218d883a 	add	r6,r4,r6
 305233c:	39801736 	bltu	r7,r6,305239c <_fpadd_parts+0x1a8>
 3052340:	31c06526 	beq	r6,r7,30524d8 <_fpadd_parts+0x2e4>
 3052344:	a3000217 	ldw	r12,8(r20)
 3052348:	4209883a 	add	r4,r8,r8
 305234c:	00bfffc4 	movi	r2,-1
 3052350:	220f803a 	cmpltu	r7,r4,r8
 3052354:	4a4b883a 	add	r5,r9,r9
 3052358:	394f883a 	add	r7,r7,r5
 305235c:	2095883a 	add	r10,r4,r2
 3052360:	3897883a 	add	r11,r7,r2
 3052364:	510d803a 	cmpltu	r6,r10,r4
 3052368:	6099883a 	add	r12,r12,r2
 305236c:	32d7883a 	add	r11,r6,r11
 3052370:	00840034 	movhi	r2,4096
 3052374:	10bfffc4 	addi	r2,r2,-1
 3052378:	2011883a 	mov	r8,r4
 305237c:	3813883a 	mov	r9,r7
 3052380:	a1000315 	stw	r4,12(r20)
 3052384:	a1c00415 	stw	r7,16(r20)
 3052388:	a3000215 	stw	r12,8(r20)
 305238c:	12c00336 	bltu	r2,r11,305239c <_fpadd_parts+0x1a8>
 3052390:	58bfed1e 	bne	r11,r2,3052348 <_fpadd_parts+0x154>
 3052394:	00bfff84 	movi	r2,-2
 3052398:	12bfeb2e 	bgeu	r2,r10,3052348 <_fpadd_parts+0x154>
 305239c:	a2800417 	ldw	r10,16(r20)
 30523a0:	008000c4 	movi	r2,3
 30523a4:	00c80034 	movhi	r3,8192
 30523a8:	18ffffc4 	addi	r3,r3,-1
 30523ac:	a2400317 	ldw	r9,12(r20)
 30523b0:	a0800015 	stw	r2,0(r20)
 30523b4:	1a802336 	bltu	r3,r10,3052444 <_fpadd_parts+0x250>
 30523b8:	a027883a 	mov	r19,r20
 30523bc:	9805883a 	mov	r2,r19
 30523c0:	ddc00717 	ldw	r23,28(sp)
 30523c4:	dd800617 	ldw	r22,24(sp)
 30523c8:	dd400517 	ldw	r21,20(sp)
 30523cc:	dd000417 	ldw	r20,16(sp)
 30523d0:	dcc00317 	ldw	r19,12(sp)
 30523d4:	dc800217 	ldw	r18,8(sp)
 30523d8:	dc400117 	ldw	r17,4(sp)
 30523dc:	dc000017 	ldw	r16,0(sp)
 30523e0:	dec00804 	addi	sp,sp,32
 30523e4:	f800283a 	ret
 30523e8:	20fff41e 	bne	r4,r3,30523bc <_fpadd_parts+0x1c8>
 30523ec:	31000015 	stw	r4,0(r6)
 30523f0:	98800117 	ldw	r2,4(r19)
 30523f4:	30800115 	stw	r2,4(r6)
 30523f8:	98c00217 	ldw	r3,8(r19)
 30523fc:	30c00215 	stw	r3,8(r6)
 3052400:	98800317 	ldw	r2,12(r19)
 3052404:	30800315 	stw	r2,12(r6)
 3052408:	98c00417 	ldw	r3,16(r19)
 305240c:	30c00415 	stw	r3,16(r6)
 3052410:	98800117 	ldw	r2,4(r19)
 3052414:	28c00117 	ldw	r3,4(r5)
 3052418:	3027883a 	mov	r19,r6
 305241c:	10c4703a 	and	r2,r2,r3
 3052420:	30800115 	stw	r2,4(r6)
 3052424:	003fe506 	br	30523bc <_fpadd_parts+0x1c8>
 3052428:	1dc02616 	blt	r3,r23,30524c4 <_fpadd_parts+0x2d0>
 305242c:	0023883a 	mov	r17,zero
 3052430:	182f883a 	mov	r23,r3
 3052434:	0025883a 	mov	r18,zero
 3052438:	003fa806 	br	30522dc <_fpadd_parts+0xe8>
 305243c:	a827883a 	mov	r19,r21
 3052440:	003fde06 	br	30523bc <_fpadd_parts+0x1c8>
 3052444:	01800044 	movi	r6,1
 3052448:	500497fa 	slli	r2,r10,31
 305244c:	4808d07a 	srli	r4,r9,1
 3052450:	518ad83a 	srl	r5,r10,r6
 3052454:	a2000217 	ldw	r8,8(r20)
 3052458:	1108b03a 	or	r4,r2,r4
 305245c:	0007883a 	mov	r3,zero
 3052460:	4984703a 	and	r2,r9,r6
 3052464:	208cb03a 	or	r6,r4,r2
 3052468:	28ceb03a 	or	r7,r5,r3
 305246c:	42000044 	addi	r8,r8,1
 3052470:	a027883a 	mov	r19,r20
 3052474:	a1c00415 	stw	r7,16(r20)
 3052478:	a2000215 	stw	r8,8(r20)
 305247c:	a1800315 	stw	r6,12(r20)
 3052480:	003fce06 	br	30523bc <_fpadd_parts+0x1c8>
 3052484:	8bc5c83a 	sub	r2,r17,r15
 3052488:	8889803a 	cmpltu	r4,r17,r2
 305248c:	9407c83a 	sub	r3,r18,r16
 3052490:	1909c83a 	sub	r4,r3,r4
 3052494:	100d883a 	mov	r6,r2
 3052498:	200f883a 	mov	r7,r4
 305249c:	003f9906 	br	3052304 <_fpadd_parts+0x110>
 30524a0:	8bc5883a 	add	r2,r17,r15
 30524a4:	1449803a 	cmpltu	r4,r2,r17
 30524a8:	9407883a 	add	r3,r18,r16
 30524ac:	20c9883a 	add	r4,r4,r3
 30524b0:	a1400115 	stw	r5,4(r20)
 30524b4:	a5c00215 	stw	r23,8(r20)
 30524b8:	a0800315 	stw	r2,12(r20)
 30524bc:	a1000415 	stw	r4,16(r20)
 30524c0:	003fb606 	br	305239c <_fpadd_parts+0x1a8>
 30524c4:	001f883a 	mov	r15,zero
 30524c8:	0021883a 	mov	r16,zero
 30524cc:	003f8306 	br	30522dc <_fpadd_parts+0xe8>
 30524d0:	018dc83a 	sub	r6,zero,r6
 30524d4:	003f6706 	br	3052274 <_fpadd_parts+0x80>
 30524d8:	00bfff84 	movi	r2,-2
 30524dc:	117faf36 	bltu	r2,r5,305239c <_fpadd_parts+0x1a8>
 30524e0:	003f9806 	br	3052344 <_fpadd_parts+0x150>
 30524e4:	0005883a 	mov	r2,zero
 30524e8:	1189c83a 	sub	r4,r2,r6
 30524ec:	1105803a 	cmpltu	r2,r2,r4
 30524f0:	01cbc83a 	sub	r5,zero,r7
 30524f4:	2885c83a 	sub	r2,r5,r2
 30524f8:	01800044 	movi	r6,1
 30524fc:	a1800115 	stw	r6,4(r20)
 3052500:	a5c00215 	stw	r23,8(r20)
 3052504:	a1000315 	stw	r4,12(r20)
 3052508:	a0800415 	stw	r2,16(r20)
 305250c:	003f8206 	br	3052318 <_fpadd_parts+0x124>
 3052510:	203f7226 	beq	r4,zero,30522dc <_fpadd_parts+0xe8>
 3052514:	35bff804 	addi	r22,r6,-32
 3052518:	b9af883a 	add	r23,r23,r6
 305251c:	b0003116 	blt	r22,zero,30525e4 <_fpadd_parts+0x3f0>
 3052520:	959ad83a 	srl	r13,r18,r22
 3052524:	001d883a 	mov	r14,zero
 3052528:	000f883a 	mov	r7,zero
 305252c:	01000044 	movi	r4,1
 3052530:	0011883a 	mov	r8,zero
 3052534:	b0002516 	blt	r22,zero,30525cc <_fpadd_parts+0x3d8>
 3052538:	2594983a 	sll	r10,r4,r22
 305253c:	0013883a 	mov	r9,zero
 3052540:	00bfffc4 	movi	r2,-1
 3052544:	4889883a 	add	r4,r9,r2
 3052548:	508b883a 	add	r5,r10,r2
 305254c:	224d803a 	cmpltu	r6,r4,r9
 3052550:	314b883a 	add	r5,r6,r5
 3052554:	8904703a 	and	r2,r17,r4
 3052558:	9146703a 	and	r3,r18,r5
 305255c:	10c4b03a 	or	r2,r2,r3
 3052560:	10000226 	beq	r2,zero,305256c <_fpadd_parts+0x378>
 3052564:	01c00044 	movi	r7,1
 3052568:	0011883a 	mov	r8,zero
 305256c:	69e2b03a 	or	r17,r13,r7
 3052570:	7224b03a 	or	r18,r14,r8
 3052574:	003f5906 	br	30522dc <_fpadd_parts+0xe8>
 3052578:	8407883a 	add	r3,r16,r16
 305257c:	008007c4 	movi	r2,31
 3052580:	1185c83a 	sub	r2,r2,r6
 3052584:	1886983a 	sll	r3,r3,r2
 3052588:	7996d83a 	srl	r11,r15,r6
 305258c:	8198d83a 	srl	r12,r16,r6
 3052590:	1ad6b03a 	or	r11,r3,r11
 3052594:	003f3e06 	br	3052290 <_fpadd_parts+0x9c>
 3052598:	2006d07a 	srli	r3,r4,1
 305259c:	008007c4 	movi	r2,31
 30525a0:	1185c83a 	sub	r2,r2,r6
 30525a4:	1890d83a 	srl	r8,r3,r2
 30525a8:	218e983a 	sll	r7,r4,r6
 30525ac:	003f3e06 	br	30522a8 <_fpadd_parts+0xb4>
 30525b0:	113f821e 	bne	r2,r4,30523bc <_fpadd_parts+0x1c8>
 30525b4:	28c00117 	ldw	r3,4(r5)
 30525b8:	98800117 	ldw	r2,4(r19)
 30525bc:	10ff7f26 	beq	r2,r3,30523bc <_fpadd_parts+0x1c8>
 30525c0:	04c0c1b4 	movhi	r19,774
 30525c4:	9ce9cf04 	addi	r19,r19,-22724
 30525c8:	003f7c06 	br	30523bc <_fpadd_parts+0x1c8>
 30525cc:	2006d07a 	srli	r3,r4,1
 30525d0:	008007c4 	movi	r2,31
 30525d4:	1185c83a 	sub	r2,r2,r6
 30525d8:	1894d83a 	srl	r10,r3,r2
 30525dc:	2192983a 	sll	r9,r4,r6
 30525e0:	003fd706 	br	3052540 <_fpadd_parts+0x34c>
 30525e4:	9487883a 	add	r3,r18,r18
 30525e8:	008007c4 	movi	r2,31
 30525ec:	1185c83a 	sub	r2,r2,r6
 30525f0:	1886983a 	sll	r3,r3,r2
 30525f4:	899ad83a 	srl	r13,r17,r6
 30525f8:	919cd83a 	srl	r14,r18,r6
 30525fc:	1b5ab03a 	or	r13,r3,r13
 3052600:	003fc906 	br	3052528 <_fpadd_parts+0x334>

03052604 <__subdf3>:
 3052604:	deffea04 	addi	sp,sp,-88
 3052608:	dcc01415 	stw	r19,80(sp)
 305260c:	dcc00404 	addi	r19,sp,16
 3052610:	2011883a 	mov	r8,r4
 3052614:	2813883a 	mov	r9,r5
 3052618:	dc401315 	stw	r17,76(sp)
 305261c:	d809883a 	mov	r4,sp
 3052620:	980b883a 	mov	r5,r19
 3052624:	dc400904 	addi	r17,sp,36
 3052628:	dfc01515 	stw	ra,84(sp)
 305262c:	da400115 	stw	r9,4(sp)
 3052630:	d9c00315 	stw	r7,12(sp)
 3052634:	da000015 	stw	r8,0(sp)
 3052638:	d9800215 	stw	r6,8(sp)
 305263c:	3049e840 	call	3049e84 <__unpack_d>
 3052640:	d9000204 	addi	r4,sp,8
 3052644:	880b883a 	mov	r5,r17
 3052648:	3049e840 	call	3049e84 <__unpack_d>
 305264c:	d8800a17 	ldw	r2,40(sp)
 3052650:	880b883a 	mov	r5,r17
 3052654:	9809883a 	mov	r4,r19
 3052658:	d9800e04 	addi	r6,sp,56
 305265c:	1080005c 	xori	r2,r2,1
 3052660:	d8800a15 	stw	r2,40(sp)
 3052664:	30521f40 	call	30521f4 <_fpadd_parts>
 3052668:	1009883a 	mov	r4,r2
 305266c:	3049b6c0 	call	3049b6c <__pack_d>
 3052670:	dfc01517 	ldw	ra,84(sp)
 3052674:	dcc01417 	ldw	r19,80(sp)
 3052678:	dc401317 	ldw	r17,76(sp)
 305267c:	dec01604 	addi	sp,sp,88
 3052680:	f800283a 	ret

03052684 <__adddf3>:
 3052684:	deffea04 	addi	sp,sp,-88
 3052688:	dcc01415 	stw	r19,80(sp)
 305268c:	dcc00404 	addi	r19,sp,16
 3052690:	2011883a 	mov	r8,r4
 3052694:	2813883a 	mov	r9,r5
 3052698:	dc401315 	stw	r17,76(sp)
 305269c:	d809883a 	mov	r4,sp
 30526a0:	980b883a 	mov	r5,r19
 30526a4:	dc400904 	addi	r17,sp,36
 30526a8:	dfc01515 	stw	ra,84(sp)
 30526ac:	da400115 	stw	r9,4(sp)
 30526b0:	d9c00315 	stw	r7,12(sp)
 30526b4:	da000015 	stw	r8,0(sp)
 30526b8:	d9800215 	stw	r6,8(sp)
 30526bc:	3049e840 	call	3049e84 <__unpack_d>
 30526c0:	d9000204 	addi	r4,sp,8
 30526c4:	880b883a 	mov	r5,r17
 30526c8:	3049e840 	call	3049e84 <__unpack_d>
 30526cc:	d9800e04 	addi	r6,sp,56
 30526d0:	9809883a 	mov	r4,r19
 30526d4:	880b883a 	mov	r5,r17
 30526d8:	30521f40 	call	30521f4 <_fpadd_parts>
 30526dc:	1009883a 	mov	r4,r2
 30526e0:	3049b6c0 	call	3049b6c <__pack_d>
 30526e4:	dfc01517 	ldw	ra,84(sp)
 30526e8:	dcc01417 	ldw	r19,80(sp)
 30526ec:	dc401317 	ldw	r17,76(sp)
 30526f0:	dec01604 	addi	sp,sp,88
 30526f4:	f800283a 	ret

030526f8 <__muldf3>:
 30526f8:	deffe004 	addi	sp,sp,-128
 30526fc:	dc401815 	stw	r17,96(sp)
 3052700:	dc400404 	addi	r17,sp,16
 3052704:	2011883a 	mov	r8,r4
 3052708:	2813883a 	mov	r9,r5
 305270c:	dc001715 	stw	r16,92(sp)
 3052710:	d809883a 	mov	r4,sp
 3052714:	880b883a 	mov	r5,r17
 3052718:	dc000904 	addi	r16,sp,36
 305271c:	dfc01f15 	stw	ra,124(sp)
 3052720:	da400115 	stw	r9,4(sp)
 3052724:	d9c00315 	stw	r7,12(sp)
 3052728:	da000015 	stw	r8,0(sp)
 305272c:	d9800215 	stw	r6,8(sp)
 3052730:	ddc01e15 	stw	r23,120(sp)
 3052734:	dd801d15 	stw	r22,116(sp)
 3052738:	dd401c15 	stw	r21,112(sp)
 305273c:	dd001b15 	stw	r20,108(sp)
 3052740:	dcc01a15 	stw	r19,104(sp)
 3052744:	dc801915 	stw	r18,100(sp)
 3052748:	3049e840 	call	3049e84 <__unpack_d>
 305274c:	d9000204 	addi	r4,sp,8
 3052750:	800b883a 	mov	r5,r16
 3052754:	3049e840 	call	3049e84 <__unpack_d>
 3052758:	d9000417 	ldw	r4,16(sp)
 305275c:	00800044 	movi	r2,1
 3052760:	1100102e 	bgeu	r2,r4,30527a4 <__muldf3+0xac>
 3052764:	d8c00917 	ldw	r3,36(sp)
 3052768:	10c0062e 	bgeu	r2,r3,3052784 <__muldf3+0x8c>
 305276c:	00800104 	movi	r2,4
 3052770:	20800a26 	beq	r4,r2,305279c <__muldf3+0xa4>
 3052774:	1880cd26 	beq	r3,r2,3052aac <__muldf3+0x3b4>
 3052778:	00800084 	movi	r2,2
 305277c:	20800926 	beq	r4,r2,30527a4 <__muldf3+0xac>
 3052780:	1880191e 	bne	r3,r2,30527e8 <__muldf3+0xf0>
 3052784:	d8c00a17 	ldw	r3,40(sp)
 3052788:	d8800517 	ldw	r2,20(sp)
 305278c:	8009883a 	mov	r4,r16
 3052790:	10c4c03a 	cmpne	r2,r2,r3
 3052794:	d8800a15 	stw	r2,40(sp)
 3052798:	00000706 	br	30527b8 <__muldf3+0xc0>
 305279c:	00800084 	movi	r2,2
 30527a0:	1880c426 	beq	r3,r2,3052ab4 <__muldf3+0x3bc>
 30527a4:	d8800517 	ldw	r2,20(sp)
 30527a8:	d8c00a17 	ldw	r3,40(sp)
 30527ac:	8809883a 	mov	r4,r17
 30527b0:	10c4c03a 	cmpne	r2,r2,r3
 30527b4:	d8800515 	stw	r2,20(sp)
 30527b8:	3049b6c0 	call	3049b6c <__pack_d>
 30527bc:	dfc01f17 	ldw	ra,124(sp)
 30527c0:	ddc01e17 	ldw	r23,120(sp)
 30527c4:	dd801d17 	ldw	r22,116(sp)
 30527c8:	dd401c17 	ldw	r21,112(sp)
 30527cc:	dd001b17 	ldw	r20,108(sp)
 30527d0:	dcc01a17 	ldw	r19,104(sp)
 30527d4:	dc801917 	ldw	r18,100(sp)
 30527d8:	dc401817 	ldw	r17,96(sp)
 30527dc:	dc001717 	ldw	r16,92(sp)
 30527e0:	dec02004 	addi	sp,sp,128
 30527e4:	f800283a 	ret
 30527e8:	dd800717 	ldw	r22,28(sp)
 30527ec:	dc800c17 	ldw	r18,48(sp)
 30527f0:	002b883a 	mov	r21,zero
 30527f4:	0023883a 	mov	r17,zero
 30527f8:	a80b883a 	mov	r5,r21
 30527fc:	b00d883a 	mov	r6,r22
 3052800:	880f883a 	mov	r7,r17
 3052804:	ddc00817 	ldw	r23,32(sp)
 3052808:	dcc00d17 	ldw	r19,52(sp)
 305280c:	9009883a 	mov	r4,r18
 3052810:	30497fc0 	call	30497fc <__muldi3>
 3052814:	001b883a 	mov	r13,zero
 3052818:	680f883a 	mov	r7,r13
 305281c:	b009883a 	mov	r4,r22
 3052820:	000b883a 	mov	r5,zero
 3052824:	980d883a 	mov	r6,r19
 3052828:	b82d883a 	mov	r22,r23
 305282c:	002f883a 	mov	r23,zero
 3052830:	db401615 	stw	r13,88(sp)
 3052834:	d8801315 	stw	r2,76(sp)
 3052838:	d8c01415 	stw	r3,80(sp)
 305283c:	dcc01515 	stw	r19,84(sp)
 3052840:	30497fc0 	call	30497fc <__muldi3>
 3052844:	b00d883a 	mov	r6,r22
 3052848:	000b883a 	mov	r5,zero
 305284c:	9009883a 	mov	r4,r18
 3052850:	b80f883a 	mov	r7,r23
 3052854:	1021883a 	mov	r16,r2
 3052858:	1823883a 	mov	r17,r3
 305285c:	30497fc0 	call	30497fc <__muldi3>
 3052860:	8085883a 	add	r2,r16,r2
 3052864:	140d803a 	cmpltu	r6,r2,r16
 3052868:	88c7883a 	add	r3,r17,r3
 305286c:	30cd883a 	add	r6,r6,r3
 3052870:	1029883a 	mov	r20,r2
 3052874:	302b883a 	mov	r21,r6
 3052878:	da801317 	ldw	r10,76(sp)
 305287c:	dac01417 	ldw	r11,80(sp)
 3052880:	db001517 	ldw	r12,84(sp)
 3052884:	db401617 	ldw	r13,88(sp)
 3052888:	3440622e 	bgeu	r6,r17,3052a14 <__muldf3+0x31c>
 305288c:	0009883a 	mov	r4,zero
 3052890:	5105883a 	add	r2,r10,r4
 3052894:	128d803a 	cmpltu	r6,r2,r10
 3052898:	5d07883a 	add	r3,r11,r20
 305289c:	30cd883a 	add	r6,r6,r3
 30528a0:	0021883a 	mov	r16,zero
 30528a4:	04400044 	movi	r17,1
 30528a8:	1025883a 	mov	r18,r2
 30528ac:	3027883a 	mov	r19,r6
 30528b0:	32c06336 	bltu	r6,r11,3052a40 <__muldf3+0x348>
 30528b4:	59807b26 	beq	r11,r6,3052aa4 <__muldf3+0x3ac>
 30528b8:	680b883a 	mov	r5,r13
 30528bc:	b80f883a 	mov	r7,r23
 30528c0:	6009883a 	mov	r4,r12
 30528c4:	b00d883a 	mov	r6,r22
 30528c8:	30497fc0 	call	30497fc <__muldi3>
 30528cc:	1009883a 	mov	r4,r2
 30528d0:	000f883a 	mov	r7,zero
 30528d4:	1545883a 	add	r2,r2,r21
 30528d8:	1111803a 	cmpltu	r8,r2,r4
 30528dc:	19c7883a 	add	r3,r3,r7
 30528e0:	40c7883a 	add	r3,r8,r3
 30528e4:	88cb883a 	add	r5,r17,r3
 30528e8:	d8c00617 	ldw	r3,24(sp)
 30528ec:	8089883a 	add	r4,r16,r2
 30528f0:	d8800b17 	ldw	r2,44(sp)
 30528f4:	18c00104 	addi	r3,r3,4
 30528f8:	240d803a 	cmpltu	r6,r4,r16
 30528fc:	10c7883a 	add	r3,r2,r3
 3052900:	2013883a 	mov	r9,r4
 3052904:	d8800a17 	ldw	r2,40(sp)
 3052908:	d9000517 	ldw	r4,20(sp)
 305290c:	314d883a 	add	r6,r6,r5
 3052910:	3015883a 	mov	r10,r6
 3052914:	2088c03a 	cmpne	r4,r4,r2
 3052918:	00880034 	movhi	r2,8192
 305291c:	10bfffc4 	addi	r2,r2,-1
 3052920:	d9000f15 	stw	r4,60(sp)
 3052924:	d8c01015 	stw	r3,64(sp)
 3052928:	1180172e 	bgeu	r2,r6,3052988 <__muldf3+0x290>
 305292c:	1811883a 	mov	r8,r3
 3052930:	101f883a 	mov	r15,r2
 3052934:	980497fa 	slli	r2,r19,31
 3052938:	9016d07a 	srli	r11,r18,1
 305293c:	500697fa 	slli	r3,r10,31
 3052940:	480cd07a 	srli	r6,r9,1
 3052944:	500ed07a 	srli	r7,r10,1
 3052948:	12d6b03a 	or	r11,r2,r11
 305294c:	00800044 	movi	r2,1
 3052950:	198cb03a 	or	r6,r3,r6
 3052954:	4888703a 	and	r4,r9,r2
 3052958:	9818d07a 	srli	r12,r19,1
 305295c:	001b883a 	mov	r13,zero
 3052960:	03a00034 	movhi	r14,32768
 3052964:	73800004 	addi	r14,r14,0
 3052968:	3013883a 	mov	r9,r6
 305296c:	3815883a 	mov	r10,r7
 3052970:	4091883a 	add	r8,r8,r2
 3052974:	20000226 	beq	r4,zero,3052980 <__muldf3+0x288>
 3052978:	5b64b03a 	or	r18,r11,r13
 305297c:	63a6b03a 	or	r19,r12,r14
 3052980:	7abfec36 	bltu	r15,r10,3052934 <__muldf3+0x23c>
 3052984:	da001015 	stw	r8,64(sp)
 3052988:	00840034 	movhi	r2,4096
 305298c:	10bfffc4 	addi	r2,r2,-1
 3052990:	12801436 	bltu	r2,r10,30529e4 <__muldf3+0x2ec>
 3052994:	da001017 	ldw	r8,64(sp)
 3052998:	101f883a 	mov	r15,r2
 305299c:	4a45883a 	add	r2,r9,r9
 30529a0:	124d803a 	cmpltu	r6,r2,r9
 30529a4:	5287883a 	add	r3,r10,r10
 30529a8:	9497883a 	add	r11,r18,r18
 30529ac:	5c8f803a 	cmpltu	r7,r11,r18
 30529b0:	9cd9883a 	add	r12,r19,r19
 30529b4:	01000044 	movi	r4,1
 30529b8:	30cd883a 	add	r6,r6,r3
 30529bc:	3b0f883a 	add	r7,r7,r12
 30529c0:	423fffc4 	addi	r8,r8,-1
 30529c4:	1013883a 	mov	r9,r2
 30529c8:	3015883a 	mov	r10,r6
 30529cc:	111ab03a 	or	r13,r2,r4
 30529d0:	98003016 	blt	r19,zero,3052a94 <__muldf3+0x39c>
 30529d4:	5825883a 	mov	r18,r11
 30529d8:	3827883a 	mov	r19,r7
 30529dc:	7abfef2e 	bgeu	r15,r10,305299c <__muldf3+0x2a4>
 30529e0:	da001015 	stw	r8,64(sp)
 30529e4:	00803fc4 	movi	r2,255
 30529e8:	488e703a 	and	r7,r9,r2
 30529ec:	00802004 	movi	r2,128
 30529f0:	0007883a 	mov	r3,zero
 30529f4:	0011883a 	mov	r8,zero
 30529f8:	38801826 	beq	r7,r2,3052a5c <__muldf3+0x364>
 30529fc:	008000c4 	movi	r2,3
 3052a00:	d9000e04 	addi	r4,sp,56
 3052a04:	da801215 	stw	r10,72(sp)
 3052a08:	d8800e15 	stw	r2,56(sp)
 3052a0c:	da401115 	stw	r9,68(sp)
 3052a10:	003f6906 	br	30527b8 <__muldf3+0xc0>
 3052a14:	89802126 	beq	r17,r6,3052a9c <__muldf3+0x3a4>
 3052a18:	0009883a 	mov	r4,zero
 3052a1c:	5105883a 	add	r2,r10,r4
 3052a20:	128d803a 	cmpltu	r6,r2,r10
 3052a24:	5d07883a 	add	r3,r11,r20
 3052a28:	30cd883a 	add	r6,r6,r3
 3052a2c:	0021883a 	mov	r16,zero
 3052a30:	0023883a 	mov	r17,zero
 3052a34:	1025883a 	mov	r18,r2
 3052a38:	3027883a 	mov	r19,r6
 3052a3c:	32ff9d2e 	bgeu	r6,r11,30528b4 <__muldf3+0x1bc>
 3052a40:	00800044 	movi	r2,1
 3052a44:	8089883a 	add	r4,r16,r2
 3052a48:	240d803a 	cmpltu	r6,r4,r16
 3052a4c:	344d883a 	add	r6,r6,r17
 3052a50:	2021883a 	mov	r16,r4
 3052a54:	3023883a 	mov	r17,r6
 3052a58:	003f9706 	br	30528b8 <__muldf3+0x1c0>
 3052a5c:	403fe71e 	bne	r8,zero,30529fc <__muldf3+0x304>
 3052a60:	01004004 	movi	r4,256
 3052a64:	4904703a 	and	r2,r9,r4
 3052a68:	10c4b03a 	or	r2,r2,r3
 3052a6c:	103fe31e 	bne	r2,zero,30529fc <__muldf3+0x304>
 3052a70:	94c4b03a 	or	r2,r18,r19
 3052a74:	103fe126 	beq	r2,zero,30529fc <__muldf3+0x304>
 3052a78:	49c5883a 	add	r2,r9,r7
 3052a7c:	1251803a 	cmpltu	r8,r2,r9
 3052a80:	4291883a 	add	r8,r8,r10
 3052a84:	013fc004 	movi	r4,-256
 3052a88:	1112703a 	and	r9,r2,r4
 3052a8c:	4015883a 	mov	r10,r8
 3052a90:	003fda06 	br	30529fc <__muldf3+0x304>
 3052a94:	6813883a 	mov	r9,r13
 3052a98:	003fce06 	br	30529d4 <__muldf3+0x2dc>
 3052a9c:	143f7b36 	bltu	r2,r16,305288c <__muldf3+0x194>
 3052aa0:	003fdd06 	br	3052a18 <__muldf3+0x320>
 3052aa4:	12bf842e 	bgeu	r2,r10,30528b8 <__muldf3+0x1c0>
 3052aa8:	003fe506 	br	3052a40 <__muldf3+0x348>
 3052aac:	00800084 	movi	r2,2
 3052ab0:	20bf341e 	bne	r4,r2,3052784 <__muldf3+0x8c>
 3052ab4:	0100c1b4 	movhi	r4,774
 3052ab8:	2129cf04 	addi	r4,r4,-22724
 3052abc:	003f3e06 	br	30527b8 <__muldf3+0xc0>

03052ac0 <__eqdf2>:
 3052ac0:	deffef04 	addi	sp,sp,-68
 3052ac4:	dc400f15 	stw	r17,60(sp)
 3052ac8:	dc400404 	addi	r17,sp,16
 3052acc:	2005883a 	mov	r2,r4
 3052ad0:	2807883a 	mov	r3,r5
 3052ad4:	dc000e15 	stw	r16,56(sp)
 3052ad8:	d809883a 	mov	r4,sp
 3052adc:	880b883a 	mov	r5,r17
 3052ae0:	dc000904 	addi	r16,sp,36
 3052ae4:	d8c00115 	stw	r3,4(sp)
 3052ae8:	d8800015 	stw	r2,0(sp)
 3052aec:	d9800215 	stw	r6,8(sp)
 3052af0:	dfc01015 	stw	ra,64(sp)
 3052af4:	d9c00315 	stw	r7,12(sp)
 3052af8:	3049e840 	call	3049e84 <__unpack_d>
 3052afc:	d9000204 	addi	r4,sp,8
 3052b00:	800b883a 	mov	r5,r16
 3052b04:	3049e840 	call	3049e84 <__unpack_d>
 3052b08:	d8800417 	ldw	r2,16(sp)
 3052b0c:	00c00044 	movi	r3,1
 3052b10:	180d883a 	mov	r6,r3
 3052b14:	1880062e 	bgeu	r3,r2,3052b30 <__eqdf2+0x70>
 3052b18:	d8800917 	ldw	r2,36(sp)
 3052b1c:	8809883a 	mov	r4,r17
 3052b20:	800b883a 	mov	r5,r16
 3052b24:	1880022e 	bgeu	r3,r2,3052b30 <__eqdf2+0x70>
 3052b28:	30530d80 	call	30530d8 <__fpcmp_parts_d>
 3052b2c:	100d883a 	mov	r6,r2
 3052b30:	3005883a 	mov	r2,r6
 3052b34:	dfc01017 	ldw	ra,64(sp)
 3052b38:	dc400f17 	ldw	r17,60(sp)
 3052b3c:	dc000e17 	ldw	r16,56(sp)
 3052b40:	dec01104 	addi	sp,sp,68
 3052b44:	f800283a 	ret

03052b48 <__nedf2>:
 3052b48:	deffef04 	addi	sp,sp,-68
 3052b4c:	dc400f15 	stw	r17,60(sp)
 3052b50:	dc400404 	addi	r17,sp,16
 3052b54:	2005883a 	mov	r2,r4
 3052b58:	2807883a 	mov	r3,r5
 3052b5c:	dc000e15 	stw	r16,56(sp)
 3052b60:	d809883a 	mov	r4,sp
 3052b64:	880b883a 	mov	r5,r17
 3052b68:	dc000904 	addi	r16,sp,36
 3052b6c:	d8c00115 	stw	r3,4(sp)
 3052b70:	d8800015 	stw	r2,0(sp)
 3052b74:	d9800215 	stw	r6,8(sp)
 3052b78:	dfc01015 	stw	ra,64(sp)
 3052b7c:	d9c00315 	stw	r7,12(sp)
 3052b80:	3049e840 	call	3049e84 <__unpack_d>
 3052b84:	d9000204 	addi	r4,sp,8
 3052b88:	800b883a 	mov	r5,r16
 3052b8c:	3049e840 	call	3049e84 <__unpack_d>
 3052b90:	d8800417 	ldw	r2,16(sp)
 3052b94:	00c00044 	movi	r3,1
 3052b98:	180d883a 	mov	r6,r3
 3052b9c:	1880062e 	bgeu	r3,r2,3052bb8 <__nedf2+0x70>
 3052ba0:	d8800917 	ldw	r2,36(sp)
 3052ba4:	8809883a 	mov	r4,r17
 3052ba8:	800b883a 	mov	r5,r16
 3052bac:	1880022e 	bgeu	r3,r2,3052bb8 <__nedf2+0x70>
 3052bb0:	30530d80 	call	30530d8 <__fpcmp_parts_d>
 3052bb4:	100d883a 	mov	r6,r2
 3052bb8:	3005883a 	mov	r2,r6
 3052bbc:	dfc01017 	ldw	ra,64(sp)
 3052bc0:	dc400f17 	ldw	r17,60(sp)
 3052bc4:	dc000e17 	ldw	r16,56(sp)
 3052bc8:	dec01104 	addi	sp,sp,68
 3052bcc:	f800283a 	ret

03052bd0 <__gtdf2>:
 3052bd0:	deffef04 	addi	sp,sp,-68
 3052bd4:	dc400f15 	stw	r17,60(sp)
 3052bd8:	dc400404 	addi	r17,sp,16
 3052bdc:	2005883a 	mov	r2,r4
 3052be0:	2807883a 	mov	r3,r5
 3052be4:	dc000e15 	stw	r16,56(sp)
 3052be8:	d809883a 	mov	r4,sp
 3052bec:	880b883a 	mov	r5,r17
 3052bf0:	dc000904 	addi	r16,sp,36
 3052bf4:	d8c00115 	stw	r3,4(sp)
 3052bf8:	d8800015 	stw	r2,0(sp)
 3052bfc:	d9800215 	stw	r6,8(sp)
 3052c00:	dfc01015 	stw	ra,64(sp)
 3052c04:	d9c00315 	stw	r7,12(sp)
 3052c08:	3049e840 	call	3049e84 <__unpack_d>
 3052c0c:	d9000204 	addi	r4,sp,8
 3052c10:	800b883a 	mov	r5,r16
 3052c14:	3049e840 	call	3049e84 <__unpack_d>
 3052c18:	d8800417 	ldw	r2,16(sp)
 3052c1c:	00c00044 	movi	r3,1
 3052c20:	01bfffc4 	movi	r6,-1
 3052c24:	1880062e 	bgeu	r3,r2,3052c40 <__gtdf2+0x70>
 3052c28:	d8800917 	ldw	r2,36(sp)
 3052c2c:	8809883a 	mov	r4,r17
 3052c30:	800b883a 	mov	r5,r16
 3052c34:	1880022e 	bgeu	r3,r2,3052c40 <__gtdf2+0x70>
 3052c38:	30530d80 	call	30530d8 <__fpcmp_parts_d>
 3052c3c:	100d883a 	mov	r6,r2
 3052c40:	3005883a 	mov	r2,r6
 3052c44:	dfc01017 	ldw	ra,64(sp)
 3052c48:	dc400f17 	ldw	r17,60(sp)
 3052c4c:	dc000e17 	ldw	r16,56(sp)
 3052c50:	dec01104 	addi	sp,sp,68
 3052c54:	f800283a 	ret

03052c58 <__gedf2>:
 3052c58:	deffef04 	addi	sp,sp,-68
 3052c5c:	dc400f15 	stw	r17,60(sp)
 3052c60:	dc400404 	addi	r17,sp,16
 3052c64:	2005883a 	mov	r2,r4
 3052c68:	2807883a 	mov	r3,r5
 3052c6c:	dc000e15 	stw	r16,56(sp)
 3052c70:	d809883a 	mov	r4,sp
 3052c74:	880b883a 	mov	r5,r17
 3052c78:	dc000904 	addi	r16,sp,36
 3052c7c:	d8c00115 	stw	r3,4(sp)
 3052c80:	d8800015 	stw	r2,0(sp)
 3052c84:	d9800215 	stw	r6,8(sp)
 3052c88:	dfc01015 	stw	ra,64(sp)
 3052c8c:	d9c00315 	stw	r7,12(sp)
 3052c90:	3049e840 	call	3049e84 <__unpack_d>
 3052c94:	d9000204 	addi	r4,sp,8
 3052c98:	800b883a 	mov	r5,r16
 3052c9c:	3049e840 	call	3049e84 <__unpack_d>
 3052ca0:	d8800417 	ldw	r2,16(sp)
 3052ca4:	00c00044 	movi	r3,1
 3052ca8:	01bfffc4 	movi	r6,-1
 3052cac:	1880062e 	bgeu	r3,r2,3052cc8 <__gedf2+0x70>
 3052cb0:	d8800917 	ldw	r2,36(sp)
 3052cb4:	8809883a 	mov	r4,r17
 3052cb8:	800b883a 	mov	r5,r16
 3052cbc:	1880022e 	bgeu	r3,r2,3052cc8 <__gedf2+0x70>
 3052cc0:	30530d80 	call	30530d8 <__fpcmp_parts_d>
 3052cc4:	100d883a 	mov	r6,r2
 3052cc8:	3005883a 	mov	r2,r6
 3052ccc:	dfc01017 	ldw	ra,64(sp)
 3052cd0:	dc400f17 	ldw	r17,60(sp)
 3052cd4:	dc000e17 	ldw	r16,56(sp)
 3052cd8:	dec01104 	addi	sp,sp,68
 3052cdc:	f800283a 	ret

03052ce0 <__ltdf2>:
 3052ce0:	deffef04 	addi	sp,sp,-68
 3052ce4:	dc400f15 	stw	r17,60(sp)
 3052ce8:	dc400404 	addi	r17,sp,16
 3052cec:	2005883a 	mov	r2,r4
 3052cf0:	2807883a 	mov	r3,r5
 3052cf4:	dc000e15 	stw	r16,56(sp)
 3052cf8:	d809883a 	mov	r4,sp
 3052cfc:	880b883a 	mov	r5,r17
 3052d00:	dc000904 	addi	r16,sp,36
 3052d04:	d8c00115 	stw	r3,4(sp)
 3052d08:	d8800015 	stw	r2,0(sp)
 3052d0c:	d9800215 	stw	r6,8(sp)
 3052d10:	dfc01015 	stw	ra,64(sp)
 3052d14:	d9c00315 	stw	r7,12(sp)
 3052d18:	3049e840 	call	3049e84 <__unpack_d>
 3052d1c:	d9000204 	addi	r4,sp,8
 3052d20:	800b883a 	mov	r5,r16
 3052d24:	3049e840 	call	3049e84 <__unpack_d>
 3052d28:	d8800417 	ldw	r2,16(sp)
 3052d2c:	00c00044 	movi	r3,1
 3052d30:	180d883a 	mov	r6,r3
 3052d34:	1880062e 	bgeu	r3,r2,3052d50 <__ltdf2+0x70>
 3052d38:	d8800917 	ldw	r2,36(sp)
 3052d3c:	8809883a 	mov	r4,r17
 3052d40:	800b883a 	mov	r5,r16
 3052d44:	1880022e 	bgeu	r3,r2,3052d50 <__ltdf2+0x70>
 3052d48:	30530d80 	call	30530d8 <__fpcmp_parts_d>
 3052d4c:	100d883a 	mov	r6,r2
 3052d50:	3005883a 	mov	r2,r6
 3052d54:	dfc01017 	ldw	ra,64(sp)
 3052d58:	dc400f17 	ldw	r17,60(sp)
 3052d5c:	dc000e17 	ldw	r16,56(sp)
 3052d60:	dec01104 	addi	sp,sp,68
 3052d64:	f800283a 	ret

03052d68 <__floatsidf>:
 3052d68:	2006d7fa 	srli	r3,r4,31
 3052d6c:	defff604 	addi	sp,sp,-40
 3052d70:	008000c4 	movi	r2,3
 3052d74:	dfc00915 	stw	ra,36(sp)
 3052d78:	dcc00815 	stw	r19,32(sp)
 3052d7c:	dc800715 	stw	r18,28(sp)
 3052d80:	dc400615 	stw	r17,24(sp)
 3052d84:	dc000515 	stw	r16,20(sp)
 3052d88:	d8800015 	stw	r2,0(sp)
 3052d8c:	d8c00115 	stw	r3,4(sp)
 3052d90:	20000f1e 	bne	r4,zero,3052dd0 <__floatsidf+0x68>
 3052d94:	00800084 	movi	r2,2
 3052d98:	d8800015 	stw	r2,0(sp)
 3052d9c:	d809883a 	mov	r4,sp
 3052da0:	3049b6c0 	call	3049b6c <__pack_d>
 3052da4:	1009883a 	mov	r4,r2
 3052da8:	180b883a 	mov	r5,r3
 3052dac:	2005883a 	mov	r2,r4
 3052db0:	2807883a 	mov	r3,r5
 3052db4:	dfc00917 	ldw	ra,36(sp)
 3052db8:	dcc00817 	ldw	r19,32(sp)
 3052dbc:	dc800717 	ldw	r18,28(sp)
 3052dc0:	dc400617 	ldw	r17,24(sp)
 3052dc4:	dc000517 	ldw	r16,20(sp)
 3052dc8:	dec00a04 	addi	sp,sp,40
 3052dcc:	f800283a 	ret
 3052dd0:	00800f04 	movi	r2,60
 3052dd4:	1807003a 	cmpeq	r3,r3,zero
 3052dd8:	d8800215 	stw	r2,8(sp)
 3052ddc:	18001126 	beq	r3,zero,3052e24 <__floatsidf+0xbc>
 3052de0:	0027883a 	mov	r19,zero
 3052de4:	2025883a 	mov	r18,r4
 3052de8:	d9000315 	stw	r4,12(sp)
 3052dec:	dcc00415 	stw	r19,16(sp)
 3052df0:	30498980 	call	3049898 <__clzsi2>
 3052df4:	11000744 	addi	r4,r2,29
 3052df8:	013fe80e 	bge	zero,r4,3052d9c <__floatsidf+0x34>
 3052dfc:	10bfff44 	addi	r2,r2,-3
 3052e00:	10000d16 	blt	r2,zero,3052e38 <__floatsidf+0xd0>
 3052e04:	90a2983a 	sll	r17,r18,r2
 3052e08:	0021883a 	mov	r16,zero
 3052e0c:	d8800217 	ldw	r2,8(sp)
 3052e10:	dc400415 	stw	r17,16(sp)
 3052e14:	dc000315 	stw	r16,12(sp)
 3052e18:	1105c83a 	sub	r2,r2,r4
 3052e1c:	d8800215 	stw	r2,8(sp)
 3052e20:	003fde06 	br	3052d9c <__floatsidf+0x34>
 3052e24:	00a00034 	movhi	r2,32768
 3052e28:	10800004 	addi	r2,r2,0
 3052e2c:	20800a26 	beq	r4,r2,3052e58 <__floatsidf+0xf0>
 3052e30:	0109c83a 	sub	r4,zero,r4
 3052e34:	003fea06 	br	3052de0 <__floatsidf+0x78>
 3052e38:	9006d07a 	srli	r3,r18,1
 3052e3c:	008007c4 	movi	r2,31
 3052e40:	1105c83a 	sub	r2,r2,r4
 3052e44:	1886d83a 	srl	r3,r3,r2
 3052e48:	9922983a 	sll	r17,r19,r4
 3052e4c:	9120983a 	sll	r16,r18,r4
 3052e50:	1c62b03a 	or	r17,r3,r17
 3052e54:	003fed06 	br	3052e0c <__floatsidf+0xa4>
 3052e58:	0009883a 	mov	r4,zero
 3052e5c:	01707834 	movhi	r5,49632
 3052e60:	29400004 	addi	r5,r5,0
 3052e64:	003fd106 	br	3052dac <__floatsidf+0x44>

03052e68 <__fixdfsi>:
 3052e68:	defff804 	addi	sp,sp,-32
 3052e6c:	2005883a 	mov	r2,r4
 3052e70:	2807883a 	mov	r3,r5
 3052e74:	d809883a 	mov	r4,sp
 3052e78:	d9400204 	addi	r5,sp,8
 3052e7c:	d8c00115 	stw	r3,4(sp)
 3052e80:	d8800015 	stw	r2,0(sp)
 3052e84:	dfc00715 	stw	ra,28(sp)
 3052e88:	3049e840 	call	3049e84 <__unpack_d>
 3052e8c:	d8c00217 	ldw	r3,8(sp)
 3052e90:	00800084 	movi	r2,2
 3052e94:	1880051e 	bne	r3,r2,3052eac <__fixdfsi+0x44>
 3052e98:	0007883a 	mov	r3,zero
 3052e9c:	1805883a 	mov	r2,r3
 3052ea0:	dfc00717 	ldw	ra,28(sp)
 3052ea4:	dec00804 	addi	sp,sp,32
 3052ea8:	f800283a 	ret
 3052eac:	00800044 	movi	r2,1
 3052eb0:	10fff92e 	bgeu	r2,r3,3052e98 <__fixdfsi+0x30>
 3052eb4:	00800104 	movi	r2,4
 3052eb8:	18800426 	beq	r3,r2,3052ecc <__fixdfsi+0x64>
 3052ebc:	d8c00417 	ldw	r3,16(sp)
 3052ec0:	183ff516 	blt	r3,zero,3052e98 <__fixdfsi+0x30>
 3052ec4:	00800784 	movi	r2,30
 3052ec8:	10c0080e 	bge	r2,r3,3052eec <__fixdfsi+0x84>
 3052ecc:	d8800317 	ldw	r2,12(sp)
 3052ed0:	1000121e 	bne	r2,zero,3052f1c <__fixdfsi+0xb4>
 3052ed4:	00e00034 	movhi	r3,32768
 3052ed8:	18ffffc4 	addi	r3,r3,-1
 3052edc:	1805883a 	mov	r2,r3
 3052ee0:	dfc00717 	ldw	ra,28(sp)
 3052ee4:	dec00804 	addi	sp,sp,32
 3052ee8:	f800283a 	ret
 3052eec:	00800f04 	movi	r2,60
 3052ef0:	10d1c83a 	sub	r8,r2,r3
 3052ef4:	40bff804 	addi	r2,r8,-32
 3052ef8:	d9800517 	ldw	r6,20(sp)
 3052efc:	d9c00617 	ldw	r7,24(sp)
 3052f00:	10000916 	blt	r2,zero,3052f28 <__fixdfsi+0xc0>
 3052f04:	3888d83a 	srl	r4,r7,r2
 3052f08:	d8800317 	ldw	r2,12(sp)
 3052f0c:	2007883a 	mov	r3,r4
 3052f10:	103fe226 	beq	r2,zero,3052e9c <__fixdfsi+0x34>
 3052f14:	0107c83a 	sub	r3,zero,r4
 3052f18:	003fe006 	br	3052e9c <__fixdfsi+0x34>
 3052f1c:	00e00034 	movhi	r3,32768
 3052f20:	18c00004 	addi	r3,r3,0
 3052f24:	003fdd06 	br	3052e9c <__fixdfsi+0x34>
 3052f28:	39c7883a 	add	r3,r7,r7
 3052f2c:	008007c4 	movi	r2,31
 3052f30:	1205c83a 	sub	r2,r2,r8
 3052f34:	1886983a 	sll	r3,r3,r2
 3052f38:	3208d83a 	srl	r4,r6,r8
 3052f3c:	1908b03a 	or	r4,r3,r4
 3052f40:	003ff106 	br	3052f08 <__fixdfsi+0xa0>

03052f44 <__floatunsidf>:
 3052f44:	defff204 	addi	sp,sp,-56
 3052f48:	dfc00d15 	stw	ra,52(sp)
 3052f4c:	ddc00c15 	stw	r23,48(sp)
 3052f50:	dd800b15 	stw	r22,44(sp)
 3052f54:	dd400a15 	stw	r21,40(sp)
 3052f58:	dd000915 	stw	r20,36(sp)
 3052f5c:	dcc00815 	stw	r19,32(sp)
 3052f60:	dc800715 	stw	r18,28(sp)
 3052f64:	dc400615 	stw	r17,24(sp)
 3052f68:	dc000515 	stw	r16,20(sp)
 3052f6c:	d8000115 	stw	zero,4(sp)
 3052f70:	20000f1e 	bne	r4,zero,3052fb0 <__floatunsidf+0x6c>
 3052f74:	00800084 	movi	r2,2
 3052f78:	d8800015 	stw	r2,0(sp)
 3052f7c:	d809883a 	mov	r4,sp
 3052f80:	3049b6c0 	call	3049b6c <__pack_d>
 3052f84:	dfc00d17 	ldw	ra,52(sp)
 3052f88:	ddc00c17 	ldw	r23,48(sp)
 3052f8c:	dd800b17 	ldw	r22,44(sp)
 3052f90:	dd400a17 	ldw	r21,40(sp)
 3052f94:	dd000917 	ldw	r20,36(sp)
 3052f98:	dcc00817 	ldw	r19,32(sp)
 3052f9c:	dc800717 	ldw	r18,28(sp)
 3052fa0:	dc400617 	ldw	r17,24(sp)
 3052fa4:	dc000517 	ldw	r16,20(sp)
 3052fa8:	dec00e04 	addi	sp,sp,56
 3052fac:	f800283a 	ret
 3052fb0:	008000c4 	movi	r2,3
 3052fb4:	00c00f04 	movi	r3,60
 3052fb8:	002f883a 	mov	r23,zero
 3052fbc:	202d883a 	mov	r22,r4
 3052fc0:	d8800015 	stw	r2,0(sp)
 3052fc4:	d8c00215 	stw	r3,8(sp)
 3052fc8:	d9000315 	stw	r4,12(sp)
 3052fcc:	ddc00415 	stw	r23,16(sp)
 3052fd0:	30498980 	call	3049898 <__clzsi2>
 3052fd4:	12400744 	addi	r9,r2,29
 3052fd8:	48000b16 	blt	r9,zero,3053008 <__floatunsidf+0xc4>
 3052fdc:	483fe726 	beq	r9,zero,3052f7c <__floatunsidf+0x38>
 3052fe0:	10bfff44 	addi	r2,r2,-3
 3052fe4:	10002e16 	blt	r2,zero,30530a0 <__floatunsidf+0x15c>
 3052fe8:	b0a2983a 	sll	r17,r22,r2
 3052fec:	0021883a 	mov	r16,zero
 3052ff0:	d8800217 	ldw	r2,8(sp)
 3052ff4:	dc400415 	stw	r17,16(sp)
 3052ff8:	dc000315 	stw	r16,12(sp)
 3052ffc:	1245c83a 	sub	r2,r2,r9
 3053000:	d8800215 	stw	r2,8(sp)
 3053004:	003fdd06 	br	3052f7c <__floatunsidf+0x38>
 3053008:	0255c83a 	sub	r10,zero,r9
 305300c:	51bff804 	addi	r6,r10,-32
 3053010:	30001b16 	blt	r6,zero,3053080 <__floatunsidf+0x13c>
 3053014:	b9a8d83a 	srl	r20,r23,r6
 3053018:	002b883a 	mov	r21,zero
 305301c:	000f883a 	mov	r7,zero
 3053020:	01000044 	movi	r4,1
 3053024:	0011883a 	mov	r8,zero
 3053028:	30002516 	blt	r6,zero,30530c0 <__floatunsidf+0x17c>
 305302c:	21a6983a 	sll	r19,r4,r6
 3053030:	0025883a 	mov	r18,zero
 3053034:	00bfffc4 	movi	r2,-1
 3053038:	9089883a 	add	r4,r18,r2
 305303c:	988b883a 	add	r5,r19,r2
 3053040:	248d803a 	cmpltu	r6,r4,r18
 3053044:	314b883a 	add	r5,r6,r5
 3053048:	b104703a 	and	r2,r22,r4
 305304c:	b946703a 	and	r3,r23,r5
 3053050:	10c4b03a 	or	r2,r2,r3
 3053054:	10000226 	beq	r2,zero,3053060 <__floatunsidf+0x11c>
 3053058:	01c00044 	movi	r7,1
 305305c:	0011883a 	mov	r8,zero
 3053060:	d9000217 	ldw	r4,8(sp)
 3053064:	a1c4b03a 	or	r2,r20,r7
 3053068:	aa06b03a 	or	r3,r21,r8
 305306c:	2249c83a 	sub	r4,r4,r9
 3053070:	d8c00415 	stw	r3,16(sp)
 3053074:	d9000215 	stw	r4,8(sp)
 3053078:	d8800315 	stw	r2,12(sp)
 305307c:	003fbf06 	br	3052f7c <__floatunsidf+0x38>
 3053080:	bdc7883a 	add	r3,r23,r23
 3053084:	008007c4 	movi	r2,31
 3053088:	1285c83a 	sub	r2,r2,r10
 305308c:	1886983a 	sll	r3,r3,r2
 3053090:	b2a8d83a 	srl	r20,r22,r10
 3053094:	baaad83a 	srl	r21,r23,r10
 3053098:	1d28b03a 	or	r20,r3,r20
 305309c:	003fdf06 	br	305301c <__floatunsidf+0xd8>
 30530a0:	b006d07a 	srli	r3,r22,1
 30530a4:	008007c4 	movi	r2,31
 30530a8:	1245c83a 	sub	r2,r2,r9
 30530ac:	1886d83a 	srl	r3,r3,r2
 30530b0:	ba62983a 	sll	r17,r23,r9
 30530b4:	b260983a 	sll	r16,r22,r9
 30530b8:	1c62b03a 	or	r17,r3,r17
 30530bc:	003fcc06 	br	3052ff0 <__floatunsidf+0xac>
 30530c0:	2006d07a 	srli	r3,r4,1
 30530c4:	008007c4 	movi	r2,31
 30530c8:	1285c83a 	sub	r2,r2,r10
 30530cc:	18a6d83a 	srl	r19,r3,r2
 30530d0:	22a4983a 	sll	r18,r4,r10
 30530d4:	003fd706 	br	3053034 <__floatunsidf+0xf0>

030530d8 <__fpcmp_parts_d>:
 30530d8:	21800017 	ldw	r6,0(r4)
 30530dc:	00c00044 	movi	r3,1
 30530e0:	19800a2e 	bgeu	r3,r6,305310c <__fpcmp_parts_d+0x34>
 30530e4:	28800017 	ldw	r2,0(r5)
 30530e8:	1880082e 	bgeu	r3,r2,305310c <__fpcmp_parts_d+0x34>
 30530ec:	00c00104 	movi	r3,4
 30530f0:	30c02626 	beq	r6,r3,305318c <__fpcmp_parts_d+0xb4>
 30530f4:	10c02226 	beq	r2,r3,3053180 <__fpcmp_parts_d+0xa8>
 30530f8:	00c00084 	movi	r3,2
 30530fc:	30c00526 	beq	r6,r3,3053114 <__fpcmp_parts_d+0x3c>
 3053100:	10c0071e 	bne	r2,r3,3053120 <__fpcmp_parts_d+0x48>
 3053104:	20800117 	ldw	r2,4(r4)
 3053108:	1000091e 	bne	r2,zero,3053130 <__fpcmp_parts_d+0x58>
 305310c:	00800044 	movi	r2,1
 3053110:	f800283a 	ret
 3053114:	10c01a1e 	bne	r2,r3,3053180 <__fpcmp_parts_d+0xa8>
 3053118:	0005883a 	mov	r2,zero
 305311c:	f800283a 	ret
 3053120:	22000117 	ldw	r8,4(r4)
 3053124:	28800117 	ldw	r2,4(r5)
 3053128:	40800326 	beq	r8,r2,3053138 <__fpcmp_parts_d+0x60>
 305312c:	403ff726 	beq	r8,zero,305310c <__fpcmp_parts_d+0x34>
 3053130:	00bfffc4 	movi	r2,-1
 3053134:	f800283a 	ret
 3053138:	20c00217 	ldw	r3,8(r4)
 305313c:	28800217 	ldw	r2,8(r5)
 3053140:	10fffa16 	blt	r2,r3,305312c <__fpcmp_parts_d+0x54>
 3053144:	18800916 	blt	r3,r2,305316c <__fpcmp_parts_d+0x94>
 3053148:	21c00417 	ldw	r7,16(r4)
 305314c:	28c00417 	ldw	r3,16(r5)
 3053150:	21800317 	ldw	r6,12(r4)
 3053154:	28800317 	ldw	r2,12(r5)
 3053158:	19fff436 	bltu	r3,r7,305312c <__fpcmp_parts_d+0x54>
 305315c:	38c00526 	beq	r7,r3,3053174 <__fpcmp_parts_d+0x9c>
 3053160:	38c00236 	bltu	r7,r3,305316c <__fpcmp_parts_d+0x94>
 3053164:	19ffec1e 	bne	r3,r7,3053118 <__fpcmp_parts_d+0x40>
 3053168:	30bfeb2e 	bgeu	r6,r2,3053118 <__fpcmp_parts_d+0x40>
 305316c:	403fe71e 	bne	r8,zero,305310c <__fpcmp_parts_d+0x34>
 3053170:	003fef06 	br	3053130 <__fpcmp_parts_d+0x58>
 3053174:	11bffa2e 	bgeu	r2,r6,3053160 <__fpcmp_parts_d+0x88>
 3053178:	403fe426 	beq	r8,zero,305310c <__fpcmp_parts_d+0x34>
 305317c:	003fec06 	br	3053130 <__fpcmp_parts_d+0x58>
 3053180:	28800117 	ldw	r2,4(r5)
 3053184:	103fe11e 	bne	r2,zero,305310c <__fpcmp_parts_d+0x34>
 3053188:	003fe906 	br	3053130 <__fpcmp_parts_d+0x58>
 305318c:	11bfdd1e 	bne	r2,r6,3053104 <__fpcmp_parts_d+0x2c>
 3053190:	28c00117 	ldw	r3,4(r5)
 3053194:	20800117 	ldw	r2,4(r4)
 3053198:	1885c83a 	sub	r2,r3,r2
 305319c:	f800283a 	ret

030531a0 <close>:
 30531a0:	defff804 	addi	sp,sp,-32
 30531a4:	dfc00715 	stw	ra,28(sp)
 30531a8:	df000615 	stw	fp,24(sp)
 30531ac:	df000604 	addi	fp,sp,24
 30531b0:	e13ffa15 	stw	r4,-24(fp)
 30531b4:	e0bffa17 	ldw	r2,-24(fp)
 30531b8:	1004803a 	cmplt	r2,r2,zero
 30531bc:	1000091e 	bne	r2,zero,30531e4 <close+0x44>
 30531c0:	e0bffa17 	ldw	r2,-24(fp)
 30531c4:	10800324 	muli	r2,r2,12
 30531c8:	e0bffe15 	stw	r2,-8(fp)
 30531cc:	0080c1b4 	movhi	r2,774
 30531d0:	10ad5e04 	addi	r2,r2,-19080
 30531d4:	e0fffe17 	ldw	r3,-8(fp)
 30531d8:	1887883a 	add	r3,r3,r2
 30531dc:	e0fffe15 	stw	r3,-8(fp)
 30531e0:	00000106 	br	30531e8 <close+0x48>
 30531e4:	e03ffe15 	stw	zero,-8(fp)
 30531e8:	e0bffe17 	ldw	r2,-8(fp)
 30531ec:	e0bffb15 	stw	r2,-20(fp)
 30531f0:	e0bffb17 	ldw	r2,-20(fp)
 30531f4:	1005003a 	cmpeq	r2,r2,zero
 30531f8:	10001d1e 	bne	r2,zero,3053270 <close+0xd0>
 30531fc:	e0bffb17 	ldw	r2,-20(fp)
 3053200:	10800017 	ldw	r2,0(r2)
 3053204:	10800417 	ldw	r2,16(r2)
 3053208:	1005003a 	cmpeq	r2,r2,zero
 305320c:	1000071e 	bne	r2,zero,305322c <close+0x8c>
 3053210:	e0bffb17 	ldw	r2,-20(fp)
 3053214:	10800017 	ldw	r2,0(r2)
 3053218:	10800417 	ldw	r2,16(r2)
 305321c:	e13ffb17 	ldw	r4,-20(fp)
 3053220:	103ee83a 	callr	r2
 3053224:	e0bfff15 	stw	r2,-4(fp)
 3053228:	00000106 	br	3053230 <close+0x90>
 305322c:	e03fff15 	stw	zero,-4(fp)
 3053230:	e0ffff17 	ldw	r3,-4(fp)
 3053234:	e0fffc15 	stw	r3,-16(fp)
 3053238:	e13ffa17 	ldw	r4,-24(fp)
 305323c:	3053d900 	call	3053d90 <alt_release_fd>
 3053240:	e0bffc17 	ldw	r2,-16(fp)
 3053244:	1004403a 	cmpge	r2,r2,zero
 3053248:	1000071e 	bne	r2,zero,3053268 <close+0xc8>
 305324c:	305329c0 	call	305329c <alt_get_errno>
 3053250:	e0fffc17 	ldw	r3,-16(fp)
 3053254:	00c7c83a 	sub	r3,zero,r3
 3053258:	10c00015 	stw	r3,0(r2)
 305325c:	00bfffc4 	movi	r2,-1
 3053260:	e0bffd15 	stw	r2,-12(fp)
 3053264:	00000806 	br	3053288 <close+0xe8>
 3053268:	e03ffd15 	stw	zero,-12(fp)
 305326c:	00000606 	br	3053288 <close+0xe8>
 3053270:	305329c0 	call	305329c <alt_get_errno>
 3053274:	1007883a 	mov	r3,r2
 3053278:	00801444 	movi	r2,81
 305327c:	18800015 	stw	r2,0(r3)
 3053280:	00ffffc4 	movi	r3,-1
 3053284:	e0fffd15 	stw	r3,-12(fp)
 3053288:	e0bffd17 	ldw	r2,-12(fp)
 305328c:	dfc00717 	ldw	ra,28(sp)
 3053290:	df000617 	ldw	fp,24(sp)
 3053294:	dec00804 	addi	sp,sp,32
 3053298:	f800283a 	ret

0305329c <alt_get_errno>:
 305329c:	defffd04 	addi	sp,sp,-12
 30532a0:	dfc00215 	stw	ra,8(sp)
 30532a4:	df000115 	stw	fp,4(sp)
 30532a8:	df000104 	addi	fp,sp,4
 30532ac:	d0a00f17 	ldw	r2,-32708(gp)
 30532b0:	1005003a 	cmpeq	r2,r2,zero
 30532b4:	1000041e 	bne	r2,zero,30532c8 <alt_get_errno+0x2c>
 30532b8:	d0a00f17 	ldw	r2,-32708(gp)
 30532bc:	103ee83a 	callr	r2
 30532c0:	e0bfff15 	stw	r2,-4(fp)
 30532c4:	00000206 	br	30532d0 <alt_get_errno+0x34>
 30532c8:	d0a77a04 	addi	r2,gp,-25112
 30532cc:	e0bfff15 	stw	r2,-4(fp)
 30532d0:	e0bfff17 	ldw	r2,-4(fp)
 30532d4:	dfc00217 	ldw	ra,8(sp)
 30532d8:	df000117 	ldw	fp,4(sp)
 30532dc:	dec00304 	addi	sp,sp,12
 30532e0:	f800283a 	ret

030532e4 <alt_dev_null_write>:
 30532e4:	defffc04 	addi	sp,sp,-16
 30532e8:	df000315 	stw	fp,12(sp)
 30532ec:	df000304 	addi	fp,sp,12
 30532f0:	e13ffd15 	stw	r4,-12(fp)
 30532f4:	e17ffe15 	stw	r5,-8(fp)
 30532f8:	e1bfff15 	stw	r6,-4(fp)
 30532fc:	e0bfff17 	ldw	r2,-4(fp)
 3053300:	df000317 	ldw	fp,12(sp)
 3053304:	dec00404 	addi	sp,sp,16
 3053308:	f800283a 	ret

0305330c <fstat>:
 305330c:	defff904 	addi	sp,sp,-28
 3053310:	dfc00615 	stw	ra,24(sp)
 3053314:	df000515 	stw	fp,20(sp)
 3053318:	df000504 	addi	fp,sp,20
 305331c:	e13ffb15 	stw	r4,-20(fp)
 3053320:	e17ffc15 	stw	r5,-16(fp)
 3053324:	e0bffb17 	ldw	r2,-20(fp)
 3053328:	1004803a 	cmplt	r2,r2,zero
 305332c:	1000091e 	bne	r2,zero,3053354 <fstat+0x48>
 3053330:	e0bffb17 	ldw	r2,-20(fp)
 3053334:	10800324 	muli	r2,r2,12
 3053338:	e0bfff15 	stw	r2,-4(fp)
 305333c:	0080c1b4 	movhi	r2,774
 3053340:	10ad5e04 	addi	r2,r2,-19080
 3053344:	e0ffff17 	ldw	r3,-4(fp)
 3053348:	1887883a 	add	r3,r3,r2
 305334c:	e0ffff15 	stw	r3,-4(fp)
 3053350:	00000106 	br	3053358 <fstat+0x4c>
 3053354:	e03fff15 	stw	zero,-4(fp)
 3053358:	e0bfff17 	ldw	r2,-4(fp)
 305335c:	e0bffd15 	stw	r2,-12(fp)
 3053360:	e0bffd17 	ldw	r2,-12(fp)
 3053364:	1005003a 	cmpeq	r2,r2,zero
 3053368:	1000121e 	bne	r2,zero,30533b4 <fstat+0xa8>
 305336c:	e0bffd17 	ldw	r2,-12(fp)
 3053370:	10800017 	ldw	r2,0(r2)
 3053374:	10800817 	ldw	r2,32(r2)
 3053378:	1005003a 	cmpeq	r2,r2,zero
 305337c:	1000081e 	bne	r2,zero,30533a0 <fstat+0x94>
 3053380:	e0bffd17 	ldw	r2,-12(fp)
 3053384:	10800017 	ldw	r2,0(r2)
 3053388:	10800817 	ldw	r2,32(r2)
 305338c:	e13ffd17 	ldw	r4,-12(fp)
 3053390:	e17ffc17 	ldw	r5,-16(fp)
 3053394:	103ee83a 	callr	r2
 3053398:	e0bffe15 	stw	r2,-8(fp)
 305339c:	00000b06 	br	30533cc <fstat+0xc0>
 30533a0:	e0fffc17 	ldw	r3,-16(fp)
 30533a4:	00880004 	movi	r2,8192
 30533a8:	18800115 	stw	r2,4(r3)
 30533ac:	e03ffe15 	stw	zero,-8(fp)
 30533b0:	00000606 	br	30533cc <fstat+0xc0>
 30533b4:	30533e00 	call	30533e0 <alt_get_errno>
 30533b8:	1007883a 	mov	r3,r2
 30533bc:	00801444 	movi	r2,81
 30533c0:	18800015 	stw	r2,0(r3)
 30533c4:	00ffffc4 	movi	r3,-1
 30533c8:	e0fffe15 	stw	r3,-8(fp)
 30533cc:	e0bffe17 	ldw	r2,-8(fp)
 30533d0:	dfc00617 	ldw	ra,24(sp)
 30533d4:	df000517 	ldw	fp,20(sp)
 30533d8:	dec00704 	addi	sp,sp,28
 30533dc:	f800283a 	ret

030533e0 <alt_get_errno>:
 30533e0:	defffd04 	addi	sp,sp,-12
 30533e4:	dfc00215 	stw	ra,8(sp)
 30533e8:	df000115 	stw	fp,4(sp)
 30533ec:	df000104 	addi	fp,sp,4
 30533f0:	d0a00f17 	ldw	r2,-32708(gp)
 30533f4:	1005003a 	cmpeq	r2,r2,zero
 30533f8:	1000041e 	bne	r2,zero,305340c <alt_get_errno+0x2c>
 30533fc:	d0a00f17 	ldw	r2,-32708(gp)
 3053400:	103ee83a 	callr	r2
 3053404:	e0bfff15 	stw	r2,-4(fp)
 3053408:	00000206 	br	3053414 <alt_get_errno+0x34>
 305340c:	d0a77a04 	addi	r2,gp,-25112
 3053410:	e0bfff15 	stw	r2,-4(fp)
 3053414:	e0bfff17 	ldw	r2,-4(fp)
 3053418:	dfc00217 	ldw	ra,8(sp)
 305341c:	df000117 	ldw	fp,4(sp)
 3053420:	dec00304 	addi	sp,sp,12
 3053424:	f800283a 	ret

03053428 <alt_irq_register>:
 3053428:	defff304 	addi	sp,sp,-52
 305342c:	df000c15 	stw	fp,48(sp)
 3053430:	df000c04 	addi	fp,sp,48
 3053434:	e13ff415 	stw	r4,-48(fp)
 3053438:	e17ff515 	stw	r5,-44(fp)
 305343c:	e1bff615 	stw	r6,-40(fp)
 3053440:	00bffa84 	movi	r2,-22
 3053444:	e0bff715 	stw	r2,-36(fp)
 3053448:	e0bff417 	ldw	r2,-48(fp)
 305344c:	10800828 	cmpgeui	r2,r2,32
 3053450:	10005a1e 	bne	r2,zero,30535bc <alt_irq_register+0x194>
 3053454:	0005303a 	rdctl	r2,status
 3053458:	e0bffa15 	stw	r2,-24(fp)
 305345c:	e0fffa17 	ldw	r3,-24(fp)
 3053460:	00bfff84 	movi	r2,-2
 3053464:	1884703a 	and	r2,r3,r2
 3053468:	1001703a 	wrctl	status,r2
 305346c:	e0bffa17 	ldw	r2,-24(fp)
 3053470:	e0bff915 	stw	r2,-28(fp)
 3053474:	e0bff917 	ldw	r2,-28(fp)
 3053478:	e0bff815 	stw	r2,-32(fp)
 305347c:	00c0c1b4 	movhi	r3,774
 3053480:	18feb804 	addi	r3,r3,-1312
 3053484:	e0bff417 	ldw	r2,-48(fp)
 3053488:	10800224 	muli	r2,r2,8
 305348c:	10c7883a 	add	r3,r2,r3
 3053490:	e0bff617 	ldw	r2,-40(fp)
 3053494:	18800015 	stw	r2,0(r3)
 3053498:	00c0c1b4 	movhi	r3,774
 305349c:	18feb804 	addi	r3,r3,-1312
 30534a0:	e0bff417 	ldw	r2,-48(fp)
 30534a4:	10800224 	muli	r2,r2,8
 30534a8:	10c5883a 	add	r2,r2,r3
 30534ac:	10c00104 	addi	r3,r2,4
 30534b0:	e0bff517 	ldw	r2,-44(fp)
 30534b4:	18800015 	stw	r2,0(r3)
 30534b8:	e0bff617 	ldw	r2,-40(fp)
 30534bc:	1005003a 	cmpeq	r2,r2,zero
 30534c0:	10001c1e 	bne	r2,zero,3053534 <alt_irq_register+0x10c>
 30534c4:	e0bff417 	ldw	r2,-48(fp)
 30534c8:	e0bffa15 	stw	r2,-24(fp)
 30534cc:	0005303a 	rdctl	r2,status
 30534d0:	e0bffd15 	stw	r2,-12(fp)
 30534d4:	e0fffd17 	ldw	r3,-12(fp)
 30534d8:	00bfff84 	movi	r2,-2
 30534dc:	1884703a 	and	r2,r3,r2
 30534e0:	1001703a 	wrctl	status,r2
 30534e4:	e0bffd17 	ldw	r2,-12(fp)
 30534e8:	e0bffc15 	stw	r2,-16(fp)
 30534ec:	e0bffc17 	ldw	r2,-16(fp)
 30534f0:	e0bffb15 	stw	r2,-20(fp)
 30534f4:	00c00044 	movi	r3,1
 30534f8:	e0bffa17 	ldw	r2,-24(fp)
 30534fc:	1886983a 	sll	r3,r3,r2
 3053500:	d0a01017 	ldw	r2,-32704(gp)
 3053504:	10c4b03a 	or	r2,r2,r3
 3053508:	d0a01015 	stw	r2,-32704(gp)
 305350c:	d0a01017 	ldw	r2,-32704(gp)
 3053510:	100170fa 	wrctl	ienable,r2
 3053514:	e0bffb17 	ldw	r2,-20(fp)
 3053518:	e0bffd15 	stw	r2,-12(fp)
 305351c:	e0bffd17 	ldw	r2,-12(fp)
 3053520:	1001703a 	wrctl	status,r2
 3053524:	e03ff915 	stw	zero,-28(fp)
 3053528:	e0bff917 	ldw	r2,-28(fp)
 305352c:	e0bfff15 	stw	r2,-4(fp)
 3053530:	00001c06 	br	30535a4 <alt_irq_register+0x17c>
 3053534:	e0bff417 	ldw	r2,-48(fp)
 3053538:	e0bffd15 	stw	r2,-12(fp)
 305353c:	0005303a 	rdctl	r2,status
 3053540:	e0bffe15 	stw	r2,-8(fp)
 3053544:	e0fffe17 	ldw	r3,-8(fp)
 3053548:	00bfff84 	movi	r2,-2
 305354c:	1884703a 	and	r2,r3,r2
 3053550:	1001703a 	wrctl	status,r2
 3053554:	e0bffe17 	ldw	r2,-8(fp)
 3053558:	e0bffa15 	stw	r2,-24(fp)
 305355c:	e0bffa17 	ldw	r2,-24(fp)
 3053560:	e0bffb15 	stw	r2,-20(fp)
 3053564:	00c00044 	movi	r3,1
 3053568:	e0bffd17 	ldw	r2,-12(fp)
 305356c:	1884983a 	sll	r2,r3,r2
 3053570:	0086303a 	nor	r3,zero,r2
 3053574:	d0a01017 	ldw	r2,-32704(gp)
 3053578:	10c4703a 	and	r2,r2,r3
 305357c:	d0a01015 	stw	r2,-32704(gp)
 3053580:	d0a01017 	ldw	r2,-32704(gp)
 3053584:	100170fa 	wrctl	ienable,r2
 3053588:	e0bffb17 	ldw	r2,-20(fp)
 305358c:	e0bffe15 	stw	r2,-8(fp)
 3053590:	e0bffe17 	ldw	r2,-8(fp)
 3053594:	1001703a 	wrctl	status,r2
 3053598:	e03ffc15 	stw	zero,-16(fp)
 305359c:	e0bffc17 	ldw	r2,-16(fp)
 30535a0:	e0bfff15 	stw	r2,-4(fp)
 30535a4:	e0bfff17 	ldw	r2,-4(fp)
 30535a8:	e0bff715 	stw	r2,-36(fp)
 30535ac:	e0bff817 	ldw	r2,-32(fp)
 30535b0:	e0bffe15 	stw	r2,-8(fp)
 30535b4:	e0bffe17 	ldw	r2,-8(fp)
 30535b8:	1001703a 	wrctl	status,r2
 30535bc:	e0bff717 	ldw	r2,-36(fp)
 30535c0:	df000c17 	ldw	fp,48(sp)
 30535c4:	dec00d04 	addi	sp,sp,52
 30535c8:	f800283a 	ret

030535cc <isatty>:
 30535cc:	deffeb04 	addi	sp,sp,-84
 30535d0:	dfc01415 	stw	ra,80(sp)
 30535d4:	df001315 	stw	fp,76(sp)
 30535d8:	df001304 	addi	fp,sp,76
 30535dc:	e13fed15 	stw	r4,-76(fp)
 30535e0:	e0bfed17 	ldw	r2,-76(fp)
 30535e4:	1004803a 	cmplt	r2,r2,zero
 30535e8:	1000091e 	bne	r2,zero,3053610 <isatty+0x44>
 30535ec:	e0bfed17 	ldw	r2,-76(fp)
 30535f0:	10800324 	muli	r2,r2,12
 30535f4:	e0bfff15 	stw	r2,-4(fp)
 30535f8:	0080c1b4 	movhi	r2,774
 30535fc:	10ad5e04 	addi	r2,r2,-19080
 3053600:	e0ffff17 	ldw	r3,-4(fp)
 3053604:	1887883a 	add	r3,r3,r2
 3053608:	e0ffff15 	stw	r3,-4(fp)
 305360c:	00000106 	br	3053614 <isatty+0x48>
 3053610:	e03fff15 	stw	zero,-4(fp)
 3053614:	e0bfff17 	ldw	r2,-4(fp)
 3053618:	e0bfee15 	stw	r2,-72(fp)
 305361c:	e0bfee17 	ldw	r2,-72(fp)
 3053620:	1005003a 	cmpeq	r2,r2,zero
 3053624:	10000f1e 	bne	r2,zero,3053664 <isatty+0x98>
 3053628:	e0bfee17 	ldw	r2,-72(fp)
 305362c:	10800017 	ldw	r2,0(r2)
 3053630:	10800817 	ldw	r2,32(r2)
 3053634:	1004c03a 	cmpne	r2,r2,zero
 3053638:	1000031e 	bne	r2,zero,3053648 <isatty+0x7c>
 305363c:	00c00044 	movi	r3,1
 3053640:	e0fffe15 	stw	r3,-8(fp)
 3053644:	00000c06 	br	3053678 <isatty+0xac>
 3053648:	e17fef04 	addi	r5,fp,-68
 305364c:	e13fed17 	ldw	r4,-76(fp)
 3053650:	305330c0 	call	305330c <fstat>
 3053654:	e0bff017 	ldw	r2,-64(fp)
 3053658:	10880020 	cmpeqi	r2,r2,8192
 305365c:	e0bffe15 	stw	r2,-8(fp)
 3053660:	00000506 	br	3053678 <isatty+0xac>
 3053664:	305368c0 	call	305368c <alt_get_errno>
 3053668:	1007883a 	mov	r3,r2
 305366c:	00801444 	movi	r2,81
 3053670:	18800015 	stw	r2,0(r3)
 3053674:	e03ffe15 	stw	zero,-8(fp)
 3053678:	e0bffe17 	ldw	r2,-8(fp)
 305367c:	dfc01417 	ldw	ra,80(sp)
 3053680:	df001317 	ldw	fp,76(sp)
 3053684:	dec01504 	addi	sp,sp,84
 3053688:	f800283a 	ret

0305368c <alt_get_errno>:
 305368c:	defffd04 	addi	sp,sp,-12
 3053690:	dfc00215 	stw	ra,8(sp)
 3053694:	df000115 	stw	fp,4(sp)
 3053698:	df000104 	addi	fp,sp,4
 305369c:	d0a00f17 	ldw	r2,-32708(gp)
 30536a0:	1005003a 	cmpeq	r2,r2,zero
 30536a4:	1000041e 	bne	r2,zero,30536b8 <alt_get_errno+0x2c>
 30536a8:	d0a00f17 	ldw	r2,-32708(gp)
 30536ac:	103ee83a 	callr	r2
 30536b0:	e0bfff15 	stw	r2,-4(fp)
 30536b4:	00000206 	br	30536c0 <alt_get_errno+0x34>
 30536b8:	d0a77a04 	addi	r2,gp,-25112
 30536bc:	e0bfff15 	stw	r2,-4(fp)
 30536c0:	e0bfff17 	ldw	r2,-4(fp)
 30536c4:	dfc00217 	ldw	ra,8(sp)
 30536c8:	df000117 	ldw	fp,4(sp)
 30536cc:	dec00304 	addi	sp,sp,12
 30536d0:	f800283a 	ret

030536d4 <alt_load>:
 30536d4:	defffe04 	addi	sp,sp,-8
 30536d8:	dfc00115 	stw	ra,4(sp)
 30536dc:	df000015 	stw	fp,0(sp)
 30536e0:	d839883a 	mov	fp,sp
 30536e4:	0100c1b4 	movhi	r4,774
 30536e8:	2132a204 	addi	r4,r4,-13688
 30536ec:	0140c1b4 	movhi	r5,774
 30536f0:	296b4b04 	addi	r5,r5,-21204
 30536f4:	0180c1b4 	movhi	r6,774
 30536f8:	31b2a204 	addi	r6,r6,-13688
 30536fc:	30537500 	call	3053750 <alt_load_section>
 3053700:	0100c134 	movhi	r4,772
 3053704:	21000804 	addi	r4,r4,32
 3053708:	0140c134 	movhi	r5,772
 305370c:	29400804 	addi	r5,r5,32
 3053710:	0180c134 	movhi	r6,772
 3053714:	31807104 	addi	r6,r6,452
 3053718:	30537500 	call	3053750 <alt_load_section>
 305371c:	0100c1b4 	movhi	r4,774
 3053720:	21266e04 	addi	r4,r4,-26184
 3053724:	0140c1b4 	movhi	r5,774
 3053728:	29666e04 	addi	r5,r5,-26184
 305372c:	0180c1b4 	movhi	r6,774
 3053730:	31ab4b04 	addi	r6,r6,-21204
 3053734:	30537500 	call	3053750 <alt_load_section>
 3053738:	30583fc0 	call	30583fc <alt_dcache_flush_all>
 305373c:	30588cc0 	call	30588cc <alt_icache_flush_all>
 3053740:	dfc00117 	ldw	ra,4(sp)
 3053744:	df000017 	ldw	fp,0(sp)
 3053748:	dec00204 	addi	sp,sp,8
 305374c:	f800283a 	ret

03053750 <alt_load_section>:
 3053750:	defffc04 	addi	sp,sp,-16
 3053754:	df000315 	stw	fp,12(sp)
 3053758:	df000304 	addi	fp,sp,12
 305375c:	e13ffd15 	stw	r4,-12(fp)
 3053760:	e17ffe15 	stw	r5,-8(fp)
 3053764:	e1bfff15 	stw	r6,-4(fp)
 3053768:	e0fffe17 	ldw	r3,-8(fp)
 305376c:	e0bffd17 	ldw	r2,-12(fp)
 3053770:	18800e26 	beq	r3,r2,30537ac <alt_load_section+0x5c>
 3053774:	e0fffe17 	ldw	r3,-8(fp)
 3053778:	e0bfff17 	ldw	r2,-4(fp)
 305377c:	18800b26 	beq	r3,r2,30537ac <alt_load_section+0x5c>
 3053780:	e17ffe04 	addi	r5,fp,-8
 3053784:	28c00017 	ldw	r3,0(r5)
 3053788:	e0bffd17 	ldw	r2,-12(fp)
 305378c:	11000017 	ldw	r4,0(r2)
 3053790:	10800104 	addi	r2,r2,4
 3053794:	e0bffd15 	stw	r2,-12(fp)
 3053798:	1805883a 	mov	r2,r3
 305379c:	11000015 	stw	r4,0(r2)
 30537a0:	18c00104 	addi	r3,r3,4
 30537a4:	28c00015 	stw	r3,0(r5)
 30537a8:	003ff206 	br	3053774 <alt_load_section+0x24>
 30537ac:	df000317 	ldw	fp,12(sp)
 30537b0:	dec00404 	addi	sp,sp,16
 30537b4:	f800283a 	ret

030537b8 <lseek>:
 30537b8:	defff804 	addi	sp,sp,-32
 30537bc:	dfc00715 	stw	ra,28(sp)
 30537c0:	df000615 	stw	fp,24(sp)
 30537c4:	df000604 	addi	fp,sp,24
 30537c8:	e13ffa15 	stw	r4,-24(fp)
 30537cc:	e17ffb15 	stw	r5,-20(fp)
 30537d0:	e1bffc15 	stw	r6,-16(fp)
 30537d4:	e03ffe15 	stw	zero,-8(fp)
 30537d8:	e0bffa17 	ldw	r2,-24(fp)
 30537dc:	1004803a 	cmplt	r2,r2,zero
 30537e0:	1000091e 	bne	r2,zero,3053808 <lseek+0x50>
 30537e4:	e0bffa17 	ldw	r2,-24(fp)
 30537e8:	10800324 	muli	r2,r2,12
 30537ec:	e0bfff15 	stw	r2,-4(fp)
 30537f0:	0080c1b4 	movhi	r2,774
 30537f4:	10ad5e04 	addi	r2,r2,-19080
 30537f8:	e0ffff17 	ldw	r3,-4(fp)
 30537fc:	1887883a 	add	r3,r3,r2
 3053800:	e0ffff15 	stw	r3,-4(fp)
 3053804:	00000106 	br	305380c <lseek+0x54>
 3053808:	e03fff15 	stw	zero,-4(fp)
 305380c:	e0bfff17 	ldw	r2,-4(fp)
 3053810:	e0bffd15 	stw	r2,-12(fp)
 3053814:	e0bffd17 	ldw	r2,-12(fp)
 3053818:	1005003a 	cmpeq	r2,r2,zero
 305381c:	1000111e 	bne	r2,zero,3053864 <lseek+0xac>
 3053820:	e0bffd17 	ldw	r2,-12(fp)
 3053824:	10800017 	ldw	r2,0(r2)
 3053828:	10800717 	ldw	r2,28(r2)
 305382c:	1005003a 	cmpeq	r2,r2,zero
 3053830:	1000091e 	bne	r2,zero,3053858 <lseek+0xa0>
 3053834:	e0bffd17 	ldw	r2,-12(fp)
 3053838:	10800017 	ldw	r2,0(r2)
 305383c:	10800717 	ldw	r2,28(r2)
 3053840:	e13ffd17 	ldw	r4,-12(fp)
 3053844:	e17ffb17 	ldw	r5,-20(fp)
 3053848:	e1bffc17 	ldw	r6,-16(fp)
 305384c:	103ee83a 	callr	r2
 3053850:	e0bffe15 	stw	r2,-8(fp)
 3053854:	00000506 	br	305386c <lseek+0xb4>
 3053858:	00bfde84 	movi	r2,-134
 305385c:	e0bffe15 	stw	r2,-8(fp)
 3053860:	00000206 	br	305386c <lseek+0xb4>
 3053864:	00bfebc4 	movi	r2,-81
 3053868:	e0bffe15 	stw	r2,-8(fp)
 305386c:	e0bffe17 	ldw	r2,-8(fp)
 3053870:	1004403a 	cmpge	r2,r2,zero
 3053874:	1000071e 	bne	r2,zero,3053894 <lseek+0xdc>
 3053878:	30538a80 	call	30538a8 <alt_get_errno>
 305387c:	1007883a 	mov	r3,r2
 3053880:	e0bffe17 	ldw	r2,-8(fp)
 3053884:	0085c83a 	sub	r2,zero,r2
 3053888:	18800015 	stw	r2,0(r3)
 305388c:	00bfffc4 	movi	r2,-1
 3053890:	e0bffe15 	stw	r2,-8(fp)
 3053894:	e0bffe17 	ldw	r2,-8(fp)
 3053898:	dfc00717 	ldw	ra,28(sp)
 305389c:	df000617 	ldw	fp,24(sp)
 30538a0:	dec00804 	addi	sp,sp,32
 30538a4:	f800283a 	ret

030538a8 <alt_get_errno>:
 30538a8:	defffd04 	addi	sp,sp,-12
 30538ac:	dfc00215 	stw	ra,8(sp)
 30538b0:	df000115 	stw	fp,4(sp)
 30538b4:	df000104 	addi	fp,sp,4
 30538b8:	d0a00f17 	ldw	r2,-32708(gp)
 30538bc:	1005003a 	cmpeq	r2,r2,zero
 30538c0:	1000041e 	bne	r2,zero,30538d4 <alt_get_errno+0x2c>
 30538c4:	d0a00f17 	ldw	r2,-32708(gp)
 30538c8:	103ee83a 	callr	r2
 30538cc:	e0bfff15 	stw	r2,-4(fp)
 30538d0:	00000206 	br	30538dc <alt_get_errno+0x34>
 30538d4:	d0a77a04 	addi	r2,gp,-25112
 30538d8:	e0bfff15 	stw	r2,-4(fp)
 30538dc:	e0bfff17 	ldw	r2,-4(fp)
 30538e0:	dfc00217 	ldw	ra,8(sp)
 30538e4:	df000117 	ldw	fp,4(sp)
 30538e8:	dec00304 	addi	sp,sp,12
 30538ec:	f800283a 	ret

030538f0 <alt_main>:
 30538f0:	defffc04 	addi	sp,sp,-16
 30538f4:	dfc00315 	stw	ra,12(sp)
 30538f8:	df000215 	stw	fp,8(sp)
 30538fc:	df000204 	addi	fp,sp,8
 3053900:	0009883a 	mov	r4,zero
 3053904:	30541dc0 	call	30541dc <alt_irq_init>
 3053908:	e03fff15 	stw	zero,-4(fp)
 305390c:	305420c0 	call	305420c <alt_sys_init>
 3053910:	0100c1b4 	movhi	r4,774
 3053914:	212b3604 	addi	r4,r4,-21288
 3053918:	0140c1b4 	movhi	r5,774
 305391c:	296b3604 	addi	r5,r5,-21288
 3053920:	0180c1b4 	movhi	r6,774
 3053924:	31ab3604 	addi	r6,r6,-21288
 3053928:	3058c540 	call	3058c54 <alt_io_redirect>
 305392c:	30585340 	call	3058534 <_do_ctors>
 3053930:	0100c1b4 	movhi	r4,774
 3053934:	21216304 	addi	r4,r4,-31348
 3053938:	30595b80 	call	30595b8 <atexit>
 305393c:	d1201217 	ldw	r4,-32696(gp)
 3053940:	d1601317 	ldw	r5,-32692(gp)
 3053944:	d1a01417 	ldw	r6,-32688(gp)
 3053948:	30418140 	call	3041814 <main>
 305394c:	e0bffe15 	stw	r2,-8(fp)
 3053950:	01000044 	movi	r4,1
 3053954:	30531a00 	call	30531a0 <close>
 3053958:	e13ffe17 	ldw	r4,-8(fp)
 305395c:	30595cc0 	call	30595cc <exit>

03053960 <__malloc_lock>:
 3053960:	defffe04 	addi	sp,sp,-8
 3053964:	df000115 	stw	fp,4(sp)
 3053968:	df000104 	addi	fp,sp,4
 305396c:	e13fff15 	stw	r4,-4(fp)
 3053970:	df000117 	ldw	fp,4(sp)
 3053974:	dec00204 	addi	sp,sp,8
 3053978:	f800283a 	ret

0305397c <__malloc_unlock>:
 305397c:	defffe04 	addi	sp,sp,-8
 3053980:	df000115 	stw	fp,4(sp)
 3053984:	df000104 	addi	fp,sp,4
 3053988:	e13fff15 	stw	r4,-4(fp)
 305398c:	df000117 	ldw	fp,4(sp)
 3053990:	dec00204 	addi	sp,sp,8
 3053994:	f800283a 	ret

03053998 <alt_file_locked>:
 3053998:	defffc04 	addi	sp,sp,-16
 305399c:	df000315 	stw	fp,12(sp)
 30539a0:	df000304 	addi	fp,sp,12
 30539a4:	e13ffd15 	stw	r4,-12(fp)
 30539a8:	e0fffd17 	ldw	r3,-12(fp)
 30539ac:	e0bffd17 	ldw	r2,-12(fp)
 30539b0:	10800217 	ldw	r2,8(r2)
 30539b4:	10900034 	orhi	r2,r2,16384
 30539b8:	18800215 	stw	r2,8(r3)
 30539bc:	e03ffe15 	stw	zero,-8(fp)
 30539c0:	d0e00e17 	ldw	r3,-32712(gp)
 30539c4:	e0bffe17 	ldw	r2,-8(fp)
 30539c8:	18802036 	bltu	r3,r2,3053a4c <alt_file_locked+0xb4>
 30539cc:	00c0c1b4 	movhi	r3,774
 30539d0:	18ed5e04 	addi	r3,r3,-19080
 30539d4:	e0bffe17 	ldw	r2,-8(fp)
 30539d8:	10800324 	muli	r2,r2,12
 30539dc:	10c5883a 	add	r2,r2,r3
 30539e0:	e0fffd17 	ldw	r3,-12(fp)
 30539e4:	11000017 	ldw	r4,0(r2)
 30539e8:	18800017 	ldw	r2,0(r3)
 30539ec:	2080131e 	bne	r4,r2,3053a3c <alt_file_locked+0xa4>
 30539f0:	00c0c1b4 	movhi	r3,774
 30539f4:	18ed5e04 	addi	r3,r3,-19080
 30539f8:	e0bffe17 	ldw	r2,-8(fp)
 30539fc:	10800324 	muli	r2,r2,12
 3053a00:	10c5883a 	add	r2,r2,r3
 3053a04:	10800204 	addi	r2,r2,8
 3053a08:	10800017 	ldw	r2,0(r2)
 3053a0c:	1004403a 	cmpge	r2,r2,zero
 3053a10:	10000a1e 	bne	r2,zero,3053a3c <alt_file_locked+0xa4>
 3053a14:	e0bffe17 	ldw	r2,-8(fp)
 3053a18:	10c00324 	muli	r3,r2,12
 3053a1c:	0080c1b4 	movhi	r2,774
 3053a20:	10ad5e04 	addi	r2,r2,-19080
 3053a24:	1887883a 	add	r3,r3,r2
 3053a28:	e0bffd17 	ldw	r2,-12(fp)
 3053a2c:	18800326 	beq	r3,r2,3053a3c <alt_file_locked+0xa4>
 3053a30:	00bffcc4 	movi	r2,-13
 3053a34:	e0bfff15 	stw	r2,-4(fp)
 3053a38:	00000506 	br	3053a50 <alt_file_locked+0xb8>
 3053a3c:	e0bffe17 	ldw	r2,-8(fp)
 3053a40:	10800044 	addi	r2,r2,1
 3053a44:	e0bffe15 	stw	r2,-8(fp)
 3053a48:	003fdd06 	br	30539c0 <alt_file_locked+0x28>
 3053a4c:	e03fff15 	stw	zero,-4(fp)
 3053a50:	e0bfff17 	ldw	r2,-4(fp)
 3053a54:	df000317 	ldw	fp,12(sp)
 3053a58:	dec00404 	addi	sp,sp,16
 3053a5c:	f800283a 	ret

03053a60 <open>:
 3053a60:	defff404 	addi	sp,sp,-48
 3053a64:	dfc00b15 	stw	ra,44(sp)
 3053a68:	df000a15 	stw	fp,40(sp)
 3053a6c:	df000a04 	addi	fp,sp,40
 3053a70:	e13ff615 	stw	r4,-40(fp)
 3053a74:	e17ff715 	stw	r5,-36(fp)
 3053a78:	e1bff815 	stw	r6,-32(fp)
 3053a7c:	00bfffc4 	movi	r2,-1
 3053a80:	e0bffb15 	stw	r2,-20(fp)
 3053a84:	00bffb44 	movi	r2,-19
 3053a88:	e0bffc15 	stw	r2,-16(fp)
 3053a8c:	e03ffd15 	stw	zero,-12(fp)
 3053a90:	e13ff617 	ldw	r4,-40(fp)
 3053a94:	d1600c04 	addi	r5,gp,-32720
 3053a98:	30585e40 	call	30585e4 <alt_find_dev>
 3053a9c:	e0bff915 	stw	r2,-28(fp)
 3053aa0:	e0bff917 	ldw	r2,-28(fp)
 3053aa4:	1004c03a 	cmpne	r2,r2,zero
 3053aa8:	1000051e 	bne	r2,zero,3053ac0 <open+0x60>
 3053aac:	e13ff617 	ldw	r4,-40(fp)
 3053ab0:	30586740 	call	3058674 <alt_find_file>
 3053ab4:	e0bff915 	stw	r2,-28(fp)
 3053ab8:	00800044 	movi	r2,1
 3053abc:	e0bffd15 	stw	r2,-12(fp)
 3053ac0:	e0bff917 	ldw	r2,-28(fp)
 3053ac4:	1005003a 	cmpeq	r2,r2,zero
 3053ac8:	1000301e 	bne	r2,zero,3053b8c <open+0x12c>
 3053acc:	e13ff917 	ldw	r4,-28(fp)
 3053ad0:	30588200 	call	3058820 <alt_get_fd>
 3053ad4:	e0bffb15 	stw	r2,-20(fp)
 3053ad8:	e0bffb17 	ldw	r2,-20(fp)
 3053adc:	1004403a 	cmpge	r2,r2,zero
 3053ae0:	1000031e 	bne	r2,zero,3053af0 <open+0x90>
 3053ae4:	e0bffb17 	ldw	r2,-20(fp)
 3053ae8:	e0bffc15 	stw	r2,-16(fp)
 3053aec:	00002906 	br	3053b94 <open+0x134>
 3053af0:	e0bffb17 	ldw	r2,-20(fp)
 3053af4:	10c00324 	muli	r3,r2,12
 3053af8:	0080c1b4 	movhi	r2,774
 3053afc:	10ad5e04 	addi	r2,r2,-19080
 3053b00:	1885883a 	add	r2,r3,r2
 3053b04:	e0bffa15 	stw	r2,-24(fp)
 3053b08:	e13ffa17 	ldw	r4,-24(fp)
 3053b0c:	e0fff717 	ldw	r3,-36(fp)
 3053b10:	00900034 	movhi	r2,16384
 3053b14:	10bfffc4 	addi	r2,r2,-1
 3053b18:	1884703a 	and	r2,r3,r2
 3053b1c:	20800215 	stw	r2,8(r4)
 3053b20:	e0bffd17 	ldw	r2,-12(fp)
 3053b24:	1004c03a 	cmpne	r2,r2,zero
 3053b28:	1000071e 	bne	r2,zero,3053b48 <open+0xe8>
 3053b2c:	e13ffa17 	ldw	r4,-24(fp)
 3053b30:	30539980 	call	3053998 <alt_file_locked>
 3053b34:	e0bffc15 	stw	r2,-16(fp)
 3053b38:	e0bffc17 	ldw	r2,-16(fp)
 3053b3c:	1004403a 	cmpge	r2,r2,zero
 3053b40:	1000011e 	bne	r2,zero,3053b48 <open+0xe8>
 3053b44:	00001306 	br	3053b94 <open+0x134>
 3053b48:	e0bff917 	ldw	r2,-28(fp)
 3053b4c:	10800317 	ldw	r2,12(r2)
 3053b50:	1005003a 	cmpeq	r2,r2,zero
 3053b54:	1000091e 	bne	r2,zero,3053b7c <open+0x11c>
 3053b58:	e0bff917 	ldw	r2,-28(fp)
 3053b5c:	10800317 	ldw	r2,12(r2)
 3053b60:	e13ffa17 	ldw	r4,-24(fp)
 3053b64:	e17ff617 	ldw	r5,-40(fp)
 3053b68:	e1bff717 	ldw	r6,-36(fp)
 3053b6c:	e1fff817 	ldw	r7,-32(fp)
 3053b70:	103ee83a 	callr	r2
 3053b74:	e0bfff15 	stw	r2,-4(fp)
 3053b78:	00000106 	br	3053b80 <open+0x120>
 3053b7c:	e03fff15 	stw	zero,-4(fp)
 3053b80:	e0bfff17 	ldw	r2,-4(fp)
 3053b84:	e0bffc15 	stw	r2,-16(fp)
 3053b88:	00000206 	br	3053b94 <open+0x134>
 3053b8c:	00bffb44 	movi	r2,-19
 3053b90:	e0bffc15 	stw	r2,-16(fp)
 3053b94:	e0bffc17 	ldw	r2,-16(fp)
 3053b98:	1004403a 	cmpge	r2,r2,zero
 3053b9c:	1000091e 	bne	r2,zero,3053bc4 <open+0x164>
 3053ba0:	e13ffb17 	ldw	r4,-20(fp)
 3053ba4:	3053d900 	call	3053d90 <alt_release_fd>
 3053ba8:	3053be00 	call	3053be0 <alt_get_errno>
 3053bac:	e0fffc17 	ldw	r3,-16(fp)
 3053bb0:	00c7c83a 	sub	r3,zero,r3
 3053bb4:	10c00015 	stw	r3,0(r2)
 3053bb8:	00bfffc4 	movi	r2,-1
 3053bbc:	e0bffe15 	stw	r2,-8(fp)
 3053bc0:	00000206 	br	3053bcc <open+0x16c>
 3053bc4:	e0bffb17 	ldw	r2,-20(fp)
 3053bc8:	e0bffe15 	stw	r2,-8(fp)
 3053bcc:	e0bffe17 	ldw	r2,-8(fp)
 3053bd0:	dfc00b17 	ldw	ra,44(sp)
 3053bd4:	df000a17 	ldw	fp,40(sp)
 3053bd8:	dec00c04 	addi	sp,sp,48
 3053bdc:	f800283a 	ret

03053be0 <alt_get_errno>:
 3053be0:	defffd04 	addi	sp,sp,-12
 3053be4:	dfc00215 	stw	ra,8(sp)
 3053be8:	df000115 	stw	fp,4(sp)
 3053bec:	df000104 	addi	fp,sp,4
 3053bf0:	d0a00f17 	ldw	r2,-32708(gp)
 3053bf4:	1005003a 	cmpeq	r2,r2,zero
 3053bf8:	1000041e 	bne	r2,zero,3053c0c <alt_get_errno+0x2c>
 3053bfc:	d0a00f17 	ldw	r2,-32708(gp)
 3053c00:	103ee83a 	callr	r2
 3053c04:	e0bfff15 	stw	r2,-4(fp)
 3053c08:	00000206 	br	3053c14 <alt_get_errno+0x34>
 3053c0c:	d0a77a04 	addi	r2,gp,-25112
 3053c10:	e0bfff15 	stw	r2,-4(fp)
 3053c14:	e0bfff17 	ldw	r2,-4(fp)
 3053c18:	dfc00217 	ldw	ra,8(sp)
 3053c1c:	df000117 	ldw	fp,4(sp)
 3053c20:	dec00304 	addi	sp,sp,12
 3053c24:	f800283a 	ret

03053c28 <read>:
 3053c28:	defff704 	addi	sp,sp,-36
 3053c2c:	dfc00815 	stw	ra,32(sp)
 3053c30:	df000715 	stw	fp,28(sp)
 3053c34:	df000704 	addi	fp,sp,28
 3053c38:	e13ff915 	stw	r4,-28(fp)
 3053c3c:	e17ffa15 	stw	r5,-24(fp)
 3053c40:	e1bffb15 	stw	r6,-20(fp)
 3053c44:	e0bff917 	ldw	r2,-28(fp)
 3053c48:	1004803a 	cmplt	r2,r2,zero
 3053c4c:	1000091e 	bne	r2,zero,3053c74 <read+0x4c>
 3053c50:	e0bff917 	ldw	r2,-28(fp)
 3053c54:	10800324 	muli	r2,r2,12
 3053c58:	e0bfff15 	stw	r2,-4(fp)
 3053c5c:	0080c1b4 	movhi	r2,774
 3053c60:	10ad5e04 	addi	r2,r2,-19080
 3053c64:	e0ffff17 	ldw	r3,-4(fp)
 3053c68:	1887883a 	add	r3,r3,r2
 3053c6c:	e0ffff15 	stw	r3,-4(fp)
 3053c70:	00000106 	br	3053c78 <read+0x50>
 3053c74:	e03fff15 	stw	zero,-4(fp)
 3053c78:	e0bfff17 	ldw	r2,-4(fp)
 3053c7c:	e0bffc15 	stw	r2,-16(fp)
 3053c80:	e0bffc17 	ldw	r2,-16(fp)
 3053c84:	1005003a 	cmpeq	r2,r2,zero
 3053c88:	1000241e 	bne	r2,zero,3053d1c <read+0xf4>
 3053c8c:	e0bffc17 	ldw	r2,-16(fp)
 3053c90:	10800217 	ldw	r2,8(r2)
 3053c94:	108000cc 	andi	r2,r2,3
 3053c98:	10800060 	cmpeqi	r2,r2,1
 3053c9c:	10001a1e 	bne	r2,zero,3053d08 <read+0xe0>
 3053ca0:	e0bffc17 	ldw	r2,-16(fp)
 3053ca4:	10800017 	ldw	r2,0(r2)
 3053ca8:	10800517 	ldw	r2,20(r2)
 3053cac:	1005003a 	cmpeq	r2,r2,zero
 3053cb0:	1000151e 	bne	r2,zero,3053d08 <read+0xe0>
 3053cb4:	e0bffc17 	ldw	r2,-16(fp)
 3053cb8:	10800017 	ldw	r2,0(r2)
 3053cbc:	10800517 	ldw	r2,20(r2)
 3053cc0:	e13ffc17 	ldw	r4,-16(fp)
 3053cc4:	e17ffa17 	ldw	r5,-24(fp)
 3053cc8:	e1bffb17 	ldw	r6,-20(fp)
 3053ccc:	103ee83a 	callr	r2
 3053cd0:	e0bffd15 	stw	r2,-12(fp)
 3053cd4:	e0bffd17 	ldw	r2,-12(fp)
 3053cd8:	1004403a 	cmpge	r2,r2,zero
 3053cdc:	1000071e 	bne	r2,zero,3053cfc <read+0xd4>
 3053ce0:	3053d480 	call	3053d48 <alt_get_errno>
 3053ce4:	e0fffd17 	ldw	r3,-12(fp)
 3053ce8:	00c7c83a 	sub	r3,zero,r3
 3053cec:	10c00015 	stw	r3,0(r2)
 3053cf0:	00ffffc4 	movi	r3,-1
 3053cf4:	e0fffe15 	stw	r3,-8(fp)
 3053cf8:	00000e06 	br	3053d34 <read+0x10c>
 3053cfc:	e0bffd17 	ldw	r2,-12(fp)
 3053d00:	e0bffe15 	stw	r2,-8(fp)
 3053d04:	00000b06 	br	3053d34 <read+0x10c>
 3053d08:	3053d480 	call	3053d48 <alt_get_errno>
 3053d0c:	1007883a 	mov	r3,r2
 3053d10:	00800344 	movi	r2,13
 3053d14:	18800015 	stw	r2,0(r3)
 3053d18:	00000406 	br	3053d2c <read+0x104>
 3053d1c:	3053d480 	call	3053d48 <alt_get_errno>
 3053d20:	1007883a 	mov	r3,r2
 3053d24:	00801444 	movi	r2,81
 3053d28:	18800015 	stw	r2,0(r3)
 3053d2c:	00bfffc4 	movi	r2,-1
 3053d30:	e0bffe15 	stw	r2,-8(fp)
 3053d34:	e0bffe17 	ldw	r2,-8(fp)
 3053d38:	dfc00817 	ldw	ra,32(sp)
 3053d3c:	df000717 	ldw	fp,28(sp)
 3053d40:	dec00904 	addi	sp,sp,36
 3053d44:	f800283a 	ret

03053d48 <alt_get_errno>:
 3053d48:	defffd04 	addi	sp,sp,-12
 3053d4c:	dfc00215 	stw	ra,8(sp)
 3053d50:	df000115 	stw	fp,4(sp)
 3053d54:	df000104 	addi	fp,sp,4
 3053d58:	d0a00f17 	ldw	r2,-32708(gp)
 3053d5c:	1005003a 	cmpeq	r2,r2,zero
 3053d60:	1000041e 	bne	r2,zero,3053d74 <alt_get_errno+0x2c>
 3053d64:	d0a00f17 	ldw	r2,-32708(gp)
 3053d68:	103ee83a 	callr	r2
 3053d6c:	e0bfff15 	stw	r2,-4(fp)
 3053d70:	00000206 	br	3053d7c <alt_get_errno+0x34>
 3053d74:	d0a77a04 	addi	r2,gp,-25112
 3053d78:	e0bfff15 	stw	r2,-4(fp)
 3053d7c:	e0bfff17 	ldw	r2,-4(fp)
 3053d80:	dfc00217 	ldw	ra,8(sp)
 3053d84:	df000117 	ldw	fp,4(sp)
 3053d88:	dec00304 	addi	sp,sp,12
 3053d8c:	f800283a 	ret

03053d90 <alt_release_fd>:
 3053d90:	defffe04 	addi	sp,sp,-8
 3053d94:	df000115 	stw	fp,4(sp)
 3053d98:	df000104 	addi	fp,sp,4
 3053d9c:	e13fff15 	stw	r4,-4(fp)
 3053da0:	e0bfff17 	ldw	r2,-4(fp)
 3053da4:	108000d0 	cmplti	r2,r2,3
 3053da8:	10000d1e 	bne	r2,zero,3053de0 <alt_release_fd+0x50>
 3053dac:	00c0c1b4 	movhi	r3,774
 3053db0:	18ed5e04 	addi	r3,r3,-19080
 3053db4:	e0bfff17 	ldw	r2,-4(fp)
 3053db8:	10800324 	muli	r2,r2,12
 3053dbc:	10c5883a 	add	r2,r2,r3
 3053dc0:	10800204 	addi	r2,r2,8
 3053dc4:	10000015 	stw	zero,0(r2)
 3053dc8:	00c0c1b4 	movhi	r3,774
 3053dcc:	18ed5e04 	addi	r3,r3,-19080
 3053dd0:	e0bfff17 	ldw	r2,-4(fp)
 3053dd4:	10800324 	muli	r2,r2,12
 3053dd8:	10c5883a 	add	r2,r2,r3
 3053ddc:	10000015 	stw	zero,0(r2)
 3053de0:	df000117 	ldw	fp,4(sp)
 3053de4:	dec00204 	addi	sp,sp,8
 3053de8:	f800283a 	ret

03053dec <sbrk>:
 3053dec:	defff904 	addi	sp,sp,-28
 3053df0:	df000615 	stw	fp,24(sp)
 3053df4:	df000604 	addi	fp,sp,24
 3053df8:	e13ffa15 	stw	r4,-24(fp)
 3053dfc:	0005303a 	rdctl	r2,status
 3053e00:	e0bffe15 	stw	r2,-8(fp)
 3053e04:	e0fffe17 	ldw	r3,-8(fp)
 3053e08:	00bfff84 	movi	r2,-2
 3053e0c:	1884703a 	and	r2,r3,r2
 3053e10:	1001703a 	wrctl	status,r2
 3053e14:	e0bffe17 	ldw	r2,-8(fp)
 3053e18:	e0bffd15 	stw	r2,-12(fp)
 3053e1c:	e0bffd17 	ldw	r2,-12(fp)
 3053e20:	e0bffb15 	stw	r2,-20(fp)
 3053e24:	d0a01517 	ldw	r2,-32684(gp)
 3053e28:	10c000c4 	addi	r3,r2,3
 3053e2c:	00bfff04 	movi	r2,-4
 3053e30:	1884703a 	and	r2,r3,r2
 3053e34:	d0a01515 	stw	r2,-32684(gp)
 3053e38:	d0e01517 	ldw	r3,-32684(gp)
 3053e3c:	e0bffa17 	ldw	r2,-24(fp)
 3053e40:	1887883a 	add	r3,r3,r2
 3053e44:	0080c234 	movhi	r2,776
 3053e48:	10800004 	addi	r2,r2,0
 3053e4c:	10c0072e 	bgeu	r2,r3,3053e6c <sbrk+0x80>
 3053e50:	e0bffb17 	ldw	r2,-20(fp)
 3053e54:	e0bffe15 	stw	r2,-8(fp)
 3053e58:	e0bffe17 	ldw	r2,-8(fp)
 3053e5c:	1001703a 	wrctl	status,r2
 3053e60:	00bfffc4 	movi	r2,-1
 3053e64:	e0bfff15 	stw	r2,-4(fp)
 3053e68:	00000c06 	br	3053e9c <sbrk+0xb0>
 3053e6c:	d0a01517 	ldw	r2,-32684(gp)
 3053e70:	e0bffc15 	stw	r2,-16(fp)
 3053e74:	d0e01517 	ldw	r3,-32684(gp)
 3053e78:	e0bffa17 	ldw	r2,-24(fp)
 3053e7c:	1885883a 	add	r2,r3,r2
 3053e80:	d0a01515 	stw	r2,-32684(gp)
 3053e84:	e0bffb17 	ldw	r2,-20(fp)
 3053e88:	e0bffe15 	stw	r2,-8(fp)
 3053e8c:	e0bffe17 	ldw	r2,-8(fp)
 3053e90:	1001703a 	wrctl	status,r2
 3053e94:	e0bffc17 	ldw	r2,-16(fp)
 3053e98:	e0bfff15 	stw	r2,-4(fp)
 3053e9c:	e0bfff17 	ldw	r2,-4(fp)
 3053ea0:	df000617 	ldw	fp,24(sp)
 3053ea4:	dec00704 	addi	sp,sp,28
 3053ea8:	f800283a 	ret

03053eac <alt_alarm_stop>:
 3053eac:	defffb04 	addi	sp,sp,-20
 3053eb0:	df000415 	stw	fp,16(sp)
 3053eb4:	df000404 	addi	fp,sp,16
 3053eb8:	e13ffc15 	stw	r4,-16(fp)
 3053ebc:	0005303a 	rdctl	r2,status
 3053ec0:	e0bfff15 	stw	r2,-4(fp)
 3053ec4:	e0ffff17 	ldw	r3,-4(fp)
 3053ec8:	00bfff84 	movi	r2,-2
 3053ecc:	1884703a 	and	r2,r3,r2
 3053ed0:	1001703a 	wrctl	status,r2
 3053ed4:	e0bfff17 	ldw	r2,-4(fp)
 3053ed8:	e0bffe15 	stw	r2,-8(fp)
 3053edc:	e0bffe17 	ldw	r2,-8(fp)
 3053ee0:	e0bffd15 	stw	r2,-12(fp)
 3053ee4:	e0bffc17 	ldw	r2,-16(fp)
 3053ee8:	e0bfff15 	stw	r2,-4(fp)
 3053eec:	e0bfff17 	ldw	r2,-4(fp)
 3053ef0:	10c00017 	ldw	r3,0(r2)
 3053ef4:	e0bfff17 	ldw	r2,-4(fp)
 3053ef8:	10800117 	ldw	r2,4(r2)
 3053efc:	18800115 	stw	r2,4(r3)
 3053f00:	e0bfff17 	ldw	r2,-4(fp)
 3053f04:	10c00117 	ldw	r3,4(r2)
 3053f08:	e0bfff17 	ldw	r2,-4(fp)
 3053f0c:	10800017 	ldw	r2,0(r2)
 3053f10:	18800015 	stw	r2,0(r3)
 3053f14:	e0ffff17 	ldw	r3,-4(fp)
 3053f18:	e0bfff17 	ldw	r2,-4(fp)
 3053f1c:	18800115 	stw	r2,4(r3)
 3053f20:	e0ffff17 	ldw	r3,-4(fp)
 3053f24:	e0bfff17 	ldw	r2,-4(fp)
 3053f28:	18800015 	stw	r2,0(r3)
 3053f2c:	e0bffd17 	ldw	r2,-12(fp)
 3053f30:	e0bfff15 	stw	r2,-4(fp)
 3053f34:	e0bfff17 	ldw	r2,-4(fp)
 3053f38:	1001703a 	wrctl	status,r2
 3053f3c:	df000417 	ldw	fp,16(sp)
 3053f40:	dec00504 	addi	sp,sp,20
 3053f44:	f800283a 	ret

03053f48 <alt_tick>:
 3053f48:	defffb04 	addi	sp,sp,-20
 3053f4c:	dfc00415 	stw	ra,16(sp)
 3053f50:	df000315 	stw	fp,12(sp)
 3053f54:	df000304 	addi	fp,sp,12
 3053f58:	d0a01817 	ldw	r2,-32672(gp)
 3053f5c:	e0bffe15 	stw	r2,-8(fp)
 3053f60:	d0a01717 	ldw	r2,-32676(gp)
 3053f64:	10800044 	addi	r2,r2,1
 3053f68:	d0a01715 	stw	r2,-32676(gp)
 3053f6c:	e0fffe17 	ldw	r3,-8(fp)
 3053f70:	d0a01804 	addi	r2,gp,-32672
 3053f74:	18803026 	beq	r3,r2,3054038 <alt_tick+0xf0>
 3053f78:	e0bffe17 	ldw	r2,-8(fp)
 3053f7c:	10800017 	ldw	r2,0(r2)
 3053f80:	e0bffd15 	stw	r2,-12(fp)
 3053f84:	e0bffe17 	ldw	r2,-8(fp)
 3053f88:	10800403 	ldbu	r2,16(r2)
 3053f8c:	1005003a 	cmpeq	r2,r2,zero
 3053f90:	1000051e 	bne	r2,zero,3053fa8 <alt_tick+0x60>
 3053f94:	d0a01717 	ldw	r2,-32676(gp)
 3053f98:	1004c03a 	cmpne	r2,r2,zero
 3053f9c:	1000021e 	bne	r2,zero,3053fa8 <alt_tick+0x60>
 3053fa0:	e0bffe17 	ldw	r2,-8(fp)
 3053fa4:	10000405 	stb	zero,16(r2)
 3053fa8:	e0bffe17 	ldw	r2,-8(fp)
 3053fac:	10c00217 	ldw	r3,8(r2)
 3053fb0:	d0a01717 	ldw	r2,-32676(gp)
 3053fb4:	10c01d36 	bltu	r2,r3,305402c <alt_tick+0xe4>
 3053fb8:	e0bffe17 	ldw	r2,-8(fp)
 3053fbc:	10800403 	ldbu	r2,16(r2)
 3053fc0:	1004c03a 	cmpne	r2,r2,zero
 3053fc4:	1000191e 	bne	r2,zero,305402c <alt_tick+0xe4>
 3053fc8:	e0bffe17 	ldw	r2,-8(fp)
 3053fcc:	e0fffe17 	ldw	r3,-8(fp)
 3053fd0:	10800317 	ldw	r2,12(r2)
 3053fd4:	19000517 	ldw	r4,20(r3)
 3053fd8:	103ee83a 	callr	r2
 3053fdc:	e0bfff15 	stw	r2,-4(fp)
 3053fe0:	e0bfff17 	ldw	r2,-4(fp)
 3053fe4:	1004c03a 	cmpne	r2,r2,zero
 3053fe8:	1000031e 	bne	r2,zero,3053ff8 <alt_tick+0xb0>
 3053fec:	e13ffe17 	ldw	r4,-8(fp)
 3053ff0:	3053eac0 	call	3053eac <alt_alarm_stop>
 3053ff4:	00000d06 	br	305402c <alt_tick+0xe4>
 3053ff8:	e13ffe17 	ldw	r4,-8(fp)
 3053ffc:	e0bffe17 	ldw	r2,-8(fp)
 3054000:	10c00217 	ldw	r3,8(r2)
 3054004:	e0bfff17 	ldw	r2,-4(fp)
 3054008:	1885883a 	add	r2,r3,r2
 305400c:	20800215 	stw	r2,8(r4)
 3054010:	e0bffe17 	ldw	r2,-8(fp)
 3054014:	10c00217 	ldw	r3,8(r2)
 3054018:	d0a01717 	ldw	r2,-32676(gp)
 305401c:	1880032e 	bgeu	r3,r2,305402c <alt_tick+0xe4>
 3054020:	e0fffe17 	ldw	r3,-8(fp)
 3054024:	00800044 	movi	r2,1
 3054028:	18800405 	stb	r2,16(r3)
 305402c:	e0bffd17 	ldw	r2,-12(fp)
 3054030:	e0bffe15 	stw	r2,-8(fp)
 3054034:	003fcd06 	br	3053f6c <alt_tick+0x24>
 3054038:	dfc00417 	ldw	ra,16(sp)
 305403c:	df000317 	ldw	fp,12(sp)
 3054040:	dec00504 	addi	sp,sp,20
 3054044:	f800283a 	ret

03054048 <usleep>:
 3054048:	defffd04 	addi	sp,sp,-12
 305404c:	dfc00215 	stw	ra,8(sp)
 3054050:	df000115 	stw	fp,4(sp)
 3054054:	df000104 	addi	fp,sp,4
 3054058:	e13fff15 	stw	r4,-4(fp)
 305405c:	e13fff17 	ldw	r4,-4(fp)
 3054060:	30582400 	call	3058240 <alt_busy_sleep>
 3054064:	dfc00217 	ldw	ra,8(sp)
 3054068:	df000117 	ldw	fp,4(sp)
 305406c:	dec00304 	addi	sp,sp,12
 3054070:	f800283a 	ret

03054074 <write>:
 3054074:	defff704 	addi	sp,sp,-36
 3054078:	dfc00815 	stw	ra,32(sp)
 305407c:	df000715 	stw	fp,28(sp)
 3054080:	df000704 	addi	fp,sp,28
 3054084:	e13ff915 	stw	r4,-28(fp)
 3054088:	e17ffa15 	stw	r5,-24(fp)
 305408c:	e1bffb15 	stw	r6,-20(fp)
 3054090:	e0bff917 	ldw	r2,-28(fp)
 3054094:	1004803a 	cmplt	r2,r2,zero
 3054098:	1000091e 	bne	r2,zero,30540c0 <write+0x4c>
 305409c:	e0bff917 	ldw	r2,-28(fp)
 30540a0:	10800324 	muli	r2,r2,12
 30540a4:	e0bfff15 	stw	r2,-4(fp)
 30540a8:	0080c1b4 	movhi	r2,774
 30540ac:	10ad5e04 	addi	r2,r2,-19080
 30540b0:	e0ffff17 	ldw	r3,-4(fp)
 30540b4:	1887883a 	add	r3,r3,r2
 30540b8:	e0ffff15 	stw	r3,-4(fp)
 30540bc:	00000106 	br	30540c4 <write+0x50>
 30540c0:	e03fff15 	stw	zero,-4(fp)
 30540c4:	e0bfff17 	ldw	r2,-4(fp)
 30540c8:	e0bffc15 	stw	r2,-16(fp)
 30540cc:	e0bffc17 	ldw	r2,-16(fp)
 30540d0:	1005003a 	cmpeq	r2,r2,zero
 30540d4:	1000241e 	bne	r2,zero,3054168 <write+0xf4>
 30540d8:	e0bffc17 	ldw	r2,-16(fp)
 30540dc:	10800217 	ldw	r2,8(r2)
 30540e0:	108000cc 	andi	r2,r2,3
 30540e4:	1005003a 	cmpeq	r2,r2,zero
 30540e8:	10001a1e 	bne	r2,zero,3054154 <write+0xe0>
 30540ec:	e0bffc17 	ldw	r2,-16(fp)
 30540f0:	10800017 	ldw	r2,0(r2)
 30540f4:	10800617 	ldw	r2,24(r2)
 30540f8:	1005003a 	cmpeq	r2,r2,zero
 30540fc:	1000151e 	bne	r2,zero,3054154 <write+0xe0>
 3054100:	e0bffc17 	ldw	r2,-16(fp)
 3054104:	10800017 	ldw	r2,0(r2)
 3054108:	10800617 	ldw	r2,24(r2)
 305410c:	e13ffc17 	ldw	r4,-16(fp)
 3054110:	e17ffa17 	ldw	r5,-24(fp)
 3054114:	e1bffb17 	ldw	r6,-20(fp)
 3054118:	103ee83a 	callr	r2
 305411c:	e0bffd15 	stw	r2,-12(fp)
 3054120:	e0bffd17 	ldw	r2,-12(fp)
 3054124:	1004403a 	cmpge	r2,r2,zero
 3054128:	1000071e 	bne	r2,zero,3054148 <write+0xd4>
 305412c:	30541940 	call	3054194 <alt_get_errno>
 3054130:	e0fffd17 	ldw	r3,-12(fp)
 3054134:	00c7c83a 	sub	r3,zero,r3
 3054138:	10c00015 	stw	r3,0(r2)
 305413c:	00ffffc4 	movi	r3,-1
 3054140:	e0fffe15 	stw	r3,-8(fp)
 3054144:	00000e06 	br	3054180 <write+0x10c>
 3054148:	e0bffd17 	ldw	r2,-12(fp)
 305414c:	e0bffe15 	stw	r2,-8(fp)
 3054150:	00000b06 	br	3054180 <write+0x10c>
 3054154:	30541940 	call	3054194 <alt_get_errno>
 3054158:	1007883a 	mov	r3,r2
 305415c:	00800344 	movi	r2,13
 3054160:	18800015 	stw	r2,0(r3)
 3054164:	00000406 	br	3054178 <write+0x104>
 3054168:	30541940 	call	3054194 <alt_get_errno>
 305416c:	1007883a 	mov	r3,r2
 3054170:	00801444 	movi	r2,81
 3054174:	18800015 	stw	r2,0(r3)
 3054178:	00bfffc4 	movi	r2,-1
 305417c:	e0bffe15 	stw	r2,-8(fp)
 3054180:	e0bffe17 	ldw	r2,-8(fp)
 3054184:	dfc00817 	ldw	ra,32(sp)
 3054188:	df000717 	ldw	fp,28(sp)
 305418c:	dec00904 	addi	sp,sp,36
 3054190:	f800283a 	ret

03054194 <alt_get_errno>:
 3054194:	defffd04 	addi	sp,sp,-12
 3054198:	dfc00215 	stw	ra,8(sp)
 305419c:	df000115 	stw	fp,4(sp)
 30541a0:	df000104 	addi	fp,sp,4
 30541a4:	d0a00f17 	ldw	r2,-32708(gp)
 30541a8:	1005003a 	cmpeq	r2,r2,zero
 30541ac:	1000041e 	bne	r2,zero,30541c0 <alt_get_errno+0x2c>
 30541b0:	d0a00f17 	ldw	r2,-32708(gp)
 30541b4:	103ee83a 	callr	r2
 30541b8:	e0bfff15 	stw	r2,-4(fp)
 30541bc:	00000206 	br	30541c8 <alt_get_errno+0x34>
 30541c0:	d0a77a04 	addi	r2,gp,-25112
 30541c4:	e0bfff15 	stw	r2,-4(fp)
 30541c8:	e0bfff17 	ldw	r2,-4(fp)
 30541cc:	dfc00217 	ldw	ra,8(sp)
 30541d0:	df000117 	ldw	fp,4(sp)
 30541d4:	dec00304 	addi	sp,sp,12
 30541d8:	f800283a 	ret

030541dc <alt_irq_init>:
 30541dc:	defffd04 	addi	sp,sp,-12
 30541e0:	dfc00215 	stw	ra,8(sp)
 30541e4:	df000115 	stw	fp,4(sp)
 30541e8:	df000104 	addi	fp,sp,4
 30541ec:	e13fff15 	stw	r4,-4(fp)
 30541f0:	3058cc80 	call	3058cc8 <altera_nios2_qsys_irq_init>
 30541f4:	00800044 	movi	r2,1
 30541f8:	1001703a 	wrctl	status,r2
 30541fc:	dfc00217 	ldw	ra,8(sp)
 3054200:	df000117 	ldw	fp,4(sp)
 3054204:	dec00304 	addi	sp,sp,12
 3054208:	f800283a 	ret

0305420c <alt_sys_init>:
 305420c:	defffe04 	addi	sp,sp,-8
 3054210:	dfc00115 	stw	ra,4(sp)
 3054214:	df000015 	stw	fp,0(sp)
 3054218:	d839883a 	mov	fp,sp
 305421c:	01004034 	movhi	r4,256
 3054220:	21000004 	addi	r4,r4,0
 3054224:	000b883a 	mov	r5,zero
 3054228:	000d883a 	mov	r6,zero
 305422c:	01c0fa04 	movi	r7,1000
 3054230:	30576c00 	call	30576c0 <alt_avalon_timer_sc_init>
 3054234:	0100c1b4 	movhi	r4,774
 3054238:	212dbe04 	addi	r4,r4,-18696
 305423c:	30542d80 	call	30542d8 <alt_flash_cfi_init>
 3054240:	0100c1b4 	movhi	r4,774
 3054244:	212dfe04 	addi	r4,r4,-18440
 3054248:	000b883a 	mov	r5,zero
 305424c:	01800104 	movi	r6,4
 3054250:	3055f740 	call	3055f74 <altera_avalon_jtag_uart_init>
 3054254:	0100c1b4 	movhi	r4,774
 3054258:	212df404 	addi	r4,r4,-18480
 305425c:	30542a80 	call	30542a8 <alt_dev_reg>
 3054260:	0100c1b4 	movhi	r4,774
 3054264:	21321604 	addi	r4,r4,-14248
 3054268:	30574cc0 	call	30574cc <altera_avalon_lcd_16207_init>
 305426c:	0100c1b4 	movhi	r4,774
 3054270:	21320c04 	addi	r4,r4,-14288
 3054274:	30542a80 	call	30542a8 <alt_dev_reg>
 3054278:	0100c1b4 	movhi	r4,774
 305427c:	21325e04 	addi	r4,r4,-13960
 3054280:	000b883a 	mov	r5,zero
 3054284:	018000c4 	movi	r6,3
 3054288:	30578380 	call	3057838 <altera_avalon_uart_init>
 305428c:	0100c1b4 	movhi	r4,774
 3054290:	21325404 	addi	r4,r4,-14000
 3054294:	30542a80 	call	30542a8 <alt_dev_reg>
 3054298:	dfc00117 	ldw	ra,4(sp)
 305429c:	df000017 	ldw	fp,0(sp)
 30542a0:	dec00204 	addi	sp,sp,8
 30542a4:	f800283a 	ret

030542a8 <alt_dev_reg>:
 30542a8:	defffd04 	addi	sp,sp,-12
 30542ac:	dfc00215 	stw	ra,8(sp)
 30542b0:	df000115 	stw	fp,4(sp)
 30542b4:	df000104 	addi	fp,sp,4
 30542b8:	e13fff15 	stw	r4,-4(fp)
 30542bc:	e13fff17 	ldw	r4,-4(fp)
 30542c0:	d1600c04 	addi	r5,gp,-32720
 30542c4:	305843c0 	call	305843c <alt_dev_llist_insert>
 30542c8:	dfc00217 	ldw	ra,8(sp)
 30542cc:	df000117 	ldw	fp,4(sp)
 30542d0:	dec00304 	addi	sp,sp,12
 30542d4:	f800283a 	ret

030542d8 <alt_flash_cfi_init>:
 30542d8:	defffc04 	addi	sp,sp,-16
 30542dc:	dfc00315 	stw	ra,12(sp)
 30542e0:	df000215 	stw	fp,8(sp)
 30542e4:	df000204 	addi	fp,sp,8
 30542e8:	e13ffe15 	stw	r4,-8(fp)
 30542ec:	e03fff15 	stw	zero,-4(fp)
 30542f0:	e13ffe17 	ldw	r4,-8(fp)
 30542f4:	30556c40 	call	30556c4 <alt_read_cfi_width>
 30542f8:	e0bfff15 	stw	r2,-4(fp)
 30542fc:	e0bfff17 	ldw	r2,-4(fp)
 3054300:	1004c03a 	cmpne	r2,r2,zero
 3054304:	1000031e 	bne	r2,zero,3054314 <alt_flash_cfi_init+0x3c>
 3054308:	e13ffe17 	ldw	r4,-8(fp)
 305430c:	3054e280 	call	3054e28 <alt_set_flash_width_func>
 3054310:	e0bfff15 	stw	r2,-4(fp)
 3054314:	e0bfff17 	ldw	r2,-4(fp)
 3054318:	1004c03a 	cmpne	r2,r2,zero
 305431c:	1000031e 	bne	r2,zero,305432c <alt_flash_cfi_init+0x54>
 3054320:	e13ffe17 	ldw	r4,-8(fp)
 3054324:	30551500 	call	3055150 <alt_read_cfi_table>
 3054328:	e0bfff15 	stw	r2,-4(fp)
 305432c:	e0bfff17 	ldw	r2,-4(fp)
 3054330:	1004c03a 	cmpne	r2,r2,zero
 3054334:	1000031e 	bne	r2,zero,3054344 <alt_flash_cfi_init+0x6c>
 3054338:	e13ffe17 	ldw	r4,-8(fp)
 305433c:	30550240 	call	3055024 <alt_set_flash_algorithm_func>
 3054340:	e0bfff15 	stw	r2,-4(fp)
 3054344:	e0bfff17 	ldw	r2,-4(fp)
 3054348:	1004c03a 	cmpne	r2,r2,zero
 305434c:	1000031e 	bne	r2,zero,305435c <alt_flash_cfi_init+0x84>
 3054350:	e13ffe17 	ldw	r4,-8(fp)
 3054354:	30543700 	call	3054370 <alt_flash_device_register>
 3054358:	e0bfff15 	stw	r2,-4(fp)
 305435c:	e0bfff17 	ldw	r2,-4(fp)
 3054360:	dfc00317 	ldw	ra,12(sp)
 3054364:	df000217 	ldw	fp,8(sp)
 3054368:	dec00404 	addi	sp,sp,16
 305436c:	f800283a 	ret

03054370 <alt_flash_device_register>:
 3054370:	defffd04 	addi	sp,sp,-12
 3054374:	dfc00215 	stw	ra,8(sp)
 3054378:	df000115 	stw	fp,4(sp)
 305437c:	df000104 	addi	fp,sp,4
 3054380:	e13fff15 	stw	r4,-4(fp)
 3054384:	e13fff17 	ldw	r4,-4(fp)
 3054388:	d1601b04 	addi	r5,gp,-32660
 305438c:	305843c0 	call	305843c <alt_dev_llist_insert>
 3054390:	dfc00217 	ldw	ra,8(sp)
 3054394:	df000117 	ldw	fp,4(sp)
 3054398:	dec00304 	addi	sp,sp,12
 305439c:	f800283a 	ret

030543a0 <alt_flash_cfi_write>:
 30543a0:	deffef04 	addi	sp,sp,-68
 30543a4:	dfc01015 	stw	ra,64(sp)
 30543a8:	df000f15 	stw	fp,60(sp)
 30543ac:	df000f04 	addi	fp,sp,60
 30543b0:	e13ff215 	stw	r4,-56(fp)
 30543b4:	e17ff315 	stw	r5,-52(fp)
 30543b8:	e1bff415 	stw	r6,-48(fp)
 30543bc:	e1fff515 	stw	r7,-44(fp)
 30543c0:	e03ff615 	stw	zero,-40(fp)
 30543c4:	e0bff517 	ldw	r2,-44(fp)
 30543c8:	e0bffa15 	stw	r2,-24(fp)
 30543cc:	e0bff317 	ldw	r2,-52(fp)
 30543d0:	e0bffc15 	stw	r2,-16(fp)
 30543d4:	e0bff217 	ldw	r2,-56(fp)
 30543d8:	e0bffd15 	stw	r2,-12(fp)
 30543dc:	e03ff715 	stw	zero,-36(fp)
 30543e0:	e0bffd17 	ldw	r2,-12(fp)
 30543e4:	10c00c17 	ldw	r3,48(r2)
 30543e8:	e0bff717 	ldw	r2,-36(fp)
 30543ec:	10c08e0e 	bge	r2,r3,3054628 <alt_flash_cfi_write+0x288>
 30543f0:	e0fffd17 	ldw	r3,-12(fp)
 30543f4:	e0bff717 	ldw	r2,-36(fp)
 30543f8:	10800424 	muli	r2,r2,16
 30543fc:	10c5883a 	add	r2,r2,r3
 3054400:	10800d04 	addi	r2,r2,52
 3054404:	10c00017 	ldw	r3,0(r2)
 3054408:	e0bff317 	ldw	r2,-52(fp)
 305440c:	10c08216 	blt	r2,r3,3054618 <alt_flash_cfi_write+0x278>
 3054410:	e0fffd17 	ldw	r3,-12(fp)
 3054414:	e0bff717 	ldw	r2,-36(fp)
 3054418:	10800424 	muli	r2,r2,16
 305441c:	10c5883a 	add	r2,r2,r3
 3054420:	11000d04 	addi	r4,r2,52
 3054424:	e0fffd17 	ldw	r3,-12(fp)
 3054428:	e0bff717 	ldw	r2,-36(fp)
 305442c:	10800424 	muli	r2,r2,16
 3054430:	10c5883a 	add	r2,r2,r3
 3054434:	10800e04 	addi	r2,r2,56
 3054438:	20c00017 	ldw	r3,0(r4)
 305443c:	10800017 	ldw	r2,0(r2)
 3054440:	1887883a 	add	r3,r3,r2
 3054444:	e0bff317 	ldw	r2,-52(fp)
 3054448:	10c0730e 	bge	r2,r3,3054618 <alt_flash_cfi_write+0x278>
 305444c:	e0fffd17 	ldw	r3,-12(fp)
 3054450:	e0bff717 	ldw	r2,-36(fp)
 3054454:	10800424 	muli	r2,r2,16
 3054458:	10c5883a 	add	r2,r2,r3
 305445c:	10800d04 	addi	r2,r2,52
 3054460:	10800017 	ldw	r2,0(r2)
 3054464:	e0bffb15 	stw	r2,-20(fp)
 3054468:	e03ff815 	stw	zero,-32(fp)
 305446c:	e0fffd17 	ldw	r3,-12(fp)
 3054470:	e0bff717 	ldw	r2,-36(fp)
 3054474:	10800424 	muli	r2,r2,16
 3054478:	10c5883a 	add	r2,r2,r3
 305447c:	10800f04 	addi	r2,r2,60
 3054480:	10c00017 	ldw	r3,0(r2)
 3054484:	e0bff817 	ldw	r2,-32(fp)
 3054488:	10c0630e 	bge	r2,r3,3054618 <alt_flash_cfi_write+0x278>
 305448c:	e0fff317 	ldw	r3,-52(fp)
 3054490:	e0bffb17 	ldw	r2,-20(fp)
 3054494:	18805316 	blt	r3,r2,30545e4 <alt_flash_cfi_write+0x244>
 3054498:	e0fffd17 	ldw	r3,-12(fp)
 305449c:	e0bff717 	ldw	r2,-36(fp)
 30544a0:	10800424 	muli	r2,r2,16
 30544a4:	10c5883a 	add	r2,r2,r3
 30544a8:	10801004 	addi	r2,r2,64
 30544ac:	10c00017 	ldw	r3,0(r2)
 30544b0:	e0bffb17 	ldw	r2,-20(fp)
 30544b4:	1887883a 	add	r3,r3,r2
 30544b8:	e0bff317 	ldw	r2,-52(fp)
 30544bc:	10c0490e 	bge	r2,r3,30545e4 <alt_flash_cfi_write+0x244>
 30544c0:	e0fffd17 	ldw	r3,-12(fp)
 30544c4:	e0bff717 	ldw	r2,-36(fp)
 30544c8:	10800424 	muli	r2,r2,16
 30544cc:	10c5883a 	add	r2,r2,r3
 30544d0:	10801004 	addi	r2,r2,64
 30544d4:	10c00017 	ldw	r3,0(r2)
 30544d8:	e0bffb17 	ldw	r2,-20(fp)
 30544dc:	1887883a 	add	r3,r3,r2
 30544e0:	e0bff317 	ldw	r2,-52(fp)
 30544e4:	1885c83a 	sub	r2,r3,r2
 30544e8:	e0bff915 	stw	r2,-28(fp)
 30544ec:	e0bff917 	ldw	r2,-28(fp)
 30544f0:	e0bfff15 	stw	r2,-4(fp)
 30544f4:	e0fff517 	ldw	r3,-44(fp)
 30544f8:	e0fffe15 	stw	r3,-8(fp)
 30544fc:	e0bfff17 	ldw	r2,-4(fp)
 3054500:	e0fffe17 	ldw	r3,-8(fp)
 3054504:	10c0020e 	bge	r2,r3,3054510 <alt_flash_cfi_write+0x170>
 3054508:	e0bfff17 	ldw	r2,-4(fp)
 305450c:	e0bffe15 	stw	r2,-8(fp)
 3054510:	e0fffe17 	ldw	r3,-8(fp)
 3054514:	e0fff915 	stw	r3,-28(fp)
 3054518:	e0bffd17 	ldw	r2,-12(fp)
 305451c:	10c00a17 	ldw	r3,40(r2)
 3054520:	e0bff317 	ldw	r2,-52(fp)
 3054524:	188b883a 	add	r5,r3,r2
 3054528:	e13ff417 	ldw	r4,-48(fp)
 305452c:	e1bff917 	ldw	r6,-28(fp)
 3054530:	30596040 	call	3059604 <memcmp>
 3054534:	1005003a 	cmpeq	r2,r2,zero
 3054538:	1000131e 	bne	r2,zero,3054588 <alt_flash_cfi_write+0x1e8>
 305453c:	e0bffd17 	ldw	r2,-12(fp)
 3054540:	10800817 	ldw	r2,32(r2)
 3054544:	e13ffd17 	ldw	r4,-12(fp)
 3054548:	e17ffb17 	ldw	r5,-20(fp)
 305454c:	103ee83a 	callr	r2
 3054550:	e0bff615 	stw	r2,-40(fp)
 3054554:	e0bff617 	ldw	r2,-40(fp)
 3054558:	1004c03a 	cmpne	r2,r2,zero
 305455c:	10000a1e 	bne	r2,zero,3054588 <alt_flash_cfi_write+0x1e8>
 3054560:	e0fffd17 	ldw	r3,-12(fp)
 3054564:	e0bff917 	ldw	r2,-28(fp)
 3054568:	d8800015 	stw	r2,0(sp)
 305456c:	18800917 	ldw	r2,36(r3)
 3054570:	e13ffd17 	ldw	r4,-12(fp)
 3054574:	e17ffb17 	ldw	r5,-20(fp)
 3054578:	e1bff317 	ldw	r6,-52(fp)
 305457c:	e1fff417 	ldw	r7,-48(fp)
 3054580:	103ee83a 	callr	r2
 3054584:	e0bff615 	stw	r2,-40(fp)
 3054588:	e0fff517 	ldw	r3,-44(fp)
 305458c:	e0bff917 	ldw	r2,-28(fp)
 3054590:	18802526 	beq	r3,r2,3054628 <alt_flash_cfi_write+0x288>
 3054594:	e0bff617 	ldw	r2,-40(fp)
 3054598:	1004c03a 	cmpne	r2,r2,zero
 305459c:	1000221e 	bne	r2,zero,3054628 <alt_flash_cfi_write+0x288>
 30545a0:	e0fff517 	ldw	r3,-44(fp)
 30545a4:	e0bff917 	ldw	r2,-28(fp)
 30545a8:	1885c83a 	sub	r2,r3,r2
 30545ac:	e0bff515 	stw	r2,-44(fp)
 30545b0:	e0fffd17 	ldw	r3,-12(fp)
 30545b4:	e0bff717 	ldw	r2,-36(fp)
 30545b8:	10800424 	muli	r2,r2,16
 30545bc:	10c5883a 	add	r2,r2,r3
 30545c0:	10801004 	addi	r2,r2,64
 30545c4:	10c00017 	ldw	r3,0(r2)
 30545c8:	e0bffb17 	ldw	r2,-20(fp)
 30545cc:	1885883a 	add	r2,r3,r2
 30545d0:	e0bff315 	stw	r2,-52(fp)
 30545d4:	e0fff417 	ldw	r3,-48(fp)
 30545d8:	e0bff917 	ldw	r2,-28(fp)
 30545dc:	1885883a 	add	r2,r3,r2
 30545e0:	e0bff415 	stw	r2,-48(fp)
 30545e4:	e0fffd17 	ldw	r3,-12(fp)
 30545e8:	e0bff717 	ldw	r2,-36(fp)
 30545ec:	10800424 	muli	r2,r2,16
 30545f0:	10c5883a 	add	r2,r2,r3
 30545f4:	10801004 	addi	r2,r2,64
 30545f8:	e0fffb17 	ldw	r3,-20(fp)
 30545fc:	10800017 	ldw	r2,0(r2)
 3054600:	1885883a 	add	r2,r3,r2
 3054604:	e0bffb15 	stw	r2,-20(fp)
 3054608:	e0bff817 	ldw	r2,-32(fp)
 305460c:	10800044 	addi	r2,r2,1
 3054610:	e0bff815 	stw	r2,-32(fp)
 3054614:	003f9506 	br	305446c <alt_flash_cfi_write+0xcc>
 3054618:	e0bff717 	ldw	r2,-36(fp)
 305461c:	10800044 	addi	r2,r2,1
 3054620:	e0bff715 	stw	r2,-36(fp)
 3054624:	003f6e06 	br	30543e0 <alt_flash_cfi_write+0x40>
 3054628:	e0bffd17 	ldw	r2,-12(fp)
 305462c:	10c00a17 	ldw	r3,40(r2)
 3054630:	e0bffc17 	ldw	r2,-16(fp)
 3054634:	1889883a 	add	r4,r3,r2
 3054638:	e17ffa17 	ldw	r5,-24(fp)
 305463c:	30583880 	call	3058388 <alt_dcache_flush>
 3054640:	e0bff617 	ldw	r2,-40(fp)
 3054644:	dfc01017 	ldw	ra,64(sp)
 3054648:	df000f17 	ldw	fp,60(sp)
 305464c:	dec01104 	addi	sp,sp,68
 3054650:	f800283a 	ret

03054654 <alt_flash_cfi_get_info>:
 3054654:	defffa04 	addi	sp,sp,-24
 3054658:	df000515 	stw	fp,20(sp)
 305465c:	df000504 	addi	fp,sp,20
 3054660:	e13ffb15 	stw	r4,-20(fp)
 3054664:	e17ffc15 	stw	r5,-16(fp)
 3054668:	e1bffd15 	stw	r6,-12(fp)
 305466c:	e03ffe15 	stw	zero,-8(fp)
 3054670:	e0bffb17 	ldw	r2,-20(fp)
 3054674:	e0bfff15 	stw	r2,-4(fp)
 3054678:	e0fffd17 	ldw	r3,-12(fp)
 305467c:	e0bfff17 	ldw	r2,-4(fp)
 3054680:	10800c17 	ldw	r2,48(r2)
 3054684:	18800015 	stw	r2,0(r3)
 3054688:	e0bfff17 	ldw	r2,-4(fp)
 305468c:	10800c17 	ldw	r2,48(r2)
 3054690:	1004c03a 	cmpne	r2,r2,zero
 3054694:	1000031e 	bne	r2,zero,30546a4 <alt_flash_cfi_get_info+0x50>
 3054698:	00bffec4 	movi	r2,-5
 305469c:	e0bffe15 	stw	r2,-8(fp)
 30546a0:	00000b06 	br	30546d0 <alt_flash_cfi_get_info+0x7c>
 30546a4:	e0bfff17 	ldw	r2,-4(fp)
 30546a8:	10800c17 	ldw	r2,48(r2)
 30546ac:	10800250 	cmplti	r2,r2,9
 30546b0:	1000031e 	bne	r2,zero,30546c0 <alt_flash_cfi_get_info+0x6c>
 30546b4:	00bffd04 	movi	r2,-12
 30546b8:	e0bffe15 	stw	r2,-8(fp)
 30546bc:	00000406 	br	30546d0 <alt_flash_cfi_get_info+0x7c>
 30546c0:	e0bffc17 	ldw	r2,-16(fp)
 30546c4:	e0ffff17 	ldw	r3,-4(fp)
 30546c8:	18c00d04 	addi	r3,r3,52
 30546cc:	10c00015 	stw	r3,0(r2)
 30546d0:	e0bffe17 	ldw	r2,-8(fp)
 30546d4:	df000517 	ldw	fp,20(sp)
 30546d8:	dec00604 	addi	sp,sp,24
 30546dc:	f800283a 	ret

030546e0 <alt_flash_cfi_read>:
 30546e0:	defff904 	addi	sp,sp,-28
 30546e4:	dfc00615 	stw	ra,24(sp)
 30546e8:	df000515 	stw	fp,20(sp)
 30546ec:	df000504 	addi	fp,sp,20
 30546f0:	e13ffb15 	stw	r4,-20(fp)
 30546f4:	e17ffc15 	stw	r5,-16(fp)
 30546f8:	e1bffd15 	stw	r6,-12(fp)
 30546fc:	e1fffe15 	stw	r7,-8(fp)
 3054700:	e0bffb17 	ldw	r2,-20(fp)
 3054704:	e0bfff15 	stw	r2,-4(fp)
 3054708:	e0bfff17 	ldw	r2,-4(fp)
 305470c:	10c00a17 	ldw	r3,40(r2)
 3054710:	e0bffc17 	ldw	r2,-16(fp)
 3054714:	188b883a 	add	r5,r3,r2
 3054718:	e13ffd17 	ldw	r4,-12(fp)
 305471c:	e1bffe17 	ldw	r6,-8(fp)
 3054720:	304bb5c0 	call	304bb5c <memcpy>
 3054724:	0005883a 	mov	r2,zero
 3054728:	dfc00617 	ldw	ra,24(sp)
 305472c:	df000517 	ldw	fp,20(sp)
 3054730:	dec00704 	addi	sp,sp,28
 3054734:	f800283a 	ret

03054738 <alt_write_value_to_flash>:
 3054738:	defffa04 	addi	sp,sp,-24
 305473c:	df000515 	stw	fp,20(sp)
 3054740:	df000504 	addi	fp,sp,20
 3054744:	e13ffb15 	stw	r4,-20(fp)
 3054748:	e17ffc15 	stw	r5,-16(fp)
 305474c:	e1bffd15 	stw	r6,-12(fp)
 3054750:	e0bffb17 	ldw	r2,-20(fp)
 3054754:	10802e17 	ldw	r2,184(r2)
 3054758:	10800058 	cmpnei	r2,r2,1
 305475c:	1000091e 	bne	r2,zero,3054784 <alt_write_value_to_flash+0x4c>
 3054760:	e0bffb17 	ldw	r2,-20(fp)
 3054764:	10c00a17 	ldw	r3,40(r2)
 3054768:	e0bffc17 	ldw	r2,-16(fp)
 305476c:	1885883a 	add	r2,r3,r2
 3054770:	1007883a 	mov	r3,r2
 3054774:	e0bffd17 	ldw	r2,-12(fp)
 3054778:	10800003 	ldbu	r2,0(r2)
 305477c:	18800025 	stbio	r2,0(r3)
 3054780:	00003906 	br	3054868 <alt_write_value_to_flash+0x130>
 3054784:	e0bffb17 	ldw	r2,-20(fp)
 3054788:	10802e17 	ldw	r2,184(r2)
 305478c:	10800098 	cmpnei	r2,r2,2
 3054790:	1000121e 	bne	r2,zero,30547dc <alt_write_value_to_flash+0xa4>
 3054794:	e0bffd17 	ldw	r2,-12(fp)
 3054798:	10800003 	ldbu	r2,0(r2)
 305479c:	e0bffe0d 	sth	r2,-8(fp)
 30547a0:	e0bffd17 	ldw	r2,-12(fp)
 30547a4:	10800044 	addi	r2,r2,1
 30547a8:	10800003 	ldbu	r2,0(r2)
 30547ac:	1004923a 	slli	r2,r2,8
 30547b0:	e0fffe0b 	ldhu	r3,-8(fp)
 30547b4:	1884b03a 	or	r2,r3,r2
 30547b8:	e0bffe0d 	sth	r2,-8(fp)
 30547bc:	e0bffb17 	ldw	r2,-20(fp)
 30547c0:	10c00a17 	ldw	r3,40(r2)
 30547c4:	e0bffc17 	ldw	r2,-16(fp)
 30547c8:	1885883a 	add	r2,r3,r2
 30547cc:	1007883a 	mov	r3,r2
 30547d0:	e0bffe0b 	ldhu	r2,-8(fp)
 30547d4:	1880002d 	sthio	r2,0(r3)
 30547d8:	00002306 	br	3054868 <alt_write_value_to_flash+0x130>
 30547dc:	e0bffb17 	ldw	r2,-20(fp)
 30547e0:	10802e17 	ldw	r2,184(r2)
 30547e4:	10800118 	cmpnei	r2,r2,4
 30547e8:	10001f1e 	bne	r2,zero,3054868 <alt_write_value_to_flash+0x130>
 30547ec:	e0bffd17 	ldw	r2,-12(fp)
 30547f0:	10800003 	ldbu	r2,0(r2)
 30547f4:	e0bfff15 	stw	r2,-4(fp)
 30547f8:	e0bffd17 	ldw	r2,-12(fp)
 30547fc:	10800044 	addi	r2,r2,1
 3054800:	10800003 	ldbu	r2,0(r2)
 3054804:	1006923a 	slli	r3,r2,8
 3054808:	e0bfff17 	ldw	r2,-4(fp)
 305480c:	10c4b03a 	or	r2,r2,r3
 3054810:	e0bfff15 	stw	r2,-4(fp)
 3054814:	e0bffd17 	ldw	r2,-12(fp)
 3054818:	10800084 	addi	r2,r2,2
 305481c:	10800003 	ldbu	r2,0(r2)
 3054820:	1006943a 	slli	r3,r2,16
 3054824:	e0bfff17 	ldw	r2,-4(fp)
 3054828:	10c4b03a 	or	r2,r2,r3
 305482c:	e0bfff15 	stw	r2,-4(fp)
 3054830:	e0bffd17 	ldw	r2,-12(fp)
 3054834:	108000c4 	addi	r2,r2,3
 3054838:	10800003 	ldbu	r2,0(r2)
 305483c:	1006963a 	slli	r3,r2,24
 3054840:	e0bfff17 	ldw	r2,-4(fp)
 3054844:	10c4b03a 	or	r2,r2,r3
 3054848:	e0bfff15 	stw	r2,-4(fp)
 305484c:	e0bffb17 	ldw	r2,-20(fp)
 3054850:	10c00a17 	ldw	r3,40(r2)
 3054854:	e0bffc17 	ldw	r2,-16(fp)
 3054858:	1885883a 	add	r2,r3,r2
 305485c:	1007883a 	mov	r3,r2
 3054860:	e0bfff17 	ldw	r2,-4(fp)
 3054864:	18800035 	stwio	r2,0(r3)
 3054868:	df000517 	ldw	fp,20(sp)
 305486c:	dec00604 	addi	sp,sp,24
 3054870:	f800283a 	ret

03054874 <alt_flash_program_block>:
 3054874:	defff304 	addi	sp,sp,-52
 3054878:	dfc00c15 	stw	ra,48(sp)
 305487c:	df000b15 	stw	fp,44(sp)
 3054880:	df000b04 	addi	fp,sp,44
 3054884:	e13ff515 	stw	r4,-44(fp)
 3054888:	e17ff615 	stw	r5,-40(fp)
 305488c:	e1bff715 	stw	r6,-36(fp)
 3054890:	e1fff815 	stw	r7,-32(fp)
 3054894:	e03ff915 	stw	zero,-28(fp)
 3054898:	e0bff517 	ldw	r2,-44(fp)
 305489c:	10c00a17 	ldw	r3,40(r2)
 30548a0:	e0bff617 	ldw	r2,-40(fp)
 30548a4:	1889883a 	add	r4,r3,r2
 30548a8:	e0bff517 	ldw	r2,-44(fp)
 30548ac:	11402e17 	ldw	r5,184(r2)
 30548b0:	304978c0 	call	304978c <__modsi3>
 30548b4:	e0bffa15 	stw	r2,-24(fp)
 30548b8:	e0bffa17 	ldw	r2,-24(fp)
 30548bc:	1005003a 	cmpeq	r2,r2,zero
 30548c0:	1000381e 	bne	r2,zero,30549a4 <alt_flash_program_block+0x130>
 30548c4:	e0bff517 	ldw	r2,-44(fp)
 30548c8:	10c02e17 	ldw	r3,184(r2)
 30548cc:	e0bffa17 	ldw	r2,-24(fp)
 30548d0:	1885c83a 	sub	r2,r3,r2
 30548d4:	e0bffb15 	stw	r2,-20(fp)
 30548d8:	e03ffd15 	stw	zero,-12(fp)
 30548dc:	e0fffd17 	ldw	r3,-12(fp)
 30548e0:	e0bffa17 	ldw	r2,-24(fp)
 30548e4:	1880110e 	bge	r3,r2,305492c <alt_flash_program_block+0xb8>
 30548e8:	e0ffff04 	addi	r3,fp,-4
 30548ec:	e0bffd17 	ldw	r2,-12(fp)
 30548f0:	188b883a 	add	r5,r3,r2
 30548f4:	e13ff517 	ldw	r4,-44(fp)
 30548f8:	e0fff617 	ldw	r3,-40(fp)
 30548fc:	e0bffa17 	ldw	r2,-24(fp)
 3054900:	1887c83a 	sub	r3,r3,r2
 3054904:	e0bffd17 	ldw	r2,-12(fp)
 3054908:	1887883a 	add	r3,r3,r2
 305490c:	20800a17 	ldw	r2,40(r4)
 3054910:	1885883a 	add	r2,r3,r2
 3054914:	10800023 	ldbuio	r2,0(r2)
 3054918:	28800005 	stb	r2,0(r5)
 305491c:	e0bffd17 	ldw	r2,-12(fp)
 3054920:	10800044 	addi	r2,r2,1
 3054924:	e0bffd15 	stw	r2,-12(fp)
 3054928:	003fec06 	br	30548dc <alt_flash_program_block+0x68>
 305492c:	e03ffd15 	stw	zero,-12(fp)
 3054930:	e0fffd17 	ldw	r3,-12(fp)
 3054934:	e0bffb17 	ldw	r2,-20(fp)
 3054938:	18800f0e 	bge	r3,r2,3054978 <alt_flash_program_block+0x104>
 305493c:	e0bffa17 	ldw	r2,-24(fp)
 3054940:	e13ff504 	addi	r4,fp,-44
 3054944:	2087883a 	add	r3,r4,r2
 3054948:	e0bffd17 	ldw	r2,-12(fp)
 305494c:	1885883a 	add	r2,r3,r2
 3054950:	11000a04 	addi	r4,r2,40
 3054954:	e0fff717 	ldw	r3,-36(fp)
 3054958:	e0bffd17 	ldw	r2,-12(fp)
 305495c:	1885883a 	add	r2,r3,r2
 3054960:	10800003 	ldbu	r2,0(r2)
 3054964:	20800005 	stb	r2,0(r4)
 3054968:	e0bffd17 	ldw	r2,-12(fp)
 305496c:	10800044 	addi	r2,r2,1
 3054970:	e0bffd15 	stw	r2,-12(fp)
 3054974:	003fee06 	br	3054930 <alt_flash_program_block+0xbc>
 3054978:	e0fff617 	ldw	r3,-40(fp)
 305497c:	e0bffa17 	ldw	r2,-24(fp)
 3054980:	188bc83a 	sub	r5,r3,r2
 3054984:	e1bfff04 	addi	r6,fp,-4
 3054988:	e0800217 	ldw	r2,8(fp)
 305498c:	e13ff517 	ldw	r4,-44(fp)
 3054990:	103ee83a 	callr	r2
 3054994:	e0bff915 	stw	r2,-28(fp)
 3054998:	e0bffb17 	ldw	r2,-20(fp)
 305499c:	e0bffd15 	stw	r2,-12(fp)
 30549a0:	00000106 	br	30549a8 <alt_flash_program_block+0x134>
 30549a4:	e03ffd15 	stw	zero,-12(fp)
 30549a8:	e0fff617 	ldw	r3,-40(fp)
 30549ac:	e0bff817 	ldw	r2,-32(fp)
 30549b0:	1889883a 	add	r4,r3,r2
 30549b4:	e0bff517 	ldw	r2,-44(fp)
 30549b8:	11402e17 	ldw	r5,184(r2)
 30549bc:	304978c0 	call	304978c <__modsi3>
 30549c0:	e0bffc15 	stw	r2,-16(fp)
 30549c4:	e0bff917 	ldw	r2,-28(fp)
 30549c8:	1004c03a 	cmpne	r2,r2,zero
 30549cc:	1000151e 	bne	r2,zero,3054a24 <alt_flash_program_block+0x1b0>
 30549d0:	e0fff817 	ldw	r3,-32(fp)
 30549d4:	e0bffc17 	ldw	r2,-16(fp)
 30549d8:	1887c83a 	sub	r3,r3,r2
 30549dc:	e0bffd17 	ldw	r2,-12(fp)
 30549e0:	10c0100e 	bge	r2,r3,3054a24 <alt_flash_program_block+0x1b0>
 30549e4:	e0fff617 	ldw	r3,-40(fp)
 30549e8:	e0bffd17 	ldw	r2,-12(fp)
 30549ec:	188b883a 	add	r5,r3,r2
 30549f0:	e0fff717 	ldw	r3,-36(fp)
 30549f4:	e0bffd17 	ldw	r2,-12(fp)
 30549f8:	188d883a 	add	r6,r3,r2
 30549fc:	e0800217 	ldw	r2,8(fp)
 3054a00:	e13ff517 	ldw	r4,-44(fp)
 3054a04:	103ee83a 	callr	r2
 3054a08:	e0bff915 	stw	r2,-28(fp)
 3054a0c:	e0bff517 	ldw	r2,-44(fp)
 3054a10:	e0fffd17 	ldw	r3,-12(fp)
 3054a14:	10802e17 	ldw	r2,184(r2)
 3054a18:	1885883a 	add	r2,r3,r2
 3054a1c:	e0bffd15 	stw	r2,-12(fp)
 3054a20:	003fe806 	br	30549c4 <alt_flash_program_block+0x150>
 3054a24:	e0bffc17 	ldw	r2,-16(fp)
 3054a28:	1005003a 	cmpeq	r2,r2,zero
 3054a2c:	10003a1e 	bne	r2,zero,3054b18 <alt_flash_program_block+0x2a4>
 3054a30:	e0bff917 	ldw	r2,-28(fp)
 3054a34:	1004c03a 	cmpne	r2,r2,zero
 3054a38:	1000371e 	bne	r2,zero,3054b18 <alt_flash_program_block+0x2a4>
 3054a3c:	e0bff517 	ldw	r2,-44(fp)
 3054a40:	10c02e17 	ldw	r3,184(r2)
 3054a44:	e0bffc17 	ldw	r2,-16(fp)
 3054a48:	1885c83a 	sub	r2,r3,r2
 3054a4c:	e0bffa15 	stw	r2,-24(fp)
 3054a50:	e03ffe15 	stw	zero,-8(fp)
 3054a54:	e0fffe17 	ldw	r3,-8(fp)
 3054a58:	e0bffc17 	ldw	r2,-16(fp)
 3054a5c:	18800e0e 	bge	r3,r2,3054a98 <alt_flash_program_block+0x224>
 3054a60:	e0ffff04 	addi	r3,fp,-4
 3054a64:	e0bffe17 	ldw	r2,-8(fp)
 3054a68:	1889883a 	add	r4,r3,r2
 3054a6c:	e0fff717 	ldw	r3,-36(fp)
 3054a70:	e0bffe17 	ldw	r2,-8(fp)
 3054a74:	1887883a 	add	r3,r3,r2
 3054a78:	e0bffd17 	ldw	r2,-12(fp)
 3054a7c:	1885883a 	add	r2,r3,r2
 3054a80:	10800003 	ldbu	r2,0(r2)
 3054a84:	20800005 	stb	r2,0(r4)
 3054a88:	e0bffe17 	ldw	r2,-8(fp)
 3054a8c:	10800044 	addi	r2,r2,1
 3054a90:	e0bffe15 	stw	r2,-8(fp)
 3054a94:	003fef06 	br	3054a54 <alt_flash_program_block+0x1e0>
 3054a98:	e03ffe15 	stw	zero,-8(fp)
 3054a9c:	e0fffe17 	ldw	r3,-8(fp)
 3054aa0:	e0bffa17 	ldw	r2,-24(fp)
 3054aa4:	1880140e 	bge	r3,r2,3054af8 <alt_flash_program_block+0x284>
 3054aa8:	e0bffc17 	ldw	r2,-16(fp)
 3054aac:	e13ff504 	addi	r4,fp,-44
 3054ab0:	2087883a 	add	r3,r4,r2
 3054ab4:	e0bffe17 	ldw	r2,-8(fp)
 3054ab8:	1885883a 	add	r2,r3,r2
 3054abc:	11400a04 	addi	r5,r2,40
 3054ac0:	e13ff517 	ldw	r4,-44(fp)
 3054ac4:	e0fff617 	ldw	r3,-40(fp)
 3054ac8:	e0bff817 	ldw	r2,-32(fp)
 3054acc:	1887883a 	add	r3,r3,r2
 3054ad0:	e0bffe17 	ldw	r2,-8(fp)
 3054ad4:	1887883a 	add	r3,r3,r2
 3054ad8:	20800a17 	ldw	r2,40(r4)
 3054adc:	1885883a 	add	r2,r3,r2
 3054ae0:	10800023 	ldbuio	r2,0(r2)
 3054ae4:	28800005 	stb	r2,0(r5)
 3054ae8:	e0bffe17 	ldw	r2,-8(fp)
 3054aec:	10800044 	addi	r2,r2,1
 3054af0:	e0bffe15 	stw	r2,-8(fp)
 3054af4:	003fe906 	br	3054a9c <alt_flash_program_block+0x228>
 3054af8:	e0fff617 	ldw	r3,-40(fp)
 3054afc:	e0bffd17 	ldw	r2,-12(fp)
 3054b00:	188b883a 	add	r5,r3,r2
 3054b04:	e1bfff04 	addi	r6,fp,-4
 3054b08:	e0800217 	ldw	r2,8(fp)
 3054b0c:	e13ff517 	ldw	r4,-44(fp)
 3054b10:	103ee83a 	callr	r2
 3054b14:	e0bff915 	stw	r2,-28(fp)
 3054b18:	e0bff917 	ldw	r2,-28(fp)
 3054b1c:	dfc00c17 	ldw	ra,48(sp)
 3054b20:	df000b17 	ldw	fp,44(sp)
 3054b24:	dec00d04 	addi	sp,sp,52
 3054b28:	f800283a 	ret

03054b2c <alt_read_query_entry_8bit>:
 3054b2c:	defffd04 	addi	sp,sp,-12
 3054b30:	df000215 	stw	fp,8(sp)
 3054b34:	df000204 	addi	fp,sp,8
 3054b38:	e13ffe15 	stw	r4,-8(fp)
 3054b3c:	e17fff15 	stw	r5,-4(fp)
 3054b40:	e0bffe17 	ldw	r2,-8(fp)
 3054b44:	10c00a17 	ldw	r3,40(r2)
 3054b48:	e0bfff17 	ldw	r2,-4(fp)
 3054b4c:	1885883a 	add	r2,r3,r2
 3054b50:	10800023 	ldbuio	r2,0(r2)
 3054b54:	10803fcc 	andi	r2,r2,255
 3054b58:	df000217 	ldw	fp,8(sp)
 3054b5c:	dec00304 	addi	sp,sp,12
 3054b60:	f800283a 	ret

03054b64 <alt_read_query_entry_16bit>:
 3054b64:	defffd04 	addi	sp,sp,-12
 3054b68:	df000215 	stw	fp,8(sp)
 3054b6c:	df000204 	addi	fp,sp,8
 3054b70:	e13ffe15 	stw	r4,-8(fp)
 3054b74:	e17fff15 	stw	r5,-4(fp)
 3054b78:	e13ffe17 	ldw	r4,-8(fp)
 3054b7c:	e0ffff17 	ldw	r3,-4(fp)
 3054b80:	1805883a 	mov	r2,r3
 3054b84:	10c7883a 	add	r3,r2,r3
 3054b88:	20800a17 	ldw	r2,40(r4)
 3054b8c:	1885883a 	add	r2,r3,r2
 3054b90:	1080002b 	ldhuio	r2,0(r2)
 3054b94:	10803fcc 	andi	r2,r2,255
 3054b98:	df000217 	ldw	fp,8(sp)
 3054b9c:	dec00304 	addi	sp,sp,12
 3054ba0:	f800283a 	ret

03054ba4 <alt_read_query_entry_32bit>:
 3054ba4:	defffd04 	addi	sp,sp,-12
 3054ba8:	df000215 	stw	fp,8(sp)
 3054bac:	df000204 	addi	fp,sp,8
 3054bb0:	e13ffe15 	stw	r4,-8(fp)
 3054bb4:	e17fff15 	stw	r5,-4(fp)
 3054bb8:	e13ffe17 	ldw	r4,-8(fp)
 3054bbc:	e0bfff17 	ldw	r2,-4(fp)
 3054bc0:	10c00124 	muli	r3,r2,4
 3054bc4:	20800a17 	ldw	r2,40(r4)
 3054bc8:	1885883a 	add	r2,r3,r2
 3054bcc:	10800037 	ldwio	r2,0(r2)
 3054bd0:	10803fcc 	andi	r2,r2,255
 3054bd4:	df000217 	ldw	fp,8(sp)
 3054bd8:	dec00304 	addi	sp,sp,12
 3054bdc:	f800283a 	ret

03054be0 <alt_write_flash_command_8bit_device_8bit_mode>:
 3054be0:	defffc04 	addi	sp,sp,-16
 3054be4:	df000315 	stw	fp,12(sp)
 3054be8:	df000304 	addi	fp,sp,12
 3054bec:	e13ffd15 	stw	r4,-12(fp)
 3054bf0:	e17ffe15 	stw	r5,-8(fp)
 3054bf4:	e1bfff05 	stb	r6,-4(fp)
 3054bf8:	e0fffd17 	ldw	r3,-12(fp)
 3054bfc:	e0bffe17 	ldw	r2,-8(fp)
 3054c00:	1885883a 	add	r2,r3,r2
 3054c04:	1007883a 	mov	r3,r2
 3054c08:	e0bfff03 	ldbu	r2,-4(fp)
 3054c0c:	18800025 	stbio	r2,0(r3)
 3054c10:	df000317 	ldw	fp,12(sp)
 3054c14:	dec00404 	addi	sp,sp,16
 3054c18:	f800283a 	ret

03054c1c <alt_write_flash_command_16bit_device_8bit_mode>:
 3054c1c:	defffc04 	addi	sp,sp,-16
 3054c20:	df000315 	stw	fp,12(sp)
 3054c24:	df000304 	addi	fp,sp,12
 3054c28:	e13ffd15 	stw	r4,-12(fp)
 3054c2c:	e17ffe15 	stw	r5,-8(fp)
 3054c30:	e1bfff05 	stb	r6,-4(fp)
 3054c34:	e0bffe17 	ldw	r2,-8(fp)
 3054c38:	1080004c 	andi	r2,r2,1
 3054c3c:	1005003a 	cmpeq	r2,r2,zero
 3054c40:	1000091e 	bne	r2,zero,3054c68 <alt_write_flash_command_16bit_device_8bit_mode+0x4c>
 3054c44:	e0fffe17 	ldw	r3,-8(fp)
 3054c48:	1805883a 	mov	r2,r3
 3054c4c:	10c7883a 	add	r3,r2,r3
 3054c50:	e0bffd17 	ldw	r2,-12(fp)
 3054c54:	1885883a 	add	r2,r3,r2
 3054c58:	1007883a 	mov	r3,r2
 3054c5c:	e0bfff03 	ldbu	r2,-4(fp)
 3054c60:	18800025 	stbio	r2,0(r3)
 3054c64:	00000906 	br	3054c8c <alt_write_flash_command_16bit_device_8bit_mode+0x70>
 3054c68:	e0fffe17 	ldw	r3,-8(fp)
 3054c6c:	1805883a 	mov	r2,r3
 3054c70:	10c7883a 	add	r3,r2,r3
 3054c74:	e0bffd17 	ldw	r2,-12(fp)
 3054c78:	1885883a 	add	r2,r3,r2
 3054c7c:	10800044 	addi	r2,r2,1
 3054c80:	1007883a 	mov	r3,r2
 3054c84:	e0bfff03 	ldbu	r2,-4(fp)
 3054c88:	18800025 	stbio	r2,0(r3)
 3054c8c:	df000317 	ldw	fp,12(sp)
 3054c90:	dec00404 	addi	sp,sp,16
 3054c94:	f800283a 	ret

03054c98 <alt_write_flash_command_32bit_device_8bit_mode>:
 3054c98:	defffc04 	addi	sp,sp,-16
 3054c9c:	df000315 	stw	fp,12(sp)
 3054ca0:	df000304 	addi	fp,sp,12
 3054ca4:	e13ffd15 	stw	r4,-12(fp)
 3054ca8:	e17ffe15 	stw	r5,-8(fp)
 3054cac:	e1bfff05 	stb	r6,-4(fp)
 3054cb0:	e0bffe17 	ldw	r2,-8(fp)
 3054cb4:	10c00124 	muli	r3,r2,4
 3054cb8:	e0bffd17 	ldw	r2,-12(fp)
 3054cbc:	1885883a 	add	r2,r3,r2
 3054cc0:	1007883a 	mov	r3,r2
 3054cc4:	e0bfff03 	ldbu	r2,-4(fp)
 3054cc8:	18800025 	stbio	r2,0(r3)
 3054ccc:	df000317 	ldw	fp,12(sp)
 3054cd0:	dec00404 	addi	sp,sp,16
 3054cd4:	f800283a 	ret

03054cd8 <alt_write_flash_command_16bit_device_16bit_mode>:
 3054cd8:	defffc04 	addi	sp,sp,-16
 3054cdc:	df000315 	stw	fp,12(sp)
 3054ce0:	df000304 	addi	fp,sp,12
 3054ce4:	e13ffd15 	stw	r4,-12(fp)
 3054ce8:	e17ffe15 	stw	r5,-8(fp)
 3054cec:	e1bfff05 	stb	r6,-4(fp)
 3054cf0:	e0fffe17 	ldw	r3,-8(fp)
 3054cf4:	1805883a 	mov	r2,r3
 3054cf8:	10c7883a 	add	r3,r2,r3
 3054cfc:	e0bffd17 	ldw	r2,-12(fp)
 3054d00:	1885883a 	add	r2,r3,r2
 3054d04:	1007883a 	mov	r3,r2
 3054d08:	e0bfff03 	ldbu	r2,-4(fp)
 3054d0c:	1880002d 	sthio	r2,0(r3)
 3054d10:	df000317 	ldw	fp,12(sp)
 3054d14:	dec00404 	addi	sp,sp,16
 3054d18:	f800283a 	ret

03054d1c <alt_write_flash_command_32bit_device_16bit_mode>:
 3054d1c:	defffc04 	addi	sp,sp,-16
 3054d20:	df000315 	stw	fp,12(sp)
 3054d24:	df000304 	addi	fp,sp,12
 3054d28:	e13ffd15 	stw	r4,-12(fp)
 3054d2c:	e17ffe15 	stw	r5,-8(fp)
 3054d30:	e1bfff05 	stb	r6,-4(fp)
 3054d34:	e0bffe17 	ldw	r2,-8(fp)
 3054d38:	10c00124 	muli	r3,r2,4
 3054d3c:	e0bffd17 	ldw	r2,-12(fp)
 3054d40:	1885883a 	add	r2,r3,r2
 3054d44:	1007883a 	mov	r3,r2
 3054d48:	e0bfff03 	ldbu	r2,-4(fp)
 3054d4c:	1880002d 	sthio	r2,0(r3)
 3054d50:	df000317 	ldw	fp,12(sp)
 3054d54:	dec00404 	addi	sp,sp,16
 3054d58:	f800283a 	ret

03054d5c <alt_write_flash_command_32bit_device_32bit_mode>:
 3054d5c:	defffc04 	addi	sp,sp,-16
 3054d60:	df000315 	stw	fp,12(sp)
 3054d64:	df000304 	addi	fp,sp,12
 3054d68:	e13ffd15 	stw	r4,-12(fp)
 3054d6c:	e17ffe15 	stw	r5,-8(fp)
 3054d70:	e1bfff05 	stb	r6,-4(fp)
 3054d74:	e0bffe17 	ldw	r2,-8(fp)
 3054d78:	10c00124 	muli	r3,r2,4
 3054d7c:	e0bffd17 	ldw	r2,-12(fp)
 3054d80:	1885883a 	add	r2,r3,r2
 3054d84:	1007883a 	mov	r3,r2
 3054d88:	e0bfff03 	ldbu	r2,-4(fp)
 3054d8c:	18800035 	stwio	r2,0(r3)
 3054d90:	df000317 	ldw	fp,12(sp)
 3054d94:	dec00404 	addi	sp,sp,16
 3054d98:	f800283a 	ret

03054d9c <alt_write_native_8bit>:
 3054d9c:	defffd04 	addi	sp,sp,-12
 3054da0:	df000215 	stw	fp,8(sp)
 3054da4:	df000204 	addi	fp,sp,8
 3054da8:	e13ffe15 	stw	r4,-8(fp)
 3054dac:	e17fff15 	stw	r5,-4(fp)
 3054db0:	e0bffe17 	ldw	r2,-8(fp)
 3054db4:	e0ffff17 	ldw	r3,-4(fp)
 3054db8:	18c03fcc 	andi	r3,r3,255
 3054dbc:	10c00025 	stbio	r3,0(r2)
 3054dc0:	df000217 	ldw	fp,8(sp)
 3054dc4:	dec00304 	addi	sp,sp,12
 3054dc8:	f800283a 	ret

03054dcc <alt_write_native_16bit>:
 3054dcc:	defffd04 	addi	sp,sp,-12
 3054dd0:	df000215 	stw	fp,8(sp)
 3054dd4:	df000204 	addi	fp,sp,8
 3054dd8:	e13ffe15 	stw	r4,-8(fp)
 3054ddc:	e17fff15 	stw	r5,-4(fp)
 3054de0:	e0bffe17 	ldw	r2,-8(fp)
 3054de4:	e0ffff17 	ldw	r3,-4(fp)
 3054de8:	18ffffcc 	andi	r3,r3,65535
 3054dec:	10c0002d 	sthio	r3,0(r2)
 3054df0:	df000217 	ldw	fp,8(sp)
 3054df4:	dec00304 	addi	sp,sp,12
 3054df8:	f800283a 	ret

03054dfc <alt_write_native_32bit>:
 3054dfc:	defffd04 	addi	sp,sp,-12
 3054e00:	df000215 	stw	fp,8(sp)
 3054e04:	df000204 	addi	fp,sp,8
 3054e08:	e13ffe15 	stw	r4,-8(fp)
 3054e0c:	e17fff15 	stw	r5,-4(fp)
 3054e10:	e0fffe17 	ldw	r3,-8(fp)
 3054e14:	e0bfff17 	ldw	r2,-4(fp)
 3054e18:	18800035 	stwio	r2,0(r3)
 3054e1c:	df000217 	ldw	fp,8(sp)
 3054e20:	dec00304 	addi	sp,sp,12
 3054e24:	f800283a 	ret

03054e28 <alt_set_flash_width_func>:
 3054e28:	defffb04 	addi	sp,sp,-20
 3054e2c:	df000415 	stw	fp,16(sp)
 3054e30:	df000404 	addi	fp,sp,16
 3054e34:	e13ffc15 	stw	r4,-16(fp)
 3054e38:	e03ffd15 	stw	zero,-12(fp)
 3054e3c:	e0bffc17 	ldw	r2,-16(fp)
 3054e40:	10802e17 	ldw	r2,184(r2)
 3054e44:	e0bffe15 	stw	r2,-8(fp)
 3054e48:	e0fffe17 	ldw	r3,-8(fp)
 3054e4c:	188000a0 	cmpeqi	r2,r3,2
 3054e50:	10002a1e 	bne	r2,zero,3054efc <alt_set_flash_width_func+0xd4>
 3054e54:	e0fffe17 	ldw	r3,-8(fp)
 3054e58:	188000c8 	cmpgei	r2,r3,3
 3054e5c:	1000041e 	bne	r2,zero,3054e70 <alt_set_flash_width_func+0x48>
 3054e60:	e0fffe17 	ldw	r3,-8(fp)
 3054e64:	18800060 	cmpeqi	r2,r3,1
 3054e68:	1000051e 	bne	r2,zero,3054e80 <alt_set_flash_width_func+0x58>
 3054e6c:	00004206 	br	3054f78 <alt_set_flash_width_func+0x150>
 3054e70:	e0fffe17 	ldw	r3,-8(fp)
 3054e74:	18800120 	cmpeqi	r2,r3,4
 3054e78:	1000361e 	bne	r2,zero,3054f54 <alt_set_flash_width_func+0x12c>
 3054e7c:	00003e06 	br	3054f78 <alt_set_flash_width_func+0x150>
 3054e80:	e0fffc17 	ldw	r3,-16(fp)
 3054e84:	0080c174 	movhi	r2,773
 3054e88:	10936704 	addi	r2,r2,19868
 3054e8c:	18803515 	stw	r2,212(r3)
 3054e90:	e0bffc17 	ldw	r2,-16(fp)
 3054e94:	10802f17 	ldw	r2,188(r2)
 3054e98:	10800058 	cmpnei	r2,r2,1
 3054e9c:	1000051e 	bne	r2,zero,3054eb4 <alt_set_flash_width_func+0x8c>
 3054ea0:	e0fffc17 	ldw	r3,-16(fp)
 3054ea4:	0080c174 	movhi	r2,773
 3054ea8:	1092f804 	addi	r2,r2,19424
 3054eac:	18803315 	stw	r2,204(r3)
 3054eb0:	00003306 	br	3054f80 <alt_set_flash_width_func+0x158>
 3054eb4:	e0bffc17 	ldw	r2,-16(fp)
 3054eb8:	10802f17 	ldw	r2,188(r2)
 3054ebc:	10800098 	cmpnei	r2,r2,2
 3054ec0:	1000051e 	bne	r2,zero,3054ed8 <alt_set_flash_width_func+0xb0>
 3054ec4:	e0fffc17 	ldw	r3,-16(fp)
 3054ec8:	0080c174 	movhi	r2,773
 3054ecc:	10930704 	addi	r2,r2,19484
 3054ed0:	18803315 	stw	r2,204(r3)
 3054ed4:	00002a06 	br	3054f80 <alt_set_flash_width_func+0x158>
 3054ed8:	e0bffc17 	ldw	r2,-16(fp)
 3054edc:	10802f17 	ldw	r2,188(r2)
 3054ee0:	10800118 	cmpnei	r2,r2,4
 3054ee4:	1000261e 	bne	r2,zero,3054f80 <alt_set_flash_width_func+0x158>
 3054ee8:	e0fffc17 	ldw	r3,-16(fp)
 3054eec:	0080c174 	movhi	r2,773
 3054ef0:	10932604 	addi	r2,r2,19608
 3054ef4:	18803315 	stw	r2,204(r3)
 3054ef8:	00002106 	br	3054f80 <alt_set_flash_width_func+0x158>
 3054efc:	e0fffc17 	ldw	r3,-16(fp)
 3054f00:	0080c174 	movhi	r2,773
 3054f04:	10937304 	addi	r2,r2,19916
 3054f08:	18803515 	stw	r2,212(r3)
 3054f0c:	e0bffc17 	ldw	r2,-16(fp)
 3054f10:	10802f17 	ldw	r2,188(r2)
 3054f14:	10800098 	cmpnei	r2,r2,2
 3054f18:	1000051e 	bne	r2,zero,3054f30 <alt_set_flash_width_func+0x108>
 3054f1c:	e0fffc17 	ldw	r3,-16(fp)
 3054f20:	0080c174 	movhi	r2,773
 3054f24:	10933604 	addi	r2,r2,19672
 3054f28:	18803315 	stw	r2,204(r3)
 3054f2c:	00001406 	br	3054f80 <alt_set_flash_width_func+0x158>
 3054f30:	e0bffc17 	ldw	r2,-16(fp)
 3054f34:	10802f17 	ldw	r2,188(r2)
 3054f38:	10800118 	cmpnei	r2,r2,4
 3054f3c:	1000101e 	bne	r2,zero,3054f80 <alt_set_flash_width_func+0x158>
 3054f40:	e0fffc17 	ldw	r3,-16(fp)
 3054f44:	0080c174 	movhi	r2,773
 3054f48:	10934704 	addi	r2,r2,19740
 3054f4c:	18803315 	stw	r2,204(r3)
 3054f50:	00000b06 	br	3054f80 <alt_set_flash_width_func+0x158>
 3054f54:	e0fffc17 	ldw	r3,-16(fp)
 3054f58:	0080c174 	movhi	r2,773
 3054f5c:	10937f04 	addi	r2,r2,19964
 3054f60:	18803515 	stw	r2,212(r3)
 3054f64:	e0fffc17 	ldw	r3,-16(fp)
 3054f68:	0080c174 	movhi	r2,773
 3054f6c:	10935704 	addi	r2,r2,19804
 3054f70:	18803315 	stw	r2,204(r3)
 3054f74:	00000206 	br	3054f80 <alt_set_flash_width_func+0x158>
 3054f78:	00bffcc4 	movi	r2,-13
 3054f7c:	e0bffd15 	stw	r2,-12(fp)
 3054f80:	e0bffd17 	ldw	r2,-12(fp)
 3054f84:	1004c03a 	cmpne	r2,r2,zero
 3054f88:	1000221e 	bne	r2,zero,3055014 <alt_set_flash_width_func+0x1ec>
 3054f8c:	e0bffc17 	ldw	r2,-16(fp)
 3054f90:	10802f17 	ldw	r2,188(r2)
 3054f94:	e0bfff15 	stw	r2,-4(fp)
 3054f98:	e0ffff17 	ldw	r3,-4(fp)
 3054f9c:	188000a0 	cmpeqi	r2,r3,2
 3054fa0:	1000101e 	bne	r2,zero,3054fe4 <alt_set_flash_width_func+0x1bc>
 3054fa4:	e0ffff17 	ldw	r3,-4(fp)
 3054fa8:	188000c8 	cmpgei	r2,r3,3
 3054fac:	1000041e 	bne	r2,zero,3054fc0 <alt_set_flash_width_func+0x198>
 3054fb0:	e0ffff17 	ldw	r3,-4(fp)
 3054fb4:	18800060 	cmpeqi	r2,r3,1
 3054fb8:	1000051e 	bne	r2,zero,3054fd0 <alt_set_flash_width_func+0x1a8>
 3054fbc:	00001306 	br	305500c <alt_set_flash_width_func+0x1e4>
 3054fc0:	e0ffff17 	ldw	r3,-4(fp)
 3054fc4:	18800120 	cmpeqi	r2,r3,4
 3054fc8:	10000b1e 	bne	r2,zero,3054ff8 <alt_set_flash_width_func+0x1d0>
 3054fcc:	00000f06 	br	305500c <alt_set_flash_width_func+0x1e4>
 3054fd0:	e0fffc17 	ldw	r3,-16(fp)
 3054fd4:	0080c174 	movhi	r2,773
 3054fd8:	1092cb04 	addi	r2,r2,19244
 3054fdc:	18803415 	stw	r2,208(r3)
 3054fe0:	00000c06 	br	3055014 <alt_set_flash_width_func+0x1ec>
 3054fe4:	e0fffc17 	ldw	r3,-16(fp)
 3054fe8:	0080c174 	movhi	r2,773
 3054fec:	1092d904 	addi	r2,r2,19300
 3054ff0:	18803415 	stw	r2,208(r3)
 3054ff4:	00000706 	br	3055014 <alt_set_flash_width_func+0x1ec>
 3054ff8:	e0fffc17 	ldw	r3,-16(fp)
 3054ffc:	0080c174 	movhi	r2,773
 3055000:	1092e904 	addi	r2,r2,19364
 3055004:	18803415 	stw	r2,208(r3)
 3055008:	00000206 	br	3055014 <alt_set_flash_width_func+0x1ec>
 305500c:	00bffcc4 	movi	r2,-13
 3055010:	e0bffd15 	stw	r2,-12(fp)
 3055014:	e0bffd17 	ldw	r2,-12(fp)
 3055018:	df000417 	ldw	fp,16(sp)
 305501c:	dec00504 	addi	sp,sp,20
 3055020:	f800283a 	ret

03055024 <alt_set_flash_algorithm_func>:
 3055024:	defffc04 	addi	sp,sp,-16
 3055028:	df000315 	stw	fp,12(sp)
 305502c:	df000304 	addi	fp,sp,12
 3055030:	e13ffd15 	stw	r4,-12(fp)
 3055034:	e03ffe15 	stw	zero,-8(fp)
 3055038:	e0bffd17 	ldw	r2,-12(fp)
 305503c:	10802d17 	ldw	r2,180(r2)
 3055040:	e0bfff15 	stw	r2,-4(fp)
 3055044:	e0ffff17 	ldw	r3,-4(fp)
 3055048:	188000a0 	cmpeqi	r2,r3,2
 305504c:	10000b1e 	bne	r2,zero,305507c <alt_set_flash_algorithm_func+0x58>
 3055050:	e0ffff17 	ldw	r3,-4(fp)
 3055054:	188000c8 	cmpgei	r2,r3,3
 3055058:	1000041e 	bne	r2,zero,305506c <alt_set_flash_algorithm_func+0x48>
 305505c:	e0ffff17 	ldw	r3,-4(fp)
 3055060:	18800060 	cmpeqi	r2,r3,1
 3055064:	10000e1e 	bne	r2,zero,30550a0 <alt_set_flash_algorithm_func+0x7c>
 3055068:	00001606 	br	30550c4 <alt_set_flash_algorithm_func+0xa0>
 305506c:	e0ffff17 	ldw	r3,-4(fp)
 3055070:	188000e0 	cmpeqi	r2,r3,3
 3055074:	10000a1e 	bne	r2,zero,30550a0 <alt_set_flash_algorithm_func+0x7c>
 3055078:	00001206 	br	30550c4 <alt_set_flash_algorithm_func+0xa0>
 305507c:	e0fffd17 	ldw	r3,-12(fp)
 3055080:	0080c1b4 	movhi	r2,774
 3055084:	10a35204 	addi	r2,r2,-29368
 3055088:	18800815 	stw	r2,32(r3)
 305508c:	e0fffd17 	ldw	r3,-12(fp)
 3055090:	0080c1b4 	movhi	r2,774
 3055094:	10a33904 	addi	r2,r2,-29468
 3055098:	18800915 	stw	r2,36(r3)
 305509c:	00000b06 	br	30550cc <alt_set_flash_algorithm_func+0xa8>
 30550a0:	e0fffd17 	ldw	r3,-12(fp)
 30550a4:	0080c1b4 	movhi	r2,774
 30550a8:	10a46704 	addi	r2,r2,-28260
 30550ac:	18800815 	stw	r2,32(r3)
 30550b0:	e0fffd17 	ldw	r3,-12(fp)
 30550b4:	0080c1b4 	movhi	r2,774
 30550b8:	10a44704 	addi	r2,r2,-28388
 30550bc:	18800915 	stw	r2,36(r3)
 30550c0:	00000206 	br	30550cc <alt_set_flash_algorithm_func+0xa8>
 30550c4:	00bffec4 	movi	r2,-5
 30550c8:	e0bffe15 	stw	r2,-8(fp)
 30550cc:	e0bffe17 	ldw	r2,-8(fp)
 30550d0:	df000317 	ldw	fp,12(sp)
 30550d4:	dec00404 	addi	sp,sp,16
 30550d8:	f800283a 	ret

030550dc <alt_read_16bit_query_entry>:
 30550dc:	defffb04 	addi	sp,sp,-20
 30550e0:	dfc00415 	stw	ra,16(sp)
 30550e4:	df000315 	stw	fp,12(sp)
 30550e8:	df000304 	addi	fp,sp,12
 30550ec:	e13ffd15 	stw	r4,-12(fp)
 30550f0:	e17ffe15 	stw	r5,-8(fp)
 30550f4:	e0bffd17 	ldw	r2,-12(fp)
 30550f8:	10803417 	ldw	r2,208(r2)
 30550fc:	e13ffd17 	ldw	r4,-12(fp)
 3055100:	e17ffe17 	ldw	r5,-8(fp)
 3055104:	103ee83a 	callr	r2
 3055108:	10803fcc 	andi	r2,r2,255
 305510c:	e0bfff0d 	sth	r2,-4(fp)
 3055110:	e0fffd17 	ldw	r3,-12(fp)
 3055114:	e0bffe17 	ldw	r2,-8(fp)
 3055118:	11400044 	addi	r5,r2,1
 305511c:	18803417 	ldw	r2,208(r3)
 3055120:	e13ffd17 	ldw	r4,-12(fp)
 3055124:	103ee83a 	callr	r2
 3055128:	10803fcc 	andi	r2,r2,255
 305512c:	1004923a 	slli	r2,r2,8
 3055130:	e0ffff0b 	ldhu	r3,-4(fp)
 3055134:	1884b03a 	or	r2,r3,r2
 3055138:	e0bfff0d 	sth	r2,-4(fp)
 305513c:	e0bfff0b 	ldhu	r2,-4(fp)
 3055140:	dfc00417 	ldw	ra,16(sp)
 3055144:	df000317 	ldw	fp,12(sp)
 3055148:	dec00504 	addi	sp,sp,20
 305514c:	f800283a 	ret

03055150 <alt_read_cfi_table>:
 3055150:	defff204 	addi	sp,sp,-56
 3055154:	dfc00d15 	stw	ra,52(sp)
 3055158:	df000c15 	stw	fp,48(sp)
 305515c:	dc000b15 	stw	r16,44(sp)
 3055160:	df000c04 	addi	fp,sp,48
 3055164:	e13ff415 	stw	r4,-48(fp)
 3055168:	e03ff815 	stw	zero,-32(fp)
 305516c:	e03ff915 	stw	zero,-28(fp)
 3055170:	e03ffd15 	stw	zero,-12(fp)
 3055174:	e13ff417 	ldw	r4,-48(fp)
 3055178:	3055d700 	call	3055d70 <alt_check_primary_table>
 305517c:	e0bff815 	stw	r2,-32(fp)
 3055180:	e0bff817 	ldw	r2,-32(fp)
 3055184:	1004c03a 	cmpne	r2,r2,zero
 3055188:	1001481e 	bne	r2,zero,30556ac <alt_read_cfi_table+0x55c>
 305518c:	e43ff417 	ldw	r16,-48(fp)
 3055190:	e0bff417 	ldw	r2,-48(fp)
 3055194:	10803417 	ldw	r2,208(r2)
 3055198:	e13ff417 	ldw	r4,-48(fp)
 305519c:	014004c4 	movi	r5,19
 30551a0:	103ee83a 	callr	r2
 30551a4:	10803fcc 	andi	r2,r2,255
 30551a8:	80802d15 	stw	r2,180(r16)
 30551ac:	e0bff417 	ldw	r2,-48(fp)
 30551b0:	10803417 	ldw	r2,208(r2)
 30551b4:	e13ff417 	ldw	r4,-48(fp)
 30551b8:	014007c4 	movi	r5,31
 30551bc:	103ee83a 	callr	r2
 30551c0:	10803fcc 	andi	r2,r2,255
 30551c4:	e0bffb15 	stw	r2,-20(fp)
 30551c8:	e0bff417 	ldw	r2,-48(fp)
 30551cc:	10803417 	ldw	r2,208(r2)
 30551d0:	e13ff417 	ldw	r4,-48(fp)
 30551d4:	014008c4 	movi	r5,35
 30551d8:	103ee83a 	callr	r2
 30551dc:	10803fcc 	andi	r2,r2,255
 30551e0:	e0bffc15 	stw	r2,-16(fp)
 30551e4:	e0bffb17 	ldw	r2,-20(fp)
 30551e8:	1005003a 	cmpeq	r2,r2,zero
 30551ec:	1000031e 	bne	r2,zero,30551fc <alt_read_cfi_table+0xac>
 30551f0:	e0bffc17 	ldw	r2,-16(fp)
 30551f4:	1004c03a 	cmpne	r2,r2,zero
 30551f8:	1000041e 	bne	r2,zero,305520c <alt_read_cfi_table+0xbc>
 30551fc:	e0fff417 	ldw	r3,-48(fp)
 3055200:	0080fa04 	movi	r2,1000
 3055204:	18803015 	stw	r2,192(r3)
 3055208:	00000706 	br	3055228 <alt_read_cfi_table+0xd8>
 305520c:	e13ff417 	ldw	r4,-48(fp)
 3055210:	00c00044 	movi	r3,1
 3055214:	e0bffb17 	ldw	r2,-20(fp)
 3055218:	1886983a 	sll	r3,r3,r2
 305521c:	e0bffc17 	ldw	r2,-16(fp)
 3055220:	1884983a 	sll	r2,r3,r2
 3055224:	20803015 	stw	r2,192(r4)
 3055228:	e0bff417 	ldw	r2,-48(fp)
 305522c:	10803417 	ldw	r2,208(r2)
 3055230:	e13ff417 	ldw	r4,-48(fp)
 3055234:	01400844 	movi	r5,33
 3055238:	103ee83a 	callr	r2
 305523c:	10803fcc 	andi	r2,r2,255
 3055240:	e0bffb15 	stw	r2,-20(fp)
 3055244:	e0bff417 	ldw	r2,-48(fp)
 3055248:	10803417 	ldw	r2,208(r2)
 305524c:	e13ff417 	ldw	r4,-48(fp)
 3055250:	01400944 	movi	r5,37
 3055254:	103ee83a 	callr	r2
 3055258:	10803fcc 	andi	r2,r2,255
 305525c:	e0bffc15 	stw	r2,-16(fp)
 3055260:	e0bffb17 	ldw	r2,-20(fp)
 3055264:	1005003a 	cmpeq	r2,r2,zero
 3055268:	1000031e 	bne	r2,zero,3055278 <alt_read_cfi_table+0x128>
 305526c:	e0bffc17 	ldw	r2,-16(fp)
 3055270:	1004c03a 	cmpne	r2,r2,zero
 3055274:	1000051e 	bne	r2,zero,305528c <alt_read_cfi_table+0x13c>
 3055278:	e0fff417 	ldw	r3,-48(fp)
 305527c:	00804c74 	movhi	r2,305
 3055280:	108b4004 	addi	r2,r2,11520
 3055284:	18803115 	stw	r2,196(r3)
 3055288:	00000806 	br	30552ac <alt_read_cfi_table+0x15c>
 305528c:	e13ff417 	ldw	r4,-48(fp)
 3055290:	00c00044 	movi	r3,1
 3055294:	e0bffb17 	ldw	r2,-20(fp)
 3055298:	1886983a 	sll	r3,r3,r2
 305529c:	e0bffc17 	ldw	r2,-16(fp)
 30552a0:	1884983a 	sll	r2,r3,r2
 30552a4:	1080fa24 	muli	r2,r2,1000
 30552a8:	20803115 	stw	r2,196(r4)
 30552ac:	e0bff417 	ldw	r2,-48(fp)
 30552b0:	10803417 	ldw	r2,208(r2)
 30552b4:	e13ff417 	ldw	r4,-48(fp)
 30552b8:	014009c4 	movi	r5,39
 30552bc:	103ee83a 	callr	r2
 30552c0:	10c03fcc 	andi	r3,r2,255
 30552c4:	00800044 	movi	r2,1
 30552c8:	10c4983a 	sll	r2,r2,r3
 30552cc:	e0bff715 	stw	r2,-36(fp)
 30552d0:	e43ff417 	ldw	r16,-48(fp)
 30552d4:	e0bff417 	ldw	r2,-48(fp)
 30552d8:	10803417 	ldw	r2,208(r2)
 30552dc:	e13ff417 	ldw	r4,-48(fp)
 30552e0:	01400b04 	movi	r5,44
 30552e4:	103ee83a 	callr	r2
 30552e8:	10803fcc 	andi	r2,r2,255
 30552ec:	80800c15 	stw	r2,48(r16)
 30552f0:	e0bff417 	ldw	r2,-48(fp)
 30552f4:	10800c17 	ldw	r2,48(r2)
 30552f8:	10800250 	cmplti	r2,r2,9
 30552fc:	1000031e 	bne	r2,zero,305530c <alt_read_cfi_table+0x1bc>
 3055300:	00bffd04 	movi	r2,-12
 3055304:	e0bff815 	stw	r2,-32(fp)
 3055308:	00005c06 	br	305547c <alt_read_cfi_table+0x32c>
 305530c:	e03ff515 	stw	zero,-44(fp)
 3055310:	e0bff417 	ldw	r2,-48(fp)
 3055314:	10c00c17 	ldw	r3,48(r2)
 3055318:	e0bff517 	ldw	r2,-44(fp)
 305531c:	10c0520e 	bge	r2,r3,3055468 <alt_read_cfi_table+0x318>
 3055320:	e0fff417 	ldw	r3,-48(fp)
 3055324:	e0bff517 	ldw	r2,-44(fp)
 3055328:	10800424 	muli	r2,r2,16
 305532c:	10c5883a 	add	r2,r2,r3
 3055330:	14000f04 	addi	r16,r2,60
 3055334:	e0bff517 	ldw	r2,-44(fp)
 3055338:	10800124 	muli	r2,r2,4
 305533c:	11400b44 	addi	r5,r2,45
 3055340:	e13ff417 	ldw	r4,-48(fp)
 3055344:	30550dc0 	call	30550dc <alt_read_16bit_query_entry>
 3055348:	10bfffcc 	andi	r2,r2,65535
 305534c:	80800015 	stw	r2,0(r16)
 3055350:	e0fff417 	ldw	r3,-48(fp)
 3055354:	e0bff517 	ldw	r2,-44(fp)
 3055358:	10800424 	muli	r2,r2,16
 305535c:	10c5883a 	add	r2,r2,r3
 3055360:	11000f04 	addi	r4,r2,60
 3055364:	e0fff417 	ldw	r3,-48(fp)
 3055368:	e0bff517 	ldw	r2,-44(fp)
 305536c:	10800424 	muli	r2,r2,16
 3055370:	10c5883a 	add	r2,r2,r3
 3055374:	10800f04 	addi	r2,r2,60
 3055378:	10800017 	ldw	r2,0(r2)
 305537c:	10800044 	addi	r2,r2,1
 3055380:	20800015 	stw	r2,0(r4)
 3055384:	e0fff417 	ldw	r3,-48(fp)
 3055388:	e0bff517 	ldw	r2,-44(fp)
 305538c:	10800424 	muli	r2,r2,16
 3055390:	10c5883a 	add	r2,r2,r3
 3055394:	14001004 	addi	r16,r2,64
 3055398:	e0bff517 	ldw	r2,-44(fp)
 305539c:	10800124 	muli	r2,r2,4
 30553a0:	11400bc4 	addi	r5,r2,47
 30553a4:	e13ff417 	ldw	r4,-48(fp)
 30553a8:	30550dc0 	call	30550dc <alt_read_16bit_query_entry>
 30553ac:	10bfffcc 	andi	r2,r2,65535
 30553b0:	80800015 	stw	r2,0(r16)
 30553b4:	e0fff417 	ldw	r3,-48(fp)
 30553b8:	e0bff517 	ldw	r2,-44(fp)
 30553bc:	10800424 	muli	r2,r2,16
 30553c0:	10c5883a 	add	r2,r2,r3
 30553c4:	11001004 	addi	r4,r2,64
 30553c8:	e0fff417 	ldw	r3,-48(fp)
 30553cc:	e0bff517 	ldw	r2,-44(fp)
 30553d0:	10800424 	muli	r2,r2,16
 30553d4:	10c5883a 	add	r2,r2,r3
 30553d8:	10801004 	addi	r2,r2,64
 30553dc:	10800017 	ldw	r2,0(r2)
 30553e0:	10804024 	muli	r2,r2,256
 30553e4:	20800015 	stw	r2,0(r4)
 30553e8:	e0fff417 	ldw	r3,-48(fp)
 30553ec:	e0bff517 	ldw	r2,-44(fp)
 30553f0:	10800424 	muli	r2,r2,16
 30553f4:	10c5883a 	add	r2,r2,r3
 30553f8:	11400e04 	addi	r5,r2,56
 30553fc:	e0fff417 	ldw	r3,-48(fp)
 3055400:	e0bff517 	ldw	r2,-44(fp)
 3055404:	10800424 	muli	r2,r2,16
 3055408:	10c5883a 	add	r2,r2,r3
 305540c:	11000f04 	addi	r4,r2,60
 3055410:	e0fff417 	ldw	r3,-48(fp)
 3055414:	e0bff517 	ldw	r2,-44(fp)
 3055418:	10800424 	muli	r2,r2,16
 305541c:	10c5883a 	add	r2,r2,r3
 3055420:	10801004 	addi	r2,r2,64
 3055424:	20c00017 	ldw	r3,0(r4)
 3055428:	10800017 	ldw	r2,0(r2)
 305542c:	1885383a 	mul	r2,r3,r2
 3055430:	28800015 	stw	r2,0(r5)
 3055434:	e0fff417 	ldw	r3,-48(fp)
 3055438:	e0bff517 	ldw	r2,-44(fp)
 305543c:	10800424 	muli	r2,r2,16
 3055440:	10c5883a 	add	r2,r2,r3
 3055444:	10800e04 	addi	r2,r2,56
 3055448:	e0fff917 	ldw	r3,-28(fp)
 305544c:	10800017 	ldw	r2,0(r2)
 3055450:	1885883a 	add	r2,r3,r2
 3055454:	e0bff915 	stw	r2,-28(fp)
 3055458:	e0bff517 	ldw	r2,-44(fp)
 305545c:	10800044 	addi	r2,r2,1
 3055460:	e0bff515 	stw	r2,-44(fp)
 3055464:	003faa06 	br	3055310 <alt_read_cfi_table+0x1c0>
 3055468:	e0fff917 	ldw	r3,-28(fp)
 305546c:	e0bff717 	ldw	r2,-36(fp)
 3055470:	18800226 	beq	r3,r2,305547c <alt_read_cfi_table+0x32c>
 3055474:	00bffb44 	movi	r2,-19
 3055478:	e0bff815 	stw	r2,-32(fp)
 305547c:	e0fff417 	ldw	r3,-48(fp)
 3055480:	e0bff417 	ldw	r2,-48(fp)
 3055484:	10803217 	ldw	r2,200(r2)
 3055488:	114003c4 	addi	r5,r2,15
 305548c:	18803417 	ldw	r2,208(r3)
 3055490:	e13ff417 	ldw	r4,-48(fp)
 3055494:	103ee83a 	callr	r2
 3055498:	e0bffe05 	stb	r2,-8(fp)
 305549c:	e0bff417 	ldw	r2,-48(fp)
 30554a0:	10802d17 	ldw	r2,180(r2)
 30554a4:	10800098 	cmpnei	r2,r2,2
 30554a8:	1000601e 	bne	r2,zero,305562c <alt_read_cfi_table+0x4dc>
 30554ac:	e0bffe03 	ldbu	r2,-8(fp)
 30554b0:	108000d8 	cmpnei	r2,r2,3
 30554b4:	10005d1e 	bne	r2,zero,305562c <alt_read_cfi_table+0x4dc>
 30554b8:	e0bff417 	ldw	r2,-48(fp)
 30554bc:	10800c17 	ldw	r2,48(r2)
 30554c0:	10bfffc4 	addi	r2,r2,-1
 30554c4:	e0bff515 	stw	r2,-44(fp)
 30554c8:	e03ff615 	stw	zero,-40(fp)
 30554cc:	e0fff617 	ldw	r3,-40(fp)
 30554d0:	e0bff517 	ldw	r2,-44(fp)
 30554d4:	10c05516 	blt	r2,r3,305562c <alt_read_cfi_table+0x4dc>
 30554d8:	e0fff417 	ldw	r3,-48(fp)
 30554dc:	e0bff517 	ldw	r2,-44(fp)
 30554e0:	10800424 	muli	r2,r2,16
 30554e4:	10c5883a 	add	r2,r2,r3
 30554e8:	10800e04 	addi	r2,r2,56
 30554ec:	10800017 	ldw	r2,0(r2)
 30554f0:	e0bffa15 	stw	r2,-24(fp)
 30554f4:	e0fff417 	ldw	r3,-48(fp)
 30554f8:	e0bff517 	ldw	r2,-44(fp)
 30554fc:	10800424 	muli	r2,r2,16
 3055500:	10c5883a 	add	r2,r2,r3
 3055504:	11000e04 	addi	r4,r2,56
 3055508:	e0fff417 	ldw	r3,-48(fp)
 305550c:	e0bff617 	ldw	r2,-40(fp)
 3055510:	10800424 	muli	r2,r2,16
 3055514:	10c5883a 	add	r2,r2,r3
 3055518:	10800e04 	addi	r2,r2,56
 305551c:	10800017 	ldw	r2,0(r2)
 3055520:	20800015 	stw	r2,0(r4)
 3055524:	e0fff417 	ldw	r3,-48(fp)
 3055528:	e0bff617 	ldw	r2,-40(fp)
 305552c:	10800424 	muli	r2,r2,16
 3055530:	10c5883a 	add	r2,r2,r3
 3055534:	10c00e04 	addi	r3,r2,56
 3055538:	e0bffa17 	ldw	r2,-24(fp)
 305553c:	18800015 	stw	r2,0(r3)
 3055540:	e0fff417 	ldw	r3,-48(fp)
 3055544:	e0bff517 	ldw	r2,-44(fp)
 3055548:	10800424 	muli	r2,r2,16
 305554c:	10c5883a 	add	r2,r2,r3
 3055550:	10801004 	addi	r2,r2,64
 3055554:	10800017 	ldw	r2,0(r2)
 3055558:	e0bffa15 	stw	r2,-24(fp)
 305555c:	e0fff417 	ldw	r3,-48(fp)
 3055560:	e0bff517 	ldw	r2,-44(fp)
 3055564:	10800424 	muli	r2,r2,16
 3055568:	10c5883a 	add	r2,r2,r3
 305556c:	11001004 	addi	r4,r2,64
 3055570:	e0fff417 	ldw	r3,-48(fp)
 3055574:	e0bff617 	ldw	r2,-40(fp)
 3055578:	10800424 	muli	r2,r2,16
 305557c:	10c5883a 	add	r2,r2,r3
 3055580:	10801004 	addi	r2,r2,64
 3055584:	10800017 	ldw	r2,0(r2)
 3055588:	20800015 	stw	r2,0(r4)
 305558c:	e0fff417 	ldw	r3,-48(fp)
 3055590:	e0bff617 	ldw	r2,-40(fp)
 3055594:	10800424 	muli	r2,r2,16
 3055598:	10c5883a 	add	r2,r2,r3
 305559c:	10c01004 	addi	r3,r2,64
 30555a0:	e0bffa17 	ldw	r2,-24(fp)
 30555a4:	18800015 	stw	r2,0(r3)
 30555a8:	e0fff417 	ldw	r3,-48(fp)
 30555ac:	e0bff517 	ldw	r2,-44(fp)
 30555b0:	10800424 	muli	r2,r2,16
 30555b4:	10c5883a 	add	r2,r2,r3
 30555b8:	10800f04 	addi	r2,r2,60
 30555bc:	10800017 	ldw	r2,0(r2)
 30555c0:	e0bffa15 	stw	r2,-24(fp)
 30555c4:	e0fff417 	ldw	r3,-48(fp)
 30555c8:	e0bff517 	ldw	r2,-44(fp)
 30555cc:	10800424 	muli	r2,r2,16
 30555d0:	10c5883a 	add	r2,r2,r3
 30555d4:	11000f04 	addi	r4,r2,60
 30555d8:	e0fff417 	ldw	r3,-48(fp)
 30555dc:	e0bff617 	ldw	r2,-40(fp)
 30555e0:	10800424 	muli	r2,r2,16
 30555e4:	10c5883a 	add	r2,r2,r3
 30555e8:	10800f04 	addi	r2,r2,60
 30555ec:	10800017 	ldw	r2,0(r2)
 30555f0:	20800015 	stw	r2,0(r4)
 30555f4:	e0fff417 	ldw	r3,-48(fp)
 30555f8:	e0bff617 	ldw	r2,-40(fp)
 30555fc:	10800424 	muli	r2,r2,16
 3055600:	10c5883a 	add	r2,r2,r3
 3055604:	10c00f04 	addi	r3,r2,60
 3055608:	e0bffa17 	ldw	r2,-24(fp)
 305560c:	18800015 	stw	r2,0(r3)
 3055610:	e0bff517 	ldw	r2,-44(fp)
 3055614:	10bfffc4 	addi	r2,r2,-1
 3055618:	e0bff515 	stw	r2,-44(fp)
 305561c:	e0bff617 	ldw	r2,-40(fp)
 3055620:	10800044 	addi	r2,r2,1
 3055624:	e0bff615 	stw	r2,-40(fp)
 3055628:	003fa806 	br	30554cc <alt_read_cfi_table+0x37c>
 305562c:	e03ff515 	stw	zero,-44(fp)
 3055630:	e0bff417 	ldw	r2,-48(fp)
 3055634:	10c00c17 	ldw	r3,48(r2)
 3055638:	e0bff517 	ldw	r2,-44(fp)
 305563c:	10c0140e 	bge	r2,r3,3055690 <alt_read_cfi_table+0x540>
 3055640:	e0fff417 	ldw	r3,-48(fp)
 3055644:	e0bff517 	ldw	r2,-44(fp)
 3055648:	10800424 	muli	r2,r2,16
 305564c:	10c5883a 	add	r2,r2,r3
 3055650:	10c00d04 	addi	r3,r2,52
 3055654:	e0bffd17 	ldw	r2,-12(fp)
 3055658:	18800015 	stw	r2,0(r3)
 305565c:	e0fff417 	ldw	r3,-48(fp)
 3055660:	e0bff517 	ldw	r2,-44(fp)
 3055664:	10800424 	muli	r2,r2,16
 3055668:	10c5883a 	add	r2,r2,r3
 305566c:	10800e04 	addi	r2,r2,56
 3055670:	e0fffd17 	ldw	r3,-12(fp)
 3055674:	10800017 	ldw	r2,0(r2)
 3055678:	1885883a 	add	r2,r3,r2
 305567c:	e0bffd15 	stw	r2,-12(fp)
 3055680:	e0bff517 	ldw	r2,-44(fp)
 3055684:	10800044 	addi	r2,r2,1
 3055688:	e0bff515 	stw	r2,-44(fp)
 305568c:	003fe806 	br	3055630 <alt_read_cfi_table+0x4e0>
 3055690:	e0bff417 	ldw	r2,-48(fp)
 3055694:	e0fff417 	ldw	r3,-48(fp)
 3055698:	10803317 	ldw	r2,204(r2)
 305569c:	19000a17 	ldw	r4,40(r3)
 30556a0:	01401544 	movi	r5,85
 30556a4:	01803fc4 	movi	r6,255
 30556a8:	103ee83a 	callr	r2
 30556ac:	e0bff817 	ldw	r2,-32(fp)
 30556b0:	dfc00d17 	ldw	ra,52(sp)
 30556b4:	df000c17 	ldw	fp,48(sp)
 30556b8:	dc000b17 	ldw	r16,44(sp)
 30556bc:	dec00e04 	addi	sp,sp,56
 30556c0:	f800283a 	ret

030556c4 <alt_read_cfi_width>:
 30556c4:	defff704 	addi	sp,sp,-36
 30556c8:	dfc00815 	stw	ra,32(sp)
 30556cc:	df000715 	stw	fp,28(sp)
 30556d0:	df000704 	addi	fp,sp,28
 30556d4:	e13ff915 	stw	r4,-28(fp)
 30556d8:	e03fff15 	stw	zero,-4(fp)
 30556dc:	e0bff917 	ldw	r2,-28(fp)
 30556e0:	11000a17 	ldw	r4,40(r2)
 30556e4:	01401544 	movi	r5,85
 30556e8:	01802604 	movi	r6,152
 30556ec:	3054be00 	call	3054be0 <alt_write_flash_command_8bit_device_8bit_mode>
 30556f0:	e03ffa15 	stw	zero,-24(fp)
 30556f4:	e0bffa17 	ldw	r2,-24(fp)
 30556f8:	108000c8 	cmpgei	r2,r2,3
 30556fc:	10000e1e 	bne	r2,zero,3055738 <alt_read_cfi_width+0x74>
 3055700:	e0fffb04 	addi	r3,fp,-20
 3055704:	e0bffa17 	ldw	r2,-24(fp)
 3055708:	1889883a 	add	r4,r3,r2
 305570c:	e0bff917 	ldw	r2,-28(fp)
 3055710:	10c00a17 	ldw	r3,40(r2)
 3055714:	e0bffa17 	ldw	r2,-24(fp)
 3055718:	1885883a 	add	r2,r3,r2
 305571c:	10800404 	addi	r2,r2,16
 3055720:	10800023 	ldbuio	r2,0(r2)
 3055724:	20800005 	stb	r2,0(r4)
 3055728:	e0bffa17 	ldw	r2,-24(fp)
 305572c:	10800044 	addi	r2,r2,1
 3055730:	e0bffa15 	stw	r2,-24(fp)
 3055734:	003fef06 	br	30556f4 <alt_read_cfi_width+0x30>
 3055738:	e0bffb03 	ldbu	r2,-20(fp)
 305573c:	10801458 	cmpnei	r2,r2,81
 3055740:	10001b1e 	bne	r2,zero,30557b0 <alt_read_cfi_width+0xec>
 3055744:	e0bffb43 	ldbu	r2,-19(fp)
 3055748:	10801498 	cmpnei	r2,r2,82
 305574c:	1000181e 	bne	r2,zero,30557b0 <alt_read_cfi_width+0xec>
 3055750:	e0bffb83 	ldbu	r2,-18(fp)
 3055754:	10801658 	cmpnei	r2,r2,89
 3055758:	1000151e 	bne	r2,zero,30557b0 <alt_read_cfi_width+0xec>
 305575c:	e0fff917 	ldw	r3,-28(fp)
 3055760:	00800044 	movi	r2,1
 3055764:	18802e15 	stw	r2,184(r3)
 3055768:	e0fff917 	ldw	r3,-28(fp)
 305576c:	00800044 	movi	r2,1
 3055770:	18802f15 	stw	r2,188(r3)
 3055774:	e0bff917 	ldw	r2,-28(fp)
 3055778:	10800a17 	ldw	r2,40(r2)
 305577c:	10800a04 	addi	r2,r2,40
 3055780:	1080002b 	ldhuio	r2,0(r2)
 3055784:	e0bffe0d 	sth	r2,-8(fp)
 3055788:	e0bffe0b 	ldhu	r2,-8(fp)
 305578c:	10800044 	addi	r2,r2,1
 3055790:	e0bffe0d 	sth	r2,-8(fp)
 3055794:	e0bffe0b 	ldhu	r2,-8(fp)
 3055798:	1080004c 	andi	r2,r2,1
 305579c:	1004c03a 	cmpne	r2,r2,zero
 30557a0:	10016e1e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 30557a4:	00bffb44 	movi	r2,-19
 30557a8:	e0bfff15 	stw	r2,-4(fp)
 30557ac:	00016b06 	br	3055d5c <alt_read_cfi_width+0x698>
 30557b0:	e0bff917 	ldw	r2,-28(fp)
 30557b4:	11000a17 	ldw	r4,40(r2)
 30557b8:	01401544 	movi	r5,85
 30557bc:	01802604 	movi	r6,152
 30557c0:	3054c1c0 	call	3054c1c <alt_write_flash_command_16bit_device_8bit_mode>
 30557c4:	e03ffa15 	stw	zero,-24(fp)
 30557c8:	e0bffa17 	ldw	r2,-24(fp)
 30557cc:	10800188 	cmpgei	r2,r2,6
 30557d0:	10000e1e 	bne	r2,zero,305580c <alt_read_cfi_width+0x148>
 30557d4:	e0fffb04 	addi	r3,fp,-20
 30557d8:	e0bffa17 	ldw	r2,-24(fp)
 30557dc:	1889883a 	add	r4,r3,r2
 30557e0:	e0bff917 	ldw	r2,-28(fp)
 30557e4:	10c00a17 	ldw	r3,40(r2)
 30557e8:	e0bffa17 	ldw	r2,-24(fp)
 30557ec:	1885883a 	add	r2,r3,r2
 30557f0:	10800804 	addi	r2,r2,32
 30557f4:	10800023 	ldbuio	r2,0(r2)
 30557f8:	20800005 	stb	r2,0(r4)
 30557fc:	e0bffa17 	ldw	r2,-24(fp)
 3055800:	10800044 	addi	r2,r2,1
 3055804:	e0bffa15 	stw	r2,-24(fp)
 3055808:	003fef06 	br	30557c8 <alt_read_cfi_width+0x104>
 305580c:	e0bffb03 	ldbu	r2,-20(fp)
 3055810:	10801458 	cmpnei	r2,r2,81
 3055814:	1000241e 	bne	r2,zero,30558a8 <alt_read_cfi_width+0x1e4>
 3055818:	e0bffb43 	ldbu	r2,-19(fp)
 305581c:	10801458 	cmpnei	r2,r2,81
 3055820:	1000211e 	bne	r2,zero,30558a8 <alt_read_cfi_width+0x1e4>
 3055824:	e0bffb83 	ldbu	r2,-18(fp)
 3055828:	10801498 	cmpnei	r2,r2,82
 305582c:	10001e1e 	bne	r2,zero,30558a8 <alt_read_cfi_width+0x1e4>
 3055830:	e0bffbc3 	ldbu	r2,-17(fp)
 3055834:	10801498 	cmpnei	r2,r2,82
 3055838:	10001b1e 	bne	r2,zero,30558a8 <alt_read_cfi_width+0x1e4>
 305583c:	e0bffc03 	ldbu	r2,-16(fp)
 3055840:	10801658 	cmpnei	r2,r2,89
 3055844:	1000181e 	bne	r2,zero,30558a8 <alt_read_cfi_width+0x1e4>
 3055848:	e0bffc43 	ldbu	r2,-15(fp)
 305584c:	10801658 	cmpnei	r2,r2,89
 3055850:	1000151e 	bne	r2,zero,30558a8 <alt_read_cfi_width+0x1e4>
 3055854:	e0fff917 	ldw	r3,-28(fp)
 3055858:	00800044 	movi	r2,1
 305585c:	18802e15 	stw	r2,184(r3)
 3055860:	e0fff917 	ldw	r3,-28(fp)
 3055864:	00800084 	movi	r2,2
 3055868:	18802f15 	stw	r2,188(r3)
 305586c:	e0bff917 	ldw	r2,-28(fp)
 3055870:	10800a17 	ldw	r2,40(r2)
 3055874:	10801404 	addi	r2,r2,80
 3055878:	1080002b 	ldhuio	r2,0(r2)
 305587c:	e0bffe0d 	sth	r2,-8(fp)
 3055880:	e0bffe0b 	ldhu	r2,-8(fp)
 3055884:	10800044 	addi	r2,r2,1
 3055888:	e0bffe0d 	sth	r2,-8(fp)
 305588c:	e0bffe0b 	ldhu	r2,-8(fp)
 3055890:	1080004c 	andi	r2,r2,1
 3055894:	1004c03a 	cmpne	r2,r2,zero
 3055898:	1001301e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 305589c:	00bffb44 	movi	r2,-19
 30558a0:	e0bfff15 	stw	r2,-4(fp)
 30558a4:	00012d06 	br	3055d5c <alt_read_cfi_width+0x698>
 30558a8:	e0bff917 	ldw	r2,-28(fp)
 30558ac:	11000a17 	ldw	r4,40(r2)
 30558b0:	01401544 	movi	r5,85
 30558b4:	01802604 	movi	r6,152
 30558b8:	3054cd80 	call	3054cd8 <alt_write_flash_command_16bit_device_16bit_mode>
 30558bc:	e03ffa15 	stw	zero,-24(fp)
 30558c0:	e0bffa17 	ldw	r2,-24(fp)
 30558c4:	10800188 	cmpgei	r2,r2,6
 30558c8:	10000e1e 	bne	r2,zero,3055904 <alt_read_cfi_width+0x240>
 30558cc:	e0fffb04 	addi	r3,fp,-20
 30558d0:	e0bffa17 	ldw	r2,-24(fp)
 30558d4:	1889883a 	add	r4,r3,r2
 30558d8:	e0bff917 	ldw	r2,-28(fp)
 30558dc:	10c00a17 	ldw	r3,40(r2)
 30558e0:	e0bffa17 	ldw	r2,-24(fp)
 30558e4:	1885883a 	add	r2,r3,r2
 30558e8:	10800804 	addi	r2,r2,32
 30558ec:	10800023 	ldbuio	r2,0(r2)
 30558f0:	20800005 	stb	r2,0(r4)
 30558f4:	e0bffa17 	ldw	r2,-24(fp)
 30558f8:	10800044 	addi	r2,r2,1
 30558fc:	e0bffa15 	stw	r2,-24(fp)
 3055900:	003fef06 	br	30558c0 <alt_read_cfi_width+0x1fc>
 3055904:	e0bffb03 	ldbu	r2,-20(fp)
 3055908:	10801458 	cmpnei	r2,r2,81
 305590c:	1000241e 	bne	r2,zero,30559a0 <alt_read_cfi_width+0x2dc>
 3055910:	e0bffb43 	ldbu	r2,-19(fp)
 3055914:	1004c03a 	cmpne	r2,r2,zero
 3055918:	1000211e 	bne	r2,zero,30559a0 <alt_read_cfi_width+0x2dc>
 305591c:	e0bffb83 	ldbu	r2,-18(fp)
 3055920:	10801498 	cmpnei	r2,r2,82
 3055924:	10001e1e 	bne	r2,zero,30559a0 <alt_read_cfi_width+0x2dc>
 3055928:	e0bffbc3 	ldbu	r2,-17(fp)
 305592c:	1004c03a 	cmpne	r2,r2,zero
 3055930:	10001b1e 	bne	r2,zero,30559a0 <alt_read_cfi_width+0x2dc>
 3055934:	e0bffc03 	ldbu	r2,-16(fp)
 3055938:	10801658 	cmpnei	r2,r2,89
 305593c:	1000181e 	bne	r2,zero,30559a0 <alt_read_cfi_width+0x2dc>
 3055940:	e0bffc43 	ldbu	r2,-15(fp)
 3055944:	1004c03a 	cmpne	r2,r2,zero
 3055948:	1000151e 	bne	r2,zero,30559a0 <alt_read_cfi_width+0x2dc>
 305594c:	e0fff917 	ldw	r3,-28(fp)
 3055950:	00800084 	movi	r2,2
 3055954:	18802e15 	stw	r2,184(r3)
 3055958:	e0fff917 	ldw	r3,-28(fp)
 305595c:	00800084 	movi	r2,2
 3055960:	18802f15 	stw	r2,188(r3)
 3055964:	e0bff917 	ldw	r2,-28(fp)
 3055968:	10800a17 	ldw	r2,40(r2)
 305596c:	10801404 	addi	r2,r2,80
 3055970:	1080002b 	ldhuio	r2,0(r2)
 3055974:	e0bffe0d 	sth	r2,-8(fp)
 3055978:	e0bffe0b 	ldhu	r2,-8(fp)
 305597c:	10800044 	addi	r2,r2,1
 3055980:	e0bffe0d 	sth	r2,-8(fp)
 3055984:	e0bffe0b 	ldhu	r2,-8(fp)
 3055988:	1080008c 	andi	r2,r2,2
 305598c:	1004c03a 	cmpne	r2,r2,zero
 3055990:	1000f21e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055994:	00bffb44 	movi	r2,-19
 3055998:	e0bfff15 	stw	r2,-4(fp)
 305599c:	0000ef06 	br	3055d5c <alt_read_cfi_width+0x698>
 30559a0:	e0bff917 	ldw	r2,-28(fp)
 30559a4:	11000a17 	ldw	r4,40(r2)
 30559a8:	01401544 	movi	r5,85
 30559ac:	01802604 	movi	r6,152
 30559b0:	3054d5c0 	call	3054d5c <alt_write_flash_command_32bit_device_32bit_mode>
 30559b4:	e03ffa15 	stw	zero,-24(fp)
 30559b8:	e0bffa17 	ldw	r2,-24(fp)
 30559bc:	10800308 	cmpgei	r2,r2,12
 30559c0:	10000e1e 	bne	r2,zero,30559fc <alt_read_cfi_width+0x338>
 30559c4:	e0fffb04 	addi	r3,fp,-20
 30559c8:	e0bffa17 	ldw	r2,-24(fp)
 30559cc:	1889883a 	add	r4,r3,r2
 30559d0:	e0bff917 	ldw	r2,-28(fp)
 30559d4:	10c00a17 	ldw	r3,40(r2)
 30559d8:	e0bffa17 	ldw	r2,-24(fp)
 30559dc:	1885883a 	add	r2,r3,r2
 30559e0:	10801004 	addi	r2,r2,64
 30559e4:	10800023 	ldbuio	r2,0(r2)
 30559e8:	20800005 	stb	r2,0(r4)
 30559ec:	e0bffa17 	ldw	r2,-24(fp)
 30559f0:	10800044 	addi	r2,r2,1
 30559f4:	e0bffa15 	stw	r2,-24(fp)
 30559f8:	003fef06 	br	30559b8 <alt_read_cfi_width+0x2f4>
 30559fc:	e0bffb03 	ldbu	r2,-20(fp)
 3055a00:	10801458 	cmpnei	r2,r2,81
 3055a04:	1000361e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a08:	e0bffb43 	ldbu	r2,-19(fp)
 3055a0c:	1004c03a 	cmpne	r2,r2,zero
 3055a10:	1000331e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a14:	e0bffb83 	ldbu	r2,-18(fp)
 3055a18:	1004c03a 	cmpne	r2,r2,zero
 3055a1c:	1000301e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a20:	e0bffbc3 	ldbu	r2,-17(fp)
 3055a24:	1004c03a 	cmpne	r2,r2,zero
 3055a28:	10002d1e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a2c:	e0bffc03 	ldbu	r2,-16(fp)
 3055a30:	10801498 	cmpnei	r2,r2,82
 3055a34:	10002a1e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a38:	e0bffc43 	ldbu	r2,-15(fp)
 3055a3c:	1004c03a 	cmpne	r2,r2,zero
 3055a40:	1000271e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a44:	e0bffc83 	ldbu	r2,-14(fp)
 3055a48:	1004c03a 	cmpne	r2,r2,zero
 3055a4c:	1000241e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a50:	e0bffcc3 	ldbu	r2,-13(fp)
 3055a54:	1004c03a 	cmpne	r2,r2,zero
 3055a58:	1000211e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a5c:	e0bffd03 	ldbu	r2,-12(fp)
 3055a60:	10801658 	cmpnei	r2,r2,89
 3055a64:	10001e1e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a68:	e0bffd43 	ldbu	r2,-11(fp)
 3055a6c:	1004c03a 	cmpne	r2,r2,zero
 3055a70:	10001b1e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a74:	e0bffd83 	ldbu	r2,-10(fp)
 3055a78:	1004c03a 	cmpne	r2,r2,zero
 3055a7c:	1000181e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a80:	e0bffdc3 	ldbu	r2,-9(fp)
 3055a84:	1004c03a 	cmpne	r2,r2,zero
 3055a88:	1000151e 	bne	r2,zero,3055ae0 <alt_read_cfi_width+0x41c>
 3055a8c:	e0fff917 	ldw	r3,-28(fp)
 3055a90:	00800104 	movi	r2,4
 3055a94:	18802e15 	stw	r2,184(r3)
 3055a98:	e0fff917 	ldw	r3,-28(fp)
 3055a9c:	00800104 	movi	r2,4
 3055aa0:	18802f15 	stw	r2,188(r3)
 3055aa4:	e0bff917 	ldw	r2,-28(fp)
 3055aa8:	10800a17 	ldw	r2,40(r2)
 3055aac:	10802804 	addi	r2,r2,160
 3055ab0:	10800037 	ldwio	r2,0(r2)
 3055ab4:	e0bffe0d 	sth	r2,-8(fp)
 3055ab8:	e0bffe0b 	ldhu	r2,-8(fp)
 3055abc:	10800044 	addi	r2,r2,1
 3055ac0:	e0bffe0d 	sth	r2,-8(fp)
 3055ac4:	e0bffe0b 	ldhu	r2,-8(fp)
 3055ac8:	1080010c 	andi	r2,r2,4
 3055acc:	1004c03a 	cmpne	r2,r2,zero
 3055ad0:	1000a21e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055ad4:	00bffb44 	movi	r2,-19
 3055ad8:	e0bfff15 	stw	r2,-4(fp)
 3055adc:	00009f06 	br	3055d5c <alt_read_cfi_width+0x698>
 3055ae0:	e0bff917 	ldw	r2,-28(fp)
 3055ae4:	11000a17 	ldw	r4,40(r2)
 3055ae8:	01401544 	movi	r5,85
 3055aec:	01802604 	movi	r6,152
 3055af0:	3054d1c0 	call	3054d1c <alt_write_flash_command_32bit_device_16bit_mode>
 3055af4:	e03ffa15 	stw	zero,-24(fp)
 3055af8:	e0bffa17 	ldw	r2,-24(fp)
 3055afc:	10800308 	cmpgei	r2,r2,12
 3055b00:	10000e1e 	bne	r2,zero,3055b3c <alt_read_cfi_width+0x478>
 3055b04:	e0fffb04 	addi	r3,fp,-20
 3055b08:	e0bffa17 	ldw	r2,-24(fp)
 3055b0c:	1889883a 	add	r4,r3,r2
 3055b10:	e0bff917 	ldw	r2,-28(fp)
 3055b14:	10c00a17 	ldw	r3,40(r2)
 3055b18:	e0bffa17 	ldw	r2,-24(fp)
 3055b1c:	1885883a 	add	r2,r3,r2
 3055b20:	10801004 	addi	r2,r2,64
 3055b24:	10800023 	ldbuio	r2,0(r2)
 3055b28:	20800005 	stb	r2,0(r4)
 3055b2c:	e0bffa17 	ldw	r2,-24(fp)
 3055b30:	10800044 	addi	r2,r2,1
 3055b34:	e0bffa15 	stw	r2,-24(fp)
 3055b38:	003fef06 	br	3055af8 <alt_read_cfi_width+0x434>
 3055b3c:	e0bffb03 	ldbu	r2,-20(fp)
 3055b40:	10801458 	cmpnei	r2,r2,81
 3055b44:	1000361e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b48:	e0bffb43 	ldbu	r2,-19(fp)
 3055b4c:	1004c03a 	cmpne	r2,r2,zero
 3055b50:	1000331e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b54:	e0bffb83 	ldbu	r2,-18(fp)
 3055b58:	10801458 	cmpnei	r2,r2,81
 3055b5c:	1000301e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b60:	e0bffbc3 	ldbu	r2,-17(fp)
 3055b64:	1004c03a 	cmpne	r2,r2,zero
 3055b68:	10002d1e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b6c:	e0bffc03 	ldbu	r2,-16(fp)
 3055b70:	10801498 	cmpnei	r2,r2,82
 3055b74:	10002a1e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b78:	e0bffc43 	ldbu	r2,-15(fp)
 3055b7c:	1004c03a 	cmpne	r2,r2,zero
 3055b80:	1000271e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b84:	e0bffc83 	ldbu	r2,-14(fp)
 3055b88:	10801498 	cmpnei	r2,r2,82
 3055b8c:	1000241e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b90:	e0bffcc3 	ldbu	r2,-13(fp)
 3055b94:	1004c03a 	cmpne	r2,r2,zero
 3055b98:	1000211e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055b9c:	e0bffd03 	ldbu	r2,-12(fp)
 3055ba0:	10801658 	cmpnei	r2,r2,89
 3055ba4:	10001e1e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055ba8:	e0bffd43 	ldbu	r2,-11(fp)
 3055bac:	1004c03a 	cmpne	r2,r2,zero
 3055bb0:	10001b1e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055bb4:	e0bffd83 	ldbu	r2,-10(fp)
 3055bb8:	10801658 	cmpnei	r2,r2,89
 3055bbc:	1000181e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055bc0:	e0bffdc3 	ldbu	r2,-9(fp)
 3055bc4:	1004c03a 	cmpne	r2,r2,zero
 3055bc8:	1000151e 	bne	r2,zero,3055c20 <alt_read_cfi_width+0x55c>
 3055bcc:	e0fff917 	ldw	r3,-28(fp)
 3055bd0:	00800084 	movi	r2,2
 3055bd4:	18802e15 	stw	r2,184(r3)
 3055bd8:	e0fff917 	ldw	r3,-28(fp)
 3055bdc:	00800104 	movi	r2,4
 3055be0:	18802f15 	stw	r2,188(r3)
 3055be4:	e0bff917 	ldw	r2,-28(fp)
 3055be8:	10800a17 	ldw	r2,40(r2)
 3055bec:	10802804 	addi	r2,r2,160
 3055bf0:	10800037 	ldwio	r2,0(r2)
 3055bf4:	e0bffe0d 	sth	r2,-8(fp)
 3055bf8:	e0bffe0b 	ldhu	r2,-8(fp)
 3055bfc:	10800044 	addi	r2,r2,1
 3055c00:	e0bffe0d 	sth	r2,-8(fp)
 3055c04:	e0bffe0b 	ldhu	r2,-8(fp)
 3055c08:	1080010c 	andi	r2,r2,4
 3055c0c:	1004c03a 	cmpne	r2,r2,zero
 3055c10:	1000521e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055c14:	00bffb44 	movi	r2,-19
 3055c18:	e0bfff15 	stw	r2,-4(fp)
 3055c1c:	00004f06 	br	3055d5c <alt_read_cfi_width+0x698>
 3055c20:	e0bff917 	ldw	r2,-28(fp)
 3055c24:	11000a17 	ldw	r4,40(r2)
 3055c28:	01401544 	movi	r5,85
 3055c2c:	01802604 	movi	r6,152
 3055c30:	3054c980 	call	3054c98 <alt_write_flash_command_32bit_device_8bit_mode>
 3055c34:	e03ffa15 	stw	zero,-24(fp)
 3055c38:	e0bffa17 	ldw	r2,-24(fp)
 3055c3c:	10800308 	cmpgei	r2,r2,12
 3055c40:	10000e1e 	bne	r2,zero,3055c7c <alt_read_cfi_width+0x5b8>
 3055c44:	e0fffb04 	addi	r3,fp,-20
 3055c48:	e0bffa17 	ldw	r2,-24(fp)
 3055c4c:	1889883a 	add	r4,r3,r2
 3055c50:	e0bff917 	ldw	r2,-28(fp)
 3055c54:	10c00a17 	ldw	r3,40(r2)
 3055c58:	e0bffa17 	ldw	r2,-24(fp)
 3055c5c:	1885883a 	add	r2,r3,r2
 3055c60:	10801004 	addi	r2,r2,64
 3055c64:	10800023 	ldbuio	r2,0(r2)
 3055c68:	20800005 	stb	r2,0(r4)
 3055c6c:	e0bffa17 	ldw	r2,-24(fp)
 3055c70:	10800044 	addi	r2,r2,1
 3055c74:	e0bffa15 	stw	r2,-24(fp)
 3055c78:	003fef06 	br	3055c38 <alt_read_cfi_width+0x574>
 3055c7c:	e0bffb03 	ldbu	r2,-20(fp)
 3055c80:	10801458 	cmpnei	r2,r2,81
 3055c84:	1000351e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055c88:	e0bffb43 	ldbu	r2,-19(fp)
 3055c8c:	10801458 	cmpnei	r2,r2,81
 3055c90:	1000321e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055c94:	e0bffb83 	ldbu	r2,-18(fp)
 3055c98:	10801458 	cmpnei	r2,r2,81
 3055c9c:	10002f1e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055ca0:	e0bffbc3 	ldbu	r2,-17(fp)
 3055ca4:	10801458 	cmpnei	r2,r2,81
 3055ca8:	10002c1e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055cac:	e0bffc03 	ldbu	r2,-16(fp)
 3055cb0:	10801498 	cmpnei	r2,r2,82
 3055cb4:	1000291e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055cb8:	e0bffc43 	ldbu	r2,-15(fp)
 3055cbc:	10801498 	cmpnei	r2,r2,82
 3055cc0:	1000261e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055cc4:	e0bffc83 	ldbu	r2,-14(fp)
 3055cc8:	10801498 	cmpnei	r2,r2,82
 3055ccc:	1000231e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055cd0:	e0bffcc3 	ldbu	r2,-13(fp)
 3055cd4:	10801498 	cmpnei	r2,r2,82
 3055cd8:	1000201e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055cdc:	e0bffd03 	ldbu	r2,-12(fp)
 3055ce0:	10801658 	cmpnei	r2,r2,89
 3055ce4:	10001d1e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055ce8:	e0bffd43 	ldbu	r2,-11(fp)
 3055cec:	10801658 	cmpnei	r2,r2,89
 3055cf0:	10001a1e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055cf4:	e0bffd83 	ldbu	r2,-10(fp)
 3055cf8:	10801658 	cmpnei	r2,r2,89
 3055cfc:	1000171e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055d00:	e0bffdc3 	ldbu	r2,-9(fp)
 3055d04:	10801658 	cmpnei	r2,r2,89
 3055d08:	1000141e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055d0c:	e0fff917 	ldw	r3,-28(fp)
 3055d10:	00800044 	movi	r2,1
 3055d14:	18802e15 	stw	r2,184(r3)
 3055d18:	e0fff917 	ldw	r3,-28(fp)
 3055d1c:	00800104 	movi	r2,4
 3055d20:	18802f15 	stw	r2,188(r3)
 3055d24:	e0bff917 	ldw	r2,-28(fp)
 3055d28:	10800a17 	ldw	r2,40(r2)
 3055d2c:	10802804 	addi	r2,r2,160
 3055d30:	10800037 	ldwio	r2,0(r2)
 3055d34:	e0bffe0d 	sth	r2,-8(fp)
 3055d38:	e0bffe0b 	ldhu	r2,-8(fp)
 3055d3c:	10800044 	addi	r2,r2,1
 3055d40:	e0bffe0d 	sth	r2,-8(fp)
 3055d44:	e0bffe0b 	ldhu	r2,-8(fp)
 3055d48:	1080010c 	andi	r2,r2,4
 3055d4c:	1004c03a 	cmpne	r2,r2,zero
 3055d50:	1000021e 	bne	r2,zero,3055d5c <alt_read_cfi_width+0x698>
 3055d54:	00bffb44 	movi	r2,-19
 3055d58:	e0bfff15 	stw	r2,-4(fp)
 3055d5c:	e0bfff17 	ldw	r2,-4(fp)
 3055d60:	dfc00817 	ldw	ra,32(sp)
 3055d64:	df000717 	ldw	fp,28(sp)
 3055d68:	dec00904 	addi	sp,sp,36
 3055d6c:	f800283a 	ret

03055d70 <alt_check_primary_table>:
 3055d70:	defff904 	addi	sp,sp,-28
 3055d74:	dfc00615 	stw	ra,24(sp)
 3055d78:	df000515 	stw	fp,20(sp)
 3055d7c:	dc000415 	stw	r16,16(sp)
 3055d80:	df000504 	addi	fp,sp,20
 3055d84:	e13ffb15 	stw	r4,-20(fp)
 3055d88:	e03ffd15 	stw	zero,-12(fp)
 3055d8c:	e43ffb17 	ldw	r16,-20(fp)
 3055d90:	e13ffb17 	ldw	r4,-20(fp)
 3055d94:	01400544 	movi	r5,21
 3055d98:	30550dc0 	call	30550dc <alt_read_16bit_query_entry>
 3055d9c:	10bfffcc 	andi	r2,r2,65535
 3055da0:	80803215 	stw	r2,200(r16)
 3055da4:	e03ffc15 	stw	zero,-16(fp)
 3055da8:	e0bffc17 	ldw	r2,-16(fp)
 3055dac:	108000c8 	cmpgei	r2,r2,3
 3055db0:	1000101e 	bne	r2,zero,3055df4 <alt_check_primary_table+0x84>
 3055db4:	e0fffe04 	addi	r3,fp,-8
 3055db8:	e0bffc17 	ldw	r2,-16(fp)
 3055dbc:	18a1883a 	add	r16,r3,r2
 3055dc0:	e13ffb17 	ldw	r4,-20(fp)
 3055dc4:	e0bffb17 	ldw	r2,-20(fp)
 3055dc8:	10c03217 	ldw	r3,200(r2)
 3055dcc:	e0bffc17 	ldw	r2,-16(fp)
 3055dd0:	188b883a 	add	r5,r3,r2
 3055dd4:	20803417 	ldw	r2,208(r4)
 3055dd8:	e13ffb17 	ldw	r4,-20(fp)
 3055ddc:	103ee83a 	callr	r2
 3055de0:	80800005 	stb	r2,0(r16)
 3055de4:	e0bffc17 	ldw	r2,-16(fp)
 3055de8:	10800044 	addi	r2,r2,1
 3055dec:	e0bffc15 	stw	r2,-16(fp)
 3055df0:	003fed06 	br	3055da8 <alt_check_primary_table+0x38>
 3055df4:	e0bffe03 	ldbu	r2,-8(fp)
 3055df8:	10801418 	cmpnei	r2,r2,80
 3055dfc:	1000071e 	bne	r2,zero,3055e1c <alt_check_primary_table+0xac>
 3055e00:	e0bffe43 	ldbu	r2,-7(fp)
 3055e04:	10801498 	cmpnei	r2,r2,82
 3055e08:	1000041e 	bne	r2,zero,3055e1c <alt_check_primary_table+0xac>
 3055e0c:	e0bffe83 	ldbu	r2,-6(fp)
 3055e10:	10801258 	cmpnei	r2,r2,73
 3055e14:	1000011e 	bne	r2,zero,3055e1c <alt_check_primary_table+0xac>
 3055e18:	00000206 	br	3055e24 <alt_check_primary_table+0xb4>
 3055e1c:	00bffb44 	movi	r2,-19
 3055e20:	e0bffd15 	stw	r2,-12(fp)
 3055e24:	e0bffd17 	ldw	r2,-12(fp)
 3055e28:	dfc00617 	ldw	ra,24(sp)
 3055e2c:	df000517 	ldw	fp,20(sp)
 3055e30:	dc000417 	ldw	r16,16(sp)
 3055e34:	dec00704 	addi	sp,sp,28
 3055e38:	f800283a 	ret

03055e3c <altera_avalon_jtag_uart_read_fd>:
 3055e3c:	defffa04 	addi	sp,sp,-24
 3055e40:	dfc00515 	stw	ra,20(sp)
 3055e44:	df000415 	stw	fp,16(sp)
 3055e48:	df000404 	addi	fp,sp,16
 3055e4c:	e13ffc15 	stw	r4,-16(fp)
 3055e50:	e17ffd15 	stw	r5,-12(fp)
 3055e54:	e1bffe15 	stw	r6,-8(fp)
 3055e58:	e0bffc17 	ldw	r2,-16(fp)
 3055e5c:	10800017 	ldw	r2,0(r2)
 3055e60:	e0bfff15 	stw	r2,-4(fp)
 3055e64:	e0bfff17 	ldw	r2,-4(fp)
 3055e68:	11000a04 	addi	r4,r2,40
 3055e6c:	e0bffc17 	ldw	r2,-16(fp)
 3055e70:	e17ffd17 	ldw	r5,-12(fp)
 3055e74:	e1bffe17 	ldw	r6,-8(fp)
 3055e78:	11c00217 	ldw	r7,8(r2)
 3055e7c:	30564740 	call	3056474 <altera_avalon_jtag_uart_read>
 3055e80:	dfc00517 	ldw	ra,20(sp)
 3055e84:	df000417 	ldw	fp,16(sp)
 3055e88:	dec00604 	addi	sp,sp,24
 3055e8c:	f800283a 	ret

03055e90 <altera_avalon_jtag_uart_write_fd>:
 3055e90:	defffa04 	addi	sp,sp,-24
 3055e94:	dfc00515 	stw	ra,20(sp)
 3055e98:	df000415 	stw	fp,16(sp)
 3055e9c:	df000404 	addi	fp,sp,16
 3055ea0:	e13ffc15 	stw	r4,-16(fp)
 3055ea4:	e17ffd15 	stw	r5,-12(fp)
 3055ea8:	e1bffe15 	stw	r6,-8(fp)
 3055eac:	e0bffc17 	ldw	r2,-16(fp)
 3055eb0:	10800017 	ldw	r2,0(r2)
 3055eb4:	e0bfff15 	stw	r2,-4(fp)
 3055eb8:	e0bfff17 	ldw	r2,-4(fp)
 3055ebc:	11000a04 	addi	r4,r2,40
 3055ec0:	e0bffc17 	ldw	r2,-16(fp)
 3055ec4:	e17ffd17 	ldw	r5,-12(fp)
 3055ec8:	e1bffe17 	ldw	r6,-8(fp)
 3055ecc:	11c00217 	ldw	r7,8(r2)
 3055ed0:	30566a80 	call	30566a8 <altera_avalon_jtag_uart_write>
 3055ed4:	dfc00517 	ldw	ra,20(sp)
 3055ed8:	df000417 	ldw	fp,16(sp)
 3055edc:	dec00604 	addi	sp,sp,24
 3055ee0:	f800283a 	ret

03055ee4 <altera_avalon_jtag_uart_close_fd>:
 3055ee4:	defffc04 	addi	sp,sp,-16
 3055ee8:	dfc00315 	stw	ra,12(sp)
 3055eec:	df000215 	stw	fp,8(sp)
 3055ef0:	df000204 	addi	fp,sp,8
 3055ef4:	e13ffe15 	stw	r4,-8(fp)
 3055ef8:	e0bffe17 	ldw	r2,-8(fp)
 3055efc:	10800017 	ldw	r2,0(r2)
 3055f00:	e0bfff15 	stw	r2,-4(fp)
 3055f04:	e0bfff17 	ldw	r2,-4(fp)
 3055f08:	11000a04 	addi	r4,r2,40
 3055f0c:	e0bffe17 	ldw	r2,-8(fp)
 3055f10:	11400217 	ldw	r5,8(r2)
 3055f14:	30563100 	call	3056310 <altera_avalon_jtag_uart_close>
 3055f18:	dfc00317 	ldw	ra,12(sp)
 3055f1c:	df000217 	ldw	fp,8(sp)
 3055f20:	dec00404 	addi	sp,sp,16
 3055f24:	f800283a 	ret

03055f28 <altera_avalon_jtag_uart_ioctl_fd>:
 3055f28:	defffa04 	addi	sp,sp,-24
 3055f2c:	dfc00515 	stw	ra,20(sp)
 3055f30:	df000415 	stw	fp,16(sp)
 3055f34:	df000404 	addi	fp,sp,16
 3055f38:	e13ffc15 	stw	r4,-16(fp)
 3055f3c:	e17ffd15 	stw	r5,-12(fp)
 3055f40:	e1bffe15 	stw	r6,-8(fp)
 3055f44:	e0bffc17 	ldw	r2,-16(fp)
 3055f48:	10800017 	ldw	r2,0(r2)
 3055f4c:	e0bfff15 	stw	r2,-4(fp)
 3055f50:	e0bfff17 	ldw	r2,-4(fp)
 3055f54:	11000a04 	addi	r4,r2,40
 3055f58:	e17ffd17 	ldw	r5,-12(fp)
 3055f5c:	e1bffe17 	ldw	r6,-8(fp)
 3055f60:	305637c0 	call	305637c <altera_avalon_jtag_uart_ioctl>
 3055f64:	dfc00517 	ldw	ra,20(sp)
 3055f68:	df000417 	ldw	fp,16(sp)
 3055f6c:	dec00604 	addi	sp,sp,24
 3055f70:	f800283a 	ret

03055f74 <altera_avalon_jtag_uart_init>:
 3055f74:	defff604 	addi	sp,sp,-40
 3055f78:	dfc00915 	stw	ra,36(sp)
 3055f7c:	df000815 	stw	fp,32(sp)
 3055f80:	df000804 	addi	fp,sp,32
 3055f84:	e13ff915 	stw	r4,-28(fp)
 3055f88:	e17ffa15 	stw	r5,-24(fp)
 3055f8c:	e1bffb15 	stw	r6,-20(fp)
 3055f90:	e03ffc15 	stw	zero,-16(fp)
 3055f94:	e03ffd15 	stw	zero,-12(fp)
 3055f98:	e03ffe15 	stw	zero,-8(fp)
 3055f9c:	e0fff917 	ldw	r3,-28(fp)
 3055fa0:	00800044 	movi	r2,1
 3055fa4:	18800815 	stw	r2,32(r3)
 3055fa8:	e0bff917 	ldw	r2,-28(fp)
 3055fac:	10800017 	ldw	r2,0(r2)
 3055fb0:	10800104 	addi	r2,r2,4
 3055fb4:	1007883a 	mov	r3,r2
 3055fb8:	e0bff917 	ldw	r2,-28(fp)
 3055fbc:	10800817 	ldw	r2,32(r2)
 3055fc0:	18800035 	stwio	r2,0(r3)
 3055fc4:	d8000015 	stw	zero,0(sp)
 3055fc8:	e13ffa17 	ldw	r4,-24(fp)
 3055fcc:	e17ffb17 	ldw	r5,-20(fp)
 3055fd0:	0180c174 	movhi	r6,773
 3055fd4:	31980d04 	addi	r6,r6,24628
 3055fd8:	e1fff917 	ldw	r7,-28(fp)
 3055fdc:	30588f80 	call	30588f8 <alt_ic_isr_register>
 3055fe0:	e0bff917 	ldw	r2,-28(fp)
 3055fe4:	10000915 	stw	zero,36(r2)
 3055fe8:	d0a01617 	ldw	r2,-32680(gp)
 3055fec:	e0bfff15 	stw	r2,-4(fp)
 3055ff0:	e17fff17 	ldw	r5,-4(fp)
 3055ff4:	e0bff917 	ldw	r2,-28(fp)
 3055ff8:	11000204 	addi	r4,r2,8
 3055ffc:	0180c174 	movhi	r6,773
 3056000:	31989404 	addi	r6,r6,25168
 3056004:	e1fff917 	ldw	r7,-28(fp)
 3056008:	30580ec0 	call	30580ec <alt_alarm_start>
 305600c:	1004403a 	cmpge	r2,r2,zero
 3056010:	1000041e 	bne	r2,zero,3056024 <altera_avalon_jtag_uart_init+0xb0>
 3056014:	e0fff917 	ldw	r3,-28(fp)
 3056018:	00a00034 	movhi	r2,32768
 305601c:	10bfffc4 	addi	r2,r2,-1
 3056020:	18800115 	stw	r2,4(r3)
 3056024:	dfc00917 	ldw	ra,36(sp)
 3056028:	df000817 	ldw	fp,32(sp)
 305602c:	dec00a04 	addi	sp,sp,40
 3056030:	f800283a 	ret

03056034 <altera_avalon_jtag_uart_irq>:
 3056034:	defff804 	addi	sp,sp,-32
 3056038:	df000715 	stw	fp,28(sp)
 305603c:	df000704 	addi	fp,sp,28
 3056040:	e13ff915 	stw	r4,-28(fp)
 3056044:	e0bff917 	ldw	r2,-28(fp)
 3056048:	e0bffa15 	stw	r2,-24(fp)
 305604c:	e0bffa17 	ldw	r2,-24(fp)
 3056050:	10800017 	ldw	r2,0(r2)
 3056054:	e0bffb15 	stw	r2,-20(fp)
 3056058:	e0bffb17 	ldw	r2,-20(fp)
 305605c:	10800104 	addi	r2,r2,4
 3056060:	10800037 	ldwio	r2,0(r2)
 3056064:	e0bffc15 	stw	r2,-16(fp)
 3056068:	e0bffc17 	ldw	r2,-16(fp)
 305606c:	1080c00c 	andi	r2,r2,768
 3056070:	1004c03a 	cmpne	r2,r2,zero
 3056074:	1000011e 	bne	r2,zero,305607c <altera_avalon_jtag_uart_irq+0x48>
 3056078:	00007206 	br	3056244 <altera_avalon_jtag_uart_irq+0x210>
 305607c:	e0bffc17 	ldw	r2,-16(fp)
 3056080:	1080400c 	andi	r2,r2,256
 3056084:	1005003a 	cmpeq	r2,r2,zero
 3056088:	1000371e 	bne	r2,zero,3056168 <altera_avalon_jtag_uart_irq+0x134>
 305608c:	00800074 	movhi	r2,1
 3056090:	10800004 	addi	r2,r2,0
 3056094:	e0bffd15 	stw	r2,-12(fp)
 3056098:	e0bffa17 	ldw	r2,-24(fp)
 305609c:	10800a17 	ldw	r2,40(r2)
 30560a0:	10800044 	addi	r2,r2,1
 30560a4:	1081ffcc 	andi	r2,r2,2047
 30560a8:	e0bffe15 	stw	r2,-8(fp)
 30560ac:	e0bffa17 	ldw	r2,-24(fp)
 30560b0:	10c00b17 	ldw	r3,44(r2)
 30560b4:	e0bffe17 	ldw	r2,-8(fp)
 30560b8:	1880011e 	bne	r3,r2,30560c0 <altera_avalon_jtag_uart_irq+0x8c>
 30560bc:	00001706 	br	305611c <altera_avalon_jtag_uart_irq+0xe8>
 30560c0:	e0bffb17 	ldw	r2,-20(fp)
 30560c4:	10800037 	ldwio	r2,0(r2)
 30560c8:	e0bffd15 	stw	r2,-12(fp)
 30560cc:	e0bffd17 	ldw	r2,-12(fp)
 30560d0:	10a0000c 	andi	r2,r2,32768
 30560d4:	1004c03a 	cmpne	r2,r2,zero
 30560d8:	1000011e 	bne	r2,zero,30560e0 <altera_avalon_jtag_uart_irq+0xac>
 30560dc:	00000f06 	br	305611c <altera_avalon_jtag_uart_irq+0xe8>
 30560e0:	e0fffa17 	ldw	r3,-24(fp)
 30560e4:	e0bffa17 	ldw	r2,-24(fp)
 30560e8:	10800a17 	ldw	r2,40(r2)
 30560ec:	1885883a 	add	r2,r3,r2
 30560f0:	10c00e04 	addi	r3,r2,56
 30560f4:	e0bffd17 	ldw	r2,-12(fp)
 30560f8:	18800005 	stb	r2,0(r3)
 30560fc:	e0fffa17 	ldw	r3,-24(fp)
 3056100:	e0bffa17 	ldw	r2,-24(fp)
 3056104:	10800a17 	ldw	r2,40(r2)
 3056108:	10800044 	addi	r2,r2,1
 305610c:	1081ffcc 	andi	r2,r2,2047
 3056110:	18800a15 	stw	r2,40(r3)
 3056114:	e03fff15 	stw	zero,-4(fp)
 3056118:	003fdf06 	br	3056098 <altera_avalon_jtag_uart_irq+0x64>
 305611c:	e0bffd17 	ldw	r2,-12(fp)
 3056120:	10bfffec 	andhi	r2,r2,65535
 3056124:	1005003a 	cmpeq	r2,r2,zero
 3056128:	10000f1e 	bne	r2,zero,3056168 <altera_avalon_jtag_uart_irq+0x134>
 305612c:	e13ffa17 	ldw	r4,-24(fp)
 3056130:	e0bffa17 	ldw	r2,-24(fp)
 3056134:	10c00817 	ldw	r3,32(r2)
 3056138:	00bfff84 	movi	r2,-2
 305613c:	1884703a 	and	r2,r3,r2
 3056140:	20800815 	stw	r2,32(r4)
 3056144:	e0bffb17 	ldw	r2,-20(fp)
 3056148:	10800104 	addi	r2,r2,4
 305614c:	1007883a 	mov	r3,r2
 3056150:	e0bffa17 	ldw	r2,-24(fp)
 3056154:	10800817 	ldw	r2,32(r2)
 3056158:	18800035 	stwio	r2,0(r3)
 305615c:	e0bffb17 	ldw	r2,-20(fp)
 3056160:	10800104 	addi	r2,r2,4
 3056164:	10800037 	ldwio	r2,0(r2)
 3056168:	e0bffc17 	ldw	r2,-16(fp)
 305616c:	1080800c 	andi	r2,r2,512
 3056170:	1005003a 	cmpeq	r2,r2,zero
 3056174:	103fb81e 	bne	r2,zero,3056058 <altera_avalon_jtag_uart_irq+0x24>
 3056178:	e0bffc17 	ldw	r2,-16(fp)
 305617c:	10bfffec 	andhi	r2,r2,65535
 3056180:	1004d43a 	srli	r2,r2,16
 3056184:	e0bfff15 	stw	r2,-4(fp)
 3056188:	e0bfff17 	ldw	r2,-4(fp)
 305618c:	1005003a 	cmpeq	r2,r2,zero
 3056190:	1000181e 	bne	r2,zero,30561f4 <altera_avalon_jtag_uart_irq+0x1c0>
 3056194:	e0bffa17 	ldw	r2,-24(fp)
 3056198:	e0fffa17 	ldw	r3,-24(fp)
 305619c:	11000d17 	ldw	r4,52(r2)
 30561a0:	18800c17 	ldw	r2,48(r3)
 30561a4:	20801326 	beq	r4,r2,30561f4 <altera_avalon_jtag_uart_irq+0x1c0>
 30561a8:	e13ffb17 	ldw	r4,-20(fp)
 30561ac:	e0fffa17 	ldw	r3,-24(fp)
 30561b0:	e0bffa17 	ldw	r2,-24(fp)
 30561b4:	10800d17 	ldw	r2,52(r2)
 30561b8:	1885883a 	add	r2,r3,r2
 30561bc:	10820e04 	addi	r2,r2,2104
 30561c0:	10800007 	ldb	r2,0(r2)
 30561c4:	20800035 	stwio	r2,0(r4)
 30561c8:	e0fffa17 	ldw	r3,-24(fp)
 30561cc:	e0bffa17 	ldw	r2,-24(fp)
 30561d0:	10800d17 	ldw	r2,52(r2)
 30561d4:	10800044 	addi	r2,r2,1
 30561d8:	1081ffcc 	andi	r2,r2,2047
 30561dc:	18800d15 	stw	r2,52(r3)
 30561e0:	e03ffe15 	stw	zero,-8(fp)
 30561e4:	e0bfff17 	ldw	r2,-4(fp)
 30561e8:	10bfffc4 	addi	r2,r2,-1
 30561ec:	e0bfff15 	stw	r2,-4(fp)
 30561f0:	003fe506 	br	3056188 <altera_avalon_jtag_uart_irq+0x154>
 30561f4:	e0bfff17 	ldw	r2,-4(fp)
 30561f8:	1005003a 	cmpeq	r2,r2,zero
 30561fc:	103f961e 	bne	r2,zero,3056058 <altera_avalon_jtag_uart_irq+0x24>
 3056200:	e13ffa17 	ldw	r4,-24(fp)
 3056204:	e0bffa17 	ldw	r2,-24(fp)
 3056208:	10c00817 	ldw	r3,32(r2)
 305620c:	00bfff44 	movi	r2,-3
 3056210:	1884703a 	and	r2,r3,r2
 3056214:	20800815 	stw	r2,32(r4)
 3056218:	e0bffa17 	ldw	r2,-24(fp)
 305621c:	10800017 	ldw	r2,0(r2)
 3056220:	10800104 	addi	r2,r2,4
 3056224:	1007883a 	mov	r3,r2
 3056228:	e0bffa17 	ldw	r2,-24(fp)
 305622c:	10800817 	ldw	r2,32(r2)
 3056230:	18800035 	stwio	r2,0(r3)
 3056234:	e0bffb17 	ldw	r2,-20(fp)
 3056238:	10800104 	addi	r2,r2,4
 305623c:	10800037 	ldwio	r2,0(r2)
 3056240:	003f8506 	br	3056058 <altera_avalon_jtag_uart_irq+0x24>
 3056244:	df000717 	ldw	fp,28(sp)
 3056248:	dec00804 	addi	sp,sp,32
 305624c:	f800283a 	ret

03056250 <altera_avalon_jtag_uart_timeout>:
 3056250:	defffb04 	addi	sp,sp,-20
 3056254:	df000415 	stw	fp,16(sp)
 3056258:	df000404 	addi	fp,sp,16
 305625c:	e13ffc15 	stw	r4,-16(fp)
 3056260:	e0bffc17 	ldw	r2,-16(fp)
 3056264:	e0bffd15 	stw	r2,-12(fp)
 3056268:	e0bffd17 	ldw	r2,-12(fp)
 305626c:	10800017 	ldw	r2,0(r2)
 3056270:	10800104 	addi	r2,r2,4
 3056274:	10800037 	ldwio	r2,0(r2)
 3056278:	e0bffe15 	stw	r2,-8(fp)
 305627c:	e0bffe17 	ldw	r2,-8(fp)
 3056280:	1081000c 	andi	r2,r2,1024
 3056284:	1005003a 	cmpeq	r2,r2,zero
 3056288:	10000b1e 	bne	r2,zero,30562b8 <altera_avalon_jtag_uart_timeout+0x68>
 305628c:	e0bffd17 	ldw	r2,-12(fp)
 3056290:	10800017 	ldw	r2,0(r2)
 3056294:	10800104 	addi	r2,r2,4
 3056298:	1007883a 	mov	r3,r2
 305629c:	e0bffd17 	ldw	r2,-12(fp)
 30562a0:	10800817 	ldw	r2,32(r2)
 30562a4:	10810014 	ori	r2,r2,1024
 30562a8:	18800035 	stwio	r2,0(r3)
 30562ac:	e0bffd17 	ldw	r2,-12(fp)
 30562b0:	10000915 	stw	zero,36(r2)
 30562b4:	00001006 	br	30562f8 <altera_avalon_jtag_uart_timeout+0xa8>
 30562b8:	e0bffd17 	ldw	r2,-12(fp)
 30562bc:	10c00917 	ldw	r3,36(r2)
 30562c0:	00a00034 	movhi	r2,32768
 30562c4:	10bfff04 	addi	r2,r2,-4
 30562c8:	10c00b36 	bltu	r2,r3,30562f8 <altera_avalon_jtag_uart_timeout+0xa8>
 30562cc:	e0fffd17 	ldw	r3,-12(fp)
 30562d0:	e0bffd17 	ldw	r2,-12(fp)
 30562d4:	10800917 	ldw	r2,36(r2)
 30562d8:	10800044 	addi	r2,r2,1
 30562dc:	18800915 	stw	r2,36(r3)
 30562e0:	e0bffd17 	ldw	r2,-12(fp)
 30562e4:	e0fffd17 	ldw	r3,-12(fp)
 30562e8:	11000917 	ldw	r4,36(r2)
 30562ec:	18800117 	ldw	r2,4(r3)
 30562f0:	20800136 	bltu	r4,r2,30562f8 <altera_avalon_jtag_uart_timeout+0xa8>
 30562f4:	e03fff15 	stw	zero,-4(fp)
 30562f8:	d0a01617 	ldw	r2,-32680(gp)
 30562fc:	e0bfff15 	stw	r2,-4(fp)
 3056300:	e0bfff17 	ldw	r2,-4(fp)
 3056304:	df000417 	ldw	fp,16(sp)
 3056308:	dec00504 	addi	sp,sp,20
 305630c:	f800283a 	ret

03056310 <altera_avalon_jtag_uart_close>:
 3056310:	defffc04 	addi	sp,sp,-16
 3056314:	df000315 	stw	fp,12(sp)
 3056318:	df000304 	addi	fp,sp,12
 305631c:	e13ffd15 	stw	r4,-12(fp)
 3056320:	e17ffe15 	stw	r5,-8(fp)
 3056324:	e0bffd17 	ldw	r2,-12(fp)
 3056328:	e0fffd17 	ldw	r3,-12(fp)
 305632c:	11000d17 	ldw	r4,52(r2)
 3056330:	18800c17 	ldw	r2,48(r3)
 3056334:	20800c26 	beq	r4,r2,3056368 <altera_avalon_jtag_uart_close+0x58>
 3056338:	e0bffd17 	ldw	r2,-12(fp)
 305633c:	e0fffd17 	ldw	r3,-12(fp)
 3056340:	11000917 	ldw	r4,36(r2)
 3056344:	18800117 	ldw	r2,4(r3)
 3056348:	2080072e 	bgeu	r4,r2,3056368 <altera_avalon_jtag_uart_close+0x58>
 305634c:	e0bffe17 	ldw	r2,-8(fp)
 3056350:	1090000c 	andi	r2,r2,16384
 3056354:	1005003a 	cmpeq	r2,r2,zero
 3056358:	103ff21e 	bne	r2,zero,3056324 <altera_avalon_jtag_uart_close+0x14>
 305635c:	00bffd44 	movi	r2,-11
 3056360:	e0bfff15 	stw	r2,-4(fp)
 3056364:	00000106 	br	305636c <altera_avalon_jtag_uart_close+0x5c>
 3056368:	e03fff15 	stw	zero,-4(fp)
 305636c:	e0bfff17 	ldw	r2,-4(fp)
 3056370:	df000317 	ldw	fp,12(sp)
 3056374:	dec00404 	addi	sp,sp,16
 3056378:	f800283a 	ret

0305637c <altera_avalon_jtag_uart_ioctl>:
 305637c:	defff704 	addi	sp,sp,-36
 3056380:	df000815 	stw	fp,32(sp)
 3056384:	df000804 	addi	fp,sp,32
 3056388:	e13ff815 	stw	r4,-32(fp)
 305638c:	e17ff915 	stw	r5,-28(fp)
 3056390:	e1bffa15 	stw	r6,-24(fp)
 3056394:	00bff9c4 	movi	r2,-25
 3056398:	e0bffb15 	stw	r2,-20(fp)
 305639c:	e0bff917 	ldw	r2,-28(fp)
 30563a0:	e0bfff15 	stw	r2,-4(fp)
 30563a4:	e0ffff17 	ldw	r3,-4(fp)
 30563a8:	189a8060 	cmpeqi	r2,r3,27137
 30563ac:	1000041e 	bne	r2,zero,30563c0 <altera_avalon_jtag_uart_ioctl+0x44>
 30563b0:	e0ffff17 	ldw	r3,-4(fp)
 30563b4:	189a80a0 	cmpeqi	r2,r3,27138
 30563b8:	10001d1e 	bne	r2,zero,3056430 <altera_avalon_jtag_uart_ioctl+0xb4>
 30563bc:	00002906 	br	3056464 <altera_avalon_jtag_uart_ioctl+0xe8>
 30563c0:	e0bff817 	ldw	r2,-32(fp)
 30563c4:	10c00117 	ldw	r3,4(r2)
 30563c8:	00a00034 	movhi	r2,32768
 30563cc:	10bfffc4 	addi	r2,r2,-1
 30563d0:	18802426 	beq	r3,r2,3056464 <altera_avalon_jtag_uart_ioctl+0xe8>
 30563d4:	e0bffa17 	ldw	r2,-24(fp)
 30563d8:	10800017 	ldw	r2,0(r2)
 30563dc:	e0bffc15 	stw	r2,-16(fp)
 30563e0:	e0bff817 	ldw	r2,-32(fp)
 30563e4:	e0bffd15 	stw	r2,-12(fp)
 30563e8:	e0bffc17 	ldw	r2,-16(fp)
 30563ec:	10800090 	cmplti	r2,r2,2
 30563f0:	1000071e 	bne	r2,zero,3056410 <altera_avalon_jtag_uart_ioctl+0x94>
 30563f4:	e0fffc17 	ldw	r3,-16(fp)
 30563f8:	00a00034 	movhi	r2,32768
 30563fc:	10bfffc4 	addi	r2,r2,-1
 3056400:	18800326 	beq	r3,r2,3056410 <altera_avalon_jtag_uart_ioctl+0x94>
 3056404:	e0fffc17 	ldw	r3,-16(fp)
 3056408:	e0fffe15 	stw	r3,-8(fp)
 305640c:	00000306 	br	305641c <altera_avalon_jtag_uart_ioctl+0xa0>
 3056410:	00a00034 	movhi	r2,32768
 3056414:	10bfff84 	addi	r2,r2,-2
 3056418:	e0bffe15 	stw	r2,-8(fp)
 305641c:	e0fffe17 	ldw	r3,-8(fp)
 3056420:	e0bffd17 	ldw	r2,-12(fp)
 3056424:	10c00115 	stw	r3,4(r2)
 3056428:	e03ffb15 	stw	zero,-20(fp)
 305642c:	00000d06 	br	3056464 <altera_avalon_jtag_uart_ioctl+0xe8>
 3056430:	e0bff817 	ldw	r2,-32(fp)
 3056434:	10c00117 	ldw	r3,4(r2)
 3056438:	00a00034 	movhi	r2,32768
 305643c:	10bfffc4 	addi	r2,r2,-1
 3056440:	18800826 	beq	r3,r2,3056464 <altera_avalon_jtag_uart_ioctl+0xe8>
 3056444:	e17ffa17 	ldw	r5,-24(fp)
 3056448:	e0bff817 	ldw	r2,-32(fp)
 305644c:	e0fff817 	ldw	r3,-32(fp)
 3056450:	11000917 	ldw	r4,36(r2)
 3056454:	18800117 	ldw	r2,4(r3)
 3056458:	2085803a 	cmpltu	r2,r4,r2
 305645c:	28800015 	stw	r2,0(r5)
 3056460:	e03ffb15 	stw	zero,-20(fp)
 3056464:	e0bffb17 	ldw	r2,-20(fp)
 3056468:	df000817 	ldw	fp,32(sp)
 305646c:	dec00904 	addi	sp,sp,36
 3056470:	f800283a 	ret

03056474 <altera_avalon_jtag_uart_read>:
 3056474:	defff204 	addi	sp,sp,-56
 3056478:	dfc00d15 	stw	ra,52(sp)
 305647c:	df000c15 	stw	fp,48(sp)
 3056480:	df000c04 	addi	fp,sp,48
 3056484:	e13ff415 	stw	r4,-48(fp)
 3056488:	e17ff515 	stw	r5,-44(fp)
 305648c:	e1bff615 	stw	r6,-40(fp)
 3056490:	e1fff715 	stw	r7,-36(fp)
 3056494:	e0bff517 	ldw	r2,-44(fp)
 3056498:	e0bff815 	stw	r2,-32(fp)
 305649c:	e03ffb15 	stw	zero,-20(fp)
 30564a0:	e0bff617 	ldw	r2,-40(fp)
 30564a4:	10800050 	cmplti	r2,r2,1
 30564a8:	10004b1e 	bne	r2,zero,30565d8 <altera_avalon_jtag_uart_read+0x164>
 30564ac:	e0bff417 	ldw	r2,-48(fp)
 30564b0:	10800a17 	ldw	r2,40(r2)
 30564b4:	e0bffc15 	stw	r2,-16(fp)
 30564b8:	e0bff417 	ldw	r2,-48(fp)
 30564bc:	10800b17 	ldw	r2,44(r2)
 30564c0:	e0bffd15 	stw	r2,-12(fp)
 30564c4:	e0fffc17 	ldw	r3,-16(fp)
 30564c8:	e0bffd17 	ldw	r2,-12(fp)
 30564cc:	18800536 	bltu	r3,r2,30564e4 <altera_avalon_jtag_uart_read+0x70>
 30564d0:	e0bffc17 	ldw	r2,-16(fp)
 30564d4:	e0fffd17 	ldw	r3,-12(fp)
 30564d8:	10c5c83a 	sub	r2,r2,r3
 30564dc:	e0bffa15 	stw	r2,-24(fp)
 30564e0:	00000406 	br	30564f4 <altera_avalon_jtag_uart_read+0x80>
 30564e4:	00820004 	movi	r2,2048
 30564e8:	e0fffd17 	ldw	r3,-12(fp)
 30564ec:	10c5c83a 	sub	r2,r2,r3
 30564f0:	e0bffa15 	stw	r2,-24(fp)
 30564f4:	e0bffa17 	ldw	r2,-24(fp)
 30564f8:	1004c03a 	cmpne	r2,r2,zero
 30564fc:	1000011e 	bne	r2,zero,3056504 <altera_avalon_jtag_uart_read+0x90>
 3056500:	00001e06 	br	305657c <altera_avalon_jtag_uart_read+0x108>
 3056504:	e0fff617 	ldw	r3,-40(fp)
 3056508:	e0bffa17 	ldw	r2,-24(fp)
 305650c:	1880022e 	bgeu	r3,r2,3056518 <altera_avalon_jtag_uart_read+0xa4>
 3056510:	e0bff617 	ldw	r2,-40(fp)
 3056514:	e0bffa15 	stw	r2,-24(fp)
 3056518:	e0fff417 	ldw	r3,-48(fp)
 305651c:	e0bffd17 	ldw	r2,-12(fp)
 3056520:	1885883a 	add	r2,r3,r2
 3056524:	11400e04 	addi	r5,r2,56
 3056528:	e13ff817 	ldw	r4,-32(fp)
 305652c:	e1bffa17 	ldw	r6,-24(fp)
 3056530:	304bb5c0 	call	304bb5c <memcpy>
 3056534:	e0fff817 	ldw	r3,-32(fp)
 3056538:	e0bffa17 	ldw	r2,-24(fp)
 305653c:	1885883a 	add	r2,r3,r2
 3056540:	e0bff815 	stw	r2,-32(fp)
 3056544:	e0fff617 	ldw	r3,-40(fp)
 3056548:	e0bffa17 	ldw	r2,-24(fp)
 305654c:	1885c83a 	sub	r2,r3,r2
 3056550:	e0bff615 	stw	r2,-40(fp)
 3056554:	e13ff417 	ldw	r4,-48(fp)
 3056558:	e0fffd17 	ldw	r3,-12(fp)
 305655c:	e0bffa17 	ldw	r2,-24(fp)
 3056560:	1885883a 	add	r2,r3,r2
 3056564:	1081ffcc 	andi	r2,r2,2047
 3056568:	20800b15 	stw	r2,44(r4)
 305656c:	e0bff617 	ldw	r2,-40(fp)
 3056570:	10800050 	cmplti	r2,r2,1
 3056574:	1000011e 	bne	r2,zero,305657c <altera_avalon_jtag_uart_read+0x108>
 3056578:	003fcc06 	br	30564ac <altera_avalon_jtag_uart_read+0x38>
 305657c:	e0fff817 	ldw	r3,-32(fp)
 3056580:	e0bff517 	ldw	r2,-44(fp)
 3056584:	18800126 	beq	r3,r2,305658c <altera_avalon_jtag_uart_read+0x118>
 3056588:	00001306 	br	30565d8 <altera_avalon_jtag_uart_read+0x164>
 305658c:	e0bff717 	ldw	r2,-36(fp)
 3056590:	1090000c 	andi	r2,r2,16384
 3056594:	1005003a 	cmpeq	r2,r2,zero
 3056598:	1000011e 	bne	r2,zero,30565a0 <altera_avalon_jtag_uart_read+0x12c>
 305659c:	00000e06 	br	30565d8 <altera_avalon_jtag_uart_read+0x164>
 30565a0:	e0bff417 	ldw	r2,-48(fp)
 30565a4:	10c00a17 	ldw	r3,40(r2)
 30565a8:	e0bffc17 	ldw	r2,-16(fp)
 30565ac:	1880061e 	bne	r3,r2,30565c8 <altera_avalon_jtag_uart_read+0x154>
 30565b0:	e0bff417 	ldw	r2,-48(fp)
 30565b4:	e0fff417 	ldw	r3,-48(fp)
 30565b8:	11000917 	ldw	r4,36(r2)
 30565bc:	18800117 	ldw	r2,4(r3)
 30565c0:	2080012e 	bgeu	r4,r2,30565c8 <altera_avalon_jtag_uart_read+0x154>
 30565c4:	003ff606 	br	30565a0 <altera_avalon_jtag_uart_read+0x12c>
 30565c8:	e0bff417 	ldw	r2,-48(fp)
 30565cc:	10c00a17 	ldw	r3,40(r2)
 30565d0:	e0bffc17 	ldw	r2,-16(fp)
 30565d4:	18bfb21e 	bne	r3,r2,30564a0 <altera_avalon_jtag_uart_read+0x2c>
 30565d8:	e03ffd15 	stw	zero,-12(fp)
 30565dc:	e0fff817 	ldw	r3,-32(fp)
 30565e0:	e0bff517 	ldw	r2,-44(fp)
 30565e4:	18801a26 	beq	r3,r2,3056650 <altera_avalon_jtag_uart_read+0x1dc>
 30565e8:	0005303a 	rdctl	r2,status
 30565ec:	e0bffe15 	stw	r2,-8(fp)
 30565f0:	e0fffe17 	ldw	r3,-8(fp)
 30565f4:	00bfff84 	movi	r2,-2
 30565f8:	1884703a 	and	r2,r3,r2
 30565fc:	1001703a 	wrctl	status,r2
 3056600:	e0bffe17 	ldw	r2,-8(fp)
 3056604:	e0bffc15 	stw	r2,-16(fp)
 3056608:	e0bffc17 	ldw	r2,-16(fp)
 305660c:	e0bff915 	stw	r2,-28(fp)
 3056610:	e0fff417 	ldw	r3,-48(fp)
 3056614:	e0bff417 	ldw	r2,-48(fp)
 3056618:	10800817 	ldw	r2,32(r2)
 305661c:	10800054 	ori	r2,r2,1
 3056620:	18800815 	stw	r2,32(r3)
 3056624:	e0bff417 	ldw	r2,-48(fp)
 3056628:	10800017 	ldw	r2,0(r2)
 305662c:	10800104 	addi	r2,r2,4
 3056630:	1007883a 	mov	r3,r2
 3056634:	e0bff417 	ldw	r2,-48(fp)
 3056638:	10800817 	ldw	r2,32(r2)
 305663c:	18800035 	stwio	r2,0(r3)
 3056640:	e0bff917 	ldw	r2,-28(fp)
 3056644:	e0bffe15 	stw	r2,-8(fp)
 3056648:	e0bffe17 	ldw	r2,-8(fp)
 305664c:	1001703a 	wrctl	status,r2
 3056650:	e0fff817 	ldw	r3,-32(fp)
 3056654:	e0bff517 	ldw	r2,-44(fp)
 3056658:	18800526 	beq	r3,r2,3056670 <altera_avalon_jtag_uart_read+0x1fc>
 305665c:	e0bff817 	ldw	r2,-32(fp)
 3056660:	e0fff517 	ldw	r3,-44(fp)
 3056664:	10c5c83a 	sub	r2,r2,r3
 3056668:	e0bfff15 	stw	r2,-4(fp)
 305666c:	00000906 	br	3056694 <altera_avalon_jtag_uart_read+0x220>
 3056670:	e0bff717 	ldw	r2,-36(fp)
 3056674:	1090000c 	andi	r2,r2,16384
 3056678:	1005003a 	cmpeq	r2,r2,zero
 305667c:	1000031e 	bne	r2,zero,305668c <altera_avalon_jtag_uart_read+0x218>
 3056680:	00bffd44 	movi	r2,-11
 3056684:	e0bfff15 	stw	r2,-4(fp)
 3056688:	00000206 	br	3056694 <altera_avalon_jtag_uart_read+0x220>
 305668c:	00bffec4 	movi	r2,-5
 3056690:	e0bfff15 	stw	r2,-4(fp)
 3056694:	e0bfff17 	ldw	r2,-4(fp)
 3056698:	dfc00d17 	ldw	ra,52(sp)
 305669c:	df000c17 	ldw	fp,48(sp)
 30566a0:	dec00e04 	addi	sp,sp,56
 30566a4:	f800283a 	ret

030566a8 <altera_avalon_jtag_uart_write>:
 30566a8:	defff104 	addi	sp,sp,-60
 30566ac:	dfc00e15 	stw	ra,56(sp)
 30566b0:	df000d15 	stw	fp,52(sp)
 30566b4:	df000d04 	addi	fp,sp,52
 30566b8:	e13ff315 	stw	r4,-52(fp)
 30566bc:	e17ff415 	stw	r5,-48(fp)
 30566c0:	e1bff515 	stw	r6,-44(fp)
 30566c4:	e1fff615 	stw	r7,-40(fp)
 30566c8:	e03ff815 	stw	zero,-32(fp)
 30566cc:	e0bff417 	ldw	r2,-48(fp)
 30566d0:	e0bffb15 	stw	r2,-20(fp)
 30566d4:	e03ffc15 	stw	zero,-16(fp)
 30566d8:	e0bff517 	ldw	r2,-44(fp)
 30566dc:	10800050 	cmplti	r2,r2,1
 30566e0:	10003a1e 	bne	r2,zero,30567cc <altera_avalon_jtag_uart_write+0x124>
 30566e4:	e0bff317 	ldw	r2,-52(fp)
 30566e8:	10800c17 	ldw	r2,48(r2)
 30566ec:	e0bff715 	stw	r2,-36(fp)
 30566f0:	e0bff317 	ldw	r2,-52(fp)
 30566f4:	10800d17 	ldw	r2,52(r2)
 30566f8:	e0bff815 	stw	r2,-32(fp)
 30566fc:	e0fff717 	ldw	r3,-36(fp)
 3056700:	e0bff817 	ldw	r2,-32(fp)
 3056704:	1880062e 	bgeu	r3,r2,3056720 <altera_avalon_jtag_uart_write+0x78>
 3056708:	e0fff817 	ldw	r3,-32(fp)
 305670c:	e0bff717 	ldw	r2,-36(fp)
 3056710:	1885c83a 	sub	r2,r3,r2
 3056714:	10bfffc4 	addi	r2,r2,-1
 3056718:	e0bff915 	stw	r2,-28(fp)
 305671c:	00000c06 	br	3056750 <altera_avalon_jtag_uart_write+0xa8>
 3056720:	e0bff817 	ldw	r2,-32(fp)
 3056724:	1005003a 	cmpeq	r2,r2,zero
 3056728:	1000051e 	bne	r2,zero,3056740 <altera_avalon_jtag_uart_write+0x98>
 305672c:	00820004 	movi	r2,2048
 3056730:	e0fff717 	ldw	r3,-36(fp)
 3056734:	10c5c83a 	sub	r2,r2,r3
 3056738:	e0bff915 	stw	r2,-28(fp)
 305673c:	00000406 	br	3056750 <altera_avalon_jtag_uart_write+0xa8>
 3056740:	0081ffc4 	movi	r2,2047
 3056744:	e0fff717 	ldw	r3,-36(fp)
 3056748:	10c5c83a 	sub	r2,r2,r3
 305674c:	e0bff915 	stw	r2,-28(fp)
 3056750:	e0bff917 	ldw	r2,-28(fp)
 3056754:	1004c03a 	cmpne	r2,r2,zero
 3056758:	1000011e 	bne	r2,zero,3056760 <altera_avalon_jtag_uart_write+0xb8>
 305675c:	00001b06 	br	30567cc <altera_avalon_jtag_uart_write+0x124>
 3056760:	e0fff517 	ldw	r3,-44(fp)
 3056764:	e0bff917 	ldw	r2,-28(fp)
 3056768:	1880022e 	bgeu	r3,r2,3056774 <altera_avalon_jtag_uart_write+0xcc>
 305676c:	e0bff517 	ldw	r2,-44(fp)
 3056770:	e0bff915 	stw	r2,-28(fp)
 3056774:	e0fff317 	ldw	r3,-52(fp)
 3056778:	e0bff717 	ldw	r2,-36(fp)
 305677c:	1885883a 	add	r2,r3,r2
 3056780:	11020e04 	addi	r4,r2,2104
 3056784:	e17ff417 	ldw	r5,-48(fp)
 3056788:	e1bff917 	ldw	r6,-28(fp)
 305678c:	304bb5c0 	call	304bb5c <memcpy>
 3056790:	e0fff417 	ldw	r3,-48(fp)
 3056794:	e0bff917 	ldw	r2,-28(fp)
 3056798:	1885883a 	add	r2,r3,r2
 305679c:	e0bff415 	stw	r2,-48(fp)
 30567a0:	e0fff517 	ldw	r3,-44(fp)
 30567a4:	e0bff917 	ldw	r2,-28(fp)
 30567a8:	1885c83a 	sub	r2,r3,r2
 30567ac:	e0bff515 	stw	r2,-44(fp)
 30567b0:	e13ff317 	ldw	r4,-52(fp)
 30567b4:	e0fff717 	ldw	r3,-36(fp)
 30567b8:	e0bff917 	ldw	r2,-28(fp)
 30567bc:	1885883a 	add	r2,r3,r2
 30567c0:	1081ffcc 	andi	r2,r2,2047
 30567c4:	20800c15 	stw	r2,48(r4)
 30567c8:	003fc306 	br	30566d8 <altera_avalon_jtag_uart_write+0x30>
 30567cc:	0005303a 	rdctl	r2,status
 30567d0:	e0bffe15 	stw	r2,-8(fp)
 30567d4:	e0fffe17 	ldw	r3,-8(fp)
 30567d8:	00bfff84 	movi	r2,-2
 30567dc:	1884703a 	and	r2,r3,r2
 30567e0:	1001703a 	wrctl	status,r2
 30567e4:	e0bffe17 	ldw	r2,-8(fp)
 30567e8:	e0bffd15 	stw	r2,-12(fp)
 30567ec:	e0bffd17 	ldw	r2,-12(fp)
 30567f0:	e0bffa15 	stw	r2,-24(fp)
 30567f4:	e0fff317 	ldw	r3,-52(fp)
 30567f8:	e0bff317 	ldw	r2,-52(fp)
 30567fc:	10800817 	ldw	r2,32(r2)
 3056800:	10800094 	ori	r2,r2,2
 3056804:	18800815 	stw	r2,32(r3)
 3056808:	e0bff317 	ldw	r2,-52(fp)
 305680c:	10800017 	ldw	r2,0(r2)
 3056810:	10800104 	addi	r2,r2,4
 3056814:	1007883a 	mov	r3,r2
 3056818:	e0bff317 	ldw	r2,-52(fp)
 305681c:	10800817 	ldw	r2,32(r2)
 3056820:	18800035 	stwio	r2,0(r3)
 3056824:	e0bffa17 	ldw	r2,-24(fp)
 3056828:	e0bffe15 	stw	r2,-8(fp)
 305682c:	e0bffe17 	ldw	r2,-8(fp)
 3056830:	1001703a 	wrctl	status,r2
 3056834:	e0bff517 	ldw	r2,-44(fp)
 3056838:	10800050 	cmplti	r2,r2,1
 305683c:	1000141e 	bne	r2,zero,3056890 <altera_avalon_jtag_uart_write+0x1e8>
 3056840:	e0bff617 	ldw	r2,-40(fp)
 3056844:	1090000c 	andi	r2,r2,16384
 3056848:	1005003a 	cmpeq	r2,r2,zero
 305684c:	1000011e 	bne	r2,zero,3056854 <altera_avalon_jtag_uart_write+0x1ac>
 3056850:	00001306 	br	30568a0 <altera_avalon_jtag_uart_write+0x1f8>
 3056854:	e0bff317 	ldw	r2,-52(fp)
 3056858:	10c00d17 	ldw	r3,52(r2)
 305685c:	e0bff817 	ldw	r2,-32(fp)
 3056860:	1880061e 	bne	r3,r2,305687c <altera_avalon_jtag_uart_write+0x1d4>
 3056864:	e0bff317 	ldw	r2,-52(fp)
 3056868:	e0fff317 	ldw	r3,-52(fp)
 305686c:	11000917 	ldw	r4,36(r2)
 3056870:	18800117 	ldw	r2,4(r3)
 3056874:	2080012e 	bgeu	r4,r2,305687c <altera_avalon_jtag_uart_write+0x1d4>
 3056878:	003ff606 	br	3056854 <altera_avalon_jtag_uart_write+0x1ac>
 305687c:	e0bff317 	ldw	r2,-52(fp)
 3056880:	10c00d17 	ldw	r3,52(r2)
 3056884:	e0bff817 	ldw	r2,-32(fp)
 3056888:	1880011e 	bne	r3,r2,3056890 <altera_avalon_jtag_uart_write+0x1e8>
 305688c:	00000406 	br	30568a0 <altera_avalon_jtag_uart_write+0x1f8>
 3056890:	e0bff517 	ldw	r2,-44(fp)
 3056894:	10800050 	cmplti	r2,r2,1
 3056898:	1000011e 	bne	r2,zero,30568a0 <altera_avalon_jtag_uart_write+0x1f8>
 305689c:	003f8e06 	br	30566d8 <altera_avalon_jtag_uart_write+0x30>
 30568a0:	e03ffe15 	stw	zero,-8(fp)
 30568a4:	e0fff417 	ldw	r3,-48(fp)
 30568a8:	e0bffb17 	ldw	r2,-20(fp)
 30568ac:	18800526 	beq	r3,r2,30568c4 <altera_avalon_jtag_uart_write+0x21c>
 30568b0:	e0bff417 	ldw	r2,-48(fp)
 30568b4:	e0fffb17 	ldw	r3,-20(fp)
 30568b8:	10c5c83a 	sub	r2,r2,r3
 30568bc:	e0bfff15 	stw	r2,-4(fp)
 30568c0:	00000906 	br	30568e8 <altera_avalon_jtag_uart_write+0x240>
 30568c4:	e0bff617 	ldw	r2,-40(fp)
 30568c8:	1090000c 	andi	r2,r2,16384
 30568cc:	1005003a 	cmpeq	r2,r2,zero
 30568d0:	1000031e 	bne	r2,zero,30568e0 <altera_avalon_jtag_uart_write+0x238>
 30568d4:	00bffd44 	movi	r2,-11
 30568d8:	e0bfff15 	stw	r2,-4(fp)
 30568dc:	00000206 	br	30568e8 <altera_avalon_jtag_uart_write+0x240>
 30568e0:	00bffec4 	movi	r2,-5
 30568e4:	e0bfff15 	stw	r2,-4(fp)
 30568e8:	e0bfff17 	ldw	r2,-4(fp)
 30568ec:	dfc00e17 	ldw	ra,56(sp)
 30568f0:	df000d17 	ldw	fp,52(sp)
 30568f4:	dec00f04 	addi	sp,sp,60
 30568f8:	f800283a 	ret

030568fc <lcd_write_command>:
 30568fc:	defffa04 	addi	sp,sp,-24
 3056900:	dfc00515 	stw	ra,20(sp)
 3056904:	df000415 	stw	fp,16(sp)
 3056908:	df000404 	addi	fp,sp,16
 305690c:	e13ffc15 	stw	r4,-16(fp)
 3056910:	e17ffd05 	stb	r5,-12(fp)
 3056914:	e0bffc17 	ldw	r2,-16(fp)
 3056918:	10800017 	ldw	r2,0(r2)
 305691c:	e0bffe15 	stw	r2,-8(fp)
 3056920:	008003f4 	movhi	r2,15
 3056924:	10909004 	addi	r2,r2,16960
 3056928:	e0bfff15 	stw	r2,-4(fp)
 305692c:	e0bffc17 	ldw	r2,-16(fp)
 3056930:	10800807 	ldb	r2,32(r2)
 3056934:	1005003a 	cmpeq	r2,r2,zero
 3056938:	1000011e 	bne	r2,zero,3056940 <lcd_write_command+0x44>
 305693c:	00001406 	br	3056990 <lcd_write_command+0x94>
 3056940:	e0bffe17 	ldw	r2,-8(fp)
 3056944:	10800104 	addi	r2,r2,4
 3056948:	10800037 	ldwio	r2,0(r2)
 305694c:	1080200c 	andi	r2,r2,128
 3056950:	1005003a 	cmpeq	r2,r2,zero
 3056954:	1000091e 	bne	r2,zero,305697c <lcd_write_command+0x80>
 3056958:	e0bfff17 	ldw	r2,-4(fp)
 305695c:	10bfffc4 	addi	r2,r2,-1
 3056960:	e0bfff15 	stw	r2,-4(fp)
 3056964:	1004c03a 	cmpne	r2,r2,zero
 3056968:	103ff51e 	bne	r2,zero,3056940 <lcd_write_command+0x44>
 305696c:	e0fffc17 	ldw	r3,-16(fp)
 3056970:	00800044 	movi	r2,1
 3056974:	18800805 	stb	r2,32(r3)
 3056978:	00000506 	br	3056990 <lcd_write_command+0x94>
 305697c:	01001904 	movi	r4,100
 3056980:	30540480 	call	3054048 <usleep>
 3056984:	e0fffe17 	ldw	r3,-8(fp)
 3056988:	e0bffd03 	ldbu	r2,-12(fp)
 305698c:	18800035 	stwio	r2,0(r3)
 3056990:	dfc00517 	ldw	ra,20(sp)
 3056994:	df000417 	ldw	fp,16(sp)
 3056998:	dec00604 	addi	sp,sp,24
 305699c:	f800283a 	ret

030569a0 <lcd_write_data>:
 30569a0:	defffa04 	addi	sp,sp,-24
 30569a4:	dfc00515 	stw	ra,20(sp)
 30569a8:	df000415 	stw	fp,16(sp)
 30569ac:	df000404 	addi	fp,sp,16
 30569b0:	e13ffc15 	stw	r4,-16(fp)
 30569b4:	e17ffd05 	stb	r5,-12(fp)
 30569b8:	e0bffc17 	ldw	r2,-16(fp)
 30569bc:	10800017 	ldw	r2,0(r2)
 30569c0:	e0bffe15 	stw	r2,-8(fp)
 30569c4:	008003f4 	movhi	r2,15
 30569c8:	10909004 	addi	r2,r2,16960
 30569cc:	e0bfff15 	stw	r2,-4(fp)
 30569d0:	e0bffc17 	ldw	r2,-16(fp)
 30569d4:	10800807 	ldb	r2,32(r2)
 30569d8:	1005003a 	cmpeq	r2,r2,zero
 30569dc:	1000011e 	bne	r2,zero,30569e4 <lcd_write_data+0x44>
 30569e0:	00001b06 	br	3056a50 <lcd_write_data+0xb0>
 30569e4:	e0bffe17 	ldw	r2,-8(fp)
 30569e8:	10800104 	addi	r2,r2,4
 30569ec:	10800037 	ldwio	r2,0(r2)
 30569f0:	1080200c 	andi	r2,r2,128
 30569f4:	1005003a 	cmpeq	r2,r2,zero
 30569f8:	1000091e 	bne	r2,zero,3056a20 <lcd_write_data+0x80>
 30569fc:	e0bfff17 	ldw	r2,-4(fp)
 3056a00:	10bfffc4 	addi	r2,r2,-1
 3056a04:	e0bfff15 	stw	r2,-4(fp)
 3056a08:	1004c03a 	cmpne	r2,r2,zero
 3056a0c:	103ff51e 	bne	r2,zero,30569e4 <lcd_write_data+0x44>
 3056a10:	e0fffc17 	ldw	r3,-16(fp)
 3056a14:	00800044 	movi	r2,1
 3056a18:	18800805 	stb	r2,32(r3)
 3056a1c:	00000c06 	br	3056a50 <lcd_write_data+0xb0>
 3056a20:	01001904 	movi	r4,100
 3056a24:	30540480 	call	3054048 <usleep>
 3056a28:	e0bffe17 	ldw	r2,-8(fp)
 3056a2c:	10800204 	addi	r2,r2,8
 3056a30:	1007883a 	mov	r3,r2
 3056a34:	e0bffd03 	ldbu	r2,-12(fp)
 3056a38:	18800035 	stwio	r2,0(r3)
 3056a3c:	e0fffc17 	ldw	r3,-16(fp)
 3056a40:	e0bffc17 	ldw	r2,-16(fp)
 3056a44:	108008c3 	ldbu	r2,35(r2)
 3056a48:	10800044 	addi	r2,r2,1
 3056a4c:	188008c5 	stb	r2,35(r3)
 3056a50:	dfc00517 	ldw	ra,20(sp)
 3056a54:	df000417 	ldw	fp,16(sp)
 3056a58:	dec00604 	addi	sp,sp,24
 3056a5c:	f800283a 	ret

03056a60 <lcd_clear_screen>:
 3056a60:	defffc04 	addi	sp,sp,-16
 3056a64:	dfc00315 	stw	ra,12(sp)
 3056a68:	df000215 	stw	fp,8(sp)
 3056a6c:	df000204 	addi	fp,sp,8
 3056a70:	e13ffe15 	stw	r4,-8(fp)
 3056a74:	e13ffe17 	ldw	r4,-8(fp)
 3056a78:	01400044 	movi	r5,1
 3056a7c:	30568fc0 	call	30568fc <lcd_write_command>
 3056a80:	e0bffe17 	ldw	r2,-8(fp)
 3056a84:	10000845 	stb	zero,33(r2)
 3056a88:	e0bffe17 	ldw	r2,-8(fp)
 3056a8c:	10000885 	stb	zero,34(r2)
 3056a90:	e0bffe17 	ldw	r2,-8(fp)
 3056a94:	100008c5 	stb	zero,35(r2)
 3056a98:	e03fff15 	stw	zero,-4(fp)
 3056a9c:	e0bfff17 	ldw	r2,-4(fp)
 3056aa0:	10800088 	cmpgei	r2,r2,2
 3056aa4:	10001a1e 	bne	r2,zero,3056b10 <lcd_clear_screen+0xb0>
 3056aa8:	e0bfff17 	ldw	r2,-4(fp)
 3056aac:	10c018e4 	muli	r3,r2,99
 3056ab0:	e0bffe17 	ldw	r2,-8(fp)
 3056ab4:	1885883a 	add	r2,r3,r2
 3056ab8:	11001004 	addi	r4,r2,64
 3056abc:	01400804 	movi	r5,32
 3056ac0:	01801444 	movi	r6,81
 3056ac4:	304bbfc0 	call	304bbfc <memset>
 3056ac8:	e0bfff17 	ldw	r2,-4(fp)
 3056acc:	10c018e4 	muli	r3,r2,99
 3056ad0:	e0bffe17 	ldw	r2,-8(fp)
 3056ad4:	1885883a 	add	r2,r3,r2
 3056ad8:	11000c04 	addi	r4,r2,48
 3056adc:	01400804 	movi	r5,32
 3056ae0:	01800404 	movi	r6,16
 3056ae4:	304bbfc0 	call	304bbfc <memset>
 3056ae8:	e0fffe17 	ldw	r3,-8(fp)
 3056aec:	e0bfff17 	ldw	r2,-4(fp)
 3056af0:	108018e4 	muli	r2,r2,99
 3056af4:	10c5883a 	add	r2,r2,r3
 3056af8:	10802404 	addi	r2,r2,144
 3056afc:	10000045 	stb	zero,1(r2)
 3056b00:	e0bfff17 	ldw	r2,-4(fp)
 3056b04:	10800044 	addi	r2,r2,1
 3056b08:	e0bfff15 	stw	r2,-4(fp)
 3056b0c:	003fe306 	br	3056a9c <lcd_clear_screen+0x3c>
 3056b10:	dfc00317 	ldw	ra,12(sp)
 3056b14:	df000217 	ldw	fp,8(sp)
 3056b18:	dec00404 	addi	sp,sp,16
 3056b1c:	f800283a 	ret

03056b20 <lcd_repaint_screen>:
 3056b20:	defff604 	addi	sp,sp,-40
 3056b24:	dfc00915 	stw	ra,36(sp)
 3056b28:	df000815 	stw	fp,32(sp)
 3056b2c:	dc000715 	stw	r16,28(sp)
 3056b30:	df000804 	addi	fp,sp,32
 3056b34:	e13ff815 	stw	r4,-32(fp)
 3056b38:	e0bff817 	ldw	r2,-32(fp)
 3056b3c:	10800947 	ldb	r2,37(r2)
 3056b40:	e0bffb15 	stw	r2,-20(fp)
 3056b44:	e03ff915 	stw	zero,-28(fp)
 3056b48:	e0bff917 	ldw	r2,-28(fp)
 3056b4c:	10800088 	cmpgei	r2,r2,2
 3056b50:	10005a1e 	bne	r2,zero,3056cbc <lcd_repaint_screen+0x19c>
 3056b54:	e0fff817 	ldw	r3,-32(fp)
 3056b58:	e0bff917 	ldw	r2,-28(fp)
 3056b5c:	108018e4 	muli	r2,r2,99
 3056b60:	10c5883a 	add	r2,r2,r3
 3056b64:	10802404 	addi	r2,r2,144
 3056b68:	10800047 	ldb	r2,1(r2)
 3056b6c:	e0bffc15 	stw	r2,-16(fp)
 3056b70:	e0fff817 	ldw	r3,-32(fp)
 3056b74:	e0bff917 	ldw	r2,-28(fp)
 3056b78:	108018e4 	muli	r2,r2,99
 3056b7c:	10c5883a 	add	r2,r2,r3
 3056b80:	10802404 	addi	r2,r2,144
 3056b84:	10c00083 	ldbu	r3,2(r2)
 3056b88:	e0bffb17 	ldw	r2,-20(fp)
 3056b8c:	1885383a 	mul	r2,r3,r2
 3056b90:	1005d23a 	srai	r2,r2,8
 3056b94:	e0bffd15 	stw	r2,-12(fp)
 3056b98:	e0fffd17 	ldw	r3,-12(fp)
 3056b9c:	e0bffc17 	ldw	r2,-16(fp)
 3056ba0:	18800116 	blt	r3,r2,3056ba8 <lcd_repaint_screen+0x88>
 3056ba4:	e03ffd15 	stw	zero,-12(fp)
 3056ba8:	e03ffa15 	stw	zero,-24(fp)
 3056bac:	e0bffa17 	ldw	r2,-24(fp)
 3056bb0:	10800408 	cmpgei	r2,r2,16
 3056bb4:	10003d1e 	bne	r2,zero,3056cac <lcd_repaint_screen+0x18c>
 3056bb8:	e43ff817 	ldw	r16,-32(fp)
 3056bbc:	e0fffa17 	ldw	r3,-24(fp)
 3056bc0:	e0bffd17 	ldw	r2,-12(fp)
 3056bc4:	1889883a 	add	r4,r3,r2
 3056bc8:	e17ffc17 	ldw	r5,-16(fp)
 3056bcc:	304978c0 	call	304978c <__modsi3>
 3056bd0:	1007883a 	mov	r3,r2
 3056bd4:	e0bff917 	ldw	r2,-28(fp)
 3056bd8:	108018e4 	muli	r2,r2,99
 3056bdc:	1405883a 	add	r2,r2,r16
 3056be0:	10c5883a 	add	r2,r2,r3
 3056be4:	10801004 	addi	r2,r2,64
 3056be8:	10800003 	ldbu	r2,0(r2)
 3056bec:	e0bffe05 	stb	r2,-8(fp)
 3056bf0:	e0fff817 	ldw	r3,-32(fp)
 3056bf4:	e0bff917 	ldw	r2,-28(fp)
 3056bf8:	108018e4 	muli	r2,r2,99
 3056bfc:	10c7883a 	add	r3,r2,r3
 3056c00:	e0bffa17 	ldw	r2,-24(fp)
 3056c04:	1885883a 	add	r2,r3,r2
 3056c08:	10800c04 	addi	r2,r2,48
 3056c0c:	10c00007 	ldb	r3,0(r2)
 3056c10:	e0bffe07 	ldb	r2,-8(fp)
 3056c14:	18802126 	beq	r3,r2,3056c9c <lcd_repaint_screen+0x17c>
 3056c18:	e0fff917 	ldw	r3,-28(fp)
 3056c1c:	d0a01a04 	addi	r2,gp,-32664
 3056c20:	1885883a 	add	r2,r3,r2
 3056c24:	e0fffa17 	ldw	r3,-24(fp)
 3056c28:	11000003 	ldbu	r4,0(r2)
 3056c2c:	1805883a 	mov	r2,r3
 3056c30:	2085883a 	add	r2,r4,r2
 3056c34:	e0bffe45 	stb	r2,-7(fp)
 3056c38:	e0fffe43 	ldbu	r3,-7(fp)
 3056c3c:	e0bff817 	ldw	r2,-32(fp)
 3056c40:	108008c7 	ldb	r2,35(r2)
 3056c44:	18800926 	beq	r3,r2,3056c6c <lcd_repaint_screen+0x14c>
 3056c48:	e0fffe43 	ldbu	r3,-7(fp)
 3056c4c:	00bfe004 	movi	r2,-128
 3056c50:	1884b03a 	or	r2,r3,r2
 3056c54:	11403fcc 	andi	r5,r2,255
 3056c58:	e13ff817 	ldw	r4,-32(fp)
 3056c5c:	30568fc0 	call	30568fc <lcd_write_command>
 3056c60:	e0fff817 	ldw	r3,-32(fp)
 3056c64:	e0bffe43 	ldbu	r2,-7(fp)
 3056c68:	188008c5 	stb	r2,35(r3)
 3056c6c:	e17ffe03 	ldbu	r5,-8(fp)
 3056c70:	e13ff817 	ldw	r4,-32(fp)
 3056c74:	30569a00 	call	30569a0 <lcd_write_data>
 3056c78:	e0fff817 	ldw	r3,-32(fp)
 3056c7c:	e0bff917 	ldw	r2,-28(fp)
 3056c80:	108018e4 	muli	r2,r2,99
 3056c84:	10c7883a 	add	r3,r2,r3
 3056c88:	e0bffa17 	ldw	r2,-24(fp)
 3056c8c:	1885883a 	add	r2,r3,r2
 3056c90:	10c00c04 	addi	r3,r2,48
 3056c94:	e0bffe03 	ldbu	r2,-8(fp)
 3056c98:	18800005 	stb	r2,0(r3)
 3056c9c:	e0bffa17 	ldw	r2,-24(fp)
 3056ca0:	10800044 	addi	r2,r2,1
 3056ca4:	e0bffa15 	stw	r2,-24(fp)
 3056ca8:	003fc006 	br	3056bac <lcd_repaint_screen+0x8c>
 3056cac:	e0bff917 	ldw	r2,-28(fp)
 3056cb0:	10800044 	addi	r2,r2,1
 3056cb4:	e0bff915 	stw	r2,-28(fp)
 3056cb8:	003fa306 	br	3056b48 <lcd_repaint_screen+0x28>
 3056cbc:	dfc00917 	ldw	ra,36(sp)
 3056cc0:	df000817 	ldw	fp,32(sp)
 3056cc4:	dc000717 	ldw	r16,28(sp)
 3056cc8:	dec00a04 	addi	sp,sp,40
 3056ccc:	f800283a 	ret

03056cd0 <lcd_scroll_up>:
 3056cd0:	defffc04 	addi	sp,sp,-16
 3056cd4:	dfc00315 	stw	ra,12(sp)
 3056cd8:	df000215 	stw	fp,8(sp)
 3056cdc:	df000204 	addi	fp,sp,8
 3056ce0:	e13ffe15 	stw	r4,-8(fp)
 3056ce4:	e03fff15 	stw	zero,-4(fp)
 3056ce8:	e0bfff17 	ldw	r2,-4(fp)
 3056cec:	10800088 	cmpgei	r2,r2,2
 3056cf0:	10001c1e 	bne	r2,zero,3056d64 <lcd_scroll_up+0x94>
 3056cf4:	e0bfff17 	ldw	r2,-4(fp)
 3056cf8:	10800048 	cmpgei	r2,r2,1
 3056cfc:	10000d1e 	bne	r2,zero,3056d34 <lcd_scroll_up+0x64>
 3056d00:	e0bfff17 	ldw	r2,-4(fp)
 3056d04:	10c018e4 	muli	r3,r2,99
 3056d08:	e0bffe17 	ldw	r2,-8(fp)
 3056d0c:	1885883a 	add	r2,r3,r2
 3056d10:	11001004 	addi	r4,r2,64
 3056d14:	e0bfff17 	ldw	r2,-4(fp)
 3056d18:	10c018e4 	muli	r3,r2,99
 3056d1c:	e0bffe17 	ldw	r2,-8(fp)
 3056d20:	1885883a 	add	r2,r3,r2
 3056d24:	114028c4 	addi	r5,r2,163
 3056d28:	01801404 	movi	r6,80
 3056d2c:	304bb5c0 	call	304bb5c <memcpy>
 3056d30:	00000806 	br	3056d54 <lcd_scroll_up+0x84>
 3056d34:	e0bfff17 	ldw	r2,-4(fp)
 3056d38:	10c018e4 	muli	r3,r2,99
 3056d3c:	e0bffe17 	ldw	r2,-8(fp)
 3056d40:	1885883a 	add	r2,r3,r2
 3056d44:	11001004 	addi	r4,r2,64
 3056d48:	01400804 	movi	r5,32
 3056d4c:	01801404 	movi	r6,80
 3056d50:	304bbfc0 	call	304bbfc <memset>
 3056d54:	e0bfff17 	ldw	r2,-4(fp)
 3056d58:	10800044 	addi	r2,r2,1
 3056d5c:	e0bfff15 	stw	r2,-4(fp)
 3056d60:	003fe106 	br	3056ce8 <lcd_scroll_up+0x18>
 3056d64:	e0fffe17 	ldw	r3,-8(fp)
 3056d68:	e0bffe17 	ldw	r2,-8(fp)
 3056d6c:	10800883 	ldbu	r2,34(r2)
 3056d70:	10bfffc4 	addi	r2,r2,-1
 3056d74:	18800885 	stb	r2,34(r3)
 3056d78:	dfc00317 	ldw	ra,12(sp)
 3056d7c:	df000217 	ldw	fp,8(sp)
 3056d80:	dec00404 	addi	sp,sp,16
 3056d84:	f800283a 	ret

03056d88 <lcd_handle_escape>:
 3056d88:	defff804 	addi	sp,sp,-32
 3056d8c:	dfc00715 	stw	ra,28(sp)
 3056d90:	df000615 	stw	fp,24(sp)
 3056d94:	df000604 	addi	fp,sp,24
 3056d98:	e13ffa15 	stw	r4,-24(fp)
 3056d9c:	e17ffb05 	stb	r5,-20(fp)
 3056da0:	e03ffc15 	stw	zero,-16(fp)
 3056da4:	e03ffd15 	stw	zero,-12(fp)
 3056da8:	e0bffa17 	ldw	r2,-24(fp)
 3056dac:	10800a07 	ldb	r2,40(r2)
 3056db0:	108016d8 	cmpnei	r2,r2,91
 3056db4:	1000341e 	bne	r2,zero,3056e88 <lcd_handle_escape+0x100>
 3056db8:	e0bffa17 	ldw	r2,-24(fp)
 3056dbc:	10800a44 	addi	r2,r2,41
 3056dc0:	e0bffe15 	stw	r2,-8(fp)
 3056dc4:	e0bffe17 	ldw	r2,-8(fp)
 3056dc8:	10c00007 	ldb	r3,0(r2)
 3056dcc:	0080c1b4 	movhi	r2,774
 3056dd0:	10aa35c4 	addi	r2,r2,-22313
 3056dd4:	1885883a 	add	r2,r3,r2
 3056dd8:	10800003 	ldbu	r2,0(r2)
 3056ddc:	1080010c 	andi	r2,r2,4
 3056de0:	1005003a 	cmpeq	r2,r2,zero
 3056de4:	10000c1e 	bne	r2,zero,3056e18 <lcd_handle_escape+0x90>
 3056de8:	e0bffc17 	ldw	r2,-16(fp)
 3056dec:	110002a4 	muli	r4,r2,10
 3056df0:	e17ffe04 	addi	r5,fp,-8
 3056df4:	28c00017 	ldw	r3,0(r5)
 3056df8:	1805883a 	mov	r2,r3
 3056dfc:	10800007 	ldb	r2,0(r2)
 3056e00:	2085883a 	add	r2,r4,r2
 3056e04:	10bff404 	addi	r2,r2,-48
 3056e08:	18c00044 	addi	r3,r3,1
 3056e0c:	28c00015 	stw	r3,0(r5)
 3056e10:	e0bffc15 	stw	r2,-16(fp)
 3056e14:	003feb06 	br	3056dc4 <lcd_handle_escape+0x3c>
 3056e18:	e0bffe17 	ldw	r2,-8(fp)
 3056e1c:	10800007 	ldb	r2,0(r2)
 3056e20:	10800ed8 	cmpnei	r2,r2,59
 3056e24:	10001a1e 	bne	r2,zero,3056e90 <lcd_handle_escape+0x108>
 3056e28:	e0bffe17 	ldw	r2,-8(fp)
 3056e2c:	10800044 	addi	r2,r2,1
 3056e30:	e0bffe15 	stw	r2,-8(fp)
 3056e34:	e0bffe17 	ldw	r2,-8(fp)
 3056e38:	10c00007 	ldb	r3,0(r2)
 3056e3c:	0080c1b4 	movhi	r2,774
 3056e40:	10aa35c4 	addi	r2,r2,-22313
 3056e44:	1885883a 	add	r2,r3,r2
 3056e48:	10800003 	ldbu	r2,0(r2)
 3056e4c:	1080010c 	andi	r2,r2,4
 3056e50:	1005003a 	cmpeq	r2,r2,zero
 3056e54:	10000e1e 	bne	r2,zero,3056e90 <lcd_handle_escape+0x108>
 3056e58:	e0bffd17 	ldw	r2,-12(fp)
 3056e5c:	110002a4 	muli	r4,r2,10
 3056e60:	e17ffe04 	addi	r5,fp,-8
 3056e64:	28c00017 	ldw	r3,0(r5)
 3056e68:	1805883a 	mov	r2,r3
 3056e6c:	10800007 	ldb	r2,0(r2)
 3056e70:	2085883a 	add	r2,r4,r2
 3056e74:	10bff404 	addi	r2,r2,-48
 3056e78:	18c00044 	addi	r3,r3,1
 3056e7c:	28c00015 	stw	r3,0(r5)
 3056e80:	e0bffd15 	stw	r2,-12(fp)
 3056e84:	003feb06 	br	3056e34 <lcd_handle_escape+0xac>
 3056e88:	00bfffc4 	movi	r2,-1
 3056e8c:	e0bffc15 	stw	r2,-16(fp)
 3056e90:	e0bffb07 	ldb	r2,-20(fp)
 3056e94:	e0bfff15 	stw	r2,-4(fp)
 3056e98:	e0ffff17 	ldw	r3,-4(fp)
 3056e9c:	188012a0 	cmpeqi	r2,r3,74
 3056ea0:	10002a1e 	bne	r2,zero,3056f4c <lcd_handle_escape+0x1c4>
 3056ea4:	e0ffff17 	ldw	r3,-4(fp)
 3056ea8:	188012c8 	cmpgei	r2,r3,75
 3056eac:	1000041e 	bne	r2,zero,3056ec0 <lcd_handle_escape+0x138>
 3056eb0:	e0ffff17 	ldw	r3,-4(fp)
 3056eb4:	18801220 	cmpeqi	r2,r3,72
 3056eb8:	1000081e 	bne	r2,zero,3056edc <lcd_handle_escape+0x154>
 3056ebc:	00003f06 	br	3056fbc <lcd_handle_escape+0x234>
 3056ec0:	e0ffff17 	ldw	r3,-4(fp)
 3056ec4:	188012e0 	cmpeqi	r2,r3,75
 3056ec8:	1000261e 	bne	r2,zero,3056f64 <lcd_handle_escape+0x1dc>
 3056ecc:	e0ffff17 	ldw	r3,-4(fp)
 3056ed0:	188019a0 	cmpeqi	r2,r3,102
 3056ed4:	1000011e 	bne	r2,zero,3056edc <lcd_handle_escape+0x154>
 3056ed8:	00003806 	br	3056fbc <lcd_handle_escape+0x234>
 3056edc:	e0bffd17 	ldw	r2,-12(fp)
 3056ee0:	10800050 	cmplti	r2,r2,1
 3056ee4:	1000041e 	bne	r2,zero,3056ef8 <lcd_handle_escape+0x170>
 3056ee8:	e0fffa17 	ldw	r3,-24(fp)
 3056eec:	e0bffd17 	ldw	r2,-12(fp)
 3056ef0:	10bfffc4 	addi	r2,r2,-1
 3056ef4:	18800845 	stb	r2,33(r3)
 3056ef8:	e0bffc17 	ldw	r2,-16(fp)
 3056efc:	10800050 	cmplti	r2,r2,1
 3056f00:	10002e1e 	bne	r2,zero,3056fbc <lcd_handle_escape+0x234>
 3056f04:	e0fffa17 	ldw	r3,-24(fp)
 3056f08:	e0bffc17 	ldw	r2,-16(fp)
 3056f0c:	10bfffc4 	addi	r2,r2,-1
 3056f10:	18800885 	stb	r2,34(r3)
 3056f14:	e0bffa17 	ldw	r2,-24(fp)
 3056f18:	10800883 	ldbu	r2,34(r2)
 3056f1c:	10800170 	cmpltui	r2,r2,5
 3056f20:	1000031e 	bne	r2,zero,3056f30 <lcd_handle_escape+0x1a8>
 3056f24:	e0fffa17 	ldw	r3,-24(fp)
 3056f28:	00800104 	movi	r2,4
 3056f2c:	18800885 	stb	r2,34(r3)
 3056f30:	e0bffa17 	ldw	r2,-24(fp)
 3056f34:	10800883 	ldbu	r2,34(r2)
 3056f38:	108000f0 	cmpltui	r2,r2,3
 3056f3c:	10001f1e 	bne	r2,zero,3056fbc <lcd_handle_escape+0x234>
 3056f40:	e13ffa17 	ldw	r4,-24(fp)
 3056f44:	3056cd00 	call	3056cd0 <lcd_scroll_up>
 3056f48:	003ff906 	br	3056f30 <lcd_handle_escape+0x1a8>
 3056f4c:	e0bffc17 	ldw	r2,-16(fp)
 3056f50:	10800098 	cmpnei	r2,r2,2
 3056f54:	1000191e 	bne	r2,zero,3056fbc <lcd_handle_escape+0x234>
 3056f58:	e13ffa17 	ldw	r4,-24(fp)
 3056f5c:	3056a600 	call	3056a60 <lcd_clear_screen>
 3056f60:	00001606 	br	3056fbc <lcd_handle_escape+0x234>
 3056f64:	e0bffc17 	ldw	r2,-16(fp)
 3056f68:	10800048 	cmpgei	r2,r2,1
 3056f6c:	1000131e 	bne	r2,zero,3056fbc <lcd_handle_escape+0x234>
 3056f70:	e0bffa17 	ldw	r2,-24(fp)
 3056f74:	10800843 	ldbu	r2,33(r2)
 3056f78:	10801428 	cmpgeui	r2,r2,80
 3056f7c:	10000f1e 	bne	r2,zero,3056fbc <lcd_handle_escape+0x234>
 3056f80:	e0bffa17 	ldw	r2,-24(fp)
 3056f84:	10800883 	ldbu	r2,34(r2)
 3056f88:	10c018e4 	muli	r3,r2,99
 3056f8c:	e0bffa17 	ldw	r2,-24(fp)
 3056f90:	1887883a 	add	r3,r3,r2
 3056f94:	e0bffa17 	ldw	r2,-24(fp)
 3056f98:	10800843 	ldbu	r2,33(r2)
 3056f9c:	1885883a 	add	r2,r3,r2
 3056fa0:	11001004 	addi	r4,r2,64
 3056fa4:	e0bffa17 	ldw	r2,-24(fp)
 3056fa8:	10c00843 	ldbu	r3,33(r2)
 3056fac:	00801404 	movi	r2,80
 3056fb0:	10cdc83a 	sub	r6,r2,r3
 3056fb4:	01400804 	movi	r5,32
 3056fb8:	304bbfc0 	call	304bbfc <memset>
 3056fbc:	dfc00717 	ldw	ra,28(sp)
 3056fc0:	df000617 	ldw	fp,24(sp)
 3056fc4:	dec00804 	addi	sp,sp,32
 3056fc8:	f800283a 	ret

03056fcc <altera_avalon_lcd_16207_write>:
 3056fcc:	defff304 	addi	sp,sp,-52
 3056fd0:	dfc00c15 	stw	ra,48(sp)
 3056fd4:	df000b15 	stw	fp,44(sp)
 3056fd8:	dc000a15 	stw	r16,40(sp)
 3056fdc:	df000b04 	addi	fp,sp,44
 3056fe0:	e13ff515 	stw	r4,-44(fp)
 3056fe4:	e17ff615 	stw	r5,-40(fp)
 3056fe8:	e1bff715 	stw	r6,-36(fp)
 3056fec:	e1fff815 	stw	r7,-32(fp)
 3056ff0:	e0fff617 	ldw	r3,-40(fp)
 3056ff4:	e0bff717 	ldw	r2,-36(fp)
 3056ff8:	1885883a 	add	r2,r3,r2
 3056ffc:	e0bff915 	stw	r2,-28(fp)
 3057000:	e03ffc15 	stw	zero,-16(fp)
 3057004:	e0fff517 	ldw	r3,-44(fp)
 3057008:	00800044 	movi	r2,1
 305700c:	188009c5 	stb	r2,39(r3)
 3057010:	e0fff617 	ldw	r3,-40(fp)
 3057014:	e0bff917 	ldw	r2,-28(fp)
 3057018:	18808b2e 	bgeu	r3,r2,3057248 <altera_avalon_lcd_16207_write+0x27c>
 305701c:	e0bff617 	ldw	r2,-40(fp)
 3057020:	10800003 	ldbu	r2,0(r2)
 3057024:	e0bffd05 	stb	r2,-12(fp)
 3057028:	e0bff517 	ldw	r2,-44(fp)
 305702c:	10800907 	ldb	r2,36(r2)
 3057030:	1004803a 	cmplt	r2,r2,zero
 3057034:	1000341e 	bne	r2,zero,3057108 <altera_avalon_lcd_16207_write+0x13c>
 3057038:	e0bff517 	ldw	r2,-44(fp)
 305703c:	10800907 	ldb	r2,36(r2)
 3057040:	e0bffe15 	stw	r2,-8(fp)
 3057044:	e0bffe17 	ldw	r2,-8(fp)
 3057048:	1004c03a 	cmpne	r2,r2,zero
 305704c:	1000031e 	bne	r2,zero,305705c <altera_avalon_lcd_16207_write+0x90>
 3057050:	e0bffd07 	ldb	r2,-12(fp)
 3057054:	108016d8 	cmpnei	r2,r2,91
 3057058:	10000f1e 	bne	r2,zero,3057098 <altera_avalon_lcd_16207_write+0xcc>
 305705c:	e0bffe17 	ldw	r2,-8(fp)
 3057060:	1005003a 	cmpeq	r2,r2,zero
 3057064:	1000181e 	bne	r2,zero,30570c8 <altera_avalon_lcd_16207_write+0xfc>
 3057068:	e0fffd07 	ldb	r3,-12(fp)
 305706c:	0080c1b4 	movhi	r2,774
 3057070:	10aa35c4 	addi	r2,r2,-22313
 3057074:	1885883a 	add	r2,r3,r2
 3057078:	10800003 	ldbu	r2,0(r2)
 305707c:	1080010c 	andi	r2,r2,4
 3057080:	1004c03a 	cmpne	r2,r2,zero
 3057084:	1000101e 	bne	r2,zero,30570c8 <altera_avalon_lcd_16207_write+0xfc>
 3057088:	e0bffd07 	ldb	r2,-12(fp)
 305708c:	10800ed8 	cmpnei	r2,r2,59
 3057090:	1000011e 	bne	r2,zero,3057098 <altera_avalon_lcd_16207_write+0xcc>
 3057094:	00000c06 	br	30570c8 <altera_avalon_lcd_16207_write+0xfc>
 3057098:	e0fff517 	ldw	r3,-44(fp)
 305709c:	e0bffe17 	ldw	r2,-8(fp)
 30570a0:	1885883a 	add	r2,r3,r2
 30570a4:	10800a04 	addi	r2,r2,40
 30570a8:	10000005 	stb	zero,0(r2)
 30570ac:	e17ffd07 	ldb	r5,-12(fp)
 30570b0:	e13ff517 	ldw	r4,-44(fp)
 30570b4:	3056d880 	call	3056d88 <lcd_handle_escape>
 30570b8:	e0fff517 	ldw	r3,-44(fp)
 30570bc:	00bfffc4 	movi	r2,-1
 30570c0:	18800905 	stb	r2,36(r3)
 30570c4:	00005c06 	br	3057238 <altera_avalon_lcd_16207_write+0x26c>
 30570c8:	e0bff517 	ldw	r2,-44(fp)
 30570cc:	10800903 	ldbu	r2,36(r2)
 30570d0:	108001e8 	cmpgeui	r2,r2,7
 30570d4:	1000581e 	bne	r2,zero,3057238 <altera_avalon_lcd_16207_write+0x26c>
 30570d8:	e0fff517 	ldw	r3,-44(fp)
 30570dc:	e0bffe17 	ldw	r2,-8(fp)
 30570e0:	1885883a 	add	r2,r3,r2
 30570e4:	10c00a04 	addi	r3,r2,40
 30570e8:	e0bffd03 	ldbu	r2,-12(fp)
 30570ec:	18800005 	stb	r2,0(r3)
 30570f0:	e0fff517 	ldw	r3,-44(fp)
 30570f4:	e0bff517 	ldw	r2,-44(fp)
 30570f8:	10800903 	ldbu	r2,36(r2)
 30570fc:	10800044 	addi	r2,r2,1
 3057100:	18800905 	stb	r2,36(r3)
 3057104:	00004c06 	br	3057238 <altera_avalon_lcd_16207_write+0x26c>
 3057108:	e0bffd07 	ldb	r2,-12(fp)
 305710c:	108006d8 	cmpnei	r2,r2,27
 3057110:	1000031e 	bne	r2,zero,3057120 <altera_avalon_lcd_16207_write+0x154>
 3057114:	e0bff517 	ldw	r2,-44(fp)
 3057118:	10000905 	stb	zero,36(r2)
 305711c:	00004606 	br	3057238 <altera_avalon_lcd_16207_write+0x26c>
 3057120:	e0bffd07 	ldb	r2,-12(fp)
 3057124:	10800358 	cmpnei	r2,r2,13
 3057128:	1000031e 	bne	r2,zero,3057138 <altera_avalon_lcd_16207_write+0x16c>
 305712c:	e0bff517 	ldw	r2,-44(fp)
 3057130:	10000845 	stb	zero,33(r2)
 3057134:	00004006 	br	3057238 <altera_avalon_lcd_16207_write+0x26c>
 3057138:	e0bffd07 	ldb	r2,-12(fp)
 305713c:	10800298 	cmpnei	r2,r2,10
 3057140:	10000e1e 	bne	r2,zero,305717c <altera_avalon_lcd_16207_write+0x1b0>
 3057144:	e0bff517 	ldw	r2,-44(fp)
 3057148:	10000845 	stb	zero,33(r2)
 305714c:	e0fff517 	ldw	r3,-44(fp)
 3057150:	e0bff517 	ldw	r2,-44(fp)
 3057154:	10800883 	ldbu	r2,34(r2)
 3057158:	10800044 	addi	r2,r2,1
 305715c:	18800885 	stb	r2,34(r3)
 3057160:	e0bff517 	ldw	r2,-44(fp)
 3057164:	10800883 	ldbu	r2,34(r2)
 3057168:	108000f0 	cmpltui	r2,r2,3
 305716c:	1000321e 	bne	r2,zero,3057238 <altera_avalon_lcd_16207_write+0x26c>
 3057170:	e13ff517 	ldw	r4,-44(fp)
 3057174:	3056cd00 	call	3056cd0 <lcd_scroll_up>
 3057178:	00002f06 	br	3057238 <altera_avalon_lcd_16207_write+0x26c>
 305717c:	e0bffd07 	ldb	r2,-12(fp)
 3057180:	10800218 	cmpnei	r2,r2,8
 3057184:	10000a1e 	bne	r2,zero,30571b0 <altera_avalon_lcd_16207_write+0x1e4>
 3057188:	e0bff517 	ldw	r2,-44(fp)
 305718c:	10800843 	ldbu	r2,33(r2)
 3057190:	1005003a 	cmpeq	r2,r2,zero
 3057194:	1000281e 	bne	r2,zero,3057238 <altera_avalon_lcd_16207_write+0x26c>
 3057198:	e0fff517 	ldw	r3,-44(fp)
 305719c:	e0bff517 	ldw	r2,-44(fp)
 30571a0:	10800843 	ldbu	r2,33(r2)
 30571a4:	10bfffc4 	addi	r2,r2,-1
 30571a8:	18800845 	stb	r2,33(r3)
 30571ac:	00002206 	br	3057238 <altera_avalon_lcd_16207_write+0x26c>
 30571b0:	e0fffd07 	ldb	r3,-12(fp)
 30571b4:	0080c1b4 	movhi	r2,774
 30571b8:	10aa35c4 	addi	r2,r2,-22313
 30571bc:	1885883a 	add	r2,r3,r2
 30571c0:	10800007 	ldb	r2,0(r2)
 30571c4:	108025cc 	andi	r2,r2,151
 30571c8:	1005003a 	cmpeq	r2,r2,zero
 30571cc:	10001a1e 	bne	r2,zero,3057238 <altera_avalon_lcd_16207_write+0x26c>
 30571d0:	e0bff517 	ldw	r2,-44(fp)
 30571d4:	10800883 	ldbu	r2,34(r2)
 30571d8:	108000b0 	cmpltui	r2,r2,2
 30571dc:	1000021e 	bne	r2,zero,30571e8 <altera_avalon_lcd_16207_write+0x21c>
 30571e0:	e13ff517 	ldw	r4,-44(fp)
 30571e4:	3056cd00 	call	3056cd0 <lcd_scroll_up>
 30571e8:	e0bff517 	ldw	r2,-44(fp)
 30571ec:	10800843 	ldbu	r2,33(r2)
 30571f0:	10801428 	cmpgeui	r2,r2,80
 30571f4:	10000b1e 	bne	r2,zero,3057224 <altera_avalon_lcd_16207_write+0x258>
 30571f8:	e13ff517 	ldw	r4,-44(fp)
 30571fc:	e0bff517 	ldw	r2,-44(fp)
 3057200:	10c00843 	ldbu	r3,33(r2)
 3057204:	e0bff517 	ldw	r2,-44(fp)
 3057208:	10800883 	ldbu	r2,34(r2)
 305720c:	108018e4 	muli	r2,r2,99
 3057210:	1105883a 	add	r2,r2,r4
 3057214:	10c5883a 	add	r2,r2,r3
 3057218:	10c01004 	addi	r3,r2,64
 305721c:	e0bffd03 	ldbu	r2,-12(fp)
 3057220:	18800005 	stb	r2,0(r3)
 3057224:	e0fff517 	ldw	r3,-44(fp)
 3057228:	e0bff517 	ldw	r2,-44(fp)
 305722c:	10800843 	ldbu	r2,33(r2)
 3057230:	10800044 	addi	r2,r2,1
 3057234:	18800845 	stb	r2,33(r3)
 3057238:	e0bff617 	ldw	r2,-40(fp)
 305723c:	10800044 	addi	r2,r2,1
 3057240:	e0bff615 	stw	r2,-40(fp)
 3057244:	003f7206 	br	3057010 <altera_avalon_lcd_16207_write+0x44>
 3057248:	00800404 	movi	r2,16
 305724c:	e0bffb15 	stw	r2,-20(fp)
 3057250:	e03ffa15 	stw	zero,-24(fp)
 3057254:	e0bffa17 	ldw	r2,-24(fp)
 3057258:	10800088 	cmpgei	r2,r2,2
 305725c:	1000331e 	bne	r2,zero,305732c <altera_avalon_lcd_16207_write+0x360>
 3057260:	00801404 	movi	r2,80
 3057264:	e0bffe15 	stw	r2,-8(fp)
 3057268:	e0bffe17 	ldw	r2,-8(fp)
 305726c:	10800050 	cmplti	r2,r2,1
 3057270:	10000f1e 	bne	r2,zero,30572b0 <altera_avalon_lcd_16207_write+0x2e4>
 3057274:	e0fff517 	ldw	r3,-44(fp)
 3057278:	e0bffa17 	ldw	r2,-24(fp)
 305727c:	108018e4 	muli	r2,r2,99
 3057280:	10c7883a 	add	r3,r2,r3
 3057284:	e0bffe17 	ldw	r2,-8(fp)
 3057288:	1885883a 	add	r2,r3,r2
 305728c:	10800fc4 	addi	r2,r2,63
 3057290:	10800007 	ldb	r2,0(r2)
 3057294:	10800820 	cmpeqi	r2,r2,32
 3057298:	1000011e 	bne	r2,zero,30572a0 <altera_avalon_lcd_16207_write+0x2d4>
 305729c:	00000406 	br	30572b0 <altera_avalon_lcd_16207_write+0x2e4>
 30572a0:	e0bffe17 	ldw	r2,-8(fp)
 30572a4:	10bfffc4 	addi	r2,r2,-1
 30572a8:	e0bffe15 	stw	r2,-8(fp)
 30572ac:	003fee06 	br	3057268 <altera_avalon_lcd_16207_write+0x29c>
 30572b0:	e0bffe17 	ldw	r2,-8(fp)
 30572b4:	10800448 	cmpgei	r2,r2,17
 30572b8:	1000031e 	bne	r2,zero,30572c8 <altera_avalon_lcd_16207_write+0x2fc>
 30572bc:	00800404 	movi	r2,16
 30572c0:	e0bffe15 	stw	r2,-8(fp)
 30572c4:	00000306 	br	30572d4 <altera_avalon_lcd_16207_write+0x308>
 30572c8:	e0bffe17 	ldw	r2,-8(fp)
 30572cc:	10800044 	addi	r2,r2,1
 30572d0:	e0bffe15 	stw	r2,-8(fp)
 30572d4:	e0fff517 	ldw	r3,-44(fp)
 30572d8:	e0bffa17 	ldw	r2,-24(fp)
 30572dc:	108018e4 	muli	r2,r2,99
 30572e0:	10c5883a 	add	r2,r2,r3
 30572e4:	10c02404 	addi	r3,r2,144
 30572e8:	e0bffe17 	ldw	r2,-8(fp)
 30572ec:	18800045 	stb	r2,1(r3)
 30572f0:	e0fffb17 	ldw	r3,-20(fp)
 30572f4:	e0bffe17 	ldw	r2,-8(fp)
 30572f8:	1880020e 	bge	r3,r2,3057304 <altera_avalon_lcd_16207_write+0x338>
 30572fc:	e0bffe17 	ldw	r2,-8(fp)
 3057300:	e0bffb15 	stw	r2,-20(fp)
 3057304:	e0fff517 	ldw	r3,-44(fp)
 3057308:	e0bffa17 	ldw	r2,-24(fp)
 305730c:	108018e4 	muli	r2,r2,99
 3057310:	10c5883a 	add	r2,r2,r3
 3057314:	10802404 	addi	r2,r2,144
 3057318:	10000085 	stb	zero,2(r2)
 305731c:	e0bffa17 	ldw	r2,-24(fp)
 3057320:	10800044 	addi	r2,r2,1
 3057324:	e0bffa15 	stw	r2,-24(fp)
 3057328:	003fca06 	br	3057254 <altera_avalon_lcd_16207_write+0x288>
 305732c:	e0bffb17 	ldw	r2,-20(fp)
 3057330:	10800448 	cmpgei	r2,r2,17
 3057334:	1000031e 	bne	r2,zero,3057344 <altera_avalon_lcd_16207_write+0x378>
 3057338:	e0bff517 	ldw	r2,-44(fp)
 305733c:	10000985 	stb	zero,38(r2)
 3057340:	00002606 	br	30573dc <altera_avalon_lcd_16207_write+0x410>
 3057344:	e0fffb17 	ldw	r3,-20(fp)
 3057348:	1805883a 	mov	r2,r3
 305734c:	10c5883a 	add	r2,r2,r3
 3057350:	e0bffb15 	stw	r2,-20(fp)
 3057354:	e0fff517 	ldw	r3,-44(fp)
 3057358:	e0bffb17 	ldw	r2,-20(fp)
 305735c:	18800985 	stb	r2,38(r3)
 3057360:	e03ffa15 	stw	zero,-24(fp)
 3057364:	e0bffa17 	ldw	r2,-24(fp)
 3057368:	10800088 	cmpgei	r2,r2,2
 305736c:	10001b1e 	bne	r2,zero,30573dc <altera_avalon_lcd_16207_write+0x410>
 3057370:	e0fff517 	ldw	r3,-44(fp)
 3057374:	e0bffa17 	ldw	r2,-24(fp)
 3057378:	108018e4 	muli	r2,r2,99
 305737c:	10c5883a 	add	r2,r2,r3
 3057380:	10802404 	addi	r2,r2,144
 3057384:	10800047 	ldb	r2,1(r2)
 3057388:	10800450 	cmplti	r2,r2,17
 305738c:	10000f1e 	bne	r2,zero,30573cc <altera_avalon_lcd_16207_write+0x400>
 3057390:	e0fff517 	ldw	r3,-44(fp)
 3057394:	e0bffa17 	ldw	r2,-24(fp)
 3057398:	108018e4 	muli	r2,r2,99
 305739c:	10c5883a 	add	r2,r2,r3
 30573a0:	14002404 	addi	r16,r2,144
 30573a4:	e0fff517 	ldw	r3,-44(fp)
 30573a8:	e0bffa17 	ldw	r2,-24(fp)
 30573ac:	108018e4 	muli	r2,r2,99
 30573b0:	10c5883a 	add	r2,r2,r3
 30573b4:	10802404 	addi	r2,r2,144
 30573b8:	10800047 	ldb	r2,1(r2)
 30573bc:	11004024 	muli	r4,r2,256
 30573c0:	e17ffb17 	ldw	r5,-20(fp)
 30573c4:	304972c0 	call	304972c <__divsi3>
 30573c8:	80800085 	stb	r2,2(r16)
 30573cc:	e0bffa17 	ldw	r2,-24(fp)
 30573d0:	10800044 	addi	r2,r2,1
 30573d4:	e0bffa15 	stw	r2,-24(fp)
 30573d8:	003fe206 	br	3057364 <altera_avalon_lcd_16207_write+0x398>
 30573dc:	e0bff517 	ldw	r2,-44(fp)
 30573e0:	10800947 	ldb	r2,37(r2)
 30573e4:	e0bffe15 	stw	r2,-8(fp)
 30573e8:	e13ff517 	ldw	r4,-44(fp)
 30573ec:	3056b200 	call	3056b20 <lcd_repaint_screen>
 30573f0:	e0bff517 	ldw	r2,-44(fp)
 30573f4:	100009c5 	stb	zero,39(r2)
 30573f8:	e0bff517 	ldw	r2,-44(fp)
 30573fc:	10c00947 	ldb	r3,37(r2)
 3057400:	e0bffe17 	ldw	r2,-8(fp)
 3057404:	1880011e 	bne	r3,r2,305740c <altera_avalon_lcd_16207_write+0x440>
 3057408:	00000406 	br	305741c <altera_avalon_lcd_16207_write+0x450>
 305740c:	e0fff517 	ldw	r3,-44(fp)
 3057410:	00800044 	movi	r2,1
 3057414:	188009c5 	stb	r2,39(r3)
 3057418:	003ff006 	br	30573dc <altera_avalon_lcd_16207_write+0x410>
 305741c:	e03ffe15 	stw	zero,-8(fp)
 3057420:	e0bff717 	ldw	r2,-36(fp)
 3057424:	dfc00c17 	ldw	ra,48(sp)
 3057428:	df000b17 	ldw	fp,44(sp)
 305742c:	dc000a17 	ldw	r16,40(sp)
 3057430:	dec00d04 	addi	sp,sp,52
 3057434:	f800283a 	ret

03057438 <alt_lcd_16207_timeout>:
 3057438:	defffc04 	addi	sp,sp,-16
 305743c:	dfc00315 	stw	ra,12(sp)
 3057440:	df000215 	stw	fp,8(sp)
 3057444:	df000204 	addi	fp,sp,8
 3057448:	e13ffe15 	stw	r4,-8(fp)
 305744c:	e0bffe17 	ldw	r2,-8(fp)
 3057450:	e0bfff15 	stw	r2,-4(fp)
 3057454:	e0bfff17 	ldw	r2,-4(fp)
 3057458:	10800947 	ldb	r2,37(r2)
 305745c:	10c00044 	addi	r3,r2,1
 3057460:	e0bfff17 	ldw	r2,-4(fp)
 3057464:	10800987 	ldb	r2,38(r2)
 3057468:	18800316 	blt	r3,r2,3057478 <alt_lcd_16207_timeout+0x40>
 305746c:	e0bfff17 	ldw	r2,-4(fp)
 3057470:	10000945 	stb	zero,37(r2)
 3057474:	00000506 	br	305748c <alt_lcd_16207_timeout+0x54>
 3057478:	e0ffff17 	ldw	r3,-4(fp)
 305747c:	e0bfff17 	ldw	r2,-4(fp)
 3057480:	10800943 	ldbu	r2,37(r2)
 3057484:	10800044 	addi	r2,r2,1
 3057488:	18800945 	stb	r2,37(r3)
 305748c:	e0bfff17 	ldw	r2,-4(fp)
 3057490:	10800987 	ldb	r2,38(r2)
 3057494:	10800050 	cmplti	r2,r2,1
 3057498:	1000061e 	bne	r2,zero,30574b4 <alt_lcd_16207_timeout+0x7c>
 305749c:	e0bfff17 	ldw	r2,-4(fp)
 30574a0:	108009c7 	ldb	r2,39(r2)
 30574a4:	1004c03a 	cmpne	r2,r2,zero
 30574a8:	1000021e 	bne	r2,zero,30574b4 <alt_lcd_16207_timeout+0x7c>
 30574ac:	e13fff17 	ldw	r4,-4(fp)
 30574b0:	3056b200 	call	3056b20 <lcd_repaint_screen>
 30574b4:	e0bfff17 	ldw	r2,-4(fp)
 30574b8:	10800717 	ldw	r2,28(r2)
 30574bc:	dfc00317 	ldw	ra,12(sp)
 30574c0:	df000217 	ldw	fp,8(sp)
 30574c4:	dec00404 	addi	sp,sp,16
 30574c8:	f800283a 	ret

030574cc <altera_avalon_lcd_16207_init>:
 30574cc:	defff904 	addi	sp,sp,-28
 30574d0:	dfc00615 	stw	ra,24(sp)
 30574d4:	df000515 	stw	fp,20(sp)
 30574d8:	dc000415 	stw	r16,16(sp)
 30574dc:	df000504 	addi	fp,sp,20
 30574e0:	e13ffb15 	stw	r4,-20(fp)
 30574e4:	e0bffb17 	ldw	r2,-20(fp)
 30574e8:	10800017 	ldw	r2,0(r2)
 30574ec:	e0bffc15 	stw	r2,-16(fp)
 30574f0:	e0bffb17 	ldw	r2,-20(fp)
 30574f4:	10000805 	stb	zero,32(r2)
 30574f8:	e03ffd15 	stw	zero,-12(fp)
 30574fc:	010ea604 	movi	r4,15000
 3057500:	30540480 	call	3054048 <usleep>
 3057504:	e0fffc17 	ldw	r3,-16(fp)
 3057508:	00800c04 	movi	r2,48
 305750c:	18800035 	stwio	r2,0(r3)
 3057510:	01040104 	movi	r4,4100
 3057514:	30540480 	call	3054048 <usleep>
 3057518:	e0fffc17 	ldw	r3,-16(fp)
 305751c:	00800c04 	movi	r2,48
 3057520:	18800035 	stwio	r2,0(r3)
 3057524:	0100fa04 	movi	r4,1000
 3057528:	30540480 	call	3054048 <usleep>
 305752c:	e0fffc17 	ldw	r3,-16(fp)
 3057530:	00800c04 	movi	r2,48
 3057534:	18800035 	stwio	r2,0(r3)
 3057538:	e13ffb17 	ldw	r4,-20(fp)
 305753c:	01400e04 	movi	r5,56
 3057540:	30568fc0 	call	30568fc <lcd_write_command>
 3057544:	e13ffb17 	ldw	r4,-20(fp)
 3057548:	01400204 	movi	r5,8
 305754c:	30568fc0 	call	30568fc <lcd_write_command>
 3057550:	e13ffb17 	ldw	r4,-20(fp)
 3057554:	3056a600 	call	3056a60 <lcd_clear_screen>
 3057558:	e13ffb17 	ldw	r4,-20(fp)
 305755c:	01400184 	movi	r5,6
 3057560:	30568fc0 	call	30568fc <lcd_write_command>
 3057564:	e13ffb17 	ldw	r4,-20(fp)
 3057568:	01400304 	movi	r5,12
 305756c:	30568fc0 	call	30568fc <lcd_write_command>
 3057570:	e0fffb17 	ldw	r3,-20(fp)
 3057574:	00bfffc4 	movi	r2,-1
 3057578:	18800905 	stb	r2,36(r3)
 305757c:	e0bffb17 	ldw	r2,-20(fp)
 3057580:	11000a04 	addi	r4,r2,40
 3057584:	000b883a 	mov	r5,zero
 3057588:	01800204 	movi	r6,8
 305758c:	304bbfc0 	call	304bbfc <memset>
 3057590:	e0bffb17 	ldw	r2,-20(fp)
 3057594:	10000945 	stb	zero,37(r2)
 3057598:	e0bffb17 	ldw	r2,-20(fp)
 305759c:	10000985 	stb	zero,38(r2)
 30575a0:	e0bffb17 	ldw	r2,-20(fp)
 30575a4:	100009c5 	stb	zero,39(r2)
 30575a8:	e43ffb17 	ldw	r16,-20(fp)
 30575ac:	d0a01617 	ldw	r2,-32680(gp)
 30575b0:	e0bffe15 	stw	r2,-8(fp)
 30575b4:	e13ffe17 	ldw	r4,-8(fp)
 30575b8:	01400284 	movi	r5,10
 30575bc:	30497ec0 	call	30497ec <__udivsi3>
 30575c0:	80800715 	stw	r2,28(r16)
 30575c4:	e0bffb17 	ldw	r2,-20(fp)
 30575c8:	11000104 	addi	r4,r2,4
 30575cc:	e0bffb17 	ldw	r2,-20(fp)
 30575d0:	11400717 	ldw	r5,28(r2)
 30575d4:	0180c174 	movhi	r6,773
 30575d8:	319d0e04 	addi	r6,r6,29752
 30575dc:	e1fffb17 	ldw	r7,-20(fp)
 30575e0:	30580ec0 	call	30580ec <alt_alarm_start>
 30575e4:	dfc00617 	ldw	ra,24(sp)
 30575e8:	df000517 	ldw	fp,20(sp)
 30575ec:	dc000417 	ldw	r16,16(sp)
 30575f0:	dec00704 	addi	sp,sp,28
 30575f4:	f800283a 	ret

030575f8 <altera_avalon_lcd_16207_write_fd>:
 30575f8:	defffa04 	addi	sp,sp,-24
 30575fc:	dfc00515 	stw	ra,20(sp)
 3057600:	df000415 	stw	fp,16(sp)
 3057604:	df000404 	addi	fp,sp,16
 3057608:	e13ffc15 	stw	r4,-16(fp)
 305760c:	e17ffd15 	stw	r5,-12(fp)
 3057610:	e1bffe15 	stw	r6,-8(fp)
 3057614:	e0bffc17 	ldw	r2,-16(fp)
 3057618:	10800017 	ldw	r2,0(r2)
 305761c:	e0bfff15 	stw	r2,-4(fp)
 3057620:	e0bfff17 	ldw	r2,-4(fp)
 3057624:	11000a04 	addi	r4,r2,40
 3057628:	e0bffc17 	ldw	r2,-16(fp)
 305762c:	e17ffd17 	ldw	r5,-12(fp)
 3057630:	e1bffe17 	ldw	r6,-8(fp)
 3057634:	11c00217 	ldw	r7,8(r2)
 3057638:	3056fcc0 	call	3056fcc <altera_avalon_lcd_16207_write>
 305763c:	dfc00517 	ldw	ra,20(sp)
 3057640:	df000417 	ldw	fp,16(sp)
 3057644:	dec00604 	addi	sp,sp,24
 3057648:	f800283a 	ret

0305764c <alt_avalon_timer_sc_irq>:
 305764c:	defffa04 	addi	sp,sp,-24
 3057650:	dfc00515 	stw	ra,20(sp)
 3057654:	df000415 	stw	fp,16(sp)
 3057658:	df000404 	addi	fp,sp,16
 305765c:	e13ffc15 	stw	r4,-16(fp)
 3057660:	e0bffc17 	ldw	r2,-16(fp)
 3057664:	10000035 	stwio	zero,0(r2)
 3057668:	e0bffc17 	ldw	r2,-16(fp)
 305766c:	10800104 	addi	r2,r2,4
 3057670:	10800037 	ldwio	r2,0(r2)
 3057674:	0005303a 	rdctl	r2,status
 3057678:	e0bfff15 	stw	r2,-4(fp)
 305767c:	e0ffff17 	ldw	r3,-4(fp)
 3057680:	00bfff84 	movi	r2,-2
 3057684:	1884703a 	and	r2,r3,r2
 3057688:	1001703a 	wrctl	status,r2
 305768c:	e0bfff17 	ldw	r2,-4(fp)
 3057690:	e0bffe15 	stw	r2,-8(fp)
 3057694:	e0bffe17 	ldw	r2,-8(fp)
 3057698:	e0bffd15 	stw	r2,-12(fp)
 305769c:	3053f480 	call	3053f48 <alt_tick>
 30576a0:	e0bffd17 	ldw	r2,-12(fp)
 30576a4:	e0bfff15 	stw	r2,-4(fp)
 30576a8:	e0bfff17 	ldw	r2,-4(fp)
 30576ac:	1001703a 	wrctl	status,r2
 30576b0:	dfc00517 	ldw	ra,20(sp)
 30576b4:	df000417 	ldw	fp,16(sp)
 30576b8:	dec00604 	addi	sp,sp,24
 30576bc:	f800283a 	ret

030576c0 <alt_avalon_timer_sc_init>:
 30576c0:	defff704 	addi	sp,sp,-36
 30576c4:	dfc00815 	stw	ra,32(sp)
 30576c8:	df000715 	stw	fp,28(sp)
 30576cc:	df000704 	addi	fp,sp,28
 30576d0:	e13ffa15 	stw	r4,-24(fp)
 30576d4:	e17ffb15 	stw	r5,-20(fp)
 30576d8:	e1bffc15 	stw	r6,-16(fp)
 30576dc:	e1fffd15 	stw	r7,-12(fp)
 30576e0:	e0bffd17 	ldw	r2,-12(fp)
 30576e4:	e0bffe15 	stw	r2,-8(fp)
 30576e8:	d0a01617 	ldw	r2,-32680(gp)
 30576ec:	1004c03a 	cmpne	r2,r2,zero
 30576f0:	1000041e 	bne	r2,zero,3057704 <alt_avalon_timer_sc_init+0x44>
 30576f4:	e0bffe17 	ldw	r2,-8(fp)
 30576f8:	d0a01615 	stw	r2,-32680(gp)
 30576fc:	e03fff15 	stw	zero,-4(fp)
 3057700:	00000206 	br	305770c <alt_avalon_timer_sc_init+0x4c>
 3057704:	00bfffc4 	movi	r2,-1
 3057708:	e0bfff15 	stw	r2,-4(fp)
 305770c:	e0bffa17 	ldw	r2,-24(fp)
 3057710:	10800104 	addi	r2,r2,4
 3057714:	1007883a 	mov	r3,r2
 3057718:	008001c4 	movi	r2,7
 305771c:	18800035 	stwio	r2,0(r3)
 3057720:	d8000015 	stw	zero,0(sp)
 3057724:	e13ffb17 	ldw	r4,-20(fp)
 3057728:	e17ffc17 	ldw	r5,-16(fp)
 305772c:	0180c174 	movhi	r6,773
 3057730:	319d9304 	addi	r6,r6,30284
 3057734:	e1fffa17 	ldw	r7,-24(fp)
 3057738:	30588f80 	call	30588f8 <alt_ic_isr_register>
 305773c:	dfc00817 	ldw	ra,32(sp)
 3057740:	df000717 	ldw	fp,28(sp)
 3057744:	dec00904 	addi	sp,sp,36
 3057748:	f800283a 	ret

0305774c <altera_avalon_uart_read_fd>:
 305774c:	defffa04 	addi	sp,sp,-24
 3057750:	dfc00515 	stw	ra,20(sp)
 3057754:	df000415 	stw	fp,16(sp)
 3057758:	df000404 	addi	fp,sp,16
 305775c:	e13ffc15 	stw	r4,-16(fp)
 3057760:	e17ffd15 	stw	r5,-12(fp)
 3057764:	e1bffe15 	stw	r6,-8(fp)
 3057768:	e0bffc17 	ldw	r2,-16(fp)
 305776c:	10800017 	ldw	r2,0(r2)
 3057770:	e0bfff15 	stw	r2,-4(fp)
 3057774:	e0bfff17 	ldw	r2,-4(fp)
 3057778:	11000a04 	addi	r4,r2,40
 305777c:	e0bffc17 	ldw	r2,-16(fp)
 3057780:	e17ffd17 	ldw	r5,-12(fp)
 3057784:	e1bffe17 	ldw	r6,-8(fp)
 3057788:	11c00217 	ldw	r7,8(r2)
 305778c:	3057c440 	call	3057c44 <altera_avalon_uart_read>
 3057790:	dfc00517 	ldw	ra,20(sp)
 3057794:	df000417 	ldw	fp,16(sp)
 3057798:	dec00604 	addi	sp,sp,24
 305779c:	f800283a 	ret

030577a0 <altera_avalon_uart_write_fd>:
 30577a0:	defffa04 	addi	sp,sp,-24
 30577a4:	dfc00515 	stw	ra,20(sp)
 30577a8:	df000415 	stw	fp,16(sp)
 30577ac:	df000404 	addi	fp,sp,16
 30577b0:	e13ffc15 	stw	r4,-16(fp)
 30577b4:	e17ffd15 	stw	r5,-12(fp)
 30577b8:	e1bffe15 	stw	r6,-8(fp)
 30577bc:	e0bffc17 	ldw	r2,-16(fp)
 30577c0:	10800017 	ldw	r2,0(r2)
 30577c4:	e0bfff15 	stw	r2,-4(fp)
 30577c8:	e0bfff17 	ldw	r2,-4(fp)
 30577cc:	11000a04 	addi	r4,r2,40
 30577d0:	e0bffc17 	ldw	r2,-16(fp)
 30577d4:	e17ffd17 	ldw	r5,-12(fp)
 30577d8:	e1bffe17 	ldw	r6,-8(fp)
 30577dc:	11c00217 	ldw	r7,8(r2)
 30577e0:	3057ecc0 	call	3057ecc <altera_avalon_uart_write>
 30577e4:	dfc00517 	ldw	ra,20(sp)
 30577e8:	df000417 	ldw	fp,16(sp)
 30577ec:	dec00604 	addi	sp,sp,24
 30577f0:	f800283a 	ret

030577f4 <altera_avalon_uart_close_fd>:
 30577f4:	defffc04 	addi	sp,sp,-16
 30577f8:	dfc00315 	stw	ra,12(sp)
 30577fc:	df000215 	stw	fp,8(sp)
 3057800:	df000204 	addi	fp,sp,8
 3057804:	e13ffe15 	stw	r4,-8(fp)
 3057808:	e0bffe17 	ldw	r2,-8(fp)
 305780c:	10800017 	ldw	r2,0(r2)
 3057810:	e0bfff15 	stw	r2,-4(fp)
 3057814:	e0bfff17 	ldw	r2,-4(fp)
 3057818:	11000a04 	addi	r4,r2,40
 305781c:	e0bffe17 	ldw	r2,-8(fp)
 3057820:	11400217 	ldw	r5,8(r2)
 3057824:	3057bec0 	call	3057bec <altera_avalon_uart_close>
 3057828:	dfc00317 	ldw	ra,12(sp)
 305782c:	df000217 	ldw	fp,8(sp)
 3057830:	dec00404 	addi	sp,sp,16
 3057834:	f800283a 	ret

03057838 <altera_avalon_uart_init>:
 3057838:	defff404 	addi	sp,sp,-48
 305783c:	dfc00b15 	stw	ra,44(sp)
 3057840:	df000a15 	stw	fp,40(sp)
 3057844:	df000a04 	addi	fp,sp,40
 3057848:	e13ff715 	stw	r4,-36(fp)
 305784c:	e17ff815 	stw	r5,-32(fp)
 3057850:	e1bff915 	stw	r6,-28(fp)
 3057854:	e0bff717 	ldw	r2,-36(fp)
 3057858:	10800017 	ldw	r2,0(r2)
 305785c:	e0bffa15 	stw	r2,-24(fp)
 3057860:	e03fff15 	stw	zero,-4(fp)
 3057864:	e03ffc15 	stw	zero,-16(fp)
 3057868:	e0bffc17 	ldw	r2,-16(fp)
 305786c:	1004c03a 	cmpne	r2,r2,zero
 3057870:	1000091e 	bne	r2,zero,3057898 <altera_avalon_uart_init+0x60>
 3057874:	e03ffd15 	stw	zero,-12(fp)
 3057878:	e0bffd17 	ldw	r2,-12(fp)
 305787c:	1004c03a 	cmpne	r2,r2,zero
 3057880:	1000051e 	bne	r2,zero,3057898 <altera_avalon_uart_init+0x60>
 3057884:	e03ffe15 	stw	zero,-8(fp)
 3057888:	e0bffe17 	ldw	r2,-8(fp)
 305788c:	1004c03a 	cmpne	r2,r2,zero
 3057890:	1000011e 	bne	r2,zero,3057898 <altera_avalon_uart_init+0x60>
 3057894:	00000206 	br	30578a0 <altera_avalon_uart_init+0x68>
 3057898:	00800044 	movi	r2,1
 305789c:	e0bfff15 	stw	r2,-4(fp)
 30578a0:	e0bfff17 	ldw	r2,-4(fp)
 30578a4:	e0bffb15 	stw	r2,-20(fp)
 30578a8:	e0bffb17 	ldw	r2,-20(fp)
 30578ac:	1004c03a 	cmpne	r2,r2,zero
 30578b0:	1000101e 	bne	r2,zero,30578f4 <altera_avalon_uart_init+0xbc>
 30578b4:	e0fff717 	ldw	r3,-36(fp)
 30578b8:	00832004 	movi	r2,3200
 30578bc:	18800115 	stw	r2,4(r3)
 30578c0:	e0bffa17 	ldw	r2,-24(fp)
 30578c4:	10800304 	addi	r2,r2,12
 30578c8:	1007883a 	mov	r3,r2
 30578cc:	e0bff717 	ldw	r2,-36(fp)
 30578d0:	10800117 	ldw	r2,4(r2)
 30578d4:	18800035 	stwio	r2,0(r3)
 30578d8:	d8000015 	stw	zero,0(sp)
 30578dc:	e13ff817 	ldw	r4,-32(fp)
 30578e0:	e17ff917 	ldw	r5,-28(fp)
 30578e4:	0180c174 	movhi	r6,773
 30578e8:	319e4104 	addi	r6,r6,30980
 30578ec:	e1fff717 	ldw	r7,-36(fp)
 30578f0:	30588f80 	call	30588f8 <alt_ic_isr_register>
 30578f4:	dfc00b17 	ldw	ra,44(sp)
 30578f8:	df000a17 	ldw	fp,40(sp)
 30578fc:	dec00c04 	addi	sp,sp,48
 3057900:	f800283a 	ret

03057904 <altera_avalon_uart_irq>:
 3057904:	defffa04 	addi	sp,sp,-24
 3057908:	dfc00515 	stw	ra,20(sp)
 305790c:	df000415 	stw	fp,16(sp)
 3057910:	df000404 	addi	fp,sp,16
 3057914:	e13ffc15 	stw	r4,-16(fp)
 3057918:	e0bffc17 	ldw	r2,-16(fp)
 305791c:	e0bffe15 	stw	r2,-8(fp)
 3057920:	e0bffe17 	ldw	r2,-8(fp)
 3057924:	10800017 	ldw	r2,0(r2)
 3057928:	e0bfff15 	stw	r2,-4(fp)
 305792c:	e0bfff17 	ldw	r2,-4(fp)
 3057930:	10800204 	addi	r2,r2,8
 3057934:	10800037 	ldwio	r2,0(r2)
 3057938:	e0bffd15 	stw	r2,-12(fp)
 305793c:	e0bfff17 	ldw	r2,-4(fp)
 3057940:	10800204 	addi	r2,r2,8
 3057944:	10000035 	stwio	zero,0(r2)
 3057948:	e0bfff17 	ldw	r2,-4(fp)
 305794c:	10800204 	addi	r2,r2,8
 3057950:	10800037 	ldwio	r2,0(r2)
 3057954:	e0bffd17 	ldw	r2,-12(fp)
 3057958:	1080200c 	andi	r2,r2,128
 305795c:	1005003a 	cmpeq	r2,r2,zero
 3057960:	1000031e 	bne	r2,zero,3057970 <altera_avalon_uart_irq+0x6c>
 3057964:	e13ffe17 	ldw	r4,-8(fp)
 3057968:	e17ffd17 	ldw	r5,-12(fp)
 305796c:	305799c0 	call	305799c <altera_avalon_uart_rxirq>
 3057970:	e0bffd17 	ldw	r2,-12(fp)
 3057974:	1081100c 	andi	r2,r2,1088
 3057978:	1005003a 	cmpeq	r2,r2,zero
 305797c:	1000031e 	bne	r2,zero,305798c <altera_avalon_uart_irq+0x88>
 3057980:	e13ffe17 	ldw	r4,-8(fp)
 3057984:	e17ffd17 	ldw	r5,-12(fp)
 3057988:	3057a840 	call	3057a84 <altera_avalon_uart_txirq>
 305798c:	dfc00517 	ldw	ra,20(sp)
 3057990:	df000417 	ldw	fp,16(sp)
 3057994:	dec00604 	addi	sp,sp,24
 3057998:	f800283a 	ret

0305799c <altera_avalon_uart_rxirq>:
 305799c:	defffb04 	addi	sp,sp,-20
 30579a0:	df000415 	stw	fp,16(sp)
 30579a4:	df000404 	addi	fp,sp,16
 30579a8:	e13ffc15 	stw	r4,-16(fp)
 30579ac:	e17ffd15 	stw	r5,-12(fp)
 30579b0:	e0bffd17 	ldw	r2,-12(fp)
 30579b4:	108000cc 	andi	r2,r2,3
 30579b8:	1005003a 	cmpeq	r2,r2,zero
 30579bc:	1000011e 	bne	r2,zero,30579c4 <altera_avalon_uart_rxirq+0x28>
 30579c0:	00002d06 	br	3057a78 <altera_avalon_uart_rxirq+0xdc>
 30579c4:	e0bffc17 	ldw	r2,-16(fp)
 30579c8:	e0fffc17 	ldw	r3,-16(fp)
 30579cc:	11000317 	ldw	r4,12(r2)
 30579d0:	18800217 	ldw	r2,8(r3)
 30579d4:	2080011e 	bne	r4,r2,30579dc <altera_avalon_uart_rxirq+0x40>
 30579d8:	e03fff15 	stw	zero,-4(fp)
 30579dc:	e0bffc17 	ldw	r2,-16(fp)
 30579e0:	10800317 	ldw	r2,12(r2)
 30579e4:	10800044 	addi	r2,r2,1
 30579e8:	10800fcc 	andi	r2,r2,63
 30579ec:	e0bffe15 	stw	r2,-8(fp)
 30579f0:	e0fffc17 	ldw	r3,-16(fp)
 30579f4:	e0bffc17 	ldw	r2,-16(fp)
 30579f8:	10800317 	ldw	r2,12(r2)
 30579fc:	1885883a 	add	r2,r3,r2
 3057a00:	10c00704 	addi	r3,r2,28
 3057a04:	e0bffc17 	ldw	r2,-16(fp)
 3057a08:	10800017 	ldw	r2,0(r2)
 3057a0c:	10800037 	ldwio	r2,0(r2)
 3057a10:	18800005 	stb	r2,0(r3)
 3057a14:	e0fffc17 	ldw	r3,-16(fp)
 3057a18:	e0bffe17 	ldw	r2,-8(fp)
 3057a1c:	18800315 	stw	r2,12(r3)
 3057a20:	e0bffc17 	ldw	r2,-16(fp)
 3057a24:	10800317 	ldw	r2,12(r2)
 3057a28:	10800044 	addi	r2,r2,1
 3057a2c:	10800fcc 	andi	r2,r2,63
 3057a30:	e0bffe15 	stw	r2,-8(fp)
 3057a34:	e0bffc17 	ldw	r2,-16(fp)
 3057a38:	10c00217 	ldw	r3,8(r2)
 3057a3c:	e0bffe17 	ldw	r2,-8(fp)
 3057a40:	18800d1e 	bne	r3,r2,3057a78 <altera_avalon_uart_rxirq+0xdc>
 3057a44:	e13ffc17 	ldw	r4,-16(fp)
 3057a48:	e0bffc17 	ldw	r2,-16(fp)
 3057a4c:	10c00117 	ldw	r3,4(r2)
 3057a50:	00bfdfc4 	movi	r2,-129
 3057a54:	1884703a 	and	r2,r3,r2
 3057a58:	20800115 	stw	r2,4(r4)
 3057a5c:	e0bffc17 	ldw	r2,-16(fp)
 3057a60:	10800017 	ldw	r2,0(r2)
 3057a64:	10800304 	addi	r2,r2,12
 3057a68:	1007883a 	mov	r3,r2
 3057a6c:	e0bffc17 	ldw	r2,-16(fp)
 3057a70:	10800117 	ldw	r2,4(r2)
 3057a74:	18800035 	stwio	r2,0(r3)
 3057a78:	df000417 	ldw	fp,16(sp)
 3057a7c:	dec00504 	addi	sp,sp,20
 3057a80:	f800283a 	ret

03057a84 <altera_avalon_uart_txirq>:
 3057a84:	defffc04 	addi	sp,sp,-16
 3057a88:	df000315 	stw	fp,12(sp)
 3057a8c:	df000304 	addi	fp,sp,12
 3057a90:	e13ffd15 	stw	r4,-12(fp)
 3057a94:	e17ffe15 	stw	r5,-8(fp)
 3057a98:	e0bffd17 	ldw	r2,-12(fp)
 3057a9c:	e0fffd17 	ldw	r3,-12(fp)
 3057aa0:	11000417 	ldw	r4,16(r2)
 3057aa4:	18800517 	ldw	r2,20(r3)
 3057aa8:	20803b26 	beq	r4,r2,3057b98 <altera_avalon_uart_txirq+0x114>
 3057aac:	e0bffd17 	ldw	r2,-12(fp)
 3057ab0:	10800617 	ldw	r2,24(r2)
 3057ab4:	1080008c 	andi	r2,r2,2
 3057ab8:	1005003a 	cmpeq	r2,r2,zero
 3057abc:	1000051e 	bne	r2,zero,3057ad4 <altera_avalon_uart_txirq+0x50>
 3057ac0:	e0bffe17 	ldw	r2,-8(fp)
 3057ac4:	1082000c 	andi	r2,r2,2048
 3057ac8:	1004c03a 	cmpne	r2,r2,zero
 3057acc:	1000011e 	bne	r2,zero,3057ad4 <altera_avalon_uart_txirq+0x50>
 3057ad0:	00002206 	br	3057b5c <altera_avalon_uart_txirq+0xd8>
 3057ad4:	e13ffd17 	ldw	r4,-12(fp)
 3057ad8:	e0bffd17 	ldw	r2,-12(fp)
 3057adc:	10800517 	ldw	r2,20(r2)
 3057ae0:	10800044 	addi	r2,r2,1
 3057ae4:	10c00fcc 	andi	r3,r2,63
 3057ae8:	20800417 	ldw	r2,16(r4)
 3057aec:	10c0011e 	bne	r2,r3,3057af4 <altera_avalon_uart_txirq+0x70>
 3057af0:	e03fff15 	stw	zero,-4(fp)
 3057af4:	e0bffd17 	ldw	r2,-12(fp)
 3057af8:	10800017 	ldw	r2,0(r2)
 3057afc:	10800104 	addi	r2,r2,4
 3057b00:	1009883a 	mov	r4,r2
 3057b04:	e0fffd17 	ldw	r3,-12(fp)
 3057b08:	e0bffd17 	ldw	r2,-12(fp)
 3057b0c:	10800417 	ldw	r2,16(r2)
 3057b10:	1885883a 	add	r2,r3,r2
 3057b14:	10801704 	addi	r2,r2,92
 3057b18:	10800003 	ldbu	r2,0(r2)
 3057b1c:	20800035 	stwio	r2,0(r4)
 3057b20:	e13ffd17 	ldw	r4,-12(fp)
 3057b24:	e0fffd17 	ldw	r3,-12(fp)
 3057b28:	e0bffd17 	ldw	r2,-12(fp)
 3057b2c:	10800417 	ldw	r2,16(r2)
 3057b30:	10800044 	addi	r2,r2,1
 3057b34:	18800415 	stw	r2,16(r3)
 3057b38:	18800417 	ldw	r2,16(r3)
 3057b3c:	10800fcc 	andi	r2,r2,63
 3057b40:	20800415 	stw	r2,16(r4)
 3057b44:	e0fffd17 	ldw	r3,-12(fp)
 3057b48:	e0bffd17 	ldw	r2,-12(fp)
 3057b4c:	10800117 	ldw	r2,4(r2)
 3057b50:	10801014 	ori	r2,r2,64
 3057b54:	18800115 	stw	r2,4(r3)
 3057b58:	00000f06 	br	3057b98 <altera_avalon_uart_txirq+0x114>
 3057b5c:	e0bffd17 	ldw	r2,-12(fp)
 3057b60:	10800017 	ldw	r2,0(r2)
 3057b64:	10800204 	addi	r2,r2,8
 3057b68:	10800037 	ldwio	r2,0(r2)
 3057b6c:	e0bffe15 	stw	r2,-8(fp)
 3057b70:	e0bffe17 	ldw	r2,-8(fp)
 3057b74:	1082000c 	andi	r2,r2,2048
 3057b78:	1004c03a 	cmpne	r2,r2,zero
 3057b7c:	1000061e 	bne	r2,zero,3057b98 <altera_avalon_uart_txirq+0x114>
 3057b80:	e13ffd17 	ldw	r4,-12(fp)
 3057b84:	e0bffd17 	ldw	r2,-12(fp)
 3057b88:	10c00117 	ldw	r3,4(r2)
 3057b8c:	00bfefc4 	movi	r2,-65
 3057b90:	1884703a 	and	r2,r3,r2
 3057b94:	20800115 	stw	r2,4(r4)
 3057b98:	e0bffd17 	ldw	r2,-12(fp)
 3057b9c:	e0fffd17 	ldw	r3,-12(fp)
 3057ba0:	11000417 	ldw	r4,16(r2)
 3057ba4:	18800517 	ldw	r2,20(r3)
 3057ba8:	2080061e 	bne	r4,r2,3057bc4 <altera_avalon_uart_txirq+0x140>
 3057bac:	e13ffd17 	ldw	r4,-12(fp)
 3057bb0:	e0bffd17 	ldw	r2,-12(fp)
 3057bb4:	10c00117 	ldw	r3,4(r2)
 3057bb8:	00beefc4 	movi	r2,-1089
 3057bbc:	1884703a 	and	r2,r3,r2
 3057bc0:	20800115 	stw	r2,4(r4)
 3057bc4:	e0bffd17 	ldw	r2,-12(fp)
 3057bc8:	10800017 	ldw	r2,0(r2)
 3057bcc:	10800304 	addi	r2,r2,12
 3057bd0:	1007883a 	mov	r3,r2
 3057bd4:	e0bffd17 	ldw	r2,-12(fp)
 3057bd8:	10800117 	ldw	r2,4(r2)
 3057bdc:	18800035 	stwio	r2,0(r3)
 3057be0:	df000317 	ldw	fp,12(sp)
 3057be4:	dec00404 	addi	sp,sp,16
 3057be8:	f800283a 	ret

03057bec <altera_avalon_uart_close>:
 3057bec:	defffc04 	addi	sp,sp,-16
 3057bf0:	df000315 	stw	fp,12(sp)
 3057bf4:	df000304 	addi	fp,sp,12
 3057bf8:	e13ffd15 	stw	r4,-12(fp)
 3057bfc:	e17ffe15 	stw	r5,-8(fp)
 3057c00:	e0bffd17 	ldw	r2,-12(fp)
 3057c04:	e0fffd17 	ldw	r3,-12(fp)
 3057c08:	11000417 	ldw	r4,16(r2)
 3057c0c:	18800517 	ldw	r2,20(r3)
 3057c10:	20800726 	beq	r4,r2,3057c30 <altera_avalon_uart_close+0x44>
 3057c14:	e0bffe17 	ldw	r2,-8(fp)
 3057c18:	1090000c 	andi	r2,r2,16384
 3057c1c:	1005003a 	cmpeq	r2,r2,zero
 3057c20:	103ff71e 	bne	r2,zero,3057c00 <altera_avalon_uart_close+0x14>
 3057c24:	00bffd44 	movi	r2,-11
 3057c28:	e0bfff15 	stw	r2,-4(fp)
 3057c2c:	00000106 	br	3057c34 <altera_avalon_uart_close+0x48>
 3057c30:	e03fff15 	stw	zero,-4(fp)
 3057c34:	e0bfff17 	ldw	r2,-4(fp)
 3057c38:	df000317 	ldw	fp,12(sp)
 3057c3c:	dec00404 	addi	sp,sp,16
 3057c40:	f800283a 	ret

03057c44 <altera_avalon_uart_read>:
 3057c44:	defff004 	addi	sp,sp,-64
 3057c48:	dfc00f15 	stw	ra,60(sp)
 3057c4c:	df000e15 	stw	fp,56(sp)
 3057c50:	df000e04 	addi	fp,sp,56
 3057c54:	e13ff215 	stw	r4,-56(fp)
 3057c58:	e17ff315 	stw	r5,-52(fp)
 3057c5c:	e1bff415 	stw	r6,-48(fp)
 3057c60:	e1fff515 	stw	r7,-44(fp)
 3057c64:	e03ff905 	stb	zero,-28(fp)
 3057c68:	e03ffa15 	stw	zero,-24(fp)
 3057c6c:	e0bff517 	ldw	r2,-44(fp)
 3057c70:	1004d3ba 	srli	r2,r2,14
 3057c74:	1080005c 	xori	r2,r2,1
 3057c78:	1080004c 	andi	r2,r2,1
 3057c7c:	e0bff715 	stw	r2,-36(fp)
 3057c80:	e03ffb15 	stw	zero,-20(fp)
 3057c84:	e0bff217 	ldw	r2,-56(fp)
 3057c88:	10800217 	ldw	r2,8(r2)
 3057c8c:	10800044 	addi	r2,r2,1
 3057c90:	10800fcc 	andi	r2,r2,63
 3057c94:	e0bff815 	stw	r2,-32(fp)
 3057c98:	e0fffa17 	ldw	r3,-24(fp)
 3057c9c:	e0bff417 	ldw	r2,-48(fp)
 3057ca0:	18801d0e 	bge	r3,r2,3057d18 <altera_avalon_uart_read+0xd4>
 3057ca4:	e0bff217 	ldw	r2,-56(fp)
 3057ca8:	e0fff217 	ldw	r3,-56(fp)
 3057cac:	11000217 	ldw	r4,8(r2)
 3057cb0:	18800317 	ldw	r2,12(r3)
 3057cb4:	20801826 	beq	r4,r2,3057d18 <altera_avalon_uart_read+0xd4>
 3057cb8:	e0bffa17 	ldw	r2,-24(fp)
 3057cbc:	10800044 	addi	r2,r2,1
 3057cc0:	e0bffa15 	stw	r2,-24(fp)
 3057cc4:	e17ff304 	addi	r5,fp,-52
 3057cc8:	28c00017 	ldw	r3,0(r5)
 3057ccc:	e13ff217 	ldw	r4,-56(fp)
 3057cd0:	e0bff217 	ldw	r2,-56(fp)
 3057cd4:	10800217 	ldw	r2,8(r2)
 3057cd8:	2085883a 	add	r2,r4,r2
 3057cdc:	10800704 	addi	r2,r2,28
 3057ce0:	1809883a 	mov	r4,r3
 3057ce4:	10800003 	ldbu	r2,0(r2)
 3057ce8:	20800005 	stb	r2,0(r4)
 3057cec:	18c00044 	addi	r3,r3,1
 3057cf0:	28c00015 	stw	r3,0(r5)
 3057cf4:	e13ff217 	ldw	r4,-56(fp)
 3057cf8:	e0fff217 	ldw	r3,-56(fp)
 3057cfc:	e0bff217 	ldw	r2,-56(fp)
 3057d00:	10800217 	ldw	r2,8(r2)
 3057d04:	10800044 	addi	r2,r2,1
 3057d08:	18800215 	stw	r2,8(r3)
 3057d0c:	10800fcc 	andi	r2,r2,63
 3057d10:	20800215 	stw	r2,8(r4)
 3057d14:	003fe006 	br	3057c98 <altera_avalon_uart_read+0x54>
 3057d18:	e0bffa17 	ldw	r2,-24(fp)
 3057d1c:	1004c03a 	cmpne	r2,r2,zero
 3057d20:	1000291e 	bne	r2,zero,3057dc8 <altera_avalon_uart_read+0x184>
 3057d24:	e0bff217 	ldw	r2,-56(fp)
 3057d28:	e0fff217 	ldw	r3,-56(fp)
 3057d2c:	11000217 	ldw	r4,8(r2)
 3057d30:	18800317 	ldw	r2,12(r3)
 3057d34:	2080241e 	bne	r4,r2,3057dc8 <altera_avalon_uart_read+0x184>
 3057d38:	e0bff717 	ldw	r2,-36(fp)
 3057d3c:	1004c03a 	cmpne	r2,r2,zero
 3057d40:	1000061e 	bne	r2,zero,3057d5c <altera_avalon_uart_read+0x118>
 3057d44:	3057e840 	call	3057e84 <alt_get_errno>
 3057d48:	00c002c4 	movi	r3,11
 3057d4c:	10c00015 	stw	r3,0(r2)
 3057d50:	00800044 	movi	r2,1
 3057d54:	e0bff905 	stb	r2,-28(fp)
 3057d58:	00002206 	br	3057de4 <altera_avalon_uart_read+0x1a0>
 3057d5c:	0005303a 	rdctl	r2,status
 3057d60:	e0bffd15 	stw	r2,-12(fp)
 3057d64:	e0fffd17 	ldw	r3,-12(fp)
 3057d68:	00bfff84 	movi	r2,-2
 3057d6c:	1884703a 	and	r2,r3,r2
 3057d70:	1001703a 	wrctl	status,r2
 3057d74:	e0bffd17 	ldw	r2,-12(fp)
 3057d78:	e0bffc15 	stw	r2,-16(fp)
 3057d7c:	e0bffc17 	ldw	r2,-16(fp)
 3057d80:	e0bff615 	stw	r2,-40(fp)
 3057d84:	e0fff217 	ldw	r3,-56(fp)
 3057d88:	e0bff217 	ldw	r2,-56(fp)
 3057d8c:	10800117 	ldw	r2,4(r2)
 3057d90:	10802014 	ori	r2,r2,128
 3057d94:	18800115 	stw	r2,4(r3)
 3057d98:	e0bff217 	ldw	r2,-56(fp)
 3057d9c:	10800017 	ldw	r2,0(r2)
 3057da0:	10800304 	addi	r2,r2,12
 3057da4:	1007883a 	mov	r3,r2
 3057da8:	e0bff217 	ldw	r2,-56(fp)
 3057dac:	10800117 	ldw	r2,4(r2)
 3057db0:	18800035 	stwio	r2,0(r3)
 3057db4:	e0bff617 	ldw	r2,-40(fp)
 3057db8:	e0bffd15 	stw	r2,-12(fp)
 3057dbc:	e0bffd17 	ldw	r2,-12(fp)
 3057dc0:	1001703a 	wrctl	status,r2
 3057dc4:	e03ffd15 	stw	zero,-12(fp)
 3057dc8:	e0bffa17 	ldw	r2,-24(fp)
 3057dcc:	1004c03a 	cmpne	r2,r2,zero
 3057dd0:	1000041e 	bne	r2,zero,3057de4 <altera_avalon_uart_read+0x1a0>
 3057dd4:	e0bff417 	ldw	r2,-48(fp)
 3057dd8:	1005003a 	cmpeq	r2,r2,zero
 3057ddc:	1000011e 	bne	r2,zero,3057de4 <altera_avalon_uart_read+0x1a0>
 3057de0:	003fad06 	br	3057c98 <altera_avalon_uart_read+0x54>
 3057de4:	e03ffd15 	stw	zero,-12(fp)
 3057de8:	0005303a 	rdctl	r2,status
 3057dec:	e0bffe15 	stw	r2,-8(fp)
 3057df0:	e0fffe17 	ldw	r3,-8(fp)
 3057df4:	00bfff84 	movi	r2,-2
 3057df8:	1884703a 	and	r2,r3,r2
 3057dfc:	1001703a 	wrctl	status,r2
 3057e00:	e0bffe17 	ldw	r2,-8(fp)
 3057e04:	e0bffc15 	stw	r2,-16(fp)
 3057e08:	e0bffc17 	ldw	r2,-16(fp)
 3057e0c:	e0bff615 	stw	r2,-40(fp)
 3057e10:	e0fff217 	ldw	r3,-56(fp)
 3057e14:	e0bff217 	ldw	r2,-56(fp)
 3057e18:	10800117 	ldw	r2,4(r2)
 3057e1c:	10802014 	ori	r2,r2,128
 3057e20:	18800115 	stw	r2,4(r3)
 3057e24:	e0bff217 	ldw	r2,-56(fp)
 3057e28:	10800017 	ldw	r2,0(r2)
 3057e2c:	10800304 	addi	r2,r2,12
 3057e30:	1007883a 	mov	r3,r2
 3057e34:	e0bff217 	ldw	r2,-56(fp)
 3057e38:	10800117 	ldw	r2,4(r2)
 3057e3c:	18800035 	stwio	r2,0(r3)
 3057e40:	e0bff617 	ldw	r2,-40(fp)
 3057e44:	e0bffe15 	stw	r2,-8(fp)
 3057e48:	e0bffe17 	ldw	r2,-8(fp)
 3057e4c:	1001703a 	wrctl	status,r2
 3057e50:	e0bff903 	ldbu	r2,-28(fp)
 3057e54:	1005003a 	cmpeq	r2,r2,zero
 3057e58:	1000031e 	bne	r2,zero,3057e68 <altera_avalon_uart_read+0x224>
 3057e5c:	00bffd04 	movi	r2,-12
 3057e60:	e0bfff15 	stw	r2,-4(fp)
 3057e64:	00000206 	br	3057e70 <altera_avalon_uart_read+0x22c>
 3057e68:	e0bffa17 	ldw	r2,-24(fp)
 3057e6c:	e0bfff15 	stw	r2,-4(fp)
 3057e70:	e0bfff17 	ldw	r2,-4(fp)
 3057e74:	dfc00f17 	ldw	ra,60(sp)
 3057e78:	df000e17 	ldw	fp,56(sp)
 3057e7c:	dec01004 	addi	sp,sp,64
 3057e80:	f800283a 	ret

03057e84 <alt_get_errno>:
 3057e84:	defffd04 	addi	sp,sp,-12
 3057e88:	dfc00215 	stw	ra,8(sp)
 3057e8c:	df000115 	stw	fp,4(sp)
 3057e90:	df000104 	addi	fp,sp,4
 3057e94:	d0a00f17 	ldw	r2,-32708(gp)
 3057e98:	1005003a 	cmpeq	r2,r2,zero
 3057e9c:	1000041e 	bne	r2,zero,3057eb0 <alt_get_errno+0x2c>
 3057ea0:	d0a00f17 	ldw	r2,-32708(gp)
 3057ea4:	103ee83a 	callr	r2
 3057ea8:	e0bfff15 	stw	r2,-4(fp)
 3057eac:	00000206 	br	3057eb8 <alt_get_errno+0x34>
 3057eb0:	d0a77a04 	addi	r2,gp,-25112
 3057eb4:	e0bfff15 	stw	r2,-4(fp)
 3057eb8:	e0bfff17 	ldw	r2,-4(fp)
 3057ebc:	dfc00217 	ldw	ra,8(sp)
 3057ec0:	df000117 	ldw	fp,4(sp)
 3057ec4:	dec00304 	addi	sp,sp,12
 3057ec8:	f800283a 	ret

03057ecc <altera_avalon_uart_write>:
 3057ecc:	defff204 	addi	sp,sp,-56
 3057ed0:	dfc00d15 	stw	ra,52(sp)
 3057ed4:	df000c15 	stw	fp,48(sp)
 3057ed8:	df000c04 	addi	fp,sp,48
 3057edc:	e13ff415 	stw	r4,-48(fp)
 3057ee0:	e17ff515 	stw	r5,-44(fp)
 3057ee4:	e1bff615 	stw	r6,-40(fp)
 3057ee8:	e1fff715 	stw	r7,-36(fp)
 3057eec:	e0bff617 	ldw	r2,-40(fp)
 3057ef0:	e0bffb15 	stw	r2,-20(fp)
 3057ef4:	e0bff717 	ldw	r2,-36(fp)
 3057ef8:	1090000c 	andi	r2,r2,16384
 3057efc:	e0bff915 	stw	r2,-28(fp)
 3057f00:	e03ffc15 	stw	zero,-16(fp)
 3057f04:	e0bffb17 	ldw	r2,-20(fp)
 3057f08:	1005003a 	cmpeq	r2,r2,zero
 3057f0c:	1000431e 	bne	r2,zero,305801c <altera_avalon_uart_write+0x150>
 3057f10:	e0bff417 	ldw	r2,-48(fp)
 3057f14:	10800517 	ldw	r2,20(r2)
 3057f18:	10800044 	addi	r2,r2,1
 3057f1c:	10800fcc 	andi	r2,r2,63
 3057f20:	e0bffa15 	stw	r2,-24(fp)
 3057f24:	e0bff417 	ldw	r2,-48(fp)
 3057f28:	10c00417 	ldw	r3,16(r2)
 3057f2c:	e0bffa17 	ldw	r2,-24(fp)
 3057f30:	1880281e 	bne	r3,r2,3057fd4 <altera_avalon_uart_write+0x108>
 3057f34:	e0bff917 	ldw	r2,-28(fp)
 3057f38:	1005003a 	cmpeq	r2,r2,zero
 3057f3c:	1000051e 	bne	r2,zero,3057f54 <altera_avalon_uart_write+0x88>
 3057f40:	30580a40 	call	30580a4 <alt_get_errno>
 3057f44:	1007883a 	mov	r3,r2
 3057f48:	008002c4 	movi	r2,11
 3057f4c:	18800015 	stw	r2,0(r3)
 3057f50:	00003206 	br	305801c <altera_avalon_uart_write+0x150>
 3057f54:	0005303a 	rdctl	r2,status
 3057f58:	e0bffe15 	stw	r2,-8(fp)
 3057f5c:	e0fffe17 	ldw	r3,-8(fp)
 3057f60:	00bfff84 	movi	r2,-2
 3057f64:	1884703a 	and	r2,r3,r2
 3057f68:	1001703a 	wrctl	status,r2
 3057f6c:	e0bffe17 	ldw	r2,-8(fp)
 3057f70:	e0bffd15 	stw	r2,-12(fp)
 3057f74:	e0bffd17 	ldw	r2,-12(fp)
 3057f78:	e0bff815 	stw	r2,-32(fp)
 3057f7c:	e0fff417 	ldw	r3,-48(fp)
 3057f80:	e0bff417 	ldw	r2,-48(fp)
 3057f84:	10800117 	ldw	r2,4(r2)
 3057f88:	10811014 	ori	r2,r2,1088
 3057f8c:	18800115 	stw	r2,4(r3)
 3057f90:	e0bff417 	ldw	r2,-48(fp)
 3057f94:	10800017 	ldw	r2,0(r2)
 3057f98:	10800304 	addi	r2,r2,12
 3057f9c:	1007883a 	mov	r3,r2
 3057fa0:	e0bff417 	ldw	r2,-48(fp)
 3057fa4:	10800117 	ldw	r2,4(r2)
 3057fa8:	18800035 	stwio	r2,0(r3)
 3057fac:	e0bff817 	ldw	r2,-32(fp)
 3057fb0:	e0bffe15 	stw	r2,-8(fp)
 3057fb4:	e0bffe17 	ldw	r2,-8(fp)
 3057fb8:	1001703a 	wrctl	status,r2
 3057fbc:	e03ffe15 	stw	zero,-8(fp)
 3057fc0:	e0bff417 	ldw	r2,-48(fp)
 3057fc4:	10c00417 	ldw	r3,16(r2)
 3057fc8:	e0bffa17 	ldw	r2,-24(fp)
 3057fcc:	1880011e 	bne	r3,r2,3057fd4 <altera_avalon_uart_write+0x108>
 3057fd0:	003ffa06 	br	3057fbc <altera_avalon_uart_write+0xf0>
 3057fd4:	e0bffb17 	ldw	r2,-20(fp)
 3057fd8:	10bfffc4 	addi	r2,r2,-1
 3057fdc:	e0bffb15 	stw	r2,-20(fp)
 3057fe0:	e0fff417 	ldw	r3,-48(fp)
 3057fe4:	e0bff417 	ldw	r2,-48(fp)
 3057fe8:	10800517 	ldw	r2,20(r2)
 3057fec:	1885883a 	add	r2,r3,r2
 3057ff0:	11401704 	addi	r5,r2,92
 3057ff4:	e0fff504 	addi	r3,fp,-44
 3057ff8:	18800017 	ldw	r2,0(r3)
 3057ffc:	11000003 	ldbu	r4,0(r2)
 3058000:	10800044 	addi	r2,r2,1
 3058004:	18800015 	stw	r2,0(r3)
 3058008:	29000005 	stb	r4,0(r5)
 305800c:	e0fff417 	ldw	r3,-48(fp)
 3058010:	e0bffa17 	ldw	r2,-24(fp)
 3058014:	18800515 	stw	r2,20(r3)
 3058018:	003fba06 	br	3057f04 <altera_avalon_uart_write+0x38>
 305801c:	e03ffe15 	stw	zero,-8(fp)
 3058020:	0005303a 	rdctl	r2,status
 3058024:	e0bfff15 	stw	r2,-4(fp)
 3058028:	e0ffff17 	ldw	r3,-4(fp)
 305802c:	00bfff84 	movi	r2,-2
 3058030:	1884703a 	and	r2,r3,r2
 3058034:	1001703a 	wrctl	status,r2
 3058038:	e0bfff17 	ldw	r2,-4(fp)
 305803c:	e0bffd15 	stw	r2,-12(fp)
 3058040:	e0bffd17 	ldw	r2,-12(fp)
 3058044:	e0bff815 	stw	r2,-32(fp)
 3058048:	e0fff417 	ldw	r3,-48(fp)
 305804c:	e0bff417 	ldw	r2,-48(fp)
 3058050:	10800117 	ldw	r2,4(r2)
 3058054:	10811014 	ori	r2,r2,1088
 3058058:	18800115 	stw	r2,4(r3)
 305805c:	e0bff417 	ldw	r2,-48(fp)
 3058060:	10800017 	ldw	r2,0(r2)
 3058064:	10800304 	addi	r2,r2,12
 3058068:	1007883a 	mov	r3,r2
 305806c:	e0bff417 	ldw	r2,-48(fp)
 3058070:	10800117 	ldw	r2,4(r2)
 3058074:	18800035 	stwio	r2,0(r3)
 3058078:	e0bff817 	ldw	r2,-32(fp)
 305807c:	e0bfff15 	stw	r2,-4(fp)
 3058080:	e0bfff17 	ldw	r2,-4(fp)
 3058084:	1001703a 	wrctl	status,r2
 3058088:	e0fff617 	ldw	r3,-40(fp)
 305808c:	e0bffb17 	ldw	r2,-20(fp)
 3058090:	1885c83a 	sub	r2,r3,r2
 3058094:	dfc00d17 	ldw	ra,52(sp)
 3058098:	df000c17 	ldw	fp,48(sp)
 305809c:	dec00e04 	addi	sp,sp,56
 30580a0:	f800283a 	ret

030580a4 <alt_get_errno>:
 30580a4:	defffd04 	addi	sp,sp,-12
 30580a8:	dfc00215 	stw	ra,8(sp)
 30580ac:	df000115 	stw	fp,4(sp)
 30580b0:	df000104 	addi	fp,sp,4
 30580b4:	d0a00f17 	ldw	r2,-32708(gp)
 30580b8:	1005003a 	cmpeq	r2,r2,zero
 30580bc:	1000041e 	bne	r2,zero,30580d0 <alt_get_errno+0x2c>
 30580c0:	d0a00f17 	ldw	r2,-32708(gp)
 30580c4:	103ee83a 	callr	r2
 30580c8:	e0bfff15 	stw	r2,-4(fp)
 30580cc:	00000206 	br	30580d8 <alt_get_errno+0x34>
 30580d0:	d0a77a04 	addi	r2,gp,-25112
 30580d4:	e0bfff15 	stw	r2,-4(fp)
 30580d8:	e0bfff17 	ldw	r2,-4(fp)
 30580dc:	dfc00217 	ldw	ra,8(sp)
 30580e0:	df000117 	ldw	fp,4(sp)
 30580e4:	dec00304 	addi	sp,sp,12
 30580e8:	f800283a 	ret

030580ec <alt_alarm_start>:
 30580ec:	defff504 	addi	sp,sp,-44
 30580f0:	df000a15 	stw	fp,40(sp)
 30580f4:	df000a04 	addi	fp,sp,40
 30580f8:	e13ff615 	stw	r4,-40(fp)
 30580fc:	e17ff715 	stw	r5,-36(fp)
 3058100:	e1bff815 	stw	r6,-32(fp)
 3058104:	e1fff915 	stw	r7,-28(fp)
 3058108:	e03ffb15 	stw	zero,-20(fp)
 305810c:	d0a01617 	ldw	r2,-32680(gp)
 3058110:	e0bffc15 	stw	r2,-16(fp)
 3058114:	e0bffc17 	ldw	r2,-16(fp)
 3058118:	1005003a 	cmpeq	r2,r2,zero
 305811c:	1000421e 	bne	r2,zero,3058228 <alt_alarm_start+0x13c>
 3058120:	e0bff617 	ldw	r2,-40(fp)
 3058124:	1005003a 	cmpeq	r2,r2,zero
 3058128:	10003c1e 	bne	r2,zero,305821c <alt_alarm_start+0x130>
 305812c:	e0fff617 	ldw	r3,-40(fp)
 3058130:	e0bff817 	ldw	r2,-32(fp)
 3058134:	18800315 	stw	r2,12(r3)
 3058138:	e0fff617 	ldw	r3,-40(fp)
 305813c:	e0bff917 	ldw	r2,-28(fp)
 3058140:	18800515 	stw	r2,20(r3)
 3058144:	0005303a 	rdctl	r2,status
 3058148:	e0bffe15 	stw	r2,-8(fp)
 305814c:	e0fffe17 	ldw	r3,-8(fp)
 3058150:	00bfff84 	movi	r2,-2
 3058154:	1884703a 	and	r2,r3,r2
 3058158:	1001703a 	wrctl	status,r2
 305815c:	e0bffe17 	ldw	r2,-8(fp)
 3058160:	e0bffd15 	stw	r2,-12(fp)
 3058164:	e0bffd17 	ldw	r2,-12(fp)
 3058168:	e0bffa15 	stw	r2,-24(fp)
 305816c:	d0a01717 	ldw	r2,-32676(gp)
 3058170:	e0bffe15 	stw	r2,-8(fp)
 3058174:	e0bffe17 	ldw	r2,-8(fp)
 3058178:	e0bffb15 	stw	r2,-20(fp)
 305817c:	e13ff617 	ldw	r4,-40(fp)
 3058180:	e0fff717 	ldw	r3,-36(fp)
 3058184:	e0bffb17 	ldw	r2,-20(fp)
 3058188:	1885883a 	add	r2,r3,r2
 305818c:	10800044 	addi	r2,r2,1
 3058190:	20800215 	stw	r2,8(r4)
 3058194:	e0bff617 	ldw	r2,-40(fp)
 3058198:	10c00217 	ldw	r3,8(r2)
 305819c:	e0bffb17 	ldw	r2,-20(fp)
 30581a0:	1880042e 	bgeu	r3,r2,30581b4 <alt_alarm_start+0xc8>
 30581a4:	e0fff617 	ldw	r3,-40(fp)
 30581a8:	00800044 	movi	r2,1
 30581ac:	18800405 	stb	r2,16(r3)
 30581b0:	00000206 	br	30581bc <alt_alarm_start+0xd0>
 30581b4:	e0bff617 	ldw	r2,-40(fp)
 30581b8:	10000405 	stb	zero,16(r2)
 30581bc:	d0a01804 	addi	r2,gp,-32672
 30581c0:	e0bffe15 	stw	r2,-8(fp)
 30581c4:	e0bff617 	ldw	r2,-40(fp)
 30581c8:	e0bffd15 	stw	r2,-12(fp)
 30581cc:	e0fffd17 	ldw	r3,-12(fp)
 30581d0:	e0bffe17 	ldw	r2,-8(fp)
 30581d4:	18800115 	stw	r2,4(r3)
 30581d8:	e0fffd17 	ldw	r3,-12(fp)
 30581dc:	e0bffe17 	ldw	r2,-8(fp)
 30581e0:	10800017 	ldw	r2,0(r2)
 30581e4:	18800015 	stw	r2,0(r3)
 30581e8:	e0bffe17 	ldw	r2,-8(fp)
 30581ec:	10c00017 	ldw	r3,0(r2)
 30581f0:	e0bffd17 	ldw	r2,-12(fp)
 30581f4:	18800115 	stw	r2,4(r3)
 30581f8:	e0fffe17 	ldw	r3,-8(fp)
 30581fc:	e0bffd17 	ldw	r2,-12(fp)
 3058200:	18800015 	stw	r2,0(r3)
 3058204:	e0bffa17 	ldw	r2,-24(fp)
 3058208:	e0bffe15 	stw	r2,-8(fp)
 305820c:	e0bffe17 	ldw	r2,-8(fp)
 3058210:	1001703a 	wrctl	status,r2
 3058214:	e03fff15 	stw	zero,-4(fp)
 3058218:	00000506 	br	3058230 <alt_alarm_start+0x144>
 305821c:	00bffa84 	movi	r2,-22
 3058220:	e0bfff15 	stw	r2,-4(fp)
 3058224:	00000206 	br	3058230 <alt_alarm_start+0x144>
 3058228:	00bfde84 	movi	r2,-134
 305822c:	e0bfff15 	stw	r2,-4(fp)
 3058230:	e0bfff17 	ldw	r2,-4(fp)
 3058234:	df000a17 	ldw	fp,40(sp)
 3058238:	dec00b04 	addi	sp,sp,44
 305823c:	f800283a 	ret

03058240 <alt_busy_sleep>:
 3058240:	defffa04 	addi	sp,sp,-24
 3058244:	dfc00515 	stw	ra,20(sp)
 3058248:	df000415 	stw	fp,16(sp)
 305824c:	df000404 	addi	fp,sp,16
 3058250:	e13ffc15 	stw	r4,-16(fp)
 3058254:	008000c4 	movi	r2,3
 3058258:	e0bfff15 	stw	r2,-4(fp)
 305825c:	e0ffff17 	ldw	r3,-4(fp)
 3058260:	008003f4 	movhi	r2,15
 3058264:	10909004 	addi	r2,r2,16960
 3058268:	188b383a 	mul	r5,r3,r2
 305826c:	01017db4 	movhi	r4,1526
 3058270:	21384004 	addi	r4,r4,-7936
 3058274:	30497ec0 	call	30497ec <__udivsi3>
 3058278:	100b883a 	mov	r5,r2
 305827c:	01200034 	movhi	r4,32768
 3058280:	213fffc4 	addi	r4,r4,-1
 3058284:	30497ec0 	call	30497ec <__udivsi3>
 3058288:	100b883a 	mov	r5,r2
 305828c:	e13ffc17 	ldw	r4,-16(fp)
 3058290:	30497ec0 	call	30497ec <__udivsi3>
 3058294:	e0bffe15 	stw	r2,-8(fp)
 3058298:	e0bffe17 	ldw	r2,-8(fp)
 305829c:	1005003a 	cmpeq	r2,r2,zero
 30582a0:	1000281e 	bne	r2,zero,3058344 <alt_busy_sleep+0x104>
 30582a4:	e03ffd15 	stw	zero,-12(fp)
 30582a8:	e0fffd17 	ldw	r3,-12(fp)
 30582ac:	e0bffe17 	ldw	r2,-8(fp)
 30582b0:	1880170e 	bge	r3,r2,3058310 <alt_busy_sleep+0xd0>
 30582b4:	00a00034 	movhi	r2,32768
 30582b8:	10bfffc4 	addi	r2,r2,-1
 30582bc:	10bfffc4 	addi	r2,r2,-1
 30582c0:	103ffe1e 	bne	r2,zero,30582bc <alt_busy_sleep+0x7c>
 30582c4:	e0ffff17 	ldw	r3,-4(fp)
 30582c8:	008003f4 	movhi	r2,15
 30582cc:	10909004 	addi	r2,r2,16960
 30582d0:	188b383a 	mul	r5,r3,r2
 30582d4:	01017db4 	movhi	r4,1526
 30582d8:	21384004 	addi	r4,r4,-7936
 30582dc:	30497ec0 	call	30497ec <__udivsi3>
 30582e0:	100b883a 	mov	r5,r2
 30582e4:	01200034 	movhi	r4,32768
 30582e8:	213fffc4 	addi	r4,r4,-1
 30582ec:	30497ec0 	call	30497ec <__udivsi3>
 30582f0:	1007883a 	mov	r3,r2
 30582f4:	e0bffc17 	ldw	r2,-16(fp)
 30582f8:	10c5c83a 	sub	r2,r2,r3
 30582fc:	e0bffc15 	stw	r2,-16(fp)
 3058300:	e0bffd17 	ldw	r2,-12(fp)
 3058304:	10800044 	addi	r2,r2,1
 3058308:	e0bffd15 	stw	r2,-12(fp)
 305830c:	003fe606 	br	30582a8 <alt_busy_sleep+0x68>
 3058310:	e0ffff17 	ldw	r3,-4(fp)
 3058314:	008003f4 	movhi	r2,15
 3058318:	10909004 	addi	r2,r2,16960
 305831c:	188b383a 	mul	r5,r3,r2
 3058320:	01017db4 	movhi	r4,1526
 3058324:	21384004 	addi	r4,r4,-7936
 3058328:	30497ec0 	call	30497ec <__udivsi3>
 305832c:	1007883a 	mov	r3,r2
 3058330:	e0bffc17 	ldw	r2,-16(fp)
 3058334:	1885383a 	mul	r2,r3,r2
 3058338:	10bfffc4 	addi	r2,r2,-1
 305833c:	103ffe1e 	bne	r2,zero,3058338 <alt_busy_sleep+0xf8>
 3058340:	00000c06 	br	3058374 <alt_busy_sleep+0x134>
 3058344:	e0ffff17 	ldw	r3,-4(fp)
 3058348:	008003f4 	movhi	r2,15
 305834c:	10909004 	addi	r2,r2,16960
 3058350:	188b383a 	mul	r5,r3,r2
 3058354:	01017db4 	movhi	r4,1526
 3058358:	21384004 	addi	r4,r4,-7936
 305835c:	30497ec0 	call	30497ec <__udivsi3>
 3058360:	1007883a 	mov	r3,r2
 3058364:	e0bffc17 	ldw	r2,-16(fp)
 3058368:	1885383a 	mul	r2,r3,r2
 305836c:	10bfffc4 	addi	r2,r2,-1
 3058370:	00bffe16 	blt	zero,r2,305836c <alt_busy_sleep+0x12c>
 3058374:	0005883a 	mov	r2,zero
 3058378:	dfc00517 	ldw	ra,20(sp)
 305837c:	df000417 	ldw	fp,16(sp)
 3058380:	dec00604 	addi	sp,sp,24
 3058384:	f800283a 	ret

03058388 <alt_dcache_flush>:
 3058388:	defffb04 	addi	sp,sp,-20
 305838c:	df000415 	stw	fp,16(sp)
 3058390:	df000404 	addi	fp,sp,16
 3058394:	e13ffc15 	stw	r4,-16(fp)
 3058398:	e17ffd15 	stw	r5,-12(fp)
 305839c:	e0fffc17 	ldw	r3,-16(fp)
 30583a0:	e0bffd17 	ldw	r2,-12(fp)
 30583a4:	1885883a 	add	r2,r3,r2
 30583a8:	e0bfff15 	stw	r2,-4(fp)
 30583ac:	e0bffc17 	ldw	r2,-16(fp)
 30583b0:	e0bffe15 	stw	r2,-8(fp)
 30583b4:	e0fffe17 	ldw	r3,-8(fp)
 30583b8:	e0bfff17 	ldw	r2,-4(fp)
 30583bc:	1880062e 	bgeu	r3,r2,30583d8 <alt_dcache_flush+0x50>
 30583c0:	e0bffe17 	ldw	r2,-8(fp)
 30583c4:	1000001b 	flushda	0(r2)
 30583c8:	e0bffe17 	ldw	r2,-8(fp)
 30583cc:	10800804 	addi	r2,r2,32
 30583d0:	e0bffe15 	stw	r2,-8(fp)
 30583d4:	003ff706 	br	30583b4 <alt_dcache_flush+0x2c>
 30583d8:	e0bffc17 	ldw	r2,-16(fp)
 30583dc:	108007cc 	andi	r2,r2,31
 30583e0:	1005003a 	cmpeq	r2,r2,zero
 30583e4:	1000021e 	bne	r2,zero,30583f0 <alt_dcache_flush+0x68>
 30583e8:	e0bffe17 	ldw	r2,-8(fp)
 30583ec:	1000001b 	flushda	0(r2)
 30583f0:	df000417 	ldw	fp,16(sp)
 30583f4:	dec00504 	addi	sp,sp,20
 30583f8:	f800283a 	ret

030583fc <alt_dcache_flush_all>:
 30583fc:	defffe04 	addi	sp,sp,-8
 3058400:	df000115 	stw	fp,4(sp)
 3058404:	df000104 	addi	fp,sp,4
 3058408:	e03fff15 	stw	zero,-4(fp)
 305840c:	e0bfff17 	ldw	r2,-4(fp)
 3058410:	10820028 	cmpgeui	r2,r2,2048
 3058414:	1000061e 	bne	r2,zero,3058430 <alt_dcache_flush_all+0x34>
 3058418:	e0bfff17 	ldw	r2,-4(fp)
 305841c:	1000003b 	flushd	0(r2)
 3058420:	e0bfff17 	ldw	r2,-4(fp)
 3058424:	10800804 	addi	r2,r2,32
 3058428:	e0bfff15 	stw	r2,-4(fp)
 305842c:	003ff706 	br	305840c <alt_dcache_flush_all+0x10>
 3058430:	df000117 	ldw	fp,4(sp)
 3058434:	dec00204 	addi	sp,sp,8
 3058438:	f800283a 	ret

0305843c <alt_dev_llist_insert>:
 305843c:	defff904 	addi	sp,sp,-28
 3058440:	dfc00615 	stw	ra,24(sp)
 3058444:	df000515 	stw	fp,20(sp)
 3058448:	df000504 	addi	fp,sp,20
 305844c:	e13ffb15 	stw	r4,-20(fp)
 3058450:	e17ffc15 	stw	r5,-16(fp)
 3058454:	e0bffb17 	ldw	r2,-20(fp)
 3058458:	1005003a 	cmpeq	r2,r2,zero
 305845c:	1000041e 	bne	r2,zero,3058470 <alt_dev_llist_insert+0x34>
 3058460:	e0bffb17 	ldw	r2,-20(fp)
 3058464:	10800217 	ldw	r2,8(r2)
 3058468:	1004c03a 	cmpne	r2,r2,zero
 305846c:	1000071e 	bne	r2,zero,305848c <alt_dev_llist_insert+0x50>
 3058470:	30584ec0 	call	30584ec <alt_get_errno>
 3058474:	1007883a 	mov	r3,r2
 3058478:	00800584 	movi	r2,22
 305847c:	18800015 	stw	r2,0(r3)
 3058480:	00bffa84 	movi	r2,-22
 3058484:	e0bfff15 	stw	r2,-4(fp)
 3058488:	00001306 	br	30584d8 <alt_dev_llist_insert+0x9c>
 305848c:	e0bffc17 	ldw	r2,-16(fp)
 3058490:	e0bffd15 	stw	r2,-12(fp)
 3058494:	e0bffb17 	ldw	r2,-20(fp)
 3058498:	e0bffe15 	stw	r2,-8(fp)
 305849c:	e0fffe17 	ldw	r3,-8(fp)
 30584a0:	e0bffd17 	ldw	r2,-12(fp)
 30584a4:	18800115 	stw	r2,4(r3)
 30584a8:	e0fffe17 	ldw	r3,-8(fp)
 30584ac:	e0bffd17 	ldw	r2,-12(fp)
 30584b0:	10800017 	ldw	r2,0(r2)
 30584b4:	18800015 	stw	r2,0(r3)
 30584b8:	e0bffd17 	ldw	r2,-12(fp)
 30584bc:	10c00017 	ldw	r3,0(r2)
 30584c0:	e0bffe17 	ldw	r2,-8(fp)
 30584c4:	18800115 	stw	r2,4(r3)
 30584c8:	e0fffd17 	ldw	r3,-12(fp)
 30584cc:	e0bffe17 	ldw	r2,-8(fp)
 30584d0:	18800015 	stw	r2,0(r3)
 30584d4:	e03fff15 	stw	zero,-4(fp)
 30584d8:	e0bfff17 	ldw	r2,-4(fp)
 30584dc:	dfc00617 	ldw	ra,24(sp)
 30584e0:	df000517 	ldw	fp,20(sp)
 30584e4:	dec00704 	addi	sp,sp,28
 30584e8:	f800283a 	ret

030584ec <alt_get_errno>:
 30584ec:	defffd04 	addi	sp,sp,-12
 30584f0:	dfc00215 	stw	ra,8(sp)
 30584f4:	df000115 	stw	fp,4(sp)
 30584f8:	df000104 	addi	fp,sp,4
 30584fc:	d0a00f17 	ldw	r2,-32708(gp)
 3058500:	1005003a 	cmpeq	r2,r2,zero
 3058504:	1000041e 	bne	r2,zero,3058518 <alt_get_errno+0x2c>
 3058508:	d0a00f17 	ldw	r2,-32708(gp)
 305850c:	103ee83a 	callr	r2
 3058510:	e0bfff15 	stw	r2,-4(fp)
 3058514:	00000206 	br	3058520 <alt_get_errno+0x34>
 3058518:	d0a77a04 	addi	r2,gp,-25112
 305851c:	e0bfff15 	stw	r2,-4(fp)
 3058520:	e0bfff17 	ldw	r2,-4(fp)
 3058524:	dfc00217 	ldw	ra,8(sp)
 3058528:	df000117 	ldw	fp,4(sp)
 305852c:	dec00304 	addi	sp,sp,12
 3058530:	f800283a 	ret

03058534 <_do_ctors>:
 3058534:	defffd04 	addi	sp,sp,-12
 3058538:	dfc00215 	stw	ra,8(sp)
 305853c:	df000115 	stw	fp,4(sp)
 3058540:	df000104 	addi	fp,sp,4
 3058544:	0080c1b4 	movhi	r2,774
 3058548:	10a66d04 	addi	r2,r2,-26188
 305854c:	e0bfff15 	stw	r2,-4(fp)
 3058550:	e0ffff17 	ldw	r3,-4(fp)
 3058554:	0080c1b4 	movhi	r2,774
 3058558:	10a66d04 	addi	r2,r2,-26188
 305855c:	18800736 	bltu	r3,r2,305857c <_do_ctors+0x48>
 3058560:	e0bfff17 	ldw	r2,-4(fp)
 3058564:	10800017 	ldw	r2,0(r2)
 3058568:	103ee83a 	callr	r2
 305856c:	e0bfff17 	ldw	r2,-4(fp)
 3058570:	10bfff04 	addi	r2,r2,-4
 3058574:	e0bfff15 	stw	r2,-4(fp)
 3058578:	003ff506 	br	3058550 <_do_ctors+0x1c>
 305857c:	dfc00217 	ldw	ra,8(sp)
 3058580:	df000117 	ldw	fp,4(sp)
 3058584:	dec00304 	addi	sp,sp,12
 3058588:	f800283a 	ret

0305858c <_do_dtors>:
 305858c:	defffd04 	addi	sp,sp,-12
 3058590:	dfc00215 	stw	ra,8(sp)
 3058594:	df000115 	stw	fp,4(sp)
 3058598:	df000104 	addi	fp,sp,4
 305859c:	0080c1b4 	movhi	r2,774
 30585a0:	10a66d04 	addi	r2,r2,-26188
 30585a4:	e0bfff15 	stw	r2,-4(fp)
 30585a8:	e0ffff17 	ldw	r3,-4(fp)
 30585ac:	0080c1b4 	movhi	r2,774
 30585b0:	10a66e04 	addi	r2,r2,-26184
 30585b4:	18800736 	bltu	r3,r2,30585d4 <_do_dtors+0x48>
 30585b8:	e0bfff17 	ldw	r2,-4(fp)
 30585bc:	10800017 	ldw	r2,0(r2)
 30585c0:	103ee83a 	callr	r2
 30585c4:	e0bfff17 	ldw	r2,-4(fp)
 30585c8:	10bfff04 	addi	r2,r2,-4
 30585cc:	e0bfff15 	stw	r2,-4(fp)
 30585d0:	003ff506 	br	30585a8 <_do_dtors+0x1c>
 30585d4:	dfc00217 	ldw	ra,8(sp)
 30585d8:	df000117 	ldw	fp,4(sp)
 30585dc:	dec00304 	addi	sp,sp,12
 30585e0:	f800283a 	ret

030585e4 <alt_find_dev>:
 30585e4:	defff904 	addi	sp,sp,-28
 30585e8:	dfc00615 	stw	ra,24(sp)
 30585ec:	df000515 	stw	fp,20(sp)
 30585f0:	df000504 	addi	fp,sp,20
 30585f4:	e13ffb15 	stw	r4,-20(fp)
 30585f8:	e17ffc15 	stw	r5,-16(fp)
 30585fc:	e0bffc17 	ldw	r2,-16(fp)
 3058600:	10800017 	ldw	r2,0(r2)
 3058604:	e0bffd15 	stw	r2,-12(fp)
 3058608:	e13ffb17 	ldw	r4,-20(fp)
 305860c:	304c4c40 	call	304c4c4 <strlen>
 3058610:	10800044 	addi	r2,r2,1
 3058614:	e0bffe15 	stw	r2,-8(fp)
 3058618:	e0fffd17 	ldw	r3,-12(fp)
 305861c:	e0bffc17 	ldw	r2,-16(fp)
 3058620:	18800e26 	beq	r3,r2,305865c <alt_find_dev+0x78>
 3058624:	e0bffd17 	ldw	r2,-12(fp)
 3058628:	11000217 	ldw	r4,8(r2)
 305862c:	e17ffb17 	ldw	r5,-20(fp)
 3058630:	e1bffe17 	ldw	r6,-8(fp)
 3058634:	30596040 	call	3059604 <memcmp>
 3058638:	1004c03a 	cmpne	r2,r2,zero
 305863c:	1000031e 	bne	r2,zero,305864c <alt_find_dev+0x68>
 3058640:	e0bffd17 	ldw	r2,-12(fp)
 3058644:	e0bfff15 	stw	r2,-4(fp)
 3058648:	00000506 	br	3058660 <alt_find_dev+0x7c>
 305864c:	e0bffd17 	ldw	r2,-12(fp)
 3058650:	10800017 	ldw	r2,0(r2)
 3058654:	e0bffd15 	stw	r2,-12(fp)
 3058658:	003fef06 	br	3058618 <alt_find_dev+0x34>
 305865c:	e03fff15 	stw	zero,-4(fp)
 3058660:	e0bfff17 	ldw	r2,-4(fp)
 3058664:	dfc00617 	ldw	ra,24(sp)
 3058668:	df000517 	ldw	fp,20(sp)
 305866c:	dec00704 	addi	sp,sp,28
 3058670:	f800283a 	ret

03058674 <alt_find_file>:
 3058674:	defffa04 	addi	sp,sp,-24
 3058678:	dfc00515 	stw	ra,20(sp)
 305867c:	df000415 	stw	fp,16(sp)
 3058680:	df000404 	addi	fp,sp,16
 3058684:	e13ffc15 	stw	r4,-16(fp)
 3058688:	d0a00a17 	ldw	r2,-32728(gp)
 305868c:	e0bffd15 	stw	r2,-12(fp)
 3058690:	e0fffd17 	ldw	r3,-12(fp)
 3058694:	d0a00a04 	addi	r2,gp,-32728
 3058698:	18802926 	beq	r3,r2,3058740 <alt_find_file+0xcc>
 305869c:	e0bffd17 	ldw	r2,-12(fp)
 30586a0:	11000217 	ldw	r4,8(r2)
 30586a4:	304c4c40 	call	304c4c4 <strlen>
 30586a8:	e0bffe15 	stw	r2,-8(fp)
 30586ac:	e0bffd17 	ldw	r2,-12(fp)
 30586b0:	10c00217 	ldw	r3,8(r2)
 30586b4:	e0bffe17 	ldw	r2,-8(fp)
 30586b8:	1885883a 	add	r2,r3,r2
 30586bc:	10bfffc4 	addi	r2,r2,-1
 30586c0:	10800007 	ldb	r2,0(r2)
 30586c4:	10800bd8 	cmpnei	r2,r2,47
 30586c8:	1000031e 	bne	r2,zero,30586d8 <alt_find_file+0x64>
 30586cc:	e0bffe17 	ldw	r2,-8(fp)
 30586d0:	10bfffc4 	addi	r2,r2,-1
 30586d4:	e0bffe15 	stw	r2,-8(fp)
 30586d8:	e0fffc17 	ldw	r3,-16(fp)
 30586dc:	e0bffe17 	ldw	r2,-8(fp)
 30586e0:	1885883a 	add	r2,r3,r2
 30586e4:	10800007 	ldb	r2,0(r2)
 30586e8:	10800be0 	cmpeqi	r2,r2,47
 30586ec:	1000061e 	bne	r2,zero,3058708 <alt_find_file+0x94>
 30586f0:	e0fffc17 	ldw	r3,-16(fp)
 30586f4:	e0bffe17 	ldw	r2,-8(fp)
 30586f8:	1885883a 	add	r2,r3,r2
 30586fc:	10800007 	ldb	r2,0(r2)
 3058700:	1004c03a 	cmpne	r2,r2,zero
 3058704:	10000a1e 	bne	r2,zero,3058730 <alt_find_file+0xbc>
 3058708:	e0bffd17 	ldw	r2,-12(fp)
 305870c:	11000217 	ldw	r4,8(r2)
 3058710:	e17ffc17 	ldw	r5,-16(fp)
 3058714:	e1bffe17 	ldw	r6,-8(fp)
 3058718:	30596040 	call	3059604 <memcmp>
 305871c:	1004c03a 	cmpne	r2,r2,zero
 3058720:	1000031e 	bne	r2,zero,3058730 <alt_find_file+0xbc>
 3058724:	e0bffd17 	ldw	r2,-12(fp)
 3058728:	e0bfff15 	stw	r2,-4(fp)
 305872c:	00000506 	br	3058744 <alt_find_file+0xd0>
 3058730:	e0bffd17 	ldw	r2,-12(fp)
 3058734:	10800017 	ldw	r2,0(r2)
 3058738:	e0bffd15 	stw	r2,-12(fp)
 305873c:	003fd406 	br	3058690 <alt_find_file+0x1c>
 3058740:	e03fff15 	stw	zero,-4(fp)
 3058744:	e0bfff17 	ldw	r2,-4(fp)
 3058748:	dfc00517 	ldw	ra,20(sp)
 305874c:	df000417 	ldw	fp,16(sp)
 3058750:	dec00604 	addi	sp,sp,24
 3058754:	f800283a 	ret

03058758 <alt_flash_open_dev>:
 3058758:	defffb04 	addi	sp,sp,-20
 305875c:	dfc00415 	stw	ra,16(sp)
 3058760:	df000315 	stw	fp,12(sp)
 3058764:	df000304 	addi	fp,sp,12
 3058768:	e13ffd15 	stw	r4,-12(fp)
 305876c:	e13ffd17 	ldw	r4,-12(fp)
 3058770:	d1601b04 	addi	r5,gp,-32660
 3058774:	30585e40 	call	30585e4 <alt_find_dev>
 3058778:	e0bffe15 	stw	r2,-8(fp)
 305877c:	e0bffe17 	ldw	r2,-8(fp)
 3058780:	1005003a 	cmpeq	r2,r2,zero
 3058784:	10000b1e 	bne	r2,zero,30587b4 <alt_flash_open_dev+0x5c>
 3058788:	e0bffe17 	ldw	r2,-8(fp)
 305878c:	10800317 	ldw	r2,12(r2)
 3058790:	1005003a 	cmpeq	r2,r2,zero
 3058794:	1000071e 	bne	r2,zero,30587b4 <alt_flash_open_dev+0x5c>
 3058798:	e0bffe17 	ldw	r2,-8(fp)
 305879c:	10800317 	ldw	r2,12(r2)
 30587a0:	e13ffe17 	ldw	r4,-8(fp)
 30587a4:	e17ffd17 	ldw	r5,-12(fp)
 30587a8:	103ee83a 	callr	r2
 30587ac:	e0bfff15 	stw	r2,-4(fp)
 30587b0:	00000206 	br	30587bc <alt_flash_open_dev+0x64>
 30587b4:	e0bffe17 	ldw	r2,-8(fp)
 30587b8:	e0bfff15 	stw	r2,-4(fp)
 30587bc:	e0bfff17 	ldw	r2,-4(fp)
 30587c0:	dfc00417 	ldw	ra,16(sp)
 30587c4:	df000317 	ldw	fp,12(sp)
 30587c8:	dec00504 	addi	sp,sp,20
 30587cc:	f800283a 	ret

030587d0 <alt_flash_close_dev>:
 30587d0:	defffd04 	addi	sp,sp,-12
 30587d4:	dfc00215 	stw	ra,8(sp)
 30587d8:	df000115 	stw	fp,4(sp)
 30587dc:	df000104 	addi	fp,sp,4
 30587e0:	e13fff15 	stw	r4,-4(fp)
 30587e4:	e0bfff17 	ldw	r2,-4(fp)
 30587e8:	1005003a 	cmpeq	r2,r2,zero
 30587ec:	1000081e 	bne	r2,zero,3058810 <alt_flash_close_dev+0x40>
 30587f0:	e0bfff17 	ldw	r2,-4(fp)
 30587f4:	10800417 	ldw	r2,16(r2)
 30587f8:	1005003a 	cmpeq	r2,r2,zero
 30587fc:	1000041e 	bne	r2,zero,3058810 <alt_flash_close_dev+0x40>
 3058800:	e0bfff17 	ldw	r2,-4(fp)
 3058804:	10800417 	ldw	r2,16(r2)
 3058808:	e13fff17 	ldw	r4,-4(fp)
 305880c:	103ee83a 	callr	r2
 3058810:	dfc00217 	ldw	ra,8(sp)
 3058814:	df000117 	ldw	fp,4(sp)
 3058818:	dec00304 	addi	sp,sp,12
 305881c:	f800283a 	ret

03058820 <alt_get_fd>:
 3058820:	defffa04 	addi	sp,sp,-24
 3058824:	df000515 	stw	fp,20(sp)
 3058828:	df000504 	addi	fp,sp,20
 305882c:	e13ffb15 	stw	r4,-20(fp)
 3058830:	00bffa04 	movi	r2,-24
 3058834:	e0bffd15 	stw	r2,-12(fp)
 3058838:	e03ffe15 	stw	zero,-8(fp)
 305883c:	e03ffc15 	stw	zero,-16(fp)
 3058840:	e0bffc17 	ldw	r2,-16(fp)
 3058844:	10800808 	cmpgei	r2,r2,32
 3058848:	10001b1e 	bne	r2,zero,30588b8 <alt_get_fd+0x98>
 305884c:	00c0c1b4 	movhi	r3,774
 3058850:	18ed5e04 	addi	r3,r3,-19080
 3058854:	e0bffc17 	ldw	r2,-16(fp)
 3058858:	10800324 	muli	r2,r2,12
 305885c:	10c5883a 	add	r2,r2,r3
 3058860:	10800017 	ldw	r2,0(r2)
 3058864:	1004c03a 	cmpne	r2,r2,zero
 3058868:	10000f1e 	bne	r2,zero,30588a8 <alt_get_fd+0x88>
 305886c:	00c0c1b4 	movhi	r3,774
 3058870:	18ed5e04 	addi	r3,r3,-19080
 3058874:	e0bffc17 	ldw	r2,-16(fp)
 3058878:	10800324 	muli	r2,r2,12
 305887c:	10c7883a 	add	r3,r2,r3
 3058880:	e0bffb17 	ldw	r2,-20(fp)
 3058884:	18800015 	stw	r2,0(r3)
 3058888:	e0fffc17 	ldw	r3,-16(fp)
 305888c:	d0a00e17 	ldw	r2,-32712(gp)
 3058890:	10c0020e 	bge	r2,r3,305889c <alt_get_fd+0x7c>
 3058894:	e0bffc17 	ldw	r2,-16(fp)
 3058898:	d0a00e15 	stw	r2,-32712(gp)
 305889c:	e0bffc17 	ldw	r2,-16(fp)
 30588a0:	e0bffd15 	stw	r2,-12(fp)
 30588a4:	00000406 	br	30588b8 <alt_get_fd+0x98>
 30588a8:	e0bffc17 	ldw	r2,-16(fp)
 30588ac:	10800044 	addi	r2,r2,1
 30588b0:	e0bffc15 	stw	r2,-16(fp)
 30588b4:	003fe206 	br	3058840 <alt_get_fd+0x20>
 30588b8:	e03fff15 	stw	zero,-4(fp)
 30588bc:	e0bffd17 	ldw	r2,-12(fp)
 30588c0:	df000517 	ldw	fp,20(sp)
 30588c4:	dec00604 	addi	sp,sp,24
 30588c8:	f800283a 	ret

030588cc <alt_icache_flush_all>:
 30588cc:	defffe04 	addi	sp,sp,-8
 30588d0:	dfc00115 	stw	ra,4(sp)
 30588d4:	df000015 	stw	fp,0(sp)
 30588d8:	d839883a 	mov	fp,sp
 30588dc:	0009883a 	mov	r4,zero
 30588e0:	01440004 	movi	r5,4096
 30588e4:	305952c0 	call	305952c <alt_icache_flush>
 30588e8:	dfc00117 	ldw	ra,4(sp)
 30588ec:	df000017 	ldw	fp,0(sp)
 30588f0:	dec00204 	addi	sp,sp,8
 30588f4:	f800283a 	ret

030588f8 <alt_ic_isr_register>:
 30588f8:	defff904 	addi	sp,sp,-28
 30588fc:	dfc00615 	stw	ra,24(sp)
 3058900:	df000515 	stw	fp,20(sp)
 3058904:	df000504 	addi	fp,sp,20
 3058908:	e13ffc15 	stw	r4,-16(fp)
 305890c:	e17ffd15 	stw	r5,-12(fp)
 3058910:	e1bffe15 	stw	r6,-8(fp)
 3058914:	e1ffff15 	stw	r7,-4(fp)
 3058918:	e0800217 	ldw	r2,8(fp)
 305891c:	d8800015 	stw	r2,0(sp)
 3058920:	e13ffc17 	ldw	r4,-16(fp)
 3058924:	e17ffd17 	ldw	r5,-12(fp)
 3058928:	e1bffe17 	ldw	r6,-8(fp)
 305892c:	e1ffff17 	ldw	r7,-4(fp)
 3058930:	3058a980 	call	3058a98 <alt_iic_isr_register>
 3058934:	dfc00617 	ldw	ra,24(sp)
 3058938:	df000517 	ldw	fp,20(sp)
 305893c:	dec00704 	addi	sp,sp,28
 3058940:	f800283a 	ret

03058944 <alt_ic_irq_enable>:
 3058944:	defff804 	addi	sp,sp,-32
 3058948:	df000715 	stw	fp,28(sp)
 305894c:	df000704 	addi	fp,sp,28
 3058950:	e13ff915 	stw	r4,-28(fp)
 3058954:	e17ffa15 	stw	r5,-24(fp)
 3058958:	e0bffa17 	ldw	r2,-24(fp)
 305895c:	e0bffb15 	stw	r2,-20(fp)
 3058960:	0005303a 	rdctl	r2,status
 3058964:	e0bfff15 	stw	r2,-4(fp)
 3058968:	e0ffff17 	ldw	r3,-4(fp)
 305896c:	00bfff84 	movi	r2,-2
 3058970:	1884703a 	and	r2,r3,r2
 3058974:	1001703a 	wrctl	status,r2
 3058978:	e0bfff17 	ldw	r2,-4(fp)
 305897c:	e0bffe15 	stw	r2,-8(fp)
 3058980:	e0bffe17 	ldw	r2,-8(fp)
 3058984:	e0bffd15 	stw	r2,-12(fp)
 3058988:	00c00044 	movi	r3,1
 305898c:	e0bffb17 	ldw	r2,-20(fp)
 3058990:	1886983a 	sll	r3,r3,r2
 3058994:	d0a01017 	ldw	r2,-32704(gp)
 3058998:	10c4b03a 	or	r2,r2,r3
 305899c:	d0a01015 	stw	r2,-32704(gp)
 30589a0:	d0a01017 	ldw	r2,-32704(gp)
 30589a4:	100170fa 	wrctl	ienable,r2
 30589a8:	e0bffd17 	ldw	r2,-12(fp)
 30589ac:	e0bfff15 	stw	r2,-4(fp)
 30589b0:	e0bfff17 	ldw	r2,-4(fp)
 30589b4:	1001703a 	wrctl	status,r2
 30589b8:	e03ffc15 	stw	zero,-16(fp)
 30589bc:	e0bffc17 	ldw	r2,-16(fp)
 30589c0:	df000717 	ldw	fp,28(sp)
 30589c4:	dec00804 	addi	sp,sp,32
 30589c8:	f800283a 	ret

030589cc <alt_ic_irq_disable>:
 30589cc:	defff804 	addi	sp,sp,-32
 30589d0:	df000715 	stw	fp,28(sp)
 30589d4:	df000704 	addi	fp,sp,28
 30589d8:	e13ff915 	stw	r4,-28(fp)
 30589dc:	e17ffa15 	stw	r5,-24(fp)
 30589e0:	e0bffa17 	ldw	r2,-24(fp)
 30589e4:	e0bffb15 	stw	r2,-20(fp)
 30589e8:	0005303a 	rdctl	r2,status
 30589ec:	e0bfff15 	stw	r2,-4(fp)
 30589f0:	e0ffff17 	ldw	r3,-4(fp)
 30589f4:	00bfff84 	movi	r2,-2
 30589f8:	1884703a 	and	r2,r3,r2
 30589fc:	1001703a 	wrctl	status,r2
 3058a00:	e0bfff17 	ldw	r2,-4(fp)
 3058a04:	e0bffe15 	stw	r2,-8(fp)
 3058a08:	e0bffe17 	ldw	r2,-8(fp)
 3058a0c:	e0bffd15 	stw	r2,-12(fp)
 3058a10:	00c00044 	movi	r3,1
 3058a14:	e0bffb17 	ldw	r2,-20(fp)
 3058a18:	1884983a 	sll	r2,r3,r2
 3058a1c:	0086303a 	nor	r3,zero,r2
 3058a20:	d0a01017 	ldw	r2,-32704(gp)
 3058a24:	10c4703a 	and	r2,r2,r3
 3058a28:	d0a01015 	stw	r2,-32704(gp)
 3058a2c:	d0a01017 	ldw	r2,-32704(gp)
 3058a30:	100170fa 	wrctl	ienable,r2
 3058a34:	e0bffd17 	ldw	r2,-12(fp)
 3058a38:	e0bfff15 	stw	r2,-4(fp)
 3058a3c:	e0bfff17 	ldw	r2,-4(fp)
 3058a40:	1001703a 	wrctl	status,r2
 3058a44:	e03ffc15 	stw	zero,-16(fp)
 3058a48:	e0bffc17 	ldw	r2,-16(fp)
 3058a4c:	df000717 	ldw	fp,28(sp)
 3058a50:	dec00804 	addi	sp,sp,32
 3058a54:	f800283a 	ret

03058a58 <alt_ic_irq_enabled>:
 3058a58:	defffc04 	addi	sp,sp,-16
 3058a5c:	df000315 	stw	fp,12(sp)
 3058a60:	df000304 	addi	fp,sp,12
 3058a64:	e13ffd15 	stw	r4,-12(fp)
 3058a68:	e17ffe15 	stw	r5,-8(fp)
 3058a6c:	000530fa 	rdctl	r2,ienable
 3058a70:	e0bfff15 	stw	r2,-4(fp)
 3058a74:	00c00044 	movi	r3,1
 3058a78:	e0bffe17 	ldw	r2,-8(fp)
 3058a7c:	1884983a 	sll	r2,r3,r2
 3058a80:	e0ffff17 	ldw	r3,-4(fp)
 3058a84:	10c4703a 	and	r2,r2,r3
 3058a88:	1004c03a 	cmpne	r2,r2,zero
 3058a8c:	df000317 	ldw	fp,12(sp)
 3058a90:	dec00404 	addi	sp,sp,16
 3058a94:	f800283a 	ret

03058a98 <alt_iic_isr_register>:
 3058a98:	defff404 	addi	sp,sp,-48
 3058a9c:	dfc00b15 	stw	ra,44(sp)
 3058aa0:	df000a15 	stw	fp,40(sp)
 3058aa4:	df000a04 	addi	fp,sp,40
 3058aa8:	e13ff615 	stw	r4,-40(fp)
 3058aac:	e17ff715 	stw	r5,-36(fp)
 3058ab0:	e1bff815 	stw	r6,-32(fp)
 3058ab4:	e1fff915 	stw	r7,-28(fp)
 3058ab8:	00bffa84 	movi	r2,-22
 3058abc:	e0bffa15 	stw	r2,-24(fp)
 3058ac0:	e0bff717 	ldw	r2,-36(fp)
 3058ac4:	e0bffb15 	stw	r2,-20(fp)
 3058ac8:	e0bffb17 	ldw	r2,-20(fp)
 3058acc:	10800808 	cmpgei	r2,r2,32
 3058ad0:	10002b1e 	bne	r2,zero,3058b80 <alt_iic_isr_register+0xe8>
 3058ad4:	0005303a 	rdctl	r2,status
 3058ad8:	e0bffe15 	stw	r2,-8(fp)
 3058adc:	e0fffe17 	ldw	r3,-8(fp)
 3058ae0:	00bfff84 	movi	r2,-2
 3058ae4:	1884703a 	and	r2,r3,r2
 3058ae8:	1001703a 	wrctl	status,r2
 3058aec:	e0bffe17 	ldw	r2,-8(fp)
 3058af0:	e0bffd15 	stw	r2,-12(fp)
 3058af4:	e0bffd17 	ldw	r2,-12(fp)
 3058af8:	e0bffc15 	stw	r2,-16(fp)
 3058afc:	00c0c1b4 	movhi	r3,774
 3058b00:	18feb804 	addi	r3,r3,-1312
 3058b04:	e0bffb17 	ldw	r2,-20(fp)
 3058b08:	10800224 	muli	r2,r2,8
 3058b0c:	10c7883a 	add	r3,r2,r3
 3058b10:	e0bff817 	ldw	r2,-32(fp)
 3058b14:	18800015 	stw	r2,0(r3)
 3058b18:	00c0c1b4 	movhi	r3,774
 3058b1c:	18feb804 	addi	r3,r3,-1312
 3058b20:	e0bffb17 	ldw	r2,-20(fp)
 3058b24:	10800224 	muli	r2,r2,8
 3058b28:	10c5883a 	add	r2,r2,r3
 3058b2c:	10c00104 	addi	r3,r2,4
 3058b30:	e0bff917 	ldw	r2,-28(fp)
 3058b34:	18800015 	stw	r2,0(r3)
 3058b38:	e0bff817 	ldw	r2,-32(fp)
 3058b3c:	1005003a 	cmpeq	r2,r2,zero
 3058b40:	1000051e 	bne	r2,zero,3058b58 <alt_iic_isr_register+0xc0>
 3058b44:	e13ff617 	ldw	r4,-40(fp)
 3058b48:	e17ffb17 	ldw	r5,-20(fp)
 3058b4c:	30589440 	call	3058944 <alt_ic_irq_enable>
 3058b50:	e0bfff15 	stw	r2,-4(fp)
 3058b54:	00000406 	br	3058b68 <alt_iic_isr_register+0xd0>
 3058b58:	e13ff617 	ldw	r4,-40(fp)
 3058b5c:	e17ffb17 	ldw	r5,-20(fp)
 3058b60:	30589cc0 	call	30589cc <alt_ic_irq_disable>
 3058b64:	e0bfff15 	stw	r2,-4(fp)
 3058b68:	e0bfff17 	ldw	r2,-4(fp)
 3058b6c:	e0bffa15 	stw	r2,-24(fp)
 3058b70:	e0bffc17 	ldw	r2,-16(fp)
 3058b74:	e0bffe15 	stw	r2,-8(fp)
 3058b78:	e0bffe17 	ldw	r2,-8(fp)
 3058b7c:	1001703a 	wrctl	status,r2
 3058b80:	e0bffa17 	ldw	r2,-24(fp)
 3058b84:	dfc00b17 	ldw	ra,44(sp)
 3058b88:	df000a17 	ldw	fp,40(sp)
 3058b8c:	dec00c04 	addi	sp,sp,48
 3058b90:	f800283a 	ret

03058b94 <alt_open_fd>:
 3058b94:	defff904 	addi	sp,sp,-28
 3058b98:	dfc00615 	stw	ra,24(sp)
 3058b9c:	df000515 	stw	fp,20(sp)
 3058ba0:	df000504 	addi	fp,sp,20
 3058ba4:	e13ffb15 	stw	r4,-20(fp)
 3058ba8:	e17ffc15 	stw	r5,-16(fp)
 3058bac:	e1bffd15 	stw	r6,-12(fp)
 3058bb0:	e1fffe15 	stw	r7,-8(fp)
 3058bb4:	e13ffc17 	ldw	r4,-16(fp)
 3058bb8:	e17ffd17 	ldw	r5,-12(fp)
 3058bbc:	e1bffe17 	ldw	r6,-8(fp)
 3058bc0:	3053a600 	call	3053a60 <open>
 3058bc4:	e0bfff15 	stw	r2,-4(fp)
 3058bc8:	e0bfff17 	ldw	r2,-4(fp)
 3058bcc:	1004803a 	cmplt	r2,r2,zero
 3058bd0:	10001c1e 	bne	r2,zero,3058c44 <alt_open_fd+0xb0>
 3058bd4:	e13ffb17 	ldw	r4,-20(fp)
 3058bd8:	00c0c1b4 	movhi	r3,774
 3058bdc:	18ed5e04 	addi	r3,r3,-19080
 3058be0:	e0bfff17 	ldw	r2,-4(fp)
 3058be4:	10800324 	muli	r2,r2,12
 3058be8:	10c5883a 	add	r2,r2,r3
 3058bec:	10800017 	ldw	r2,0(r2)
 3058bf0:	20800015 	stw	r2,0(r4)
 3058bf4:	e13ffb17 	ldw	r4,-20(fp)
 3058bf8:	00c0c1b4 	movhi	r3,774
 3058bfc:	18ed5e04 	addi	r3,r3,-19080
 3058c00:	e0bfff17 	ldw	r2,-4(fp)
 3058c04:	10800324 	muli	r2,r2,12
 3058c08:	10c5883a 	add	r2,r2,r3
 3058c0c:	10800104 	addi	r2,r2,4
 3058c10:	10800017 	ldw	r2,0(r2)
 3058c14:	20800115 	stw	r2,4(r4)
 3058c18:	e13ffb17 	ldw	r4,-20(fp)
 3058c1c:	00c0c1b4 	movhi	r3,774
 3058c20:	18ed5e04 	addi	r3,r3,-19080
 3058c24:	e0bfff17 	ldw	r2,-4(fp)
 3058c28:	10800324 	muli	r2,r2,12
 3058c2c:	10c5883a 	add	r2,r2,r3
 3058c30:	10800204 	addi	r2,r2,8
 3058c34:	10800017 	ldw	r2,0(r2)
 3058c38:	20800215 	stw	r2,8(r4)
 3058c3c:	e13fff17 	ldw	r4,-4(fp)
 3058c40:	3053d900 	call	3053d90 <alt_release_fd>
 3058c44:	dfc00617 	ldw	ra,24(sp)
 3058c48:	df000517 	ldw	fp,20(sp)
 3058c4c:	dec00704 	addi	sp,sp,28
 3058c50:	f800283a 	ret

03058c54 <alt_io_redirect>:
 3058c54:	defffb04 	addi	sp,sp,-20
 3058c58:	dfc00415 	stw	ra,16(sp)
 3058c5c:	df000315 	stw	fp,12(sp)
 3058c60:	df000304 	addi	fp,sp,12
 3058c64:	e13ffd15 	stw	r4,-12(fp)
 3058c68:	e17ffe15 	stw	r5,-8(fp)
 3058c6c:	e1bfff15 	stw	r6,-4(fp)
 3058c70:	0100c1b4 	movhi	r4,774
 3058c74:	212d6104 	addi	r4,r4,-19068
 3058c78:	e17ffd17 	ldw	r5,-12(fp)
 3058c7c:	01800044 	movi	r6,1
 3058c80:	01c07fc4 	movi	r7,511
 3058c84:	3058b940 	call	3058b94 <alt_open_fd>
 3058c88:	0100c1b4 	movhi	r4,774
 3058c8c:	212d5e04 	addi	r4,r4,-19080
 3058c90:	e17ffe17 	ldw	r5,-8(fp)
 3058c94:	000d883a 	mov	r6,zero
 3058c98:	01c07fc4 	movi	r7,511
 3058c9c:	3058b940 	call	3058b94 <alt_open_fd>
 3058ca0:	0100c1b4 	movhi	r4,774
 3058ca4:	212d6404 	addi	r4,r4,-19056
 3058ca8:	e17fff17 	ldw	r5,-4(fp)
 3058cac:	01800044 	movi	r6,1
 3058cb0:	01c07fc4 	movi	r7,511
 3058cb4:	3058b940 	call	3058b94 <alt_open_fd>
 3058cb8:	dfc00417 	ldw	ra,16(sp)
 3058cbc:	df000317 	ldw	fp,12(sp)
 3058cc0:	dec00504 	addi	sp,sp,20
 3058cc4:	f800283a 	ret

03058cc8 <altera_nios2_qsys_irq_init>:
 3058cc8:	deffff04 	addi	sp,sp,-4
 3058ccc:	df000015 	stw	fp,0(sp)
 3058cd0:	d839883a 	mov	fp,sp
 3058cd4:	000170fa 	wrctl	ienable,zero
 3058cd8:	df000017 	ldw	fp,0(sp)
 3058cdc:	dec00104 	addi	sp,sp,4
 3058ce0:	f800283a 	ret

03058ce4 <alt_program_amd>:
 3058ce4:	defff704 	addi	sp,sp,-36
 3058ce8:	dfc00815 	stw	ra,32(sp)
 3058cec:	df000715 	stw	fp,28(sp)
 3058cf0:	df000704 	addi	fp,sp,28
 3058cf4:	e13ffa15 	stw	r4,-24(fp)
 3058cf8:	e17ffb15 	stw	r5,-20(fp)
 3058cfc:	e1bffc15 	stw	r6,-16(fp)
 3058d00:	e1fffd15 	stw	r7,-12(fp)
 3058d04:	e03ffe15 	stw	zero,-8(fp)
 3058d08:	e0bffa17 	ldw	r2,-24(fp)
 3058d0c:	e0bfff15 	stw	r2,-4(fp)
 3058d10:	0080c1b4 	movhi	r2,774
 3058d14:	10a41904 	addi	r2,r2,-28572
 3058d18:	d8800015 	stw	r2,0(sp)
 3058d1c:	e13fff17 	ldw	r4,-4(fp)
 3058d20:	e17ffc17 	ldw	r5,-16(fp)
 3058d24:	e1bffd17 	ldw	r6,-12(fp)
 3058d28:	e1c00217 	ldw	r7,8(fp)
 3058d2c:	30548740 	call	3054874 <alt_flash_program_block>
 3058d30:	e0bffe15 	stw	r2,-8(fp)
 3058d34:	e0bffe17 	ldw	r2,-8(fp)
 3058d38:	dfc00817 	ldw	ra,32(sp)
 3058d3c:	df000717 	ldw	fp,28(sp)
 3058d40:	dec00904 	addi	sp,sp,36
 3058d44:	f800283a 	ret

03058d48 <alt_erase_block_amd>:
 3058d48:	defff804 	addi	sp,sp,-32
 3058d4c:	dfc00715 	stw	ra,28(sp)
 3058d50:	df000615 	stw	fp,24(sp)
 3058d54:	df000604 	addi	fp,sp,24
 3058d58:	e13ffa15 	stw	r4,-24(fp)
 3058d5c:	e17ffb15 	stw	r5,-20(fp)
 3058d60:	e03ffc15 	stw	zero,-16(fp)
 3058d64:	e0bffa17 	ldw	r2,-24(fp)
 3058d68:	e0bffe15 	stw	r2,-8(fp)
 3058d6c:	e0bffe17 	ldw	r2,-8(fp)
 3058d70:	e0fffe17 	ldw	r3,-8(fp)
 3058d74:	10803317 	ldw	r2,204(r2)
 3058d78:	19000a17 	ldw	r4,40(r3)
 3058d7c:	01415544 	movi	r5,1365
 3058d80:	01802a84 	movi	r6,170
 3058d84:	103ee83a 	callr	r2
 3058d88:	e0bffe17 	ldw	r2,-8(fp)
 3058d8c:	e0fffe17 	ldw	r3,-8(fp)
 3058d90:	10803317 	ldw	r2,204(r2)
 3058d94:	19000a17 	ldw	r4,40(r3)
 3058d98:	0140aa84 	movi	r5,682
 3058d9c:	01801544 	movi	r6,85
 3058da0:	103ee83a 	callr	r2
 3058da4:	e0bffe17 	ldw	r2,-8(fp)
 3058da8:	e0fffe17 	ldw	r3,-8(fp)
 3058dac:	10803317 	ldw	r2,204(r2)
 3058db0:	19000a17 	ldw	r4,40(r3)
 3058db4:	01415544 	movi	r5,1365
 3058db8:	01802004 	movi	r6,128
 3058dbc:	103ee83a 	callr	r2
 3058dc0:	e0bffe17 	ldw	r2,-8(fp)
 3058dc4:	e0fffe17 	ldw	r3,-8(fp)
 3058dc8:	10803317 	ldw	r2,204(r2)
 3058dcc:	19000a17 	ldw	r4,40(r3)
 3058dd0:	01415544 	movi	r5,1365
 3058dd4:	01802a84 	movi	r6,170
 3058dd8:	103ee83a 	callr	r2
 3058ddc:	e0bffe17 	ldw	r2,-8(fp)
 3058de0:	e0fffe17 	ldw	r3,-8(fp)
 3058de4:	10803317 	ldw	r2,204(r2)
 3058de8:	19000a17 	ldw	r4,40(r3)
 3058dec:	0140aa84 	movi	r5,682
 3058df0:	01801544 	movi	r6,85
 3058df4:	103ee83a 	callr	r2
 3058df8:	e17ffe17 	ldw	r5,-8(fp)
 3058dfc:	e0bffe17 	ldw	r2,-8(fp)
 3058e00:	10c00a17 	ldw	r3,40(r2)
 3058e04:	e0bffb17 	ldw	r2,-20(fp)
 3058e08:	1889883a 	add	r4,r3,r2
 3058e0c:	28803517 	ldw	r2,212(r5)
 3058e10:	01400c04 	movi	r5,48
 3058e14:	103ee83a 	callr	r2
 3058e18:	0109c404 	movi	r4,10000
 3058e1c:	30540480 	call	3054048 <usleep>
 3058e20:	00800c84 	movi	r2,50
 3058e24:	e0bffd15 	stw	r2,-12(fp)
 3058e28:	e0bffe17 	ldw	r2,-8(fp)
 3058e2c:	10c00a17 	ldw	r3,40(r2)
 3058e30:	e0bffb17 	ldw	r2,-20(fp)
 3058e34:	1885883a 	add	r2,r3,r2
 3058e38:	10800023 	ldbuio	r2,0(r2)
 3058e3c:	e0bfff05 	stb	r2,-4(fp)
 3058e40:	0100fa04 	movi	r4,1000
 3058e44:	30540480 	call	3054048 <usleep>
 3058e48:	e0bffd17 	ldw	r2,-12(fp)
 3058e4c:	10bfffc4 	addi	r2,r2,-1
 3058e50:	e0bffd15 	stw	r2,-12(fp)
 3058e54:	e0bfff03 	ldbu	r2,-4(fp)
 3058e58:	10803fcc 	andi	r2,r2,255
 3058e5c:	1080020c 	andi	r2,r2,8
 3058e60:	1004c03a 	cmpne	r2,r2,zero
 3058e64:	1000041e 	bne	r2,zero,3058e78 <alt_erase_block_amd+0x130>
 3058e68:	e0bffd17 	ldw	r2,-12(fp)
 3058e6c:	10800050 	cmplti	r2,r2,1
 3058e70:	1000011e 	bne	r2,zero,3058e78 <alt_erase_block_amd+0x130>
 3058e74:	003fec06 	br	3058e28 <alt_erase_block_amd+0xe0>
 3058e78:	e0bffe17 	ldw	r2,-8(fp)
 3058e7c:	10803117 	ldw	r2,196(r2)
 3058e80:	e0bffd15 	stw	r2,-12(fp)
 3058e84:	e0bffd17 	ldw	r2,-12(fp)
 3058e88:	10800050 	cmplti	r2,r2,1
 3058e8c:	1000171e 	bne	r2,zero,3058eec <alt_erase_block_amd+0x1a4>
 3058e90:	e0bffe17 	ldw	r2,-8(fp)
 3058e94:	10c00a17 	ldw	r3,40(r2)
 3058e98:	e0bffb17 	ldw	r2,-20(fp)
 3058e9c:	1885883a 	add	r2,r3,r2
 3058ea0:	10800023 	ldbuio	r2,0(r2)
 3058ea4:	e0bfff05 	stb	r2,-4(fp)
 3058ea8:	e0bfff03 	ldbu	r2,-4(fp)
 3058eac:	10803fcc 	andi	r2,r2,255
 3058eb0:	1080201c 	xori	r2,r2,128
 3058eb4:	10bfe004 	addi	r2,r2,-128
 3058eb8:	1004803a 	cmplt	r2,r2,zero
 3058ebc:	10000b1e 	bne	r2,zero,3058eec <alt_erase_block_amd+0x1a4>
 3058ec0:	e0bfff03 	ldbu	r2,-4(fp)
 3058ec4:	10803fcc 	andi	r2,r2,255
 3058ec8:	1080080c 	andi	r2,r2,32
 3058ecc:	1004c03a 	cmpne	r2,r2,zero
 3058ed0:	1000061e 	bne	r2,zero,3058eec <alt_erase_block_amd+0x1a4>
 3058ed4:	0100fa04 	movi	r4,1000
 3058ed8:	30540480 	call	3054048 <usleep>
 3058edc:	e0bffd17 	ldw	r2,-12(fp)
 3058ee0:	10bf0604 	addi	r2,r2,-1000
 3058ee4:	e0bffd15 	stw	r2,-12(fp)
 3058ee8:	003fe606 	br	3058e84 <alt_erase_block_amd+0x13c>
 3058eec:	e0bffd17 	ldw	r2,-12(fp)
 3058ef0:	10800048 	cmpgei	r2,r2,1
 3058ef4:	1000031e 	bne	r2,zero,3058f04 <alt_erase_block_amd+0x1bc>
 3058ef8:	00bfe304 	movi	r2,-116
 3058efc:	e0bffc15 	stw	r2,-16(fp)
 3058f00:	00000e06 	br	3058f3c <alt_erase_block_amd+0x1f4>
 3058f04:	e0bffe17 	ldw	r2,-8(fp)
 3058f08:	10c00a17 	ldw	r3,40(r2)
 3058f0c:	e0bffb17 	ldw	r2,-20(fp)
 3058f10:	1885883a 	add	r2,r3,r2
 3058f14:	10800023 	ldbuio	r2,0(r2)
 3058f18:	e0bfff05 	stb	r2,-4(fp)
 3058f1c:	e0bfff03 	ldbu	r2,-4(fp)
 3058f20:	10803fcc 	andi	r2,r2,255
 3058f24:	1080201c 	xori	r2,r2,128
 3058f28:	10bfe004 	addi	r2,r2,-128
 3058f2c:	1004803a 	cmplt	r2,r2,zero
 3058f30:	1000021e 	bne	r2,zero,3058f3c <alt_erase_block_amd+0x1f4>
 3058f34:	00bffec4 	movi	r2,-5
 3058f38:	e0bffc15 	stw	r2,-16(fp)
 3058f3c:	e0bffc17 	ldw	r2,-16(fp)
 3058f40:	dfc00717 	ldw	ra,28(sp)
 3058f44:	df000617 	ldw	fp,24(sp)
 3058f48:	dec00804 	addi	sp,sp,32
 3058f4c:	f800283a 	ret

03058f50 <alt_wait_for_command_to_complete_amd>:
 3058f50:	defff904 	addi	sp,sp,-28
 3058f54:	dfc00615 	stw	ra,24(sp)
 3058f58:	df000515 	stw	fp,20(sp)
 3058f5c:	df000504 	addi	fp,sp,20
 3058f60:	e13ffb15 	stw	r4,-20(fp)
 3058f64:	e17ffc15 	stw	r5,-16(fp)
 3058f68:	e1bffd05 	stb	r6,-12(fp)
 3058f6c:	e0bffb17 	ldw	r2,-20(fp)
 3058f70:	10803017 	ldw	r2,192(r2)
 3058f74:	10801924 	muli	r2,r2,100
 3058f78:	e0bffe15 	stw	r2,-8(fp)
 3058f7c:	e03fff15 	stw	zero,-4(fp)
 3058f80:	e0bffb17 	ldw	r2,-20(fp)
 3058f84:	10c00a17 	ldw	r3,40(r2)
 3058f88:	e0bffc17 	ldw	r2,-16(fp)
 3058f8c:	1885883a 	add	r2,r3,r2
 3058f90:	10800023 	ldbuio	r2,0(r2)
 3058f94:	e0bffd45 	stb	r2,-11(fp)
 3058f98:	e0bffe17 	ldw	r2,-8(fp)
 3058f9c:	10800050 	cmplti	r2,r2,1
 3058fa0:	1000171e 	bne	r2,zero,3059000 <alt_wait_for_command_to_complete_amd+0xb0>
 3058fa4:	e0bffd43 	ldbu	r2,-11(fp)
 3058fa8:	10803fcc 	andi	r2,r2,255
 3058fac:	10c0200c 	andi	r3,r2,128
 3058fb0:	e0bffd03 	ldbu	r2,-12(fp)
 3058fb4:	1080200c 	andi	r2,r2,128
 3058fb8:	18801126 	beq	r3,r2,3059000 <alt_wait_for_command_to_complete_amd+0xb0>
 3058fbc:	e0bffd43 	ldbu	r2,-11(fp)
 3058fc0:	10803fcc 	andi	r2,r2,255
 3058fc4:	1080080c 	andi	r2,r2,32
 3058fc8:	1004c03a 	cmpne	r2,r2,zero
 3058fcc:	10000c1e 	bne	r2,zero,3059000 <alt_wait_for_command_to_complete_amd+0xb0>
 3058fd0:	01000044 	movi	r4,1
 3058fd4:	30540480 	call	3054048 <usleep>
 3058fd8:	e0bffe17 	ldw	r2,-8(fp)
 3058fdc:	10bfffc4 	addi	r2,r2,-1
 3058fe0:	e0bffe15 	stw	r2,-8(fp)
 3058fe4:	e0bffb17 	ldw	r2,-20(fp)
 3058fe8:	10c00a17 	ldw	r3,40(r2)
 3058fec:	e0bffc17 	ldw	r2,-16(fp)
 3058ff0:	1885883a 	add	r2,r3,r2
 3058ff4:	10800023 	ldbuio	r2,0(r2)
 3058ff8:	e0bffd45 	stb	r2,-11(fp)
 3058ffc:	003fe606 	br	3058f98 <alt_wait_for_command_to_complete_amd+0x48>
 3059000:	e0bffe17 	ldw	r2,-8(fp)
 3059004:	1004c03a 	cmpne	r2,r2,zero
 3059008:	1000031e 	bne	r2,zero,3059018 <alt_wait_for_command_to_complete_amd+0xc8>
 305900c:	00bfe304 	movi	r2,-116
 3059010:	e0bfff15 	stw	r2,-4(fp)
 3059014:	00000e06 	br	3059050 <alt_wait_for_command_to_complete_amd+0x100>
 3059018:	e0bffb17 	ldw	r2,-20(fp)
 305901c:	10c00a17 	ldw	r3,40(r2)
 3059020:	e0bffc17 	ldw	r2,-16(fp)
 3059024:	1885883a 	add	r2,r3,r2
 3059028:	10800023 	ldbuio	r2,0(r2)
 305902c:	e0bffd45 	stb	r2,-11(fp)
 3059030:	e0bffd43 	ldbu	r2,-11(fp)
 3059034:	10803fcc 	andi	r2,r2,255
 3059038:	10c0200c 	andi	r3,r2,128
 305903c:	e0bffd03 	ldbu	r2,-12(fp)
 3059040:	1080200c 	andi	r2,r2,128
 3059044:	18800226 	beq	r3,r2,3059050 <alt_wait_for_command_to_complete_amd+0x100>
 3059048:	00bffec4 	movi	r2,-5
 305904c:	e0bfff15 	stw	r2,-4(fp)
 3059050:	e0bfff17 	ldw	r2,-4(fp)
 3059054:	dfc00617 	ldw	ra,24(sp)
 3059058:	df000517 	ldw	fp,20(sp)
 305905c:	dec00704 	addi	sp,sp,28
 3059060:	f800283a 	ret

03059064 <alt_write_word_amd>:
 3059064:	defff904 	addi	sp,sp,-28
 3059068:	dfc00615 	stw	ra,24(sp)
 305906c:	df000515 	stw	fp,20(sp)
 3059070:	df000504 	addi	fp,sp,20
 3059074:	e13ffb15 	stw	r4,-20(fp)
 3059078:	e17ffc15 	stw	r5,-16(fp)
 305907c:	e1bffd15 	stw	r6,-12(fp)
 3059080:	e03ffe15 	stw	zero,-8(fp)
 3059084:	e0bffb17 	ldw	r2,-20(fp)
 3059088:	e0fffb17 	ldw	r3,-20(fp)
 305908c:	10803317 	ldw	r2,204(r2)
 3059090:	19000a17 	ldw	r4,40(r3)
 3059094:	01415544 	movi	r5,1365
 3059098:	01802a84 	movi	r6,170
 305909c:	103ee83a 	callr	r2
 30590a0:	e0bffb17 	ldw	r2,-20(fp)
 30590a4:	e0fffb17 	ldw	r3,-20(fp)
 30590a8:	10803317 	ldw	r2,204(r2)
 30590ac:	19000a17 	ldw	r4,40(r3)
 30590b0:	0140aa84 	movi	r5,682
 30590b4:	01801544 	movi	r6,85
 30590b8:	103ee83a 	callr	r2
 30590bc:	e0bffb17 	ldw	r2,-20(fp)
 30590c0:	e0fffb17 	ldw	r3,-20(fp)
 30590c4:	10803317 	ldw	r2,204(r2)
 30590c8:	19000a17 	ldw	r4,40(r3)
 30590cc:	01415544 	movi	r5,1365
 30590d0:	01802804 	movi	r6,160
 30590d4:	103ee83a 	callr	r2
 30590d8:	e0bffd17 	ldw	r2,-12(fp)
 30590dc:	10800003 	ldbu	r2,0(r2)
 30590e0:	e0bfff05 	stb	r2,-4(fp)
 30590e4:	e13ffb17 	ldw	r4,-20(fp)
 30590e8:	e17ffc17 	ldw	r5,-16(fp)
 30590ec:	e1bffd17 	ldw	r6,-12(fp)
 30590f0:	30547380 	call	3054738 <alt_write_value_to_flash>
 30590f4:	e1bfff03 	ldbu	r6,-4(fp)
 30590f8:	e13ffb17 	ldw	r4,-20(fp)
 30590fc:	e17ffc17 	ldw	r5,-16(fp)
 3059100:	3058f500 	call	3058f50 <alt_wait_for_command_to_complete_amd>
 3059104:	e0bffe15 	stw	r2,-8(fp)
 3059108:	e0bffe17 	ldw	r2,-8(fp)
 305910c:	dfc00617 	ldw	ra,24(sp)
 3059110:	df000517 	ldw	fp,20(sp)
 3059114:	dec00704 	addi	sp,sp,28
 3059118:	f800283a 	ret

0305911c <alt_program_intel>:
 305911c:	defff704 	addi	sp,sp,-36
 3059120:	dfc00815 	stw	ra,32(sp)
 3059124:	df000715 	stw	fp,28(sp)
 3059128:	df000704 	addi	fp,sp,28
 305912c:	e13ffa15 	stw	r4,-24(fp)
 3059130:	e17ffb15 	stw	r5,-20(fp)
 3059134:	e1bffc15 	stw	r6,-16(fp)
 3059138:	e1fffd15 	stw	r7,-12(fp)
 305913c:	e03ffe15 	stw	zero,-8(fp)
 3059140:	e0bffa17 	ldw	r2,-24(fp)
 3059144:	e0bfff15 	stw	r2,-4(fp)
 3059148:	e13fff17 	ldw	r4,-4(fp)
 305914c:	e17ffb17 	ldw	r5,-20(fp)
 3059150:	30593000 	call	3059300 <alt_unlock_block_intel>
 3059154:	e0bffe15 	stw	r2,-8(fp)
 3059158:	e0bffe17 	ldw	r2,-8(fp)
 305915c:	1004c03a 	cmpne	r2,r2,zero
 3059160:	1000091e 	bne	r2,zero,3059188 <alt_program_intel+0x6c>
 3059164:	0080c1b4 	movhi	r2,774
 3059168:	10a51a04 	addi	r2,r2,-27544
 305916c:	d8800015 	stw	r2,0(sp)
 3059170:	e13fff17 	ldw	r4,-4(fp)
 3059174:	e17ffc17 	ldw	r5,-16(fp)
 3059178:	e1bffd17 	ldw	r6,-12(fp)
 305917c:	e1c00217 	ldw	r7,8(fp)
 3059180:	30548740 	call	3054874 <alt_flash_program_block>
 3059184:	e0bffe15 	stw	r2,-8(fp)
 3059188:	e0bffe17 	ldw	r2,-8(fp)
 305918c:	dfc00817 	ldw	ra,32(sp)
 3059190:	df000717 	ldw	fp,28(sp)
 3059194:	dec00904 	addi	sp,sp,36
 3059198:	f800283a 	ret

0305919c <alt_erase_block_intel>:
 305919c:	defff804 	addi	sp,sp,-32
 30591a0:	dfc00715 	stw	ra,28(sp)
 30591a4:	df000615 	stw	fp,24(sp)
 30591a8:	df000604 	addi	fp,sp,24
 30591ac:	e13ffa15 	stw	r4,-24(fp)
 30591b0:	e17ffb15 	stw	r5,-20(fp)
 30591b4:	e03ffc15 	stw	zero,-16(fp)
 30591b8:	e0bffa17 	ldw	r2,-24(fp)
 30591bc:	e0bffd15 	stw	r2,-12(fp)
 30591c0:	e0bffd17 	ldw	r2,-12(fp)
 30591c4:	10803117 	ldw	r2,196(r2)
 30591c8:	e0bfff15 	stw	r2,-4(fp)
 30591cc:	e13ffd17 	ldw	r4,-12(fp)
 30591d0:	e17ffb17 	ldw	r5,-20(fp)
 30591d4:	30593000 	call	3059300 <alt_unlock_block_intel>
 30591d8:	e0bffc15 	stw	r2,-16(fp)
 30591dc:	e0bffc17 	ldw	r2,-16(fp)
 30591e0:	1004c03a 	cmpne	r2,r2,zero
 30591e4:	1000411e 	bne	r2,zero,30592ec <alt_erase_block_intel+0x150>
 30591e8:	e17ffd17 	ldw	r5,-12(fp)
 30591ec:	e0bffd17 	ldw	r2,-12(fp)
 30591f0:	10c00a17 	ldw	r3,40(r2)
 30591f4:	e0bffb17 	ldw	r2,-20(fp)
 30591f8:	1889883a 	add	r4,r3,r2
 30591fc:	28803517 	ldw	r2,212(r5)
 3059200:	01400804 	movi	r5,32
 3059204:	103ee83a 	callr	r2
 3059208:	e17ffd17 	ldw	r5,-12(fp)
 305920c:	e0bffd17 	ldw	r2,-12(fp)
 3059210:	10c00a17 	ldw	r3,40(r2)
 3059214:	e0bffb17 	ldw	r2,-20(fp)
 3059218:	1889883a 	add	r4,r3,r2
 305921c:	28803517 	ldw	r2,212(r5)
 3059220:	01403404 	movi	r5,208
 3059224:	103ee83a 	callr	r2
 3059228:	e0bffd17 	ldw	r2,-12(fp)
 305922c:	10c00a17 	ldw	r3,40(r2)
 3059230:	e0bffb17 	ldw	r2,-20(fp)
 3059234:	1885883a 	add	r2,r3,r2
 3059238:	10800023 	ldbuio	r2,0(r2)
 305923c:	e0bffe05 	stb	r2,-8(fp)
 3059240:	e0bffe03 	ldbu	r2,-8(fp)
 3059244:	10803fcc 	andi	r2,r2,255
 3059248:	1080201c 	xori	r2,r2,128
 305924c:	10bfe004 	addi	r2,r2,-128
 3059250:	1004403a 	cmpge	r2,r2,zero
 3059254:	1000011e 	bne	r2,zero,305925c <alt_erase_block_intel+0xc0>
 3059258:	00000906 	br	3059280 <alt_erase_block_intel+0xe4>
 305925c:	0100fa04 	movi	r4,1000
 3059260:	30540480 	call	3054048 <usleep>
 3059264:	e0bfff17 	ldw	r2,-4(fp)
 3059268:	10bf0604 	addi	r2,r2,-1000
 305926c:	e0bfff15 	stw	r2,-4(fp)
 3059270:	e0bfff17 	ldw	r2,-4(fp)
 3059274:	10800050 	cmplti	r2,r2,1
 3059278:	1000011e 	bne	r2,zero,3059280 <alt_erase_block_intel+0xe4>
 305927c:	003fea06 	br	3059228 <alt_erase_block_intel+0x8c>
 3059280:	e0bfff17 	ldw	r2,-4(fp)
 3059284:	10800048 	cmpgei	r2,r2,1
 3059288:	1000031e 	bne	r2,zero,3059298 <alt_erase_block_intel+0xfc>
 305928c:	00bfe304 	movi	r2,-116
 3059290:	e0bffc15 	stw	r2,-16(fp)
 3059294:	00000d06 	br	30592cc <alt_erase_block_intel+0x130>
 3059298:	e0bffe03 	ldbu	r2,-8(fp)
 305929c:	10803fcc 	andi	r2,r2,255
 30592a0:	10801fcc 	andi	r2,r2,127
 30592a4:	1005003a 	cmpeq	r2,r2,zero
 30592a8:	1000081e 	bne	r2,zero,30592cc <alt_erase_block_intel+0x130>
 30592ac:	00bffec4 	movi	r2,-5
 30592b0:	e0bffc15 	stw	r2,-16(fp)
 30592b4:	e0bffd17 	ldw	r2,-12(fp)
 30592b8:	10c00a17 	ldw	r3,40(r2)
 30592bc:	e0bffb17 	ldw	r2,-20(fp)
 30592c0:	1885883a 	add	r2,r3,r2
 30592c4:	10800023 	ldbuio	r2,0(r2)
 30592c8:	e0bffe05 	stb	r2,-8(fp)
 30592cc:	e17ffd17 	ldw	r5,-12(fp)
 30592d0:	e0bffd17 	ldw	r2,-12(fp)
 30592d4:	10c00a17 	ldw	r3,40(r2)
 30592d8:	e0bffb17 	ldw	r2,-20(fp)
 30592dc:	1889883a 	add	r4,r3,r2
 30592e0:	28803517 	ldw	r2,212(r5)
 30592e4:	01403fc4 	movi	r5,255
 30592e8:	103ee83a 	callr	r2
 30592ec:	e0bffc17 	ldw	r2,-16(fp)
 30592f0:	dfc00717 	ldw	ra,28(sp)
 30592f4:	df000617 	ldw	fp,24(sp)
 30592f8:	dec00804 	addi	sp,sp,32
 30592fc:	f800283a 	ret

03059300 <alt_unlock_block_intel>:
 3059300:	defff904 	addi	sp,sp,-28
 3059304:	dfc00615 	stw	ra,24(sp)
 3059308:	df000515 	stw	fp,20(sp)
 305930c:	df000504 	addi	fp,sp,20
 3059310:	e13ffb15 	stw	r4,-20(fp)
 3059314:	e17ffc15 	stw	r5,-16(fp)
 3059318:	e03ffe15 	stw	zero,-8(fp)
 305931c:	e0bffb17 	ldw	r2,-20(fp)
 3059320:	10803017 	ldw	r2,192(r2)
 3059324:	10801924 	muli	r2,r2,100
 3059328:	e0bfff15 	stw	r2,-4(fp)
 305932c:	e17ffb17 	ldw	r5,-20(fp)
 3059330:	e0bffb17 	ldw	r2,-20(fp)
 3059334:	10c00a17 	ldw	r3,40(r2)
 3059338:	e0bffc17 	ldw	r2,-16(fp)
 305933c:	1889883a 	add	r4,r3,r2
 3059340:	28803517 	ldw	r2,212(r5)
 3059344:	01402404 	movi	r5,144
 3059348:	103ee83a 	callr	r2
 305934c:	e0bffb17 	ldw	r2,-20(fp)
 3059350:	10c00a17 	ldw	r3,40(r2)
 3059354:	e0bffc17 	ldw	r2,-16(fp)
 3059358:	1885883a 	add	r2,r3,r2
 305935c:	10800104 	addi	r2,r2,4
 3059360:	10800023 	ldbuio	r2,0(r2)
 3059364:	e0bffd05 	stb	r2,-12(fp)
 3059368:	e0bffd03 	ldbu	r2,-12(fp)
 305936c:	1080004c 	andi	r2,r2,1
 3059370:	1005003a 	cmpeq	r2,r2,zero
 3059374:	10002f1e 	bne	r2,zero,3059434 <alt_unlock_block_intel+0x134>
 3059378:	e17ffb17 	ldw	r5,-20(fp)
 305937c:	e0bffb17 	ldw	r2,-20(fp)
 3059380:	10c00a17 	ldw	r3,40(r2)
 3059384:	e0bffc17 	ldw	r2,-16(fp)
 3059388:	1889883a 	add	r4,r3,r2
 305938c:	28803517 	ldw	r2,212(r5)
 3059390:	01401804 	movi	r5,96
 3059394:	103ee83a 	callr	r2
 3059398:	e17ffb17 	ldw	r5,-20(fp)
 305939c:	e0bffb17 	ldw	r2,-20(fp)
 30593a0:	10c00a17 	ldw	r3,40(r2)
 30593a4:	e0bffc17 	ldw	r2,-16(fp)
 30593a8:	1889883a 	add	r4,r3,r2
 30593ac:	28803517 	ldw	r2,212(r5)
 30593b0:	01403404 	movi	r5,208
 30593b4:	103ee83a 	callr	r2
 30593b8:	e0bffb17 	ldw	r2,-20(fp)
 30593bc:	10c00a17 	ldw	r3,40(r2)
 30593c0:	e0bffc17 	ldw	r2,-16(fp)
 30593c4:	1885883a 	add	r2,r3,r2
 30593c8:	10800023 	ldbuio	r2,0(r2)
 30593cc:	e0bffd45 	stb	r2,-11(fp)
 30593d0:	e0bffd47 	ldb	r2,-11(fp)
 30593d4:	1004403a 	cmpge	r2,r2,zero
 30593d8:	1000011e 	bne	r2,zero,30593e0 <alt_unlock_block_intel+0xe0>
 30593dc:	00000906 	br	3059404 <alt_unlock_block_intel+0x104>
 30593e0:	e0bfff17 	ldw	r2,-4(fp)
 30593e4:	10bfffc4 	addi	r2,r2,-1
 30593e8:	e0bfff15 	stw	r2,-4(fp)
 30593ec:	01000044 	movi	r4,1
 30593f0:	30540480 	call	3054048 <usleep>
 30593f4:	e0bfff17 	ldw	r2,-4(fp)
 30593f8:	10800050 	cmplti	r2,r2,1
 30593fc:	1000011e 	bne	r2,zero,3059404 <alt_unlock_block_intel+0x104>
 3059400:	003fed06 	br	30593b8 <alt_unlock_block_intel+0xb8>
 3059404:	e0bfff17 	ldw	r2,-4(fp)
 3059408:	1004c03a 	cmpne	r2,r2,zero
 305940c:	1000031e 	bne	r2,zero,305941c <alt_unlock_block_intel+0x11c>
 3059410:	00bfe304 	movi	r2,-116
 3059414:	e0bffe15 	stw	r2,-8(fp)
 3059418:	00000606 	br	3059434 <alt_unlock_block_intel+0x134>
 305941c:	e0bffd43 	ldbu	r2,-11(fp)
 3059420:	10801fcc 	andi	r2,r2,127
 3059424:	1005003a 	cmpeq	r2,r2,zero
 3059428:	1000021e 	bne	r2,zero,3059434 <alt_unlock_block_intel+0x134>
 305942c:	00bffec4 	movi	r2,-5
 3059430:	e0bffe15 	stw	r2,-8(fp)
 3059434:	e17ffb17 	ldw	r5,-20(fp)
 3059438:	e0bffb17 	ldw	r2,-20(fp)
 305943c:	10c00a17 	ldw	r3,40(r2)
 3059440:	e0bffc17 	ldw	r2,-16(fp)
 3059444:	1889883a 	add	r4,r3,r2
 3059448:	28803517 	ldw	r2,212(r5)
 305944c:	01403fc4 	movi	r5,255
 3059450:	103ee83a 	callr	r2
 3059454:	e0bffe17 	ldw	r2,-8(fp)
 3059458:	dfc00617 	ldw	ra,24(sp)
 305945c:	df000517 	ldw	fp,20(sp)
 3059460:	dec00704 	addi	sp,sp,28
 3059464:	f800283a 	ret

03059468 <alt_write_word_intel>:
 3059468:	defff904 	addi	sp,sp,-28
 305946c:	dfc00615 	stw	ra,24(sp)
 3059470:	df000515 	stw	fp,20(sp)
 3059474:	df000504 	addi	fp,sp,20
 3059478:	e13ffb15 	stw	r4,-20(fp)
 305947c:	e17ffc15 	stw	r5,-16(fp)
 3059480:	e1bffd15 	stw	r6,-12(fp)
 3059484:	e03ffe15 	stw	zero,-8(fp)
 3059488:	e17ffb17 	ldw	r5,-20(fp)
 305948c:	e0bffb17 	ldw	r2,-20(fp)
 3059490:	10c00a17 	ldw	r3,40(r2)
 3059494:	e0bffc17 	ldw	r2,-16(fp)
 3059498:	1889883a 	add	r4,r3,r2
 305949c:	28803517 	ldw	r2,212(r5)
 30594a0:	01401004 	movi	r5,64
 30594a4:	103ee83a 	callr	r2
 30594a8:	e13ffb17 	ldw	r4,-20(fp)
 30594ac:	e17ffc17 	ldw	r5,-16(fp)
 30594b0:	e1bffd17 	ldw	r6,-12(fp)
 30594b4:	30547380 	call	3054738 <alt_write_value_to_flash>
 30594b8:	e0bffb17 	ldw	r2,-20(fp)
 30594bc:	10c00a17 	ldw	r3,40(r2)
 30594c0:	e0bffc17 	ldw	r2,-16(fp)
 30594c4:	1885883a 	add	r2,r3,r2
 30594c8:	10800023 	ldbuio	r2,0(r2)
 30594cc:	e0bfff05 	stb	r2,-4(fp)
 30594d0:	e0bfff07 	ldb	r2,-4(fp)
 30594d4:	1004803a 	cmplt	r2,r2,zero
 30594d8:	1000011e 	bne	r2,zero,30594e0 <alt_write_word_intel+0x78>
 30594dc:	003ff606 	br	30594b8 <alt_write_word_intel+0x50>
 30594e0:	e0bfff03 	ldbu	r2,-4(fp)
 30594e4:	10801fcc 	andi	r2,r2,127
 30594e8:	1005003a 	cmpeq	r2,r2,zero
 30594ec:	1000021e 	bne	r2,zero,30594f8 <alt_write_word_intel+0x90>
 30594f0:	00bffec4 	movi	r2,-5
 30594f4:	e0bffe15 	stw	r2,-8(fp)
 30594f8:	e17ffb17 	ldw	r5,-20(fp)
 30594fc:	e0bffb17 	ldw	r2,-20(fp)
 3059500:	10c00a17 	ldw	r3,40(r2)
 3059504:	e0bffc17 	ldw	r2,-16(fp)
 3059508:	1889883a 	add	r4,r3,r2
 305950c:	28803517 	ldw	r2,212(r5)
 3059510:	01403fc4 	movi	r5,255
 3059514:	103ee83a 	callr	r2
 3059518:	e0bffe17 	ldw	r2,-8(fp)
 305951c:	dfc00617 	ldw	ra,24(sp)
 3059520:	df000517 	ldw	fp,20(sp)
 3059524:	dec00704 	addi	sp,sp,28
 3059528:	f800283a 	ret

0305952c <alt_icache_flush>:
 305952c:	defffb04 	addi	sp,sp,-20
 3059530:	df000415 	stw	fp,16(sp)
 3059534:	df000404 	addi	fp,sp,16
 3059538:	e13ffc15 	stw	r4,-16(fp)
 305953c:	e17ffd15 	stw	r5,-12(fp)
 3059540:	e0bffd17 	ldw	r2,-12(fp)
 3059544:	10840070 	cmpltui	r2,r2,4097
 3059548:	1000021e 	bne	r2,zero,3059554 <alt_icache_flush+0x28>
 305954c:	00840004 	movi	r2,4096
 3059550:	e0bffd15 	stw	r2,-12(fp)
 3059554:	e0fffc17 	ldw	r3,-16(fp)
 3059558:	e0bffd17 	ldw	r2,-12(fp)
 305955c:	1885883a 	add	r2,r3,r2
 3059560:	e0bfff15 	stw	r2,-4(fp)
 3059564:	e0bffc17 	ldw	r2,-16(fp)
 3059568:	e0bffe15 	stw	r2,-8(fp)
 305956c:	e0fffe17 	ldw	r3,-8(fp)
 3059570:	e0bfff17 	ldw	r2,-4(fp)
 3059574:	1880062e 	bgeu	r3,r2,3059590 <alt_icache_flush+0x64>
 3059578:	e0bffe17 	ldw	r2,-8(fp)
 305957c:	1000603a 	flushi	r2
 3059580:	e0bffe17 	ldw	r2,-8(fp)
 3059584:	10800804 	addi	r2,r2,32
 3059588:	e0bffe15 	stw	r2,-8(fp)
 305958c:	003ff706 	br	305956c <alt_icache_flush+0x40>
 3059590:	e0bffc17 	ldw	r2,-16(fp)
 3059594:	108007cc 	andi	r2,r2,31
 3059598:	1005003a 	cmpeq	r2,r2,zero
 305959c:	1000021e 	bne	r2,zero,30595a8 <alt_icache_flush+0x7c>
 30595a0:	e0bffe17 	ldw	r2,-8(fp)
 30595a4:	1000603a 	flushi	r2
 30595a8:	0000203a 	flushp
 30595ac:	df000417 	ldw	fp,16(sp)
 30595b0:	dec00504 	addi	sp,sp,20
 30595b4:	f800283a 	ret

030595b8 <atexit>:
 30595b8:	200b883a 	mov	r5,r4
 30595bc:	000d883a 	mov	r6,zero
 30595c0:	0009883a 	mov	r4,zero
 30595c4:	000f883a 	mov	r7,zero
 30595c8:	30596781 	jmpi	3059678 <__register_exitproc>

030595cc <exit>:
 30595cc:	defffe04 	addi	sp,sp,-8
 30595d0:	000b883a 	mov	r5,zero
 30595d4:	dc000015 	stw	r16,0(sp)
 30595d8:	dfc00115 	stw	ra,4(sp)
 30595dc:	2021883a 	mov	r16,r4
 30595e0:	30597b00 	call	30597b0 <__call_exitprocs>
 30595e4:	0080c1b4 	movhi	r2,774
 30595e8:	10b28904 	addi	r2,r2,-13788
 30595ec:	11000017 	ldw	r4,0(r2)
 30595f0:	20800f17 	ldw	r2,60(r4)
 30595f4:	10000126 	beq	r2,zero,30595fc <exit+0x30>
 30595f8:	103ee83a 	callr	r2
 30595fc:	8009883a 	mov	r4,r16
 3059600:	30599940 	call	3059994 <_exit>

03059604 <memcmp>:
 3059604:	00c000c4 	movi	r3,3
 3059608:	1980032e 	bgeu	r3,r6,3059618 <memcmp+0x14>
 305960c:	2144b03a 	or	r2,r4,r5
 3059610:	10c4703a 	and	r2,r2,r3
 3059614:	10000f26 	beq	r2,zero,3059654 <memcmp+0x50>
 3059618:	31ffffc4 	addi	r7,r6,-1
 305961c:	3000061e 	bne	r6,zero,3059638 <memcmp+0x34>
 3059620:	00000a06 	br	305964c <memcmp+0x48>
 3059624:	39ffffc4 	addi	r7,r7,-1
 3059628:	00bfffc4 	movi	r2,-1
 305962c:	21000044 	addi	r4,r4,1
 3059630:	29400044 	addi	r5,r5,1
 3059634:	38800526 	beq	r7,r2,305964c <memcmp+0x48>
 3059638:	20c00003 	ldbu	r3,0(r4)
 305963c:	28800003 	ldbu	r2,0(r5)
 3059640:	18bff826 	beq	r3,r2,3059624 <memcmp+0x20>
 3059644:	1885c83a 	sub	r2,r3,r2
 3059648:	f800283a 	ret
 305964c:	0005883a 	mov	r2,zero
 3059650:	f800283a 	ret
 3059654:	180f883a 	mov	r7,r3
 3059658:	20c00017 	ldw	r3,0(r4)
 305965c:	28800017 	ldw	r2,0(r5)
 3059660:	18bfed1e 	bne	r3,r2,3059618 <memcmp+0x14>
 3059664:	31bfff04 	addi	r6,r6,-4
 3059668:	21000104 	addi	r4,r4,4
 305966c:	29400104 	addi	r5,r5,4
 3059670:	39bff936 	bltu	r7,r6,3059658 <memcmp+0x54>
 3059674:	003fe806 	br	3059618 <memcmp+0x14>

03059678 <__register_exitproc>:
 3059678:	defffa04 	addi	sp,sp,-24
 305967c:	0080c1b4 	movhi	r2,774
 3059680:	10b28904 	addi	r2,r2,-13788
 3059684:	dc000015 	stw	r16,0(sp)
 3059688:	14000017 	ldw	r16,0(r2)
 305968c:	dd000415 	stw	r20,16(sp)
 3059690:	2829883a 	mov	r20,r5
 3059694:	81405217 	ldw	r5,328(r16)
 3059698:	dcc00315 	stw	r19,12(sp)
 305969c:	dc800215 	stw	r18,8(sp)
 30596a0:	dc400115 	stw	r17,4(sp)
 30596a4:	dfc00515 	stw	ra,20(sp)
 30596a8:	2023883a 	mov	r17,r4
 30596ac:	3027883a 	mov	r19,r6
 30596b0:	3825883a 	mov	r18,r7
 30596b4:	28002526 	beq	r5,zero,305974c <__register_exitproc+0xd4>
 30596b8:	29000117 	ldw	r4,4(r5)
 30596bc:	008007c4 	movi	r2,31
 30596c0:	11002716 	blt	r2,r4,3059760 <__register_exitproc+0xe8>
 30596c4:	8800101e 	bne	r17,zero,3059708 <__register_exitproc+0x90>
 30596c8:	2105883a 	add	r2,r4,r4
 30596cc:	1085883a 	add	r2,r2,r2
 30596d0:	20c00044 	addi	r3,r4,1
 30596d4:	1145883a 	add	r2,r2,r5
 30596d8:	0009883a 	mov	r4,zero
 30596dc:	15000215 	stw	r20,8(r2)
 30596e0:	28c00115 	stw	r3,4(r5)
 30596e4:	2005883a 	mov	r2,r4
 30596e8:	dfc00517 	ldw	ra,20(sp)
 30596ec:	dd000417 	ldw	r20,16(sp)
 30596f0:	dcc00317 	ldw	r19,12(sp)
 30596f4:	dc800217 	ldw	r18,8(sp)
 30596f8:	dc400117 	ldw	r17,4(sp)
 30596fc:	dc000017 	ldw	r16,0(sp)
 3059700:	dec00604 	addi	sp,sp,24
 3059704:	f800283a 	ret
 3059708:	29802204 	addi	r6,r5,136
 305970c:	00800044 	movi	r2,1
 3059710:	110e983a 	sll	r7,r2,r4
 3059714:	30c04017 	ldw	r3,256(r6)
 3059718:	2105883a 	add	r2,r4,r4
 305971c:	1085883a 	add	r2,r2,r2
 3059720:	1185883a 	add	r2,r2,r6
 3059724:	19c6b03a 	or	r3,r3,r7
 3059728:	14802015 	stw	r18,128(r2)
 305972c:	14c00015 	stw	r19,0(r2)
 3059730:	00800084 	movi	r2,2
 3059734:	30c04015 	stw	r3,256(r6)
 3059738:	88bfe31e 	bne	r17,r2,30596c8 <__register_exitproc+0x50>
 305973c:	30804117 	ldw	r2,260(r6)
 3059740:	11c4b03a 	or	r2,r2,r7
 3059744:	30804115 	stw	r2,260(r6)
 3059748:	003fdf06 	br	30596c8 <__register_exitproc+0x50>
 305974c:	0080c1b4 	movhi	r2,774
 3059750:	10bef804 	addi	r2,r2,-1056
 3059754:	100b883a 	mov	r5,r2
 3059758:	80805215 	stw	r2,328(r16)
 305975c:	003fd606 	br	30596b8 <__register_exitproc+0x40>
 3059760:	0080c174 	movhi	r2,773
 3059764:	10ad0204 	addi	r2,r2,-19448
 3059768:	1000021e 	bne	r2,zero,3059774 <__register_exitproc+0xfc>
 305976c:	013fffc4 	movi	r4,-1
 3059770:	003fdc06 	br	30596e4 <__register_exitproc+0x6c>
 3059774:	01006404 	movi	r4,400
 3059778:	103ee83a 	callr	r2
 305977c:	1007883a 	mov	r3,r2
 3059780:	103ffa26 	beq	r2,zero,305976c <__register_exitproc+0xf4>
 3059784:	80805217 	ldw	r2,328(r16)
 3059788:	180b883a 	mov	r5,r3
 305978c:	18000115 	stw	zero,4(r3)
 3059790:	18800015 	stw	r2,0(r3)
 3059794:	80c05215 	stw	r3,328(r16)
 3059798:	18006215 	stw	zero,392(r3)
 305979c:	18006315 	stw	zero,396(r3)
 30597a0:	0009883a 	mov	r4,zero
 30597a4:	883fc826 	beq	r17,zero,30596c8 <__register_exitproc+0x50>
 30597a8:	003fd706 	br	3059708 <__register_exitproc+0x90>

030597ac <register_fini>:
 30597ac:	f800283a 	ret

030597b0 <__call_exitprocs>:
 30597b0:	defff404 	addi	sp,sp,-48
 30597b4:	0080c1b4 	movhi	r2,774
 30597b8:	10b28904 	addi	r2,r2,-13788
 30597bc:	df000a15 	stw	fp,40(sp)
 30597c0:	17000017 	ldw	fp,0(r2)
 30597c4:	0080c174 	movhi	r2,773
 30597c8:	10acfd04 	addi	r2,r2,-19468
 30597cc:	1005003a 	cmpeq	r2,r2,zero
 30597d0:	d8800115 	stw	r2,4(sp)
 30597d4:	e0805204 	addi	r2,fp,328
 30597d8:	ddc00915 	stw	r23,36(sp)
 30597dc:	dd400715 	stw	r21,28(sp)
 30597e0:	dd000615 	stw	r20,24(sp)
 30597e4:	dfc00b15 	stw	ra,44(sp)
 30597e8:	dd800815 	stw	r22,32(sp)
 30597ec:	dcc00515 	stw	r19,20(sp)
 30597f0:	dc800415 	stw	r18,16(sp)
 30597f4:	dc400315 	stw	r17,12(sp)
 30597f8:	dc000215 	stw	r16,8(sp)
 30597fc:	282b883a 	mov	r21,r5
 3059800:	202f883a 	mov	r23,r4
 3059804:	d8800015 	stw	r2,0(sp)
 3059808:	2829003a 	cmpeq	r20,r5,zero
 305980c:	e4405217 	ldw	r17,328(fp)
 3059810:	88001026 	beq	r17,zero,3059854 <__call_exitprocs+0xa4>
 3059814:	dd800017 	ldw	r22,0(sp)
 3059818:	88800117 	ldw	r2,4(r17)
 305981c:	8c802204 	addi	r18,r17,136
 3059820:	143fffc4 	addi	r16,r2,-1
 3059824:	80000916 	blt	r16,zero,305984c <__call_exitprocs+0x9c>
 3059828:	a000161e 	bne	r20,zero,3059884 <__call_exitprocs+0xd4>
 305982c:	8409883a 	add	r4,r16,r16
 3059830:	2105883a 	add	r2,r4,r4
 3059834:	1485883a 	add	r2,r2,r18
 3059838:	10c02017 	ldw	r3,128(r2)
 305983c:	a8c01226 	beq	r21,r3,3059888 <__call_exitprocs+0xd8>
 3059840:	843fffc4 	addi	r16,r16,-1
 3059844:	00bfffc4 	movi	r2,-1
 3059848:	80bff71e 	bne	r16,r2,3059828 <__call_exitprocs+0x78>
 305984c:	d8800117 	ldw	r2,4(sp)
 3059850:	10003226 	beq	r2,zero,305991c <__call_exitprocs+0x16c>
 3059854:	dfc00b17 	ldw	ra,44(sp)
 3059858:	df000a17 	ldw	fp,40(sp)
 305985c:	ddc00917 	ldw	r23,36(sp)
 3059860:	dd800817 	ldw	r22,32(sp)
 3059864:	dd400717 	ldw	r21,28(sp)
 3059868:	dd000617 	ldw	r20,24(sp)
 305986c:	dcc00517 	ldw	r19,20(sp)
 3059870:	dc800417 	ldw	r18,16(sp)
 3059874:	dc400317 	ldw	r17,12(sp)
 3059878:	dc000217 	ldw	r16,8(sp)
 305987c:	dec00c04 	addi	sp,sp,48
 3059880:	f800283a 	ret
 3059884:	8409883a 	add	r4,r16,r16
 3059888:	88c00117 	ldw	r3,4(r17)
 305988c:	2105883a 	add	r2,r4,r4
 3059890:	1445883a 	add	r2,r2,r17
 3059894:	10800204 	addi	r2,r2,8
 3059898:	18ffffc4 	addi	r3,r3,-1
 305989c:	11800017 	ldw	r6,0(r2)
 30598a0:	1c001526 	beq	r3,r16,30598f8 <__call_exitprocs+0x148>
 30598a4:	10000015 	stw	zero,0(r2)
 30598a8:	303fe526 	beq	r6,zero,3059840 <__call_exitprocs+0x90>
 30598ac:	00c00044 	movi	r3,1
 30598b0:	1c06983a 	sll	r3,r3,r16
 30598b4:	90804017 	ldw	r2,256(r18)
 30598b8:	8cc00117 	ldw	r19,4(r17)
 30598bc:	1884703a 	and	r2,r3,r2
 30598c0:	10001426 	beq	r2,zero,3059914 <__call_exitprocs+0x164>
 30598c4:	90804117 	ldw	r2,260(r18)
 30598c8:	1884703a 	and	r2,r3,r2
 30598cc:	10000c1e 	bne	r2,zero,3059900 <__call_exitprocs+0x150>
 30598d0:	2105883a 	add	r2,r4,r4
 30598d4:	1485883a 	add	r2,r2,r18
 30598d8:	11400017 	ldw	r5,0(r2)
 30598dc:	b809883a 	mov	r4,r23
 30598e0:	303ee83a 	callr	r6
 30598e4:	88800117 	ldw	r2,4(r17)
 30598e8:	98bfc81e 	bne	r19,r2,305980c <__call_exitprocs+0x5c>
 30598ec:	b0800017 	ldw	r2,0(r22)
 30598f0:	147fd326 	beq	r2,r17,3059840 <__call_exitprocs+0x90>
 30598f4:	003fc506 	br	305980c <__call_exitprocs+0x5c>
 30598f8:	8c000115 	stw	r16,4(r17)
 30598fc:	003fea06 	br	30598a8 <__call_exitprocs+0xf8>
 3059900:	2105883a 	add	r2,r4,r4
 3059904:	1485883a 	add	r2,r2,r18
 3059908:	11000017 	ldw	r4,0(r2)
 305990c:	303ee83a 	callr	r6
 3059910:	003ff406 	br	30598e4 <__call_exitprocs+0x134>
 3059914:	303ee83a 	callr	r6
 3059918:	003ff206 	br	30598e4 <__call_exitprocs+0x134>
 305991c:	88800117 	ldw	r2,4(r17)
 3059920:	1000081e 	bne	r2,zero,3059944 <__call_exitprocs+0x194>
 3059924:	89000017 	ldw	r4,0(r17)
 3059928:	20000726 	beq	r4,zero,3059948 <__call_exitprocs+0x198>
 305992c:	b1000015 	stw	r4,0(r22)
 3059930:	8809883a 	mov	r4,r17
 3059934:	304b3f40 	call	304b3f4 <free>
 3059938:	b4400017 	ldw	r17,0(r22)
 305993c:	883fb61e 	bne	r17,zero,3059818 <__call_exitprocs+0x68>
 3059940:	003fc406 	br	3059854 <__call_exitprocs+0xa4>
 3059944:	89000017 	ldw	r4,0(r17)
 3059948:	882d883a 	mov	r22,r17
 305994c:	2023883a 	mov	r17,r4
 3059950:	883fb11e 	bne	r17,zero,3059818 <__call_exitprocs+0x68>
 3059954:	003fbf06 	br	3059854 <__call_exitprocs+0xa4>

03059958 <alt_sim_halt>:
 3059958:	defffd04 	addi	sp,sp,-12
 305995c:	df000215 	stw	fp,8(sp)
 3059960:	df000204 	addi	fp,sp,8
 3059964:	e13ffe15 	stw	r4,-8(fp)
 3059968:	e0bffe17 	ldw	r2,-8(fp)
 305996c:	e0bfff15 	stw	r2,-4(fp)
 3059970:	e0bfff17 	ldw	r2,-4(fp)
 3059974:	1005003a 	cmpeq	r2,r2,zero
 3059978:	1000021e 	bne	r2,zero,3059984 <alt_sim_halt+0x2c>
 305997c:	002af070 	cmpltui	zero,zero,43969
 3059980:	00000106 	br	3059988 <alt_sim_halt+0x30>
 3059984:	002af0b0 	cmpltui	zero,zero,43970
 3059988:	df000217 	ldw	fp,8(sp)
 305998c:	dec00304 	addi	sp,sp,12
 3059990:	f800283a 	ret

03059994 <_exit>:
 3059994:	defffd04 	addi	sp,sp,-12
 3059998:	dfc00215 	stw	ra,8(sp)
 305999c:	df000115 	stw	fp,4(sp)
 30599a0:	df000104 	addi	fp,sp,4
 30599a4:	e13fff15 	stw	r4,-4(fp)
 30599a8:	e13fff17 	ldw	r4,-4(fp)
 30599ac:	30599580 	call	3059958 <alt_sim_halt>
 30599b0:	003fff06 	br	30599b0 <_exit+0x1c>
 30599b4:	030597ac 	andhi	r12,zero,5726
